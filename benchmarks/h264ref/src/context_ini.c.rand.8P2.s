	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_create_context_memory.15
	callq	create_context_memory.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.22
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.28
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.32
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.41
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.43
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.47
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.51
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.10
	callq	free_context_memory.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.25
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.5
	callq	SetCtxModelNumber.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.13
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.23
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.33
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.36
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.46
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_init_contexts.1
	callq	init_contexts.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.2
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.6
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.7
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.7
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.11
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.12
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.34
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.37
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.37
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_XRate.27
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.52
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_GetCtxModelNumber.8
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.45
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.3
	callq	store_contexts.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.21
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.24
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.26
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.30
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.35
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.4
	movl	%ebx, %edi
	callq	update_field_frame_contexts.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.19
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.20
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.1         # -- Begin function init_contexts.1
	.p2align	4, 0x90
	.type	init_contexts.1,@function
init_contexts.1:                        # @init_contexts.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1727559106, -28(%rbp)  # imm = 0x66F875C2
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB8_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB8_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	$0, -4(%rbp)
.LBB8_3:                                # %for.cond2
                                        #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB8_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB8_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB8_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_7
.LBB8_6:                                # %if.else
                                        #   in Loop: Header=BB8_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_7:                                # %if.end
                                        #   in Loop: Header=BB8_3 Depth=2
	jmp	.LBB8_8
.LBB8_8:                                # %for.inc
                                        #   in Loop: Header=BB8_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_3
.LBB8_9:                                # %for.end
                                        #   in Loop: Header=BB8_1 Depth=1
	jmp	.LBB8_10
.LBB8_10:                               # %for.inc28
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_1
.LBB8_11:                               # %for.end30
	movl	$0, -8(%rbp)
.LBB8_12:                               # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB8_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB8_12 Depth=1
	movl	$0, -4(%rbp)
.LBB8_14:                               # %for.cond34
                                        #   Parent Loop BB8_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB8_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB8_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB8_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_18
.LBB8_17:                               # %if.else52
                                        #   in Loop: Header=BB8_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_18:                               # %if.end66
                                        #   in Loop: Header=BB8_14 Depth=2
	jmp	.LBB8_19
.LBB8_19:                               # %for.inc67
                                        #   in Loop: Header=BB8_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_14
.LBB8_20:                               # %for.end69
                                        #   in Loop: Header=BB8_12 Depth=1
	jmp	.LBB8_21
.LBB8_21:                               # %for.inc70
                                        #   in Loop: Header=BB8_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_12
.LBB8_22:                               # %for.end72
	movl	$0, -8(%rbp)
.LBB8_23:                               # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB8_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB8_23 Depth=1
	movl	$0, -4(%rbp)
.LBB8_25:                               # %for.cond76
                                        #   Parent Loop BB8_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB8_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB8_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB8_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_29
.LBB8_28:                               # %if.else94
                                        #   in Loop: Header=BB8_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_29:                               # %if.end108
                                        #   in Loop: Header=BB8_25 Depth=2
	jmp	.LBB8_30
.LBB8_30:                               # %for.inc109
                                        #   in Loop: Header=BB8_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_25
.LBB8_31:                               # %for.end111
                                        #   in Loop: Header=BB8_23 Depth=1
	jmp	.LBB8_32
.LBB8_32:                               # %for.inc112
                                        #   in Loop: Header=BB8_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_23
.LBB8_33:                               # %for.end114
	movl	$0, -8(%rbp)
.LBB8_34:                               # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB8_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB8_34 Depth=1
	movl	$0, -4(%rbp)
.LBB8_36:                               # %for.cond118
                                        #   Parent Loop BB8_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB8_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB8_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB8_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_40
.LBB8_39:                               # %if.else136
                                        #   in Loop: Header=BB8_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_40:                               # %if.end150
                                        #   in Loop: Header=BB8_36 Depth=2
	jmp	.LBB8_41
.LBB8_41:                               # %for.inc151
                                        #   in Loop: Header=BB8_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_36
.LBB8_42:                               # %for.end153
                                        #   in Loop: Header=BB8_34 Depth=1
	jmp	.LBB8_43
.LBB8_43:                               # %for.inc154
                                        #   in Loop: Header=BB8_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_34
.LBB8_44:                               # %for.end156
	movl	$0, -4(%rbp)
.LBB8_45:                               # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB8_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB8_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB8_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_49
.LBB8_48:                               # %if.else172
                                        #   in Loop: Header=BB8_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_49:                               # %if.end183
                                        #   in Loop: Header=BB8_45 Depth=1
	jmp	.LBB8_50
.LBB8_50:                               # %for.inc184
                                        #   in Loop: Header=BB8_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_45
.LBB8_51:                               # %for.end186
	movl	$0, -4(%rbp)
.LBB8_52:                               # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB8_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB8_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB8_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_56
.LBB8_55:                               # %if.else202
                                        #   in Loop: Header=BB8_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_56:                               # %if.end213
                                        #   in Loop: Header=BB8_52 Depth=1
	jmp	.LBB8_57
.LBB8_57:                               # %for.inc214
                                        #   in Loop: Header=BB8_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_52
.LBB8_58:                               # %for.end216
	movl	$0, -4(%rbp)
.LBB8_59:                               # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB8_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB8_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB8_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_63
.LBB8_62:                               # %if.else232
                                        #   in Loop: Header=BB8_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_63:                               # %if.end243
                                        #   in Loop: Header=BB8_59 Depth=1
	jmp	.LBB8_64
.LBB8_64:                               # %for.inc244
                                        #   in Loop: Header=BB8_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_59
.LBB8_65:                               # %for.end246
	movl	$0, -4(%rbp)
.LBB8_66:                               # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB8_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB8_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB8_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_70
.LBB8_69:                               # %if.else262
                                        #   in Loop: Header=BB8_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_70:                               # %if.end273
                                        #   in Loop: Header=BB8_66 Depth=1
	jmp	.LBB8_71
.LBB8_71:                               # %for.inc274
                                        #   in Loop: Header=BB8_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_66
.LBB8_72:                               # %for.end276
	movl	$0, -4(%rbp)
.LBB8_73:                               # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB8_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB8_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB8_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_77
.LBB8_76:                               # %if.else292
                                        #   in Loop: Header=BB8_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_77:                               # %if.end303
                                        #   in Loop: Header=BB8_73 Depth=1
	jmp	.LBB8_78
.LBB8_78:                               # %for.inc304
                                        #   in Loop: Header=BB8_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_73
.LBB8_79:                               # %for.end306
	movl	$0, -8(%rbp)
.LBB8_80:                               # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB8_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB8_80 Depth=1
	movl	$0, -4(%rbp)
.LBB8_82:                               # %for.cond310
                                        #   Parent Loop BB8_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB8_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB8_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB8_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_86
.LBB8_85:                               # %if.else328
                                        #   in Loop: Header=BB8_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_86:                               # %if.end342
                                        #   in Loop: Header=BB8_82 Depth=2
	jmp	.LBB8_87
.LBB8_87:                               # %for.inc343
                                        #   in Loop: Header=BB8_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_82
.LBB8_88:                               # %for.end345
                                        #   in Loop: Header=BB8_80 Depth=1
	jmp	.LBB8_89
.LBB8_89:                               # %for.inc346
                                        #   in Loop: Header=BB8_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_80
.LBB8_90:                               # %for.end348
	movl	$0, -8(%rbp)
.LBB8_91:                               # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB8_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB8_91 Depth=1
	movl	$0, -4(%rbp)
.LBB8_93:                               # %for.cond352
                                        #   Parent Loop BB8_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB8_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB8_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB8_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_97
.LBB8_96:                               # %if.else370
                                        #   in Loop: Header=BB8_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_97:                               # %if.end384
                                        #   in Loop: Header=BB8_93 Depth=2
	jmp	.LBB8_98
.LBB8_98:                               # %for.inc385
                                        #   in Loop: Header=BB8_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_93
.LBB8_99:                               # %for.end387
                                        #   in Loop: Header=BB8_91 Depth=1
	jmp	.LBB8_100
.LBB8_100:                              # %for.inc388
                                        #   in Loop: Header=BB8_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_91
.LBB8_101:                              # %for.end390
	movl	$0, -8(%rbp)
.LBB8_102:                              # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB8_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB8_102 Depth=1
	movl	$0, -4(%rbp)
.LBB8_104:                              # %for.cond394
                                        #   Parent Loop BB8_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB8_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB8_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB8_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_108
.LBB8_107:                              # %if.else412
                                        #   in Loop: Header=BB8_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_108:                              # %if.end426
                                        #   in Loop: Header=BB8_104 Depth=2
	jmp	.LBB8_109
.LBB8_109:                              # %for.inc427
                                        #   in Loop: Header=BB8_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_104
.LBB8_110:                              # %for.end429
                                        #   in Loop: Header=BB8_102 Depth=1
	jmp	.LBB8_111
.LBB8_111:                              # %for.inc430
                                        #   in Loop: Header=BB8_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_102
.LBB8_112:                              # %for.end432
	movl	$0, -8(%rbp)
.LBB8_113:                              # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB8_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB8_113 Depth=1
	movl	$0, -4(%rbp)
.LBB8_115:                              # %for.cond436
                                        #   Parent Loop BB8_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB8_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB8_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB8_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_119
.LBB8_118:                              # %if.else454
                                        #   in Loop: Header=BB8_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_119:                              # %if.end468
                                        #   in Loop: Header=BB8_115 Depth=2
	jmp	.LBB8_120
.LBB8_120:                              # %for.inc469
                                        #   in Loop: Header=BB8_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_115
.LBB8_121:                              # %for.end471
                                        #   in Loop: Header=BB8_113 Depth=1
	jmp	.LBB8_122
.LBB8_122:                              # %for.inc472
                                        #   in Loop: Header=BB8_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_113
.LBB8_123:                              # %for.end474
	movl	$0, -8(%rbp)
.LBB8_124:                              # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB8_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB8_124 Depth=1
	movl	$0, -4(%rbp)
.LBB8_126:                              # %for.cond478
                                        #   Parent Loop BB8_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB8_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB8_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB8_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_130
.LBB8_129:                              # %if.else496
                                        #   in Loop: Header=BB8_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_130:                              # %if.end510
                                        #   in Loop: Header=BB8_126 Depth=2
	jmp	.LBB8_131
.LBB8_131:                              # %for.inc511
                                        #   in Loop: Header=BB8_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_126
.LBB8_132:                              # %for.end513
                                        #   in Loop: Header=BB8_124 Depth=1
	jmp	.LBB8_133
.LBB8_133:                              # %for.inc514
                                        #   in Loop: Header=BB8_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_124
.LBB8_134:                              # %for.end516
	movl	$0, -8(%rbp)
.LBB8_135:                              # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB8_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB8_135 Depth=1
	movl	$0, -4(%rbp)
.LBB8_137:                              # %for.cond520
                                        #   Parent Loop BB8_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB8_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB8_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB8_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_141
.LBB8_140:                              # %if.else538
                                        #   in Loop: Header=BB8_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_141:                              # %if.end552
                                        #   in Loop: Header=BB8_137 Depth=2
	jmp	.LBB8_142
.LBB8_142:                              # %for.inc553
                                        #   in Loop: Header=BB8_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_137
.LBB8_143:                              # %for.end555
                                        #   in Loop: Header=BB8_135 Depth=1
	jmp	.LBB8_144
.LBB8_144:                              # %for.inc556
                                        #   in Loop: Header=BB8_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_135
.LBB8_145:                              # %for.end558
	movl	$0, -8(%rbp)
.LBB8_146:                              # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB8_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB8_146 Depth=1
	movl	$0, -4(%rbp)
.LBB8_148:                              # %for.cond562
                                        #   Parent Loop BB8_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB8_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB8_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB8_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_152
.LBB8_151:                              # %if.else580
                                        #   in Loop: Header=BB8_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_152:                              # %if.end594
                                        #   in Loop: Header=BB8_148 Depth=2
	jmp	.LBB8_153
.LBB8_153:                              # %for.inc595
                                        #   in Loop: Header=BB8_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_148
.LBB8_154:                              # %for.end597
                                        #   in Loop: Header=BB8_146 Depth=1
	jmp	.LBB8_155
.LBB8_155:                              # %for.inc598
                                        #   in Loop: Header=BB8_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_146
.LBB8_156:                              # %for.end600
	movl	$0, -8(%rbp)
.LBB8_157:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB8_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB8_157 Depth=1
	movl	$0, -4(%rbp)
.LBB8_159:                              # %for.cond604
                                        #   Parent Loop BB8_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB8_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB8_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB8_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB8_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB8_163
.LBB8_162:                              # %if.else622
                                        #   in Loop: Header=BB8_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB8_163:                              # %if.end636
                                        #   in Loop: Header=BB8_159 Depth=2
	jmp	.LBB8_164
.LBB8_164:                              # %for.inc637
                                        #   in Loop: Header=BB8_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_159
.LBB8_165:                              # %for.end639
                                        #   in Loop: Header=BB8_157 Depth=1
	jmp	.LBB8_166
.LBB8_166:                              # %for.inc640
                                        #   in Loop: Header=BB8_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_157
.LBB8_167:                              # %for.end642
	cmpl	$1727559106, -28(%rbp)  # imm = 0x66F875C2
	jne	.LBB8_169
.LBB8_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_169:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_168
.Lfunc_end8:
	.size	init_contexts.1, .Lfunc_end8-init_contexts.1
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.2         # -- Begin function init_contexts.2
	.p2align	4, 0x90
	.type	init_contexts.2,@function
init_contexts.2:                        # @init_contexts.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$407840335, -28(%rbp)   # imm = 0x184F264F
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB9_1:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB9_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB9_1 Depth=1
	movl	$0, -4(%rbp)
.LBB9_3:                                # %for.cond2
                                        #   Parent Loop BB9_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB9_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB9_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB9_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_7
.LBB9_6:                                # %if.else
                                        #   in Loop: Header=BB9_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_7:                                # %if.end
                                        #   in Loop: Header=BB9_3 Depth=2
	jmp	.LBB9_8
.LBB9_8:                                # %for.inc
                                        #   in Loop: Header=BB9_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_3
.LBB9_9:                                # %for.end
                                        #   in Loop: Header=BB9_1 Depth=1
	jmp	.LBB9_10
.LBB9_10:                               # %for.inc28
                                        #   in Loop: Header=BB9_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_1
.LBB9_11:                               # %for.end30
	movl	$0, -8(%rbp)
.LBB9_12:                               # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB9_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB9_12 Depth=1
	movl	$0, -4(%rbp)
.LBB9_14:                               # %for.cond34
                                        #   Parent Loop BB9_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB9_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB9_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB9_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_18
.LBB9_17:                               # %if.else52
                                        #   in Loop: Header=BB9_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_18:                               # %if.end66
                                        #   in Loop: Header=BB9_14 Depth=2
	jmp	.LBB9_19
.LBB9_19:                               # %for.inc67
                                        #   in Loop: Header=BB9_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_14
.LBB9_20:                               # %for.end69
                                        #   in Loop: Header=BB9_12 Depth=1
	jmp	.LBB9_21
.LBB9_21:                               # %for.inc70
                                        #   in Loop: Header=BB9_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_12
.LBB9_22:                               # %for.end72
	movl	$0, -8(%rbp)
.LBB9_23:                               # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB9_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB9_23 Depth=1
	movl	$0, -4(%rbp)
.LBB9_25:                               # %for.cond76
                                        #   Parent Loop BB9_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB9_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB9_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB9_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_29
.LBB9_28:                               # %if.else94
                                        #   in Loop: Header=BB9_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_29:                               # %if.end108
                                        #   in Loop: Header=BB9_25 Depth=2
	jmp	.LBB9_30
.LBB9_30:                               # %for.inc109
                                        #   in Loop: Header=BB9_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_25
.LBB9_31:                               # %for.end111
                                        #   in Loop: Header=BB9_23 Depth=1
	jmp	.LBB9_32
.LBB9_32:                               # %for.inc112
                                        #   in Loop: Header=BB9_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_23
.LBB9_33:                               # %for.end114
	movl	$0, -8(%rbp)
.LBB9_34:                               # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB9_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB9_34 Depth=1
	movl	$0, -4(%rbp)
.LBB9_36:                               # %for.cond118
                                        #   Parent Loop BB9_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB9_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB9_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB9_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_40
.LBB9_39:                               # %if.else136
                                        #   in Loop: Header=BB9_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_40:                               # %if.end150
                                        #   in Loop: Header=BB9_36 Depth=2
	jmp	.LBB9_41
.LBB9_41:                               # %for.inc151
                                        #   in Loop: Header=BB9_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_36
.LBB9_42:                               # %for.end153
                                        #   in Loop: Header=BB9_34 Depth=1
	jmp	.LBB9_43
.LBB9_43:                               # %for.inc154
                                        #   in Loop: Header=BB9_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_34
.LBB9_44:                               # %for.end156
	movl	$0, -4(%rbp)
.LBB9_45:                               # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB9_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB9_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB9_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_49
.LBB9_48:                               # %if.else172
                                        #   in Loop: Header=BB9_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_49:                               # %if.end183
                                        #   in Loop: Header=BB9_45 Depth=1
	jmp	.LBB9_50
.LBB9_50:                               # %for.inc184
                                        #   in Loop: Header=BB9_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_45
.LBB9_51:                               # %for.end186
	movl	$0, -4(%rbp)
.LBB9_52:                               # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB9_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB9_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB9_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_56
.LBB9_55:                               # %if.else202
                                        #   in Loop: Header=BB9_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_56:                               # %if.end213
                                        #   in Loop: Header=BB9_52 Depth=1
	jmp	.LBB9_57
.LBB9_57:                               # %for.inc214
                                        #   in Loop: Header=BB9_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_52
.LBB9_58:                               # %for.end216
	movl	$0, -4(%rbp)
.LBB9_59:                               # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB9_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB9_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB9_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_63
.LBB9_62:                               # %if.else232
                                        #   in Loop: Header=BB9_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_63:                               # %if.end243
                                        #   in Loop: Header=BB9_59 Depth=1
	jmp	.LBB9_64
.LBB9_64:                               # %for.inc244
                                        #   in Loop: Header=BB9_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_59
.LBB9_65:                               # %for.end246
	movl	$0, -4(%rbp)
.LBB9_66:                               # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB9_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB9_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB9_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_70
.LBB9_69:                               # %if.else262
                                        #   in Loop: Header=BB9_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_70:                               # %if.end273
                                        #   in Loop: Header=BB9_66 Depth=1
	jmp	.LBB9_71
.LBB9_71:                               # %for.inc274
                                        #   in Loop: Header=BB9_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_66
.LBB9_72:                               # %for.end276
	movl	$0, -4(%rbp)
.LBB9_73:                               # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB9_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB9_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB9_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_77
.LBB9_76:                               # %if.else292
                                        #   in Loop: Header=BB9_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_77:                               # %if.end303
                                        #   in Loop: Header=BB9_73 Depth=1
	jmp	.LBB9_78
.LBB9_78:                               # %for.inc304
                                        #   in Loop: Header=BB9_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_73
.LBB9_79:                               # %for.end306
	movl	$0, -8(%rbp)
.LBB9_80:                               # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB9_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB9_80 Depth=1
	movl	$0, -4(%rbp)
.LBB9_82:                               # %for.cond310
                                        #   Parent Loop BB9_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB9_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB9_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB9_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_86
.LBB9_85:                               # %if.else328
                                        #   in Loop: Header=BB9_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_86:                               # %if.end342
                                        #   in Loop: Header=BB9_82 Depth=2
	jmp	.LBB9_87
.LBB9_87:                               # %for.inc343
                                        #   in Loop: Header=BB9_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_82
.LBB9_88:                               # %for.end345
                                        #   in Loop: Header=BB9_80 Depth=1
	jmp	.LBB9_89
.LBB9_89:                               # %for.inc346
                                        #   in Loop: Header=BB9_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_80
.LBB9_90:                               # %for.end348
	movl	$0, -8(%rbp)
.LBB9_91:                               # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB9_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB9_91 Depth=1
	movl	$0, -4(%rbp)
.LBB9_93:                               # %for.cond352
                                        #   Parent Loop BB9_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB9_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB9_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB9_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_97
.LBB9_96:                               # %if.else370
                                        #   in Loop: Header=BB9_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_97:                               # %if.end384
                                        #   in Loop: Header=BB9_93 Depth=2
	jmp	.LBB9_98
.LBB9_98:                               # %for.inc385
                                        #   in Loop: Header=BB9_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_93
.LBB9_99:                               # %for.end387
                                        #   in Loop: Header=BB9_91 Depth=1
	jmp	.LBB9_100
.LBB9_100:                              # %for.inc388
                                        #   in Loop: Header=BB9_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_91
.LBB9_101:                              # %for.end390
	movl	$0, -8(%rbp)
.LBB9_102:                              # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB9_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB9_102 Depth=1
	movl	$0, -4(%rbp)
.LBB9_104:                              # %for.cond394
                                        #   Parent Loop BB9_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB9_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB9_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB9_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_108
.LBB9_107:                              # %if.else412
                                        #   in Loop: Header=BB9_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_108:                              # %if.end426
                                        #   in Loop: Header=BB9_104 Depth=2
	jmp	.LBB9_109
.LBB9_109:                              # %for.inc427
                                        #   in Loop: Header=BB9_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_104
.LBB9_110:                              # %for.end429
                                        #   in Loop: Header=BB9_102 Depth=1
	jmp	.LBB9_111
.LBB9_111:                              # %for.inc430
                                        #   in Loop: Header=BB9_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_102
.LBB9_112:                              # %for.end432
	movl	$0, -8(%rbp)
.LBB9_113:                              # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB9_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB9_113 Depth=1
	movl	$0, -4(%rbp)
.LBB9_115:                              # %for.cond436
                                        #   Parent Loop BB9_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB9_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB9_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB9_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_119
.LBB9_118:                              # %if.else454
                                        #   in Loop: Header=BB9_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_119:                              # %if.end468
                                        #   in Loop: Header=BB9_115 Depth=2
	jmp	.LBB9_120
.LBB9_120:                              # %for.inc469
                                        #   in Loop: Header=BB9_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_115
.LBB9_121:                              # %for.end471
                                        #   in Loop: Header=BB9_113 Depth=1
	jmp	.LBB9_122
.LBB9_122:                              # %for.inc472
                                        #   in Loop: Header=BB9_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_113
.LBB9_123:                              # %for.end474
	movl	$0, -8(%rbp)
.LBB9_124:                              # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB9_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB9_124 Depth=1
	movl	$0, -4(%rbp)
.LBB9_126:                              # %for.cond478
                                        #   Parent Loop BB9_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB9_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB9_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB9_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_130
.LBB9_129:                              # %if.else496
                                        #   in Loop: Header=BB9_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_130:                              # %if.end510
                                        #   in Loop: Header=BB9_126 Depth=2
	jmp	.LBB9_131
.LBB9_131:                              # %for.inc511
                                        #   in Loop: Header=BB9_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_126
.LBB9_132:                              # %for.end513
                                        #   in Loop: Header=BB9_124 Depth=1
	jmp	.LBB9_133
.LBB9_133:                              # %for.inc514
                                        #   in Loop: Header=BB9_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_124
.LBB9_134:                              # %for.end516
	movl	$0, -8(%rbp)
.LBB9_135:                              # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB9_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB9_135 Depth=1
	movl	$0, -4(%rbp)
.LBB9_137:                              # %for.cond520
                                        #   Parent Loop BB9_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB9_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB9_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB9_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_141
.LBB9_140:                              # %if.else538
                                        #   in Loop: Header=BB9_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_141:                              # %if.end552
                                        #   in Loop: Header=BB9_137 Depth=2
	jmp	.LBB9_142
.LBB9_142:                              # %for.inc553
                                        #   in Loop: Header=BB9_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_137
.LBB9_143:                              # %for.end555
                                        #   in Loop: Header=BB9_135 Depth=1
	jmp	.LBB9_144
.LBB9_144:                              # %for.inc556
                                        #   in Loop: Header=BB9_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_135
.LBB9_145:                              # %for.end558
	movl	$0, -8(%rbp)
.LBB9_146:                              # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB9_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB9_146 Depth=1
	movl	$0, -4(%rbp)
.LBB9_148:                              # %for.cond562
                                        #   Parent Loop BB9_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB9_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB9_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB9_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_152
.LBB9_151:                              # %if.else580
                                        #   in Loop: Header=BB9_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_152:                              # %if.end594
                                        #   in Loop: Header=BB9_148 Depth=2
	jmp	.LBB9_153
.LBB9_153:                              # %for.inc595
                                        #   in Loop: Header=BB9_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_148
.LBB9_154:                              # %for.end597
                                        #   in Loop: Header=BB9_146 Depth=1
	jmp	.LBB9_155
.LBB9_155:                              # %for.inc598
                                        #   in Loop: Header=BB9_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_146
.LBB9_156:                              # %for.end600
	movl	$0, -8(%rbp)
.LBB9_157:                              # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB9_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB9_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB9_157 Depth=1
	movl	$0, -4(%rbp)
.LBB9_159:                              # %for.cond604
                                        #   Parent Loop BB9_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB9_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB9_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB9_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB9_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB9_163
.LBB9_162:                              # %if.else622
                                        #   in Loop: Header=BB9_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB9_163:                              # %if.end636
                                        #   in Loop: Header=BB9_159 Depth=2
	jmp	.LBB9_164
.LBB9_164:                              # %for.inc637
                                        #   in Loop: Header=BB9_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB9_159
.LBB9_165:                              # %for.end639
                                        #   in Loop: Header=BB9_157 Depth=1
	jmp	.LBB9_166
.LBB9_166:                              # %for.inc640
                                        #   in Loop: Header=BB9_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB9_157
.LBB9_167:                              # %for.end642
	cmpl	$407840335, -28(%rbp)   # imm = 0x184F264F
	jne	.LBB9_169
.LBB9_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_169:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_168
.Lfunc_end9:
	.size	init_contexts.2, .Lfunc_end9-init_contexts.2
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.3        # -- Begin function store_contexts.3
	.p2align	4, 0x90
	.type	store_contexts.3,@function
store_contexts.3:                       # @store_contexts.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$556730093, -16(%rbp)   # imm = 0x212F06ED
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB10_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB10_3
.LBB10_2:                               # %if.else
	jmp	.LBB10_3
.LBB10_3:                               # %if.end
	cmpl	$556730093, -16(%rbp)   # imm = 0x212F06ED
	jne	.LBB10_5
.LBB10_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_4
.Lfunc_end10:
	.size	store_contexts.3, .Lfunc_end10-store_contexts.3
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.4 # -- Begin function update_field_frame_contexts.4
	.p2align	4, 0x90
	.type	update_field_frame_contexts.4,@function
update_field_frame_contexts.4:          # @update_field_frame_contexts.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1754235992, -12(%rbp)  # imm = 0x688F8458
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB11_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	$0, -4(%rbp)
.LBB11_4:                               # %for.cond1
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc23
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end25
	jmp	.LBB11_19
.LBB11_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB11_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB11_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	$0, -4(%rbp)
.LBB11_13:                              # %for.cond29
                                        #   Parent Loop BB11_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB11_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB11_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_13
.LBB11_16:                              # %for.end56
                                        #   in Loop: Header=BB11_11 Depth=1
	jmp	.LBB11_17
.LBB11_17:                              # %for.inc57
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_11
.LBB11_18:                              # %for.end59
	jmp	.LBB11_19
.LBB11_19:                              # %if.end
	cmpl	$1754235992, -12(%rbp)  # imm = 0x688F8458
	jne	.LBB11_21
.LBB11_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_20
.Lfunc_end11:
	.size	update_field_frame_contexts.4, .Lfunc_end11-update_field_frame_contexts.4
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.5     # -- Begin function SetCtxModelNumber.5
	.p2align	4, 0x90
	.type	SetCtxModelNumber.5,@function
SetCtxModelNumber.5:                    # @SetCtxModelNumber.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1441532956, -16(%rbp)  # imm = 0x55EC0C1C
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB12_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB12_11
.LBB12_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB12_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB12_11
.LBB12_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB12_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB12_11
.LBB12_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB12_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB12_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB12_10
.LBB12_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB12_10:                              # %if.end38
	jmp	.LBB12_11
.LBB12_11:                              # %if.end39
	cmpl	$1441532956, -16(%rbp)  # imm = 0x55EC0C1C
	jne	.LBB12_13
.LBB12_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_12
.Lfunc_end12:
	.size	SetCtxModelNumber.5, .Lfunc_end12-SetCtxModelNumber.5
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.6         # -- Begin function init_contexts.6
	.p2align	4, 0x90
	.type	init_contexts.6,@function
init_contexts.6:                        # @init_contexts.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1059838256, -28(%rbp)  # imm = 0x3F2BD930
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB13_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -4(%rbp)
.LBB13_3:                               # %for.cond2
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB13_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_7
.LBB13_6:                               # %if.else
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_7:                               # %if.end
                                        #   in Loop: Header=BB13_3 Depth=2
	jmp	.LBB13_8
.LBB13_8:                               # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_3
.LBB13_9:                               # %for.end
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_10
.LBB13_10:                              # %for.inc28
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_1
.LBB13_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB13_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB13_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB13_12 Depth=1
	movl	$0, -4(%rbp)
.LBB13_14:                              # %for.cond34
                                        #   Parent Loop BB13_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB13_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB13_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB13_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_18
.LBB13_17:                              # %if.else52
                                        #   in Loop: Header=BB13_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_18:                              # %if.end66
                                        #   in Loop: Header=BB13_14 Depth=2
	jmp	.LBB13_19
.LBB13_19:                              # %for.inc67
                                        #   in Loop: Header=BB13_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_14
.LBB13_20:                              # %for.end69
                                        #   in Loop: Header=BB13_12 Depth=1
	jmp	.LBB13_21
.LBB13_21:                              # %for.inc70
                                        #   in Loop: Header=BB13_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_12
.LBB13_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB13_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB13_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	$0, -4(%rbp)
.LBB13_25:                              # %for.cond76
                                        #   Parent Loop BB13_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB13_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB13_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB13_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_29
.LBB13_28:                              # %if.else94
                                        #   in Loop: Header=BB13_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_29:                              # %if.end108
                                        #   in Loop: Header=BB13_25 Depth=2
	jmp	.LBB13_30
.LBB13_30:                              # %for.inc109
                                        #   in Loop: Header=BB13_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_25
.LBB13_31:                              # %for.end111
                                        #   in Loop: Header=BB13_23 Depth=1
	jmp	.LBB13_32
.LBB13_32:                              # %for.inc112
                                        #   in Loop: Header=BB13_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_23
.LBB13_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB13_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB13_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	$0, -4(%rbp)
.LBB13_36:                              # %for.cond118
                                        #   Parent Loop BB13_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB13_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB13_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB13_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_40
.LBB13_39:                              # %if.else136
                                        #   in Loop: Header=BB13_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_40:                              # %if.end150
                                        #   in Loop: Header=BB13_36 Depth=2
	jmp	.LBB13_41
.LBB13_41:                              # %for.inc151
                                        #   in Loop: Header=BB13_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_36
.LBB13_42:                              # %for.end153
                                        #   in Loop: Header=BB13_34 Depth=1
	jmp	.LBB13_43
.LBB13_43:                              # %for.inc154
                                        #   in Loop: Header=BB13_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_34
.LBB13_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB13_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB13_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB13_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_49
.LBB13_48:                              # %if.else172
                                        #   in Loop: Header=BB13_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_49:                              # %if.end183
                                        #   in Loop: Header=BB13_45 Depth=1
	jmp	.LBB13_50
.LBB13_50:                              # %for.inc184
                                        #   in Loop: Header=BB13_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_45
.LBB13_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB13_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB13_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB13_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_56
.LBB13_55:                              # %if.else202
                                        #   in Loop: Header=BB13_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_56:                              # %if.end213
                                        #   in Loop: Header=BB13_52 Depth=1
	jmp	.LBB13_57
.LBB13_57:                              # %for.inc214
                                        #   in Loop: Header=BB13_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_52
.LBB13_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB13_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB13_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB13_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB13_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_63
.LBB13_62:                              # %if.else232
                                        #   in Loop: Header=BB13_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_63:                              # %if.end243
                                        #   in Loop: Header=BB13_59 Depth=1
	jmp	.LBB13_64
.LBB13_64:                              # %for.inc244
                                        #   in Loop: Header=BB13_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_59
.LBB13_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB13_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB13_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB13_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB13_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_70
.LBB13_69:                              # %if.else262
                                        #   in Loop: Header=BB13_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_70:                              # %if.end273
                                        #   in Loop: Header=BB13_66 Depth=1
	jmp	.LBB13_71
.LBB13_71:                              # %for.inc274
                                        #   in Loop: Header=BB13_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_66
.LBB13_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB13_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB13_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB13_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB13_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_77
.LBB13_76:                              # %if.else292
                                        #   in Loop: Header=BB13_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_77:                              # %if.end303
                                        #   in Loop: Header=BB13_73 Depth=1
	jmp	.LBB13_78
.LBB13_78:                              # %for.inc304
                                        #   in Loop: Header=BB13_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_73
.LBB13_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB13_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB13_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	$0, -4(%rbp)
.LBB13_82:                              # %for.cond310
                                        #   Parent Loop BB13_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB13_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB13_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_86
.LBB13_85:                              # %if.else328
                                        #   in Loop: Header=BB13_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_86:                              # %if.end342
                                        #   in Loop: Header=BB13_82 Depth=2
	jmp	.LBB13_87
.LBB13_87:                              # %for.inc343
                                        #   in Loop: Header=BB13_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_82
.LBB13_88:                              # %for.end345
                                        #   in Loop: Header=BB13_80 Depth=1
	jmp	.LBB13_89
.LBB13_89:                              # %for.inc346
                                        #   in Loop: Header=BB13_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_80
.LBB13_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB13_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB13_91 Depth=1
	movl	$0, -4(%rbp)
.LBB13_93:                              # %for.cond352
                                        #   Parent Loop BB13_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB13_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB13_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_97
.LBB13_96:                              # %if.else370
                                        #   in Loop: Header=BB13_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_97:                              # %if.end384
                                        #   in Loop: Header=BB13_93 Depth=2
	jmp	.LBB13_98
.LBB13_98:                              # %for.inc385
                                        #   in Loop: Header=BB13_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_93
.LBB13_99:                              # %for.end387
                                        #   in Loop: Header=BB13_91 Depth=1
	jmp	.LBB13_100
.LBB13_100:                             # %for.inc388
                                        #   in Loop: Header=BB13_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_91
.LBB13_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB13_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB13_102 Depth=1
	movl	$0, -4(%rbp)
.LBB13_104:                             # %for.cond394
                                        #   Parent Loop BB13_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB13_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB13_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_108
.LBB13_107:                             # %if.else412
                                        #   in Loop: Header=BB13_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_108:                             # %if.end426
                                        #   in Loop: Header=BB13_104 Depth=2
	jmp	.LBB13_109
.LBB13_109:                             # %for.inc427
                                        #   in Loop: Header=BB13_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_104
.LBB13_110:                             # %for.end429
                                        #   in Loop: Header=BB13_102 Depth=1
	jmp	.LBB13_111
.LBB13_111:                             # %for.inc430
                                        #   in Loop: Header=BB13_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_102
.LBB13_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB13_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB13_113 Depth=1
	movl	$0, -4(%rbp)
.LBB13_115:                             # %for.cond436
                                        #   Parent Loop BB13_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB13_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB13_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_119
.LBB13_118:                             # %if.else454
                                        #   in Loop: Header=BB13_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_119:                             # %if.end468
                                        #   in Loop: Header=BB13_115 Depth=2
	jmp	.LBB13_120
.LBB13_120:                             # %for.inc469
                                        #   in Loop: Header=BB13_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_115
.LBB13_121:                             # %for.end471
                                        #   in Loop: Header=BB13_113 Depth=1
	jmp	.LBB13_122
.LBB13_122:                             # %for.inc472
                                        #   in Loop: Header=BB13_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_113
.LBB13_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB13_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB13_124 Depth=1
	movl	$0, -4(%rbp)
.LBB13_126:                             # %for.cond478
                                        #   Parent Loop BB13_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB13_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB13_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB13_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_130
.LBB13_129:                             # %if.else496
                                        #   in Loop: Header=BB13_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_130:                             # %if.end510
                                        #   in Loop: Header=BB13_126 Depth=2
	jmp	.LBB13_131
.LBB13_131:                             # %for.inc511
                                        #   in Loop: Header=BB13_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_126
.LBB13_132:                             # %for.end513
                                        #   in Loop: Header=BB13_124 Depth=1
	jmp	.LBB13_133
.LBB13_133:                             # %for.inc514
                                        #   in Loop: Header=BB13_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_124
.LBB13_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB13_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	$0, -4(%rbp)
.LBB13_137:                             # %for.cond520
                                        #   Parent Loop BB13_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB13_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB13_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB13_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_141
.LBB13_140:                             # %if.else538
                                        #   in Loop: Header=BB13_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_141:                             # %if.end552
                                        #   in Loop: Header=BB13_137 Depth=2
	jmp	.LBB13_142
.LBB13_142:                             # %for.inc553
                                        #   in Loop: Header=BB13_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_137
.LBB13_143:                             # %for.end555
                                        #   in Loop: Header=BB13_135 Depth=1
	jmp	.LBB13_144
.LBB13_144:                             # %for.inc556
                                        #   in Loop: Header=BB13_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_135
.LBB13_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB13_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB13_146 Depth=1
	movl	$0, -4(%rbp)
.LBB13_148:                             # %for.cond562
                                        #   Parent Loop BB13_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB13_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB13_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_152
.LBB13_151:                             # %if.else580
                                        #   in Loop: Header=BB13_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_152:                             # %if.end594
                                        #   in Loop: Header=BB13_148 Depth=2
	jmp	.LBB13_153
.LBB13_153:                             # %for.inc595
                                        #   in Loop: Header=BB13_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_148
.LBB13_154:                             # %for.end597
                                        #   in Loop: Header=BB13_146 Depth=1
	jmp	.LBB13_155
.LBB13_155:                             # %for.inc598
                                        #   in Loop: Header=BB13_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_146
.LBB13_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB13_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB13_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	$0, -4(%rbp)
.LBB13_159:                             # %for.cond604
                                        #   Parent Loop BB13_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB13_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB13_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB13_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB13_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB13_163
.LBB13_162:                             # %if.else622
                                        #   in Loop: Header=BB13_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB13_163:                             # %if.end636
                                        #   in Loop: Header=BB13_159 Depth=2
	jmp	.LBB13_164
.LBB13_164:                             # %for.inc637
                                        #   in Loop: Header=BB13_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_159
.LBB13_165:                             # %for.end639
                                        #   in Loop: Header=BB13_157 Depth=1
	jmp	.LBB13_166
.LBB13_166:                             # %for.inc640
                                        #   in Loop: Header=BB13_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_157
.LBB13_167:                             # %for.end642
	cmpl	$1059838256, -28(%rbp)  # imm = 0x3F2BD930
	jne	.LBB13_169
.LBB13_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_168
.Lfunc_end13:
	.size	init_contexts.6, .Lfunc_end13-init_contexts.6
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.7         # -- Begin function init_contexts.7
	.p2align	4, 0x90
	.type	init_contexts.7,@function
init_contexts.7:                        # @init_contexts.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$513693819, -28(%rbp)   # imm = 0x1E9E587B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB14_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -4(%rbp)
.LBB14_3:                               # %for.cond2
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB14_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_7
.LBB14_6:                               # %if.else
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_7:                               # %if.end
                                        #   in Loop: Header=BB14_3 Depth=2
	jmp	.LBB14_8
.LBB14_8:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_3
.LBB14_9:                               # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_10
.LBB14_10:                              # %for.inc28
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_1
.LBB14_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB14_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB14_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB14_12 Depth=1
	movl	$0, -4(%rbp)
.LBB14_14:                              # %for.cond34
                                        #   Parent Loop BB14_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB14_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB14_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB14_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_18
.LBB14_17:                              # %if.else52
                                        #   in Loop: Header=BB14_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_18:                              # %if.end66
                                        #   in Loop: Header=BB14_14 Depth=2
	jmp	.LBB14_19
.LBB14_19:                              # %for.inc67
                                        #   in Loop: Header=BB14_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_14
.LBB14_20:                              # %for.end69
                                        #   in Loop: Header=BB14_12 Depth=1
	jmp	.LBB14_21
.LBB14_21:                              # %for.inc70
                                        #   in Loop: Header=BB14_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_12
.LBB14_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB14_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB14_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	$0, -4(%rbp)
.LBB14_25:                              # %for.cond76
                                        #   Parent Loop BB14_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB14_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB14_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB14_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_29
.LBB14_28:                              # %if.else94
                                        #   in Loop: Header=BB14_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_29:                              # %if.end108
                                        #   in Loop: Header=BB14_25 Depth=2
	jmp	.LBB14_30
.LBB14_30:                              # %for.inc109
                                        #   in Loop: Header=BB14_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_25
.LBB14_31:                              # %for.end111
                                        #   in Loop: Header=BB14_23 Depth=1
	jmp	.LBB14_32
.LBB14_32:                              # %for.inc112
                                        #   in Loop: Header=BB14_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_23
.LBB14_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB14_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB14_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB14_34 Depth=1
	movl	$0, -4(%rbp)
.LBB14_36:                              # %for.cond118
                                        #   Parent Loop BB14_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB14_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB14_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB14_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_40
.LBB14_39:                              # %if.else136
                                        #   in Loop: Header=BB14_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_40:                              # %if.end150
                                        #   in Loop: Header=BB14_36 Depth=2
	jmp	.LBB14_41
.LBB14_41:                              # %for.inc151
                                        #   in Loop: Header=BB14_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_36
.LBB14_42:                              # %for.end153
                                        #   in Loop: Header=BB14_34 Depth=1
	jmp	.LBB14_43
.LBB14_43:                              # %for.inc154
                                        #   in Loop: Header=BB14_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_34
.LBB14_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB14_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB14_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB14_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB14_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_49
.LBB14_48:                              # %if.else172
                                        #   in Loop: Header=BB14_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_49:                              # %if.end183
                                        #   in Loop: Header=BB14_45 Depth=1
	jmp	.LBB14_50
.LBB14_50:                              # %for.inc184
                                        #   in Loop: Header=BB14_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_45
.LBB14_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB14_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB14_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB14_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB14_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_56
.LBB14_55:                              # %if.else202
                                        #   in Loop: Header=BB14_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_56:                              # %if.end213
                                        #   in Loop: Header=BB14_52 Depth=1
	jmp	.LBB14_57
.LBB14_57:                              # %for.inc214
                                        #   in Loop: Header=BB14_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_52
.LBB14_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB14_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB14_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_63
.LBB14_62:                              # %if.else232
                                        #   in Loop: Header=BB14_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_63:                              # %if.end243
                                        #   in Loop: Header=BB14_59 Depth=1
	jmp	.LBB14_64
.LBB14_64:                              # %for.inc244
                                        #   in Loop: Header=BB14_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_59
.LBB14_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB14_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB14_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB14_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB14_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_70
.LBB14_69:                              # %if.else262
                                        #   in Loop: Header=BB14_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_70:                              # %if.end273
                                        #   in Loop: Header=BB14_66 Depth=1
	jmp	.LBB14_71
.LBB14_71:                              # %for.inc274
                                        #   in Loop: Header=BB14_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_66
.LBB14_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB14_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB14_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB14_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB14_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_77
.LBB14_76:                              # %if.else292
                                        #   in Loop: Header=BB14_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_77:                              # %if.end303
                                        #   in Loop: Header=BB14_73 Depth=1
	jmp	.LBB14_78
.LBB14_78:                              # %for.inc304
                                        #   in Loop: Header=BB14_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_73
.LBB14_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB14_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB14_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB14_80 Depth=1
	movl	$0, -4(%rbp)
.LBB14_82:                              # %for.cond310
                                        #   Parent Loop BB14_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB14_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB14_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB14_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_86
.LBB14_85:                              # %if.else328
                                        #   in Loop: Header=BB14_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_86:                              # %if.end342
                                        #   in Loop: Header=BB14_82 Depth=2
	jmp	.LBB14_87
.LBB14_87:                              # %for.inc343
                                        #   in Loop: Header=BB14_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_82
.LBB14_88:                              # %for.end345
                                        #   in Loop: Header=BB14_80 Depth=1
	jmp	.LBB14_89
.LBB14_89:                              # %for.inc346
                                        #   in Loop: Header=BB14_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_80
.LBB14_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB14_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB14_91 Depth=1
	movl	$0, -4(%rbp)
.LBB14_93:                              # %for.cond352
                                        #   Parent Loop BB14_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB14_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB14_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB14_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_97
.LBB14_96:                              # %if.else370
                                        #   in Loop: Header=BB14_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_97:                              # %if.end384
                                        #   in Loop: Header=BB14_93 Depth=2
	jmp	.LBB14_98
.LBB14_98:                              # %for.inc385
                                        #   in Loop: Header=BB14_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_93
.LBB14_99:                              # %for.end387
                                        #   in Loop: Header=BB14_91 Depth=1
	jmp	.LBB14_100
.LBB14_100:                             # %for.inc388
                                        #   in Loop: Header=BB14_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_91
.LBB14_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB14_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB14_102 Depth=1
	movl	$0, -4(%rbp)
.LBB14_104:                             # %for.cond394
                                        #   Parent Loop BB14_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB14_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB14_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_108
.LBB14_107:                             # %if.else412
                                        #   in Loop: Header=BB14_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_108:                             # %if.end426
                                        #   in Loop: Header=BB14_104 Depth=2
	jmp	.LBB14_109
.LBB14_109:                             # %for.inc427
                                        #   in Loop: Header=BB14_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_104
.LBB14_110:                             # %for.end429
                                        #   in Loop: Header=BB14_102 Depth=1
	jmp	.LBB14_111
.LBB14_111:                             # %for.inc430
                                        #   in Loop: Header=BB14_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_102
.LBB14_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB14_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB14_113 Depth=1
	movl	$0, -4(%rbp)
.LBB14_115:                             # %for.cond436
                                        #   Parent Loop BB14_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB14_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB14_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_119
.LBB14_118:                             # %if.else454
                                        #   in Loop: Header=BB14_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_119:                             # %if.end468
                                        #   in Loop: Header=BB14_115 Depth=2
	jmp	.LBB14_120
.LBB14_120:                             # %for.inc469
                                        #   in Loop: Header=BB14_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_115
.LBB14_121:                             # %for.end471
                                        #   in Loop: Header=BB14_113 Depth=1
	jmp	.LBB14_122
.LBB14_122:                             # %for.inc472
                                        #   in Loop: Header=BB14_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_113
.LBB14_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB14_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	$0, -4(%rbp)
.LBB14_126:                             # %for.cond478
                                        #   Parent Loop BB14_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB14_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB14_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB14_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_130
.LBB14_129:                             # %if.else496
                                        #   in Loop: Header=BB14_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_130:                             # %if.end510
                                        #   in Loop: Header=BB14_126 Depth=2
	jmp	.LBB14_131
.LBB14_131:                             # %for.inc511
                                        #   in Loop: Header=BB14_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_126
.LBB14_132:                             # %for.end513
                                        #   in Loop: Header=BB14_124 Depth=1
	jmp	.LBB14_133
.LBB14_133:                             # %for.inc514
                                        #   in Loop: Header=BB14_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_124
.LBB14_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB14_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	$0, -4(%rbp)
.LBB14_137:                             # %for.cond520
                                        #   Parent Loop BB14_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB14_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB14_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB14_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_141
.LBB14_140:                             # %if.else538
                                        #   in Loop: Header=BB14_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_141:                             # %if.end552
                                        #   in Loop: Header=BB14_137 Depth=2
	jmp	.LBB14_142
.LBB14_142:                             # %for.inc553
                                        #   in Loop: Header=BB14_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_137
.LBB14_143:                             # %for.end555
                                        #   in Loop: Header=BB14_135 Depth=1
	jmp	.LBB14_144
.LBB14_144:                             # %for.inc556
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_135
.LBB14_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB14_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB14_146 Depth=1
	movl	$0, -4(%rbp)
.LBB14_148:                             # %for.cond562
                                        #   Parent Loop BB14_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB14_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB14_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_152
.LBB14_151:                             # %if.else580
                                        #   in Loop: Header=BB14_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_152:                             # %if.end594
                                        #   in Loop: Header=BB14_148 Depth=2
	jmp	.LBB14_153
.LBB14_153:                             # %for.inc595
                                        #   in Loop: Header=BB14_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_148
.LBB14_154:                             # %for.end597
                                        #   in Loop: Header=BB14_146 Depth=1
	jmp	.LBB14_155
.LBB14_155:                             # %for.inc598
                                        #   in Loop: Header=BB14_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_146
.LBB14_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB14_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB14_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	$0, -4(%rbp)
.LBB14_159:                             # %for.cond604
                                        #   Parent Loop BB14_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB14_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB14_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB14_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB14_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB14_163
.LBB14_162:                             # %if.else622
                                        #   in Loop: Header=BB14_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB14_163:                             # %if.end636
                                        #   in Loop: Header=BB14_159 Depth=2
	jmp	.LBB14_164
.LBB14_164:                             # %for.inc637
                                        #   in Loop: Header=BB14_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_159
.LBB14_165:                             # %for.end639
                                        #   in Loop: Header=BB14_157 Depth=1
	jmp	.LBB14_166
.LBB14_166:                             # %for.inc640
                                        #   in Loop: Header=BB14_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_157
.LBB14_167:                             # %for.end642
	cmpl	$513693819, -28(%rbp)   # imm = 0x1E9E587B
	jne	.LBB14_169
.LBB14_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_168
.Lfunc_end14:
	.size	init_contexts.7, .Lfunc_end14-init_contexts.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.8
.LCPI15_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.8
	.p2align	4, 0x90
	.type	GetCtxModelNumber.8,@function
GetCtxModelNumber.8:                    # @GetCtxModelNumber.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2123884712, -48(%rbp)  # imm = 0x7E97E8A8
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_3 Depth 2
                                        #       Child Loop BB15_5 Depth 3
                                        #     Child Loop BB15_14 Depth 2
                                        #       Child Loop BB15_16 Depth 3
                                        #     Child Loop BB15_25 Depth 2
                                        #       Child Loop BB15_27 Depth 3
                                        #     Child Loop BB15_36 Depth 2
                                        #       Child Loop BB15_38 Depth 3
                                        #     Child Loop BB15_47 Depth 2
                                        #     Child Loop BB15_54 Depth 2
                                        #     Child Loop BB15_61 Depth 2
                                        #     Child Loop BB15_68 Depth 2
                                        #     Child Loop BB15_75 Depth 2
                                        #     Child Loop BB15_82 Depth 2
                                        #       Child Loop BB15_84 Depth 3
                                        #     Child Loop BB15_93 Depth 2
                                        #       Child Loop BB15_95 Depth 3
                                        #     Child Loop BB15_104 Depth 2
                                        #       Child Loop BB15_106 Depth 3
                                        #     Child Loop BB15_115 Depth 2
                                        #       Child Loop BB15_117 Depth 3
                                        #     Child Loop BB15_126 Depth 2
                                        #       Child Loop BB15_128 Depth 3
                                        #     Child Loop BB15_137 Depth 2
                                        #       Child Loop BB15_139 Depth 3
                                        #     Child Loop BB15_148 Depth 2
                                        #       Child Loop BB15_150 Depth 3
                                        #     Child Loop BB15_159 Depth 2
                                        #       Child Loop BB15_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB15_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB15_3:                               # %for.cond2
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB15_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	$0, -4(%rbp)
.LBB15_5:                               # %for.cond5
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB15_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB15_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB15_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_9
.LBB15_8:                               # %if.else
                                        #   in Loop: Header=BB15_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_9:                               # %if.end
                                        #   in Loop: Header=BB15_5 Depth=3
	jmp	.LBB15_10
.LBB15_10:                              # %for.inc
                                        #   in Loop: Header=BB15_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_5
.LBB15_11:                              # %for.end
                                        #   in Loop: Header=BB15_3 Depth=2
	jmp	.LBB15_12
.LBB15_12:                              # %for.inc33
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_3
.LBB15_13:                              # %for.end35
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_14:                              # %for.cond36
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB15_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB15_14 Depth=2
	movl	$0, -4(%rbp)
.LBB15_16:                              # %for.cond39
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB15_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB15_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB15_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_20
.LBB15_19:                              # %if.else58
                                        #   in Loop: Header=BB15_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_20:                              # %if.end73
                                        #   in Loop: Header=BB15_16 Depth=3
	jmp	.LBB15_21
.LBB15_21:                              # %for.inc74
                                        #   in Loop: Header=BB15_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_16
.LBB15_22:                              # %for.end76
                                        #   in Loop: Header=BB15_14 Depth=2
	jmp	.LBB15_23
.LBB15_23:                              # %for.inc77
                                        #   in Loop: Header=BB15_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_14
.LBB15_24:                              # %for.end79
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_25:                              # %for.cond80
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB15_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB15_25 Depth=2
	movl	$0, -4(%rbp)
.LBB15_27:                              # %for.cond83
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB15_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB15_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB15_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_31
.LBB15_30:                              # %if.else102
                                        #   in Loop: Header=BB15_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_31:                              # %if.end117
                                        #   in Loop: Header=BB15_27 Depth=3
	jmp	.LBB15_32
.LBB15_32:                              # %for.inc118
                                        #   in Loop: Header=BB15_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_27
.LBB15_33:                              # %for.end120
                                        #   in Loop: Header=BB15_25 Depth=2
	jmp	.LBB15_34
.LBB15_34:                              # %for.inc121
                                        #   in Loop: Header=BB15_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_25
.LBB15_35:                              # %for.end123
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_36:                              # %for.cond124
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB15_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB15_36 Depth=2
	movl	$0, -4(%rbp)
.LBB15_38:                              # %for.cond127
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB15_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB15_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB15_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_42
.LBB15_41:                              # %if.else146
                                        #   in Loop: Header=BB15_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_42:                              # %if.end161
                                        #   in Loop: Header=BB15_38 Depth=3
	jmp	.LBB15_43
.LBB15_43:                              # %for.inc162
                                        #   in Loop: Header=BB15_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_38
.LBB15_44:                              # %for.end164
                                        #   in Loop: Header=BB15_36 Depth=2
	jmp	.LBB15_45
.LBB15_45:                              # %for.inc165
                                        #   in Loop: Header=BB15_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_36
.LBB15_46:                              # %for.end167
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_47:                              # %for.cond168
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB15_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB15_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB15_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_51
.LBB15_50:                              # %if.else184
                                        #   in Loop: Header=BB15_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_51:                              # %if.end196
                                        #   in Loop: Header=BB15_47 Depth=2
	jmp	.LBB15_52
.LBB15_52:                              # %for.inc197
                                        #   in Loop: Header=BB15_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_47
.LBB15_53:                              # %for.end199
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_54:                              # %for.cond200
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB15_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB15_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB15_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_58
.LBB15_57:                              # %if.else216
                                        #   in Loop: Header=BB15_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_58:                              # %if.end228
                                        #   in Loop: Header=BB15_54 Depth=2
	jmp	.LBB15_59
.LBB15_59:                              # %for.inc229
                                        #   in Loop: Header=BB15_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_54
.LBB15_60:                              # %for.end231
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_61:                              # %for.cond232
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB15_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB15_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB15_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_65
.LBB15_64:                              # %if.else248
                                        #   in Loop: Header=BB15_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_65:                              # %if.end260
                                        #   in Loop: Header=BB15_61 Depth=2
	jmp	.LBB15_66
.LBB15_66:                              # %for.inc261
                                        #   in Loop: Header=BB15_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_61
.LBB15_67:                              # %for.end263
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_68:                              # %for.cond264
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB15_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB15_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB15_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_72
.LBB15_71:                              # %if.else280
                                        #   in Loop: Header=BB15_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_72:                              # %if.end292
                                        #   in Loop: Header=BB15_68 Depth=2
	jmp	.LBB15_73
.LBB15_73:                              # %for.inc293
                                        #   in Loop: Header=BB15_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_68
.LBB15_74:                              # %for.end295
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -4(%rbp)
.LBB15_75:                              # %for.cond296
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB15_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB15_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB15_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_79
.LBB15_78:                              # %if.else312
                                        #   in Loop: Header=BB15_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_79:                              # %if.end324
                                        #   in Loop: Header=BB15_75 Depth=2
	jmp	.LBB15_80
.LBB15_80:                              # %for.inc325
                                        #   in Loop: Header=BB15_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_75
.LBB15_81:                              # %for.end327
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_82:                              # %for.cond328
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB15_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB15_82 Depth=2
	movl	$0, -4(%rbp)
.LBB15_84:                              # %for.cond331
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB15_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB15_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB15_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_88
.LBB15_87:                              # %if.else350
                                        #   in Loop: Header=BB15_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_88:                              # %if.end365
                                        #   in Loop: Header=BB15_84 Depth=3
	jmp	.LBB15_89
.LBB15_89:                              # %for.inc366
                                        #   in Loop: Header=BB15_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_84
.LBB15_90:                              # %for.end368
                                        #   in Loop: Header=BB15_82 Depth=2
	jmp	.LBB15_91
.LBB15_91:                              # %for.inc369
                                        #   in Loop: Header=BB15_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_82
.LBB15_92:                              # %for.end371
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_93:                              # %for.cond372
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB15_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB15_93 Depth=2
	movl	$0, -4(%rbp)
.LBB15_95:                              # %for.cond375
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB15_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB15_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB15_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_99
.LBB15_98:                              # %if.else394
                                        #   in Loop: Header=BB15_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_99:                              # %if.end409
                                        #   in Loop: Header=BB15_95 Depth=3
	jmp	.LBB15_100
.LBB15_100:                             # %for.inc410
                                        #   in Loop: Header=BB15_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_95
.LBB15_101:                             # %for.end412
                                        #   in Loop: Header=BB15_93 Depth=2
	jmp	.LBB15_102
.LBB15_102:                             # %for.inc413
                                        #   in Loop: Header=BB15_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_93
.LBB15_103:                             # %for.end415
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_104:                             # %for.cond416
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB15_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB15_104 Depth=2
	movl	$0, -4(%rbp)
.LBB15_106:                             # %for.cond419
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB15_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB15_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB15_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_110
.LBB15_109:                             # %if.else438
                                        #   in Loop: Header=BB15_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_110:                             # %if.end453
                                        #   in Loop: Header=BB15_106 Depth=3
	jmp	.LBB15_111
.LBB15_111:                             # %for.inc454
                                        #   in Loop: Header=BB15_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_106
.LBB15_112:                             # %for.end456
                                        #   in Loop: Header=BB15_104 Depth=2
	jmp	.LBB15_113
.LBB15_113:                             # %for.inc457
                                        #   in Loop: Header=BB15_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_104
.LBB15_114:                             # %for.end459
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_115:                             # %for.cond460
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB15_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB15_115 Depth=2
	movl	$0, -4(%rbp)
.LBB15_117:                             # %for.cond463
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB15_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB15_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB15_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_121
.LBB15_120:                             # %if.else482
                                        #   in Loop: Header=BB15_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_121:                             # %if.end497
                                        #   in Loop: Header=BB15_117 Depth=3
	jmp	.LBB15_122
.LBB15_122:                             # %for.inc498
                                        #   in Loop: Header=BB15_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_117
.LBB15_123:                             # %for.end500
                                        #   in Loop: Header=BB15_115 Depth=2
	jmp	.LBB15_124
.LBB15_124:                             # %for.inc501
                                        #   in Loop: Header=BB15_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_115
.LBB15_125:                             # %for.end503
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_126:                             # %for.cond504
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB15_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB15_126 Depth=2
	movl	$0, -4(%rbp)
.LBB15_128:                             # %for.cond507
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB15_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB15_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB15_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_132
.LBB15_131:                             # %if.else526
                                        #   in Loop: Header=BB15_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_132:                             # %if.end541
                                        #   in Loop: Header=BB15_128 Depth=3
	jmp	.LBB15_133
.LBB15_133:                             # %for.inc542
                                        #   in Loop: Header=BB15_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_128
.LBB15_134:                             # %for.end544
                                        #   in Loop: Header=BB15_126 Depth=2
	jmp	.LBB15_135
.LBB15_135:                             # %for.inc545
                                        #   in Loop: Header=BB15_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_126
.LBB15_136:                             # %for.end547
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_137:                             # %for.cond548
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB15_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB15_137 Depth=2
	movl	$0, -4(%rbp)
.LBB15_139:                             # %for.cond551
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB15_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB15_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB15_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_143
.LBB15_142:                             # %if.else570
                                        #   in Loop: Header=BB15_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_143:                             # %if.end585
                                        #   in Loop: Header=BB15_139 Depth=3
	jmp	.LBB15_144
.LBB15_144:                             # %for.inc586
                                        #   in Loop: Header=BB15_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_139
.LBB15_145:                             # %for.end588
                                        #   in Loop: Header=BB15_137 Depth=2
	jmp	.LBB15_146
.LBB15_146:                             # %for.inc589
                                        #   in Loop: Header=BB15_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_137
.LBB15_147:                             # %for.end591
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_148:                             # %for.cond592
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB15_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB15_148 Depth=2
	movl	$0, -4(%rbp)
.LBB15_150:                             # %for.cond595
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB15_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB15_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB15_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_154
.LBB15_153:                             # %if.else614
                                        #   in Loop: Header=BB15_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_154:                             # %if.end629
                                        #   in Loop: Header=BB15_150 Depth=3
	jmp	.LBB15_155
.LBB15_155:                             # %for.inc630
                                        #   in Loop: Header=BB15_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_150
.LBB15_156:                             # %for.end632
                                        #   in Loop: Header=BB15_148 Depth=2
	jmp	.LBB15_157
.LBB15_157:                             # %for.inc633
                                        #   in Loop: Header=BB15_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_148
.LBB15_158:                             # %for.end635
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_159:                             # %for.cond636
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB15_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB15_159 Depth=2
	movl	$0, -4(%rbp)
.LBB15_161:                             # %for.cond639
                                        #   Parent Loop BB15_1 Depth=1
                                        #     Parent Loop BB15_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB15_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB15_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB15_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB15_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB15_165
.LBB15_164:                             # %if.else658
                                        #   in Loop: Header=BB15_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB15_165:                             # %if.end673
                                        #   in Loop: Header=BB15_161 Depth=3
	jmp	.LBB15_166
.LBB15_166:                             # %for.inc674
                                        #   in Loop: Header=BB15_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_161
.LBB15_167:                             # %for.end676
                                        #   in Loop: Header=BB15_159 Depth=2
	jmp	.LBB15_168
.LBB15_168:                             # %for.inc677
                                        #   in Loop: Header=BB15_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_159
.LBB15_169:                             # %for.end679
                                        #   in Loop: Header=BB15_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB15_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB15_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB15_171:                             # %if.end682
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_172
.LBB15_172:                             # %for.inc683
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_1
.LBB15_173:                             # %for.end685
	cmpl	$2123884712, -48(%rbp)  # imm = 0x7E97E8A8
	jne	.LBB15_175
.LBB15_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_174
.Lfunc_end15:
	.size	GetCtxModelNumber.8, .Lfunc_end15-GetCtxModelNumber.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.9
.LCPI16_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.9
	.p2align	4, 0x90
	.type	GetCtxModelNumber.9,@function
GetCtxModelNumber.9:                    # @GetCtxModelNumber.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI16_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$684078115, -48(%rbp)   # imm = 0x28C63423
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
                                        #       Child Loop BB16_5 Depth 3
                                        #     Child Loop BB16_14 Depth 2
                                        #       Child Loop BB16_16 Depth 3
                                        #     Child Loop BB16_25 Depth 2
                                        #       Child Loop BB16_27 Depth 3
                                        #     Child Loop BB16_36 Depth 2
                                        #       Child Loop BB16_38 Depth 3
                                        #     Child Loop BB16_47 Depth 2
                                        #     Child Loop BB16_54 Depth 2
                                        #     Child Loop BB16_61 Depth 2
                                        #     Child Loop BB16_68 Depth 2
                                        #     Child Loop BB16_75 Depth 2
                                        #     Child Loop BB16_82 Depth 2
                                        #       Child Loop BB16_84 Depth 3
                                        #     Child Loop BB16_93 Depth 2
                                        #       Child Loop BB16_95 Depth 3
                                        #     Child Loop BB16_104 Depth 2
                                        #       Child Loop BB16_106 Depth 3
                                        #     Child Loop BB16_115 Depth 2
                                        #       Child Loop BB16_117 Depth 3
                                        #     Child Loop BB16_126 Depth 2
                                        #       Child Loop BB16_128 Depth 3
                                        #     Child Loop BB16_137 Depth 2
                                        #       Child Loop BB16_139 Depth 3
                                        #     Child Loop BB16_148 Depth 2
                                        #       Child Loop BB16_150 Depth 3
                                        #     Child Loop BB16_159 Depth 2
                                        #       Child Loop BB16_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB16_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB16_3:                               # %for.cond2
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB16_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	$0, -4(%rbp)
.LBB16_5:                               # %for.cond5
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB16_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB16_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB16_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_9
.LBB16_8:                               # %if.else
                                        #   in Loop: Header=BB16_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_9:                               # %if.end
                                        #   in Loop: Header=BB16_5 Depth=3
	jmp	.LBB16_10
.LBB16_10:                              # %for.inc
                                        #   in Loop: Header=BB16_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_5
.LBB16_11:                              # %for.end
                                        #   in Loop: Header=BB16_3 Depth=2
	jmp	.LBB16_12
.LBB16_12:                              # %for.inc33
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_3
.LBB16_13:                              # %for.end35
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_14:                              # %for.cond36
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB16_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB16_14 Depth=2
	movl	$0, -4(%rbp)
.LBB16_16:                              # %for.cond39
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB16_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB16_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB16_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_20
.LBB16_19:                              # %if.else58
                                        #   in Loop: Header=BB16_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_20:                              # %if.end73
                                        #   in Loop: Header=BB16_16 Depth=3
	jmp	.LBB16_21
.LBB16_21:                              # %for.inc74
                                        #   in Loop: Header=BB16_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_16
.LBB16_22:                              # %for.end76
                                        #   in Loop: Header=BB16_14 Depth=2
	jmp	.LBB16_23
.LBB16_23:                              # %for.inc77
                                        #   in Loop: Header=BB16_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_14
.LBB16_24:                              # %for.end79
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_25:                              # %for.cond80
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB16_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB16_25 Depth=2
	movl	$0, -4(%rbp)
.LBB16_27:                              # %for.cond83
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB16_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB16_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB16_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_31
.LBB16_30:                              # %if.else102
                                        #   in Loop: Header=BB16_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_31:                              # %if.end117
                                        #   in Loop: Header=BB16_27 Depth=3
	jmp	.LBB16_32
.LBB16_32:                              # %for.inc118
                                        #   in Loop: Header=BB16_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_27
.LBB16_33:                              # %for.end120
                                        #   in Loop: Header=BB16_25 Depth=2
	jmp	.LBB16_34
.LBB16_34:                              # %for.inc121
                                        #   in Loop: Header=BB16_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_25
.LBB16_35:                              # %for.end123
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_36:                              # %for.cond124
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB16_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB16_36 Depth=2
	movl	$0, -4(%rbp)
.LBB16_38:                              # %for.cond127
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB16_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB16_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB16_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_42
.LBB16_41:                              # %if.else146
                                        #   in Loop: Header=BB16_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_42:                              # %if.end161
                                        #   in Loop: Header=BB16_38 Depth=3
	jmp	.LBB16_43
.LBB16_43:                              # %for.inc162
                                        #   in Loop: Header=BB16_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_38
.LBB16_44:                              # %for.end164
                                        #   in Loop: Header=BB16_36 Depth=2
	jmp	.LBB16_45
.LBB16_45:                              # %for.inc165
                                        #   in Loop: Header=BB16_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_36
.LBB16_46:                              # %for.end167
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_47:                              # %for.cond168
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB16_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB16_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_51
.LBB16_50:                              # %if.else184
                                        #   in Loop: Header=BB16_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_51:                              # %if.end196
                                        #   in Loop: Header=BB16_47 Depth=2
	jmp	.LBB16_52
.LBB16_52:                              # %for.inc197
                                        #   in Loop: Header=BB16_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_47
.LBB16_53:                              # %for.end199
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_54:                              # %for.cond200
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB16_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB16_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_58
.LBB16_57:                              # %if.else216
                                        #   in Loop: Header=BB16_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_58:                              # %if.end228
                                        #   in Loop: Header=BB16_54 Depth=2
	jmp	.LBB16_59
.LBB16_59:                              # %for.inc229
                                        #   in Loop: Header=BB16_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_54
.LBB16_60:                              # %for.end231
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_61:                              # %for.cond232
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB16_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB16_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB16_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_65
.LBB16_64:                              # %if.else248
                                        #   in Loop: Header=BB16_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_65:                              # %if.end260
                                        #   in Loop: Header=BB16_61 Depth=2
	jmp	.LBB16_66
.LBB16_66:                              # %for.inc261
                                        #   in Loop: Header=BB16_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_61
.LBB16_67:                              # %for.end263
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_68:                              # %for.cond264
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB16_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB16_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB16_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_72
.LBB16_71:                              # %if.else280
                                        #   in Loop: Header=BB16_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_72:                              # %if.end292
                                        #   in Loop: Header=BB16_68 Depth=2
	jmp	.LBB16_73
.LBB16_73:                              # %for.inc293
                                        #   in Loop: Header=BB16_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_68
.LBB16_74:                              # %for.end295
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_75:                              # %for.cond296
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB16_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB16_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_79
.LBB16_78:                              # %if.else312
                                        #   in Loop: Header=BB16_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_79:                              # %if.end324
                                        #   in Loop: Header=BB16_75 Depth=2
	jmp	.LBB16_80
.LBB16_80:                              # %for.inc325
                                        #   in Loop: Header=BB16_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_75
.LBB16_81:                              # %for.end327
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_82:                              # %for.cond328
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB16_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	$0, -4(%rbp)
.LBB16_84:                              # %for.cond331
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB16_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB16_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB16_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_88
.LBB16_87:                              # %if.else350
                                        #   in Loop: Header=BB16_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_88:                              # %if.end365
                                        #   in Loop: Header=BB16_84 Depth=3
	jmp	.LBB16_89
.LBB16_89:                              # %for.inc366
                                        #   in Loop: Header=BB16_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_84
.LBB16_90:                              # %for.end368
                                        #   in Loop: Header=BB16_82 Depth=2
	jmp	.LBB16_91
.LBB16_91:                              # %for.inc369
                                        #   in Loop: Header=BB16_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_82
.LBB16_92:                              # %for.end371
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_93:                              # %for.cond372
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB16_93 Depth=2
	movl	$0, -4(%rbp)
.LBB16_95:                              # %for.cond375
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB16_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB16_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB16_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_99
.LBB16_98:                              # %if.else394
                                        #   in Loop: Header=BB16_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_99:                              # %if.end409
                                        #   in Loop: Header=BB16_95 Depth=3
	jmp	.LBB16_100
.LBB16_100:                             # %for.inc410
                                        #   in Loop: Header=BB16_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_95
.LBB16_101:                             # %for.end412
                                        #   in Loop: Header=BB16_93 Depth=2
	jmp	.LBB16_102
.LBB16_102:                             # %for.inc413
                                        #   in Loop: Header=BB16_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_93
.LBB16_103:                             # %for.end415
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_104:                             # %for.cond416
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB16_104 Depth=2
	movl	$0, -4(%rbp)
.LBB16_106:                             # %for.cond419
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB16_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB16_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_110
.LBB16_109:                             # %if.else438
                                        #   in Loop: Header=BB16_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_110:                             # %if.end453
                                        #   in Loop: Header=BB16_106 Depth=3
	jmp	.LBB16_111
.LBB16_111:                             # %for.inc454
                                        #   in Loop: Header=BB16_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_106
.LBB16_112:                             # %for.end456
                                        #   in Loop: Header=BB16_104 Depth=2
	jmp	.LBB16_113
.LBB16_113:                             # %for.inc457
                                        #   in Loop: Header=BB16_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_104
.LBB16_114:                             # %for.end459
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_115:                             # %for.cond460
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB16_115 Depth=2
	movl	$0, -4(%rbp)
.LBB16_117:                             # %for.cond463
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB16_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB16_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_121
.LBB16_120:                             # %if.else482
                                        #   in Loop: Header=BB16_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_121:                             # %if.end497
                                        #   in Loop: Header=BB16_117 Depth=3
	jmp	.LBB16_122
.LBB16_122:                             # %for.inc498
                                        #   in Loop: Header=BB16_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_117
.LBB16_123:                             # %for.end500
                                        #   in Loop: Header=BB16_115 Depth=2
	jmp	.LBB16_124
.LBB16_124:                             # %for.inc501
                                        #   in Loop: Header=BB16_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_115
.LBB16_125:                             # %for.end503
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_126:                             # %for.cond504
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB16_126 Depth=2
	movl	$0, -4(%rbp)
.LBB16_128:                             # %for.cond507
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB16_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB16_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB16_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_132
.LBB16_131:                             # %if.else526
                                        #   in Loop: Header=BB16_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_132:                             # %if.end541
                                        #   in Loop: Header=BB16_128 Depth=3
	jmp	.LBB16_133
.LBB16_133:                             # %for.inc542
                                        #   in Loop: Header=BB16_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_128
.LBB16_134:                             # %for.end544
                                        #   in Loop: Header=BB16_126 Depth=2
	jmp	.LBB16_135
.LBB16_135:                             # %for.inc545
                                        #   in Loop: Header=BB16_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_126
.LBB16_136:                             # %for.end547
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_137:                             # %for.cond548
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB16_137 Depth=2
	movl	$0, -4(%rbp)
.LBB16_139:                             # %for.cond551
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB16_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB16_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB16_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_143
.LBB16_142:                             # %if.else570
                                        #   in Loop: Header=BB16_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_143:                             # %if.end585
                                        #   in Loop: Header=BB16_139 Depth=3
	jmp	.LBB16_144
.LBB16_144:                             # %for.inc586
                                        #   in Loop: Header=BB16_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_139
.LBB16_145:                             # %for.end588
                                        #   in Loop: Header=BB16_137 Depth=2
	jmp	.LBB16_146
.LBB16_146:                             # %for.inc589
                                        #   in Loop: Header=BB16_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_137
.LBB16_147:                             # %for.end591
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_148:                             # %for.cond592
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB16_148 Depth=2
	movl	$0, -4(%rbp)
.LBB16_150:                             # %for.cond595
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB16_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB16_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_154
.LBB16_153:                             # %if.else614
                                        #   in Loop: Header=BB16_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_154:                             # %if.end629
                                        #   in Loop: Header=BB16_150 Depth=3
	jmp	.LBB16_155
.LBB16_155:                             # %for.inc630
                                        #   in Loop: Header=BB16_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_150
.LBB16_156:                             # %for.end632
                                        #   in Loop: Header=BB16_148 Depth=2
	jmp	.LBB16_157
.LBB16_157:                             # %for.inc633
                                        #   in Loop: Header=BB16_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_148
.LBB16_158:                             # %for.end635
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_159:                             # %for.cond636
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB16_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB16_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB16_159 Depth=2
	movl	$0, -4(%rbp)
.LBB16_161:                             # %for.cond639
                                        #   Parent Loop BB16_1 Depth=1
                                        #     Parent Loop BB16_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB16_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB16_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB16_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB16_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB16_165
.LBB16_164:                             # %if.else658
                                        #   in Loop: Header=BB16_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB16_165:                             # %if.end673
                                        #   in Loop: Header=BB16_161 Depth=3
	jmp	.LBB16_166
.LBB16_166:                             # %for.inc674
                                        #   in Loop: Header=BB16_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_161
.LBB16_167:                             # %for.end676
                                        #   in Loop: Header=BB16_159 Depth=2
	jmp	.LBB16_168
.LBB16_168:                             # %for.inc677
                                        #   in Loop: Header=BB16_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_159
.LBB16_169:                             # %for.end679
                                        #   in Loop: Header=BB16_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB16_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB16_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB16_171:                             # %if.end682
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_172
.LBB16_172:                             # %for.inc683
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB16_1
.LBB16_173:                             # %for.end685
	cmpl	$684078115, -48(%rbp)   # imm = 0x28C63423
	jne	.LBB16_175
.LBB16_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_174
.Lfunc_end16:
	.size	GetCtxModelNumber.9, .Lfunc_end16-GetCtxModelNumber.9
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.10  # -- Begin function free_context_memory.10
	.p2align	4, 0x90
	.type	free_context_memory.10,@function
free_context_memory.10:                 # @free_context_memory.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$382166300, -12(%rbp)   # imm = 0x16C7651C
	movl	$0, -4(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB17_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -8(%rbp)
.LBB17_3:                               # %for.cond1
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_3
.LBB17_6:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_1
.LBB17_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$382166300, -12(%rbp)   # imm = 0x16C7651C
	jne	.LBB17_10
.LBB17_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_9
.Lfunc_end17:
	.size	free_context_memory.10, .Lfunc_end17-free_context_memory.10
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.11        # -- Begin function init_contexts.11
	.p2align	4, 0x90
	.type	init_contexts.11,@function
init_contexts.11:                       # @init_contexts.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1132572185, -28(%rbp)  # imm = 0x4381AE19
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB18_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_3:                               # %for.cond2
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB18_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_7
.LBB18_6:                               # %if.else
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_7:                               # %if.end
                                        #   in Loop: Header=BB18_3 Depth=2
	jmp	.LBB18_8
.LBB18_8:                               # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_3
.LBB18_9:                               # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_10
.LBB18_10:                              # %for.inc28
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_1
.LBB18_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB18_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB18_12 Depth=1
	movl	$0, -4(%rbp)
.LBB18_14:                              # %for.cond34
                                        #   Parent Loop BB18_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB18_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB18_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB18_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_18
.LBB18_17:                              # %if.else52
                                        #   in Loop: Header=BB18_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_18:                              # %if.end66
                                        #   in Loop: Header=BB18_14 Depth=2
	jmp	.LBB18_19
.LBB18_19:                              # %for.inc67
                                        #   in Loop: Header=BB18_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_14
.LBB18_20:                              # %for.end69
                                        #   in Loop: Header=BB18_12 Depth=1
	jmp	.LBB18_21
.LBB18_21:                              # %for.inc70
                                        #   in Loop: Header=BB18_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_12
.LBB18_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB18_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	$0, -4(%rbp)
.LBB18_25:                              # %for.cond76
                                        #   Parent Loop BB18_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB18_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB18_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB18_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_29
.LBB18_28:                              # %if.else94
                                        #   in Loop: Header=BB18_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_29:                              # %if.end108
                                        #   in Loop: Header=BB18_25 Depth=2
	jmp	.LBB18_30
.LBB18_30:                              # %for.inc109
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_25
.LBB18_31:                              # %for.end111
                                        #   in Loop: Header=BB18_23 Depth=1
	jmp	.LBB18_32
.LBB18_32:                              # %for.inc112
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_23
.LBB18_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB18_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	$0, -4(%rbp)
.LBB18_36:                              # %for.cond118
                                        #   Parent Loop BB18_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB18_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB18_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB18_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_40
.LBB18_39:                              # %if.else136
                                        #   in Loop: Header=BB18_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_40:                              # %if.end150
                                        #   in Loop: Header=BB18_36 Depth=2
	jmp	.LBB18_41
.LBB18_41:                              # %for.inc151
                                        #   in Loop: Header=BB18_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_36
.LBB18_42:                              # %for.end153
                                        #   in Loop: Header=BB18_34 Depth=1
	jmp	.LBB18_43
.LBB18_43:                              # %for.inc154
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_34
.LBB18_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB18_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB18_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB18_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_49
.LBB18_48:                              # %if.else172
                                        #   in Loop: Header=BB18_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_49:                              # %if.end183
                                        #   in Loop: Header=BB18_45 Depth=1
	jmp	.LBB18_50
.LBB18_50:                              # %for.inc184
                                        #   in Loop: Header=BB18_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_45
.LBB18_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB18_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB18_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB18_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_56
.LBB18_55:                              # %if.else202
                                        #   in Loop: Header=BB18_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_56:                              # %if.end213
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_57
.LBB18_57:                              # %for.inc214
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_52
.LBB18_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB18_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB18_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB18_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB18_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_63
.LBB18_62:                              # %if.else232
                                        #   in Loop: Header=BB18_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_63:                              # %if.end243
                                        #   in Loop: Header=BB18_59 Depth=1
	jmp	.LBB18_64
.LBB18_64:                              # %for.inc244
                                        #   in Loop: Header=BB18_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_59
.LBB18_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB18_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB18_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_70
.LBB18_69:                              # %if.else262
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_70:                              # %if.end273
                                        #   in Loop: Header=BB18_66 Depth=1
	jmp	.LBB18_71
.LBB18_71:                              # %for.inc274
                                        #   in Loop: Header=BB18_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_66
.LBB18_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB18_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB18_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB18_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_77
.LBB18_76:                              # %if.else292
                                        #   in Loop: Header=BB18_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_77:                              # %if.end303
                                        #   in Loop: Header=BB18_73 Depth=1
	jmp	.LBB18_78
.LBB18_78:                              # %for.inc304
                                        #   in Loop: Header=BB18_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_73
.LBB18_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB18_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB18_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB18_80 Depth=1
	movl	$0, -4(%rbp)
.LBB18_82:                              # %for.cond310
                                        #   Parent Loop BB18_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB18_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB18_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_86
.LBB18_85:                              # %if.else328
                                        #   in Loop: Header=BB18_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_86:                              # %if.end342
                                        #   in Loop: Header=BB18_82 Depth=2
	jmp	.LBB18_87
.LBB18_87:                              # %for.inc343
                                        #   in Loop: Header=BB18_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_82
.LBB18_88:                              # %for.end345
                                        #   in Loop: Header=BB18_80 Depth=1
	jmp	.LBB18_89
.LBB18_89:                              # %for.inc346
                                        #   in Loop: Header=BB18_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_80
.LBB18_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB18_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB18_91 Depth=1
	movl	$0, -4(%rbp)
.LBB18_93:                              # %for.cond352
                                        #   Parent Loop BB18_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB18_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB18_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_97
.LBB18_96:                              # %if.else370
                                        #   in Loop: Header=BB18_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_97:                              # %if.end384
                                        #   in Loop: Header=BB18_93 Depth=2
	jmp	.LBB18_98
.LBB18_98:                              # %for.inc385
                                        #   in Loop: Header=BB18_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_93
.LBB18_99:                              # %for.end387
                                        #   in Loop: Header=BB18_91 Depth=1
	jmp	.LBB18_100
.LBB18_100:                             # %for.inc388
                                        #   in Loop: Header=BB18_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_91
.LBB18_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB18_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB18_102 Depth=1
	movl	$0, -4(%rbp)
.LBB18_104:                             # %for.cond394
                                        #   Parent Loop BB18_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB18_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB18_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_108
.LBB18_107:                             # %if.else412
                                        #   in Loop: Header=BB18_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_108:                             # %if.end426
                                        #   in Loop: Header=BB18_104 Depth=2
	jmp	.LBB18_109
.LBB18_109:                             # %for.inc427
                                        #   in Loop: Header=BB18_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_104
.LBB18_110:                             # %for.end429
                                        #   in Loop: Header=BB18_102 Depth=1
	jmp	.LBB18_111
.LBB18_111:                             # %for.inc430
                                        #   in Loop: Header=BB18_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_102
.LBB18_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB18_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB18_113 Depth=1
	movl	$0, -4(%rbp)
.LBB18_115:                             # %for.cond436
                                        #   Parent Loop BB18_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB18_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB18_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_119
.LBB18_118:                             # %if.else454
                                        #   in Loop: Header=BB18_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_119:                             # %if.end468
                                        #   in Loop: Header=BB18_115 Depth=2
	jmp	.LBB18_120
.LBB18_120:                             # %for.inc469
                                        #   in Loop: Header=BB18_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_115
.LBB18_121:                             # %for.end471
                                        #   in Loop: Header=BB18_113 Depth=1
	jmp	.LBB18_122
.LBB18_122:                             # %for.inc472
                                        #   in Loop: Header=BB18_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_113
.LBB18_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB18_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB18_124 Depth=1
	movl	$0, -4(%rbp)
.LBB18_126:                             # %for.cond478
                                        #   Parent Loop BB18_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB18_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB18_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB18_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_130
.LBB18_129:                             # %if.else496
                                        #   in Loop: Header=BB18_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_130:                             # %if.end510
                                        #   in Loop: Header=BB18_126 Depth=2
	jmp	.LBB18_131
.LBB18_131:                             # %for.inc511
                                        #   in Loop: Header=BB18_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_126
.LBB18_132:                             # %for.end513
                                        #   in Loop: Header=BB18_124 Depth=1
	jmp	.LBB18_133
.LBB18_133:                             # %for.inc514
                                        #   in Loop: Header=BB18_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_124
.LBB18_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB18_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	$0, -4(%rbp)
.LBB18_137:                             # %for.cond520
                                        #   Parent Loop BB18_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB18_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB18_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB18_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_141
.LBB18_140:                             # %if.else538
                                        #   in Loop: Header=BB18_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_141:                             # %if.end552
                                        #   in Loop: Header=BB18_137 Depth=2
	jmp	.LBB18_142
.LBB18_142:                             # %for.inc553
                                        #   in Loop: Header=BB18_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_137
.LBB18_143:                             # %for.end555
                                        #   in Loop: Header=BB18_135 Depth=1
	jmp	.LBB18_144
.LBB18_144:                             # %for.inc556
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_135
.LBB18_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB18_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB18_146 Depth=1
	movl	$0, -4(%rbp)
.LBB18_148:                             # %for.cond562
                                        #   Parent Loop BB18_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB18_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB18_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_152
.LBB18_151:                             # %if.else580
                                        #   in Loop: Header=BB18_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_152:                             # %if.end594
                                        #   in Loop: Header=BB18_148 Depth=2
	jmp	.LBB18_153
.LBB18_153:                             # %for.inc595
                                        #   in Loop: Header=BB18_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_148
.LBB18_154:                             # %for.end597
                                        #   in Loop: Header=BB18_146 Depth=1
	jmp	.LBB18_155
.LBB18_155:                             # %for.inc598
                                        #   in Loop: Header=BB18_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_146
.LBB18_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB18_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB18_157 Depth=1
	movl	$0, -4(%rbp)
.LBB18_159:                             # %for.cond604
                                        #   Parent Loop BB18_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB18_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB18_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_163
.LBB18_162:                             # %if.else622
                                        #   in Loop: Header=BB18_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_163:                             # %if.end636
                                        #   in Loop: Header=BB18_159 Depth=2
	jmp	.LBB18_164
.LBB18_164:                             # %for.inc637
                                        #   in Loop: Header=BB18_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_159
.LBB18_165:                             # %for.end639
                                        #   in Loop: Header=BB18_157 Depth=1
	jmp	.LBB18_166
.LBB18_166:                             # %for.inc640
                                        #   in Loop: Header=BB18_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_157
.LBB18_167:                             # %for.end642
	cmpl	$1132572185, -28(%rbp)  # imm = 0x4381AE19
	jne	.LBB18_169
.LBB18_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_168
.Lfunc_end18:
	.size	init_contexts.11, .Lfunc_end18-init_contexts.11
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.12        # -- Begin function init_contexts.12
	.p2align	4, 0x90
	.type	init_contexts.12,@function
init_contexts.12:                       # @init_contexts.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$507842393, -28(%rbp)   # imm = 0x1E450F59
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB19_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_3:                               # %for.cond2
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB19_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_7
.LBB19_6:                               # %if.else
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_7:                               # %if.end
                                        #   in Loop: Header=BB19_3 Depth=2
	jmp	.LBB19_8
.LBB19_8:                               # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_3
.LBB19_9:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_10
.LBB19_10:                              # %for.inc28
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB19_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB19_12 Depth=1
	movl	$0, -4(%rbp)
.LBB19_14:                              # %for.cond34
                                        #   Parent Loop BB19_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB19_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB19_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB19_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_18
.LBB19_17:                              # %if.else52
                                        #   in Loop: Header=BB19_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_18:                              # %if.end66
                                        #   in Loop: Header=BB19_14 Depth=2
	jmp	.LBB19_19
.LBB19_19:                              # %for.inc67
                                        #   in Loop: Header=BB19_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_14
.LBB19_20:                              # %for.end69
                                        #   in Loop: Header=BB19_12 Depth=1
	jmp	.LBB19_21
.LBB19_21:                              # %for.inc70
                                        #   in Loop: Header=BB19_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_12
.LBB19_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB19_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB19_23 Depth=1
	movl	$0, -4(%rbp)
.LBB19_25:                              # %for.cond76
                                        #   Parent Loop BB19_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB19_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB19_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB19_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_29
.LBB19_28:                              # %if.else94
                                        #   in Loop: Header=BB19_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_29:                              # %if.end108
                                        #   in Loop: Header=BB19_25 Depth=2
	jmp	.LBB19_30
.LBB19_30:                              # %for.inc109
                                        #   in Loop: Header=BB19_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_25
.LBB19_31:                              # %for.end111
                                        #   in Loop: Header=BB19_23 Depth=1
	jmp	.LBB19_32
.LBB19_32:                              # %for.inc112
                                        #   in Loop: Header=BB19_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_23
.LBB19_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB19_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB19_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB19_34 Depth=1
	movl	$0, -4(%rbp)
.LBB19_36:                              # %for.cond118
                                        #   Parent Loop BB19_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB19_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB19_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB19_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_40
.LBB19_39:                              # %if.else136
                                        #   in Loop: Header=BB19_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_40:                              # %if.end150
                                        #   in Loop: Header=BB19_36 Depth=2
	jmp	.LBB19_41
.LBB19_41:                              # %for.inc151
                                        #   in Loop: Header=BB19_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_36
.LBB19_42:                              # %for.end153
                                        #   in Loop: Header=BB19_34 Depth=1
	jmp	.LBB19_43
.LBB19_43:                              # %for.inc154
                                        #   in Loop: Header=BB19_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_34
.LBB19_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB19_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB19_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB19_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_49
.LBB19_48:                              # %if.else172
                                        #   in Loop: Header=BB19_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_49:                              # %if.end183
                                        #   in Loop: Header=BB19_45 Depth=1
	jmp	.LBB19_50
.LBB19_50:                              # %for.inc184
                                        #   in Loop: Header=BB19_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_45
.LBB19_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB19_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB19_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB19_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_56
.LBB19_55:                              # %if.else202
                                        #   in Loop: Header=BB19_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_56:                              # %if.end213
                                        #   in Loop: Header=BB19_52 Depth=1
	jmp	.LBB19_57
.LBB19_57:                              # %for.inc214
                                        #   in Loop: Header=BB19_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_52
.LBB19_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB19_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB19_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB19_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB19_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_63
.LBB19_62:                              # %if.else232
                                        #   in Loop: Header=BB19_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_63:                              # %if.end243
                                        #   in Loop: Header=BB19_59 Depth=1
	jmp	.LBB19_64
.LBB19_64:                              # %for.inc244
                                        #   in Loop: Header=BB19_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_59
.LBB19_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB19_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB19_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB19_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB19_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_70
.LBB19_69:                              # %if.else262
                                        #   in Loop: Header=BB19_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_70:                              # %if.end273
                                        #   in Loop: Header=BB19_66 Depth=1
	jmp	.LBB19_71
.LBB19_71:                              # %for.inc274
                                        #   in Loop: Header=BB19_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_66
.LBB19_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB19_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB19_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_77
.LBB19_76:                              # %if.else292
                                        #   in Loop: Header=BB19_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_77:                              # %if.end303
                                        #   in Loop: Header=BB19_73 Depth=1
	jmp	.LBB19_78
.LBB19_78:                              # %for.inc304
                                        #   in Loop: Header=BB19_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_73
.LBB19_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB19_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB19_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB19_80 Depth=1
	movl	$0, -4(%rbp)
.LBB19_82:                              # %for.cond310
                                        #   Parent Loop BB19_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB19_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB19_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_86
.LBB19_85:                              # %if.else328
                                        #   in Loop: Header=BB19_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_86:                              # %if.end342
                                        #   in Loop: Header=BB19_82 Depth=2
	jmp	.LBB19_87
.LBB19_87:                              # %for.inc343
                                        #   in Loop: Header=BB19_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_82
.LBB19_88:                              # %for.end345
                                        #   in Loop: Header=BB19_80 Depth=1
	jmp	.LBB19_89
.LBB19_89:                              # %for.inc346
                                        #   in Loop: Header=BB19_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_80
.LBB19_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB19_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB19_91 Depth=1
	movl	$0, -4(%rbp)
.LBB19_93:                              # %for.cond352
                                        #   Parent Loop BB19_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB19_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB19_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_97
.LBB19_96:                              # %if.else370
                                        #   in Loop: Header=BB19_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_97:                              # %if.end384
                                        #   in Loop: Header=BB19_93 Depth=2
	jmp	.LBB19_98
.LBB19_98:                              # %for.inc385
                                        #   in Loop: Header=BB19_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_93
.LBB19_99:                              # %for.end387
                                        #   in Loop: Header=BB19_91 Depth=1
	jmp	.LBB19_100
.LBB19_100:                             # %for.inc388
                                        #   in Loop: Header=BB19_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_91
.LBB19_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB19_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB19_102 Depth=1
	movl	$0, -4(%rbp)
.LBB19_104:                             # %for.cond394
                                        #   Parent Loop BB19_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB19_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB19_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_108
.LBB19_107:                             # %if.else412
                                        #   in Loop: Header=BB19_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_108:                             # %if.end426
                                        #   in Loop: Header=BB19_104 Depth=2
	jmp	.LBB19_109
.LBB19_109:                             # %for.inc427
                                        #   in Loop: Header=BB19_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_104
.LBB19_110:                             # %for.end429
                                        #   in Loop: Header=BB19_102 Depth=1
	jmp	.LBB19_111
.LBB19_111:                             # %for.inc430
                                        #   in Loop: Header=BB19_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_102
.LBB19_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB19_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB19_113 Depth=1
	movl	$0, -4(%rbp)
.LBB19_115:                             # %for.cond436
                                        #   Parent Loop BB19_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB19_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB19_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_119
.LBB19_118:                             # %if.else454
                                        #   in Loop: Header=BB19_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_119:                             # %if.end468
                                        #   in Loop: Header=BB19_115 Depth=2
	jmp	.LBB19_120
.LBB19_120:                             # %for.inc469
                                        #   in Loop: Header=BB19_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_115
.LBB19_121:                             # %for.end471
                                        #   in Loop: Header=BB19_113 Depth=1
	jmp	.LBB19_122
.LBB19_122:                             # %for.inc472
                                        #   in Loop: Header=BB19_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_113
.LBB19_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB19_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB19_124 Depth=1
	movl	$0, -4(%rbp)
.LBB19_126:                             # %for.cond478
                                        #   Parent Loop BB19_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB19_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB19_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB19_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_130
.LBB19_129:                             # %if.else496
                                        #   in Loop: Header=BB19_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_130:                             # %if.end510
                                        #   in Loop: Header=BB19_126 Depth=2
	jmp	.LBB19_131
.LBB19_131:                             # %for.inc511
                                        #   in Loop: Header=BB19_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_126
.LBB19_132:                             # %for.end513
                                        #   in Loop: Header=BB19_124 Depth=1
	jmp	.LBB19_133
.LBB19_133:                             # %for.inc514
                                        #   in Loop: Header=BB19_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_124
.LBB19_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB19_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	$0, -4(%rbp)
.LBB19_137:                             # %for.cond520
                                        #   Parent Loop BB19_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB19_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB19_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB19_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_141
.LBB19_140:                             # %if.else538
                                        #   in Loop: Header=BB19_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_141:                             # %if.end552
                                        #   in Loop: Header=BB19_137 Depth=2
	jmp	.LBB19_142
.LBB19_142:                             # %for.inc553
                                        #   in Loop: Header=BB19_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_137
.LBB19_143:                             # %for.end555
                                        #   in Loop: Header=BB19_135 Depth=1
	jmp	.LBB19_144
.LBB19_144:                             # %for.inc556
                                        #   in Loop: Header=BB19_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_135
.LBB19_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB19_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB19_146 Depth=1
	movl	$0, -4(%rbp)
.LBB19_148:                             # %for.cond562
                                        #   Parent Loop BB19_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB19_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB19_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_152
.LBB19_151:                             # %if.else580
                                        #   in Loop: Header=BB19_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_152:                             # %if.end594
                                        #   in Loop: Header=BB19_148 Depth=2
	jmp	.LBB19_153
.LBB19_153:                             # %for.inc595
                                        #   in Loop: Header=BB19_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_148
.LBB19_154:                             # %for.end597
                                        #   in Loop: Header=BB19_146 Depth=1
	jmp	.LBB19_155
.LBB19_155:                             # %for.inc598
                                        #   in Loop: Header=BB19_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_146
.LBB19_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB19_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB19_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB19_157 Depth=1
	movl	$0, -4(%rbp)
.LBB19_159:                             # %for.cond604
                                        #   Parent Loop BB19_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB19_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB19_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB19_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB19_163
.LBB19_162:                             # %if.else622
                                        #   in Loop: Header=BB19_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB19_163:                             # %if.end636
                                        #   in Loop: Header=BB19_159 Depth=2
	jmp	.LBB19_164
.LBB19_164:                             # %for.inc637
                                        #   in Loop: Header=BB19_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_159
.LBB19_165:                             # %for.end639
                                        #   in Loop: Header=BB19_157 Depth=1
	jmp	.LBB19_166
.LBB19_166:                             # %for.inc640
                                        #   in Loop: Header=BB19_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_157
.LBB19_167:                             # %for.end642
	cmpl	$507842393, -28(%rbp)   # imm = 0x1E450F59
	jne	.LBB19_169
.LBB19_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_168
.Lfunc_end19:
	.size	init_contexts.12, .Lfunc_end19-init_contexts.12
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.13    # -- Begin function SetCtxModelNumber.13
	.p2align	4, 0x90
	.type	SetCtxModelNumber.13,@function
SetCtxModelNumber.13:                   # @SetCtxModelNumber.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1712559828, -16(%rbp)  # imm = 0x661396D4
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB20_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB20_11
.LBB20_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB20_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB20_11
.LBB20_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB20_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB20_11
.LBB20_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB20_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB20_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB20_10
.LBB20_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB20_10:                              # %if.end38
	jmp	.LBB20_11
.LBB20_11:                              # %if.end39
	cmpl	$1712559828, -16(%rbp)  # imm = 0x661396D4
	jne	.LBB20_13
.LBB20_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_12
.Lfunc_end20:
	.size	SetCtxModelNumber.13, .Lfunc_end20-SetCtxModelNumber.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.14
.LCPI21_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.14
	.p2align	4, 0x90
	.type	GetCtxModelNumber.14,@function
GetCtxModelNumber.14:                   # @GetCtxModelNumber.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$2008552783, -44(%rbp)  # imm = 0x77B8154F
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
                                        #       Child Loop BB21_5 Depth 3
                                        #     Child Loop BB21_14 Depth 2
                                        #       Child Loop BB21_16 Depth 3
                                        #     Child Loop BB21_25 Depth 2
                                        #       Child Loop BB21_27 Depth 3
                                        #     Child Loop BB21_36 Depth 2
                                        #       Child Loop BB21_38 Depth 3
                                        #     Child Loop BB21_47 Depth 2
                                        #     Child Loop BB21_54 Depth 2
                                        #     Child Loop BB21_61 Depth 2
                                        #     Child Loop BB21_68 Depth 2
                                        #     Child Loop BB21_75 Depth 2
                                        #     Child Loop BB21_82 Depth 2
                                        #       Child Loop BB21_84 Depth 3
                                        #     Child Loop BB21_93 Depth 2
                                        #       Child Loop BB21_95 Depth 3
                                        #     Child Loop BB21_104 Depth 2
                                        #       Child Loop BB21_106 Depth 3
                                        #     Child Loop BB21_115 Depth 2
                                        #       Child Loop BB21_117 Depth 3
                                        #     Child Loop BB21_126 Depth 2
                                        #       Child Loop BB21_128 Depth 3
                                        #     Child Loop BB21_137 Depth 2
                                        #       Child Loop BB21_139 Depth 3
                                        #     Child Loop BB21_148 Depth 2
                                        #       Child Loop BB21_150 Depth 3
                                        #     Child Loop BB21_159 Depth 2
                                        #       Child Loop BB21_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB21_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	$0, -4(%rbp)
.LBB21_5:                               # %for.cond5
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB21_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_9
.LBB21_8:                               # %if.else
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_9:                               # %if.end
                                        #   in Loop: Header=BB21_5 Depth=3
	jmp	.LBB21_10
.LBB21_10:                              # %for.inc
                                        #   in Loop: Header=BB21_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_5
.LBB21_11:                              # %for.end
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_12
.LBB21_12:                              # %for.inc33
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_13:                              # %for.end35
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_14:                              # %for.cond36
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	$0, -4(%rbp)
.LBB21_16:                              # %for.cond39
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB21_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_20
.LBB21_19:                              # %if.else58
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_20:                              # %if.end73
                                        #   in Loop: Header=BB21_16 Depth=3
	jmp	.LBB21_21
.LBB21_21:                              # %for.inc74
                                        #   in Loop: Header=BB21_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_16
.LBB21_22:                              # %for.end76
                                        #   in Loop: Header=BB21_14 Depth=2
	jmp	.LBB21_23
.LBB21_23:                              # %for.inc77
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_14
.LBB21_24:                              # %for.end79
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_25:                              # %for.cond80
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	$0, -4(%rbp)
.LBB21_27:                              # %for.cond83
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB21_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_31
.LBB21_30:                              # %if.else102
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_31:                              # %if.end117
                                        #   in Loop: Header=BB21_27 Depth=3
	jmp	.LBB21_32
.LBB21_32:                              # %for.inc118
                                        #   in Loop: Header=BB21_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_27
.LBB21_33:                              # %for.end120
                                        #   in Loop: Header=BB21_25 Depth=2
	jmp	.LBB21_34
.LBB21_34:                              # %for.inc121
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_25
.LBB21_35:                              # %for.end123
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_36:                              # %for.cond124
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	$0, -4(%rbp)
.LBB21_38:                              # %for.cond127
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB21_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_42
.LBB21_41:                              # %if.else146
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_42:                              # %if.end161
                                        #   in Loop: Header=BB21_38 Depth=3
	jmp	.LBB21_43
.LBB21_43:                              # %for.inc162
                                        #   in Loop: Header=BB21_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_38
.LBB21_44:                              # %for.end164
                                        #   in Loop: Header=BB21_36 Depth=2
	jmp	.LBB21_45
.LBB21_45:                              # %for.inc165
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_36
.LBB21_46:                              # %for.end167
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_47:                              # %for.cond168
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_51
.LBB21_50:                              # %if.else184
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_51:                              # %if.end196
                                        #   in Loop: Header=BB21_47 Depth=2
	jmp	.LBB21_52
.LBB21_52:                              # %for.inc197
                                        #   in Loop: Header=BB21_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_47
.LBB21_53:                              # %for.end199
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_54:                              # %for.cond200
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_58
.LBB21_57:                              # %if.else216
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_58:                              # %if.end228
                                        #   in Loop: Header=BB21_54 Depth=2
	jmp	.LBB21_59
.LBB21_59:                              # %for.inc229
                                        #   in Loop: Header=BB21_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_54
.LBB21_60:                              # %for.end231
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_61:                              # %for.cond232
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB21_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_65
.LBB21_64:                              # %if.else248
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_65:                              # %if.end260
                                        #   in Loop: Header=BB21_61 Depth=2
	jmp	.LBB21_66
.LBB21_66:                              # %for.inc261
                                        #   in Loop: Header=BB21_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_61
.LBB21_67:                              # %for.end263
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_68:                              # %for.cond264
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB21_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_72
.LBB21_71:                              # %if.else280
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_72:                              # %if.end292
                                        #   in Loop: Header=BB21_68 Depth=2
	jmp	.LBB21_73
.LBB21_73:                              # %for.inc293
                                        #   in Loop: Header=BB21_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_68
.LBB21_74:                              # %for.end295
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_75:                              # %for.cond296
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_79
.LBB21_78:                              # %if.else312
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_79:                              # %if.end324
                                        #   in Loop: Header=BB21_75 Depth=2
	jmp	.LBB21_80
.LBB21_80:                              # %for.inc325
                                        #   in Loop: Header=BB21_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_75
.LBB21_81:                              # %for.end327
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_82:                              # %for.cond328
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	$0, -4(%rbp)
.LBB21_84:                              # %for.cond331
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_88
.LBB21_87:                              # %if.else350
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_88:                              # %if.end365
                                        #   in Loop: Header=BB21_84 Depth=3
	jmp	.LBB21_89
.LBB21_89:                              # %for.inc366
                                        #   in Loop: Header=BB21_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_84
.LBB21_90:                              # %for.end368
                                        #   in Loop: Header=BB21_82 Depth=2
	jmp	.LBB21_91
.LBB21_91:                              # %for.inc369
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_82
.LBB21_92:                              # %for.end371
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_93:                              # %for.cond372
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	$0, -4(%rbp)
.LBB21_95:                              # %for.cond375
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_99
.LBB21_98:                              # %if.else394
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_99:                              # %if.end409
                                        #   in Loop: Header=BB21_95 Depth=3
	jmp	.LBB21_100
.LBB21_100:                             # %for.inc410
                                        #   in Loop: Header=BB21_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_95
.LBB21_101:                             # %for.end412
                                        #   in Loop: Header=BB21_93 Depth=2
	jmp	.LBB21_102
.LBB21_102:                             # %for.inc413
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_93
.LBB21_103:                             # %for.end415
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_104:                             # %for.cond416
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	$0, -4(%rbp)
.LBB21_106:                             # %for.cond419
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_110
.LBB21_109:                             # %if.else438
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_110:                             # %if.end453
                                        #   in Loop: Header=BB21_106 Depth=3
	jmp	.LBB21_111
.LBB21_111:                             # %for.inc454
                                        #   in Loop: Header=BB21_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_106
.LBB21_112:                             # %for.end456
                                        #   in Loop: Header=BB21_104 Depth=2
	jmp	.LBB21_113
.LBB21_113:                             # %for.inc457
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_104
.LBB21_114:                             # %for.end459
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_115:                             # %for.cond460
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	$0, -4(%rbp)
.LBB21_117:                             # %for.cond463
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_121
.LBB21_120:                             # %if.else482
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_121:                             # %if.end497
                                        #   in Loop: Header=BB21_117 Depth=3
	jmp	.LBB21_122
.LBB21_122:                             # %for.inc498
                                        #   in Loop: Header=BB21_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_117
.LBB21_123:                             # %for.end500
                                        #   in Loop: Header=BB21_115 Depth=2
	jmp	.LBB21_124
.LBB21_124:                             # %for.inc501
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_115
.LBB21_125:                             # %for.end503
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_126:                             # %for.cond504
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	$0, -4(%rbp)
.LBB21_128:                             # %for.cond507
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_132
.LBB21_131:                             # %if.else526
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_132:                             # %if.end541
                                        #   in Loop: Header=BB21_128 Depth=3
	jmp	.LBB21_133
.LBB21_133:                             # %for.inc542
                                        #   in Loop: Header=BB21_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_128
.LBB21_134:                             # %for.end544
                                        #   in Loop: Header=BB21_126 Depth=2
	jmp	.LBB21_135
.LBB21_135:                             # %for.inc545
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_126
.LBB21_136:                             # %for.end547
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_137:                             # %for.cond548
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	$0, -4(%rbp)
.LBB21_139:                             # %for.cond551
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_143
.LBB21_142:                             # %if.else570
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_143:                             # %if.end585
                                        #   in Loop: Header=BB21_139 Depth=3
	jmp	.LBB21_144
.LBB21_144:                             # %for.inc586
                                        #   in Loop: Header=BB21_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_139
.LBB21_145:                             # %for.end588
                                        #   in Loop: Header=BB21_137 Depth=2
	jmp	.LBB21_146
.LBB21_146:                             # %for.inc589
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_137
.LBB21_147:                             # %for.end591
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_148:                             # %for.cond592
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	$0, -4(%rbp)
.LBB21_150:                             # %for.cond595
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_154
.LBB21_153:                             # %if.else614
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_154:                             # %if.end629
                                        #   in Loop: Header=BB21_150 Depth=3
	jmp	.LBB21_155
.LBB21_155:                             # %for.inc630
                                        #   in Loop: Header=BB21_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_150
.LBB21_156:                             # %for.end632
                                        #   in Loop: Header=BB21_148 Depth=2
	jmp	.LBB21_157
.LBB21_157:                             # %for.inc633
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_148
.LBB21_158:                             # %for.end635
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_159:                             # %for.cond636
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	$0, -4(%rbp)
.LBB21_161:                             # %for.cond639
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_165
.LBB21_164:                             # %if.else658
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_165:                             # %if.end673
                                        #   in Loop: Header=BB21_161 Depth=3
	jmp	.LBB21_166
.LBB21_166:                             # %for.inc674
                                        #   in Loop: Header=BB21_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_161
.LBB21_167:                             # %for.end676
                                        #   in Loop: Header=BB21_159 Depth=2
	jmp	.LBB21_168
.LBB21_168:                             # %for.inc677
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_159
.LBB21_169:                             # %for.end679
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB21_171:                             # %if.end682
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_172
.LBB21_172:                             # %for.inc683
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_1
.LBB21_173:                             # %for.end685
	cmpl	$2008552783, -44(%rbp)  # imm = 0x77B8154F
	jne	.LBB21_175
.LBB21_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_174
.Lfunc_end21:
	.size	GetCtxModelNumber.14, .Lfunc_end21-GetCtxModelNumber.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.15
.LCPI22_0:
	.quad	4611686018427387904     # double 2
.LCPI22_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.15
	.p2align	4, 0x90
	.type	create_context_memory.15,@function
create_context_memory.15:               # @create_context_memory.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$646837735, -20(%rbp)   # imm = 0x268DF5E7
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB22_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB22_3
.LBB22_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB22_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB22_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB22_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB22_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB22_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB22_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB22_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB22_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB22_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB22_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB22_11:                              # %if.end10
                                        #   in Loop: Header=BB22_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB22_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB22_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB22_13:                              # %if.end16
                                        #   in Loop: Header=BB22_8 Depth=1
	movl	$0, -8(%rbp)
.LBB22_14:                              # %for.cond17
                                        #   Parent Loop BB22_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB22_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB22_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB22_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB22_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB22_17:                              # %if.end28
                                        #   in Loop: Header=BB22_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB22_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB22_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB22_19:                              # %if.end39
                                        #   in Loop: Header=BB22_14 Depth=2
	jmp	.LBB22_20
.LBB22_20:                              # %for.inc
                                        #   in Loop: Header=BB22_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_14
.LBB22_21:                              # %for.end
                                        #   in Loop: Header=BB22_8 Depth=1
	jmp	.LBB22_22
.LBB22_22:                              # %for.inc40
                                        #   in Loop: Header=BB22_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_8
.LBB22_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB22_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_26 Depth 2
                                        #       Child Loop BB22_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB22_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB22_24 Depth=1
	movl	$0, -8(%rbp)
.LBB22_26:                              # %for.cond47
                                        #   Parent Loop BB22_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB22_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB22_26 Depth=2
	movl	$0, -12(%rbp)
.LBB22_28:                              # %for.cond51
                                        #   Parent Loop BB22_24 Depth=1
                                        #     Parent Loop BB22_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB22_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB22_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB22_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_28
.LBB22_31:                              # %for.end63
                                        #   in Loop: Header=BB22_26 Depth=2
	jmp	.LBB22_32
.LBB22_32:                              # %for.inc64
                                        #   in Loop: Header=BB22_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_26
.LBB22_33:                              # %for.end66
                                        #   in Loop: Header=BB22_24 Depth=1
	jmp	.LBB22_34
.LBB22_34:                              # %for.inc67
                                        #   in Loop: Header=BB22_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_24
.LBB22_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB22_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB22_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB22_36 Depth=1
	vmovsd	.LCPI22_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB22_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_36
.LBB22_39:                              # %for.end98
	cmpl	$646837735, -20(%rbp)   # imm = 0x268DF5E7
	jne	.LBB22_41
.LBB22_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_40
.Lfunc_end22:
	.size	create_context_memory.15, .Lfunc_end22-create_context_memory.15
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.16 # -- Begin function update_field_frame_contexts.16
	.p2align	4, 0x90
	.type	update_field_frame_contexts.16,@function
update_field_frame_contexts.16:         # @update_field_frame_contexts.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$420498421, -16(%rbp)   # imm = 0x19104BF5
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB23_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB23_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	$0, -8(%rbp)
.LBB23_4:                               # %for.cond1
                                        #   Parent Loop BB23_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB23_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB23_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB23_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_4
.LBB23_7:                               # %for.end
                                        #   in Loop: Header=BB23_2 Depth=1
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc23
                                        #   in Loop: Header=BB23_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_2
.LBB23_9:                               # %for.end25
	jmp	.LBB23_19
.LBB23_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB23_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	$0, -8(%rbp)
.LBB23_13:                              # %for.cond29
                                        #   Parent Loop BB23_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB23_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB23_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_13
.LBB23_16:                              # %for.end56
                                        #   in Loop: Header=BB23_11 Depth=1
	jmp	.LBB23_17
.LBB23_17:                              # %for.inc57
                                        #   in Loop: Header=BB23_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_11
.LBB23_18:                              # %for.end59
	jmp	.LBB23_19
.LBB23_19:                              # %if.end
	cmpl	$420498421, -16(%rbp)   # imm = 0x19104BF5
	jne	.LBB23_21
.LBB23_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_20
.Lfunc_end23:
	.size	update_field_frame_contexts.16, .Lfunc_end23-update_field_frame_contexts.16
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.17 # -- Begin function update_field_frame_contexts.17
	.p2align	4, 0x90
	.type	update_field_frame_contexts.17,@function
update_field_frame_contexts.17:         # @update_field_frame_contexts.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$269871050, -12(%rbp)   # imm = 0x1015E7CA
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB24_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB24_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	$0, -8(%rbp)
.LBB24_4:                               # %for.cond1
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB24_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB24_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB24_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_4
.LBB24_7:                               # %for.end
                                        #   in Loop: Header=BB24_2 Depth=1
	jmp	.LBB24_8
.LBB24_8:                               # %for.inc23
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_2
.LBB24_9:                               # %for.end25
	jmp	.LBB24_19
.LBB24_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB24_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB24_11 Depth=1
	movl	$0, -8(%rbp)
.LBB24_13:                              # %for.cond29
                                        #   Parent Loop BB24_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB24_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB24_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB24_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_13
.LBB24_16:                              # %for.end56
                                        #   in Loop: Header=BB24_11 Depth=1
	jmp	.LBB24_17
.LBB24_17:                              # %for.inc57
                                        #   in Loop: Header=BB24_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_11
.LBB24_18:                              # %for.end59
	jmp	.LBB24_19
.LBB24_19:                              # %if.end
	cmpl	$269871050, -12(%rbp)   # imm = 0x1015E7CA
	jne	.LBB24_21
.LBB24_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_20
.Lfunc_end24:
	.size	update_field_frame_contexts.17, .Lfunc_end24-update_field_frame_contexts.17
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.18 # -- Begin function update_field_frame_contexts.18
	.p2align	4, 0x90
	.type	update_field_frame_contexts.18,@function
update_field_frame_contexts.18:         # @update_field_frame_contexts.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$79567245, -12(%rbp)    # imm = 0x4BE198D
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB25_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB25_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	$0, -4(%rbp)
.LBB25_4:                               # %for.cond1
                                        #   Parent Loop BB25_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB25_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB25_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB25_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_4
.LBB25_7:                               # %for.end
                                        #   in Loop: Header=BB25_2 Depth=1
	jmp	.LBB25_8
.LBB25_8:                               # %for.inc23
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_2
.LBB25_9:                               # %for.end25
	jmp	.LBB25_19
.LBB25_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB25_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB25_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	$0, -4(%rbp)
.LBB25_13:                              # %for.cond29
                                        #   Parent Loop BB25_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB25_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB25_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB25_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_13
.LBB25_16:                              # %for.end56
                                        #   in Loop: Header=BB25_11 Depth=1
	jmp	.LBB25_17
.LBB25_17:                              # %for.inc57
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_11
.LBB25_18:                              # %for.end59
	jmp	.LBB25_19
.LBB25_19:                              # %if.end
	cmpl	$79567245, -12(%rbp)    # imm = 0x4BE198D
	jne	.LBB25_21
.LBB25_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_20
.Lfunc_end25:
	.size	update_field_frame_contexts.18, .Lfunc_end25-update_field_frame_contexts.18
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.19 # -- Begin function update_field_frame_contexts.19
	.p2align	4, 0x90
	.type	update_field_frame_contexts.19,@function
update_field_frame_contexts.19:         # @update_field_frame_contexts.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$647477671, -12(%rbp)   # imm = 0x2697B9A7
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB26_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB26_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	$0, -8(%rbp)
.LBB26_4:                               # %for.cond1
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB26_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB26_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB26_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_4
.LBB26_7:                               # %for.end
                                        #   in Loop: Header=BB26_2 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc23
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_2
.LBB26_9:                               # %for.end25
	jmp	.LBB26_19
.LBB26_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB26_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	$0, -8(%rbp)
.LBB26_13:                              # %for.cond29
                                        #   Parent Loop BB26_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB26_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB26_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB26_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_13
.LBB26_16:                              # %for.end56
                                        #   in Loop: Header=BB26_11 Depth=1
	jmp	.LBB26_17
.LBB26_17:                              # %for.inc57
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_11
.LBB26_18:                              # %for.end59
	jmp	.LBB26_19
.LBB26_19:                              # %if.end
	cmpl	$647477671, -12(%rbp)   # imm = 0x2697B9A7
	jne	.LBB26_21
.LBB26_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_20
.Lfunc_end26:
	.size	update_field_frame_contexts.19, .Lfunc_end26-update_field_frame_contexts.19
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.20 # -- Begin function update_field_frame_contexts.20
	.p2align	4, 0x90
	.type	update_field_frame_contexts.20,@function
update_field_frame_contexts.20:         # @update_field_frame_contexts.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$369450185, -16(%rbp)   # imm = 0x16055CC9
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB27_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	$0, -4(%rbp)
.LBB27_4:                               # %for.cond1
                                        #   Parent Loop BB27_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB27_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB27_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB27_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_4
.LBB27_7:                               # %for.end
                                        #   in Loop: Header=BB27_2 Depth=1
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc23
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_2
.LBB27_9:                               # %for.end25
	jmp	.LBB27_19
.LBB27_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB27_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	$0, -4(%rbp)
.LBB27_13:                              # %for.cond29
                                        #   Parent Loop BB27_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB27_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB27_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_13
.LBB27_16:                              # %for.end56
                                        #   in Loop: Header=BB27_11 Depth=1
	jmp	.LBB27_17
.LBB27_17:                              # %for.inc57
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_11
.LBB27_18:                              # %for.end59
	jmp	.LBB27_19
.LBB27_19:                              # %if.end
	cmpl	$369450185, -16(%rbp)   # imm = 0x16055CC9
	jne	.LBB27_21
.LBB27_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_20
.Lfunc_end27:
	.size	update_field_frame_contexts.20, .Lfunc_end27-update_field_frame_contexts.20
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.21       # -- Begin function store_contexts.21
	.p2align	4, 0x90
	.type	store_contexts.21,@function
store_contexts.21:                      # @store_contexts.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1075457177, -16(%rbp)  # imm = 0x401A2C99
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB28_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB28_3
.LBB28_2:                               # %if.else
	jmp	.LBB28_3
.LBB28_3:                               # %if.end
	cmpl	$1075457177, -16(%rbp)  # imm = 0x401A2C99
	jne	.LBB28_5
.LBB28_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_4
.Lfunc_end28:
	.size	store_contexts.21, .Lfunc_end28-store_contexts.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.22
.LCPI29_0:
	.quad	4611686018427387904     # double 2
.LCPI29_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.22
	.p2align	4, 0x90
	.type	create_context_memory.22,@function
create_context_memory.22:               # @create_context_memory.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1458376421, -20(%rbp)  # imm = 0x56ED0EE5
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB29_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB29_3
.LBB29_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB29_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB29_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB29_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB29_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB29_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB29_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB29_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB29_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB29_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB29_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB29_11:                              # %if.end10
                                        #   in Loop: Header=BB29_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB29_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB29_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB29_13:                              # %if.end16
                                        #   in Loop: Header=BB29_8 Depth=1
	movl	$0, -8(%rbp)
.LBB29_14:                              # %for.cond17
                                        #   Parent Loop BB29_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB29_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB29_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB29_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB29_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB29_17:                              # %if.end28
                                        #   in Loop: Header=BB29_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB29_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB29_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB29_19:                              # %if.end39
                                        #   in Loop: Header=BB29_14 Depth=2
	jmp	.LBB29_20
.LBB29_20:                              # %for.inc
                                        #   in Loop: Header=BB29_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_14
.LBB29_21:                              # %for.end
                                        #   in Loop: Header=BB29_8 Depth=1
	jmp	.LBB29_22
.LBB29_22:                              # %for.inc40
                                        #   in Loop: Header=BB29_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_8
.LBB29_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB29_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_26 Depth 2
                                        #       Child Loop BB29_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB29_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB29_24 Depth=1
	movl	$0, -8(%rbp)
.LBB29_26:                              # %for.cond47
                                        #   Parent Loop BB29_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB29_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB29_26 Depth=2
	movl	$0, -12(%rbp)
.LBB29_28:                              # %for.cond51
                                        #   Parent Loop BB29_24 Depth=1
                                        #     Parent Loop BB29_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB29_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB29_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB29_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB29_28
.LBB29_31:                              # %for.end63
                                        #   in Loop: Header=BB29_26 Depth=2
	jmp	.LBB29_32
.LBB29_32:                              # %for.inc64
                                        #   in Loop: Header=BB29_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_26
.LBB29_33:                              # %for.end66
                                        #   in Loop: Header=BB29_24 Depth=1
	jmp	.LBB29_34
.LBB29_34:                              # %for.inc67
                                        #   in Loop: Header=BB29_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_24
.LBB29_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB29_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB29_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB29_36 Depth=1
	vmovsd	.LCPI29_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI29_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB29_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_36
.LBB29_39:                              # %for.end98
	cmpl	$1458376421, -20(%rbp)  # imm = 0x56ED0EE5
	jne	.LBB29_41
.LBB29_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_40
.Lfunc_end29:
	.size	create_context_memory.22, .Lfunc_end29-create_context_memory.22
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.23    # -- Begin function SetCtxModelNumber.23
	.p2align	4, 0x90
	.type	SetCtxModelNumber.23,@function
SetCtxModelNumber.23:                   # @SetCtxModelNumber.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1666220995, -16(%rbp)  # imm = 0x635083C3
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB30_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB30_11
.LBB30_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB30_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB30_11
.LBB30_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB30_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB30_11
.LBB30_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB30_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB30_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB30_10
.LBB30_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB30_10:                              # %if.end38
	jmp	.LBB30_11
.LBB30_11:                              # %if.end39
	cmpl	$1666220995, -16(%rbp)  # imm = 0x635083C3
	jne	.LBB30_13
.LBB30_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_12
.Lfunc_end30:
	.size	SetCtxModelNumber.23, .Lfunc_end30-SetCtxModelNumber.23
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.24       # -- Begin function store_contexts.24
	.p2align	4, 0x90
	.type	store_contexts.24,@function
store_contexts.24:                      # @store_contexts.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1899803101, -16(%rbp)  # imm = 0x713CB1DD
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB31_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB31_3
.LBB31_2:                               # %if.else
	jmp	.LBB31_3
.LBB31_3:                               # %if.end
	cmpl	$1899803101, -16(%rbp)  # imm = 0x713CB1DD
	jne	.LBB31_5
.LBB31_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_4
.Lfunc_end31:
	.size	store_contexts.24, .Lfunc_end31-store_contexts.24
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.25  # -- Begin function free_context_memory.25
	.p2align	4, 0x90
	.type	free_context_memory.25,@function
free_context_memory.25:                 # @free_context_memory.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1826631503, -12(%rbp)  # imm = 0x6CE02F4F
	movl	$0, -4(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB32_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -8(%rbp)
.LBB32_3:                               # %for.cond1
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB32_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_3
.LBB32_6:                               # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_1
.LBB32_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$1826631503, -12(%rbp)  # imm = 0x6CE02F4F
	jne	.LBB32_10
.LBB32_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_9
.Lfunc_end32:
	.size	free_context_memory.25, .Lfunc_end32-free_context_memory.25
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.26       # -- Begin function store_contexts.26
	.p2align	4, 0x90
	.type	store_contexts.26,@function
store_contexts.26:                      # @store_contexts.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$75203674, -16(%rbp)    # imm = 0x47B845A
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB33_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB33_3
.LBB33_2:                               # %if.else
	jmp	.LBB33_3
.LBB33_3:                               # %if.end
	cmpl	$75203674, -16(%rbp)    # imm = 0x47B845A
	jne	.LBB33_5
.LBB33_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_4
.Lfunc_end33:
	.size	store_contexts.26, .Lfunc_end33-store_contexts.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.27
.LCPI34_0:
	.quad	4607182418800017408     # double 1
.LCPI34_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI34_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI34_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.27
	.p2align	4, 0x90
	.type	XRate.27,@function
XRate.27:                               # @XRate.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2125851197, -36(%rbp)  # imm = 0x7EB5EA3D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB34_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB34_3
.LBB34_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB34_3:                               # %cond.end
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI34_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI34_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI34_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB34_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI34_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB34_6
.LBB34_5:                               # %cond.false6
	vmovsd	.LCPI34_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI34_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI34_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB34_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB34_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB34_9
.LBB34_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB34_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB34_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB34_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB34_13
.LBB34_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB34_13:                              # %cond.end26
	jmp	.LBB34_15
.LBB34_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB34_15
.LBB34_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB34_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB34_18
.LBB34_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB34_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2125851197, -36(%rbp)  # imm = 0x7EB5EA3D
	jne	.LBB34_20
.LBB34_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB34_19
.Lfunc_end34:
	.size	XRate.27, .Lfunc_end34-XRate.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.28
.LCPI35_0:
	.quad	4611686018427387904     # double 2
.LCPI35_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.28
	.p2align	4, 0x90
	.type	create_context_memory.28,@function
create_context_memory.28:               # @create_context_memory.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1295600528, -20(%rbp)  # imm = 0x4D394B90
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB35_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB35_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB35_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB35_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB35_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB35_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB35_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB35_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB35_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB35_11:                              # %if.end10
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB35_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB35_13:                              # %if.end16
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$0, -8(%rbp)
.LBB35_14:                              # %for.cond17
                                        #   Parent Loop BB35_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB35_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB35_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB35_17:                              # %if.end28
                                        #   in Loop: Header=BB35_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB35_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB35_19:                              # %if.end39
                                        #   in Loop: Header=BB35_14 Depth=2
	jmp	.LBB35_20
.LBB35_20:                              # %for.inc
                                        #   in Loop: Header=BB35_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_14
.LBB35_21:                              # %for.end
                                        #   in Loop: Header=BB35_8 Depth=1
	jmp	.LBB35_22
.LBB35_22:                              # %for.inc40
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_8
.LBB35_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB35_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_26 Depth 2
                                        #       Child Loop BB35_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB35_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	$0, -8(%rbp)
.LBB35_26:                              # %for.cond47
                                        #   Parent Loop BB35_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB35_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB35_26 Depth=2
	movl	$0, -12(%rbp)
.LBB35_28:                              # %for.cond51
                                        #   Parent Loop BB35_24 Depth=1
                                        #     Parent Loop BB35_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB35_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB35_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB35_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_28
.LBB35_31:                              # %for.end63
                                        #   in Loop: Header=BB35_26 Depth=2
	jmp	.LBB35_32
.LBB35_32:                              # %for.inc64
                                        #   in Loop: Header=BB35_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_26
.LBB35_33:                              # %for.end66
                                        #   in Loop: Header=BB35_24 Depth=1
	jmp	.LBB35_34
.LBB35_34:                              # %for.inc67
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_24
.LBB35_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB35_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB35_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB35_36 Depth=1
	vmovsd	.LCPI35_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB35_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_36
.LBB35_39:                              # %for.end98
	cmpl	$1295600528, -20(%rbp)  # imm = 0x4D394B90
	jne	.LBB35_41
.LBB35_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_40
.Lfunc_end35:
	.size	create_context_memory.28, .Lfunc_end35-create_context_memory.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.29
.LCPI36_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.29
	.p2align	4, 0x90
	.type	GetCtxModelNumber.29,@function
GetCtxModelNumber.29:                   # @GetCtxModelNumber.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1847222375, -48(%rbp)  # imm = 0x6E1A6067
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
                                        #       Child Loop BB36_5 Depth 3
                                        #     Child Loop BB36_14 Depth 2
                                        #       Child Loop BB36_16 Depth 3
                                        #     Child Loop BB36_25 Depth 2
                                        #       Child Loop BB36_27 Depth 3
                                        #     Child Loop BB36_36 Depth 2
                                        #       Child Loop BB36_38 Depth 3
                                        #     Child Loop BB36_47 Depth 2
                                        #     Child Loop BB36_54 Depth 2
                                        #     Child Loop BB36_61 Depth 2
                                        #     Child Loop BB36_68 Depth 2
                                        #     Child Loop BB36_75 Depth 2
                                        #     Child Loop BB36_82 Depth 2
                                        #       Child Loop BB36_84 Depth 3
                                        #     Child Loop BB36_93 Depth 2
                                        #       Child Loop BB36_95 Depth 3
                                        #     Child Loop BB36_104 Depth 2
                                        #       Child Loop BB36_106 Depth 3
                                        #     Child Loop BB36_115 Depth 2
                                        #       Child Loop BB36_117 Depth 3
                                        #     Child Loop BB36_126 Depth 2
                                        #       Child Loop BB36_128 Depth 3
                                        #     Child Loop BB36_137 Depth 2
                                        #       Child Loop BB36_139 Depth 3
                                        #     Child Loop BB36_148 Depth 2
                                        #       Child Loop BB36_150 Depth 3
                                        #     Child Loop BB36_159 Depth 2
                                        #       Child Loop BB36_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB36_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB36_3:                               # %for.cond2
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB36_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	$0, -4(%rbp)
.LBB36_5:                               # %for.cond5
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB36_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_9
.LBB36_8:                               # %if.else
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_9:                               # %if.end
                                        #   in Loop: Header=BB36_5 Depth=3
	jmp	.LBB36_10
.LBB36_10:                              # %for.inc
                                        #   in Loop: Header=BB36_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_5
.LBB36_11:                              # %for.end
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_12
.LBB36_12:                              # %for.inc33
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_3
.LBB36_13:                              # %for.end35
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_14:                              # %for.cond36
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	$0, -4(%rbp)
.LBB36_16:                              # %for.cond39
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB36_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_20
.LBB36_19:                              # %if.else58
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_20:                              # %if.end73
                                        #   in Loop: Header=BB36_16 Depth=3
	jmp	.LBB36_21
.LBB36_21:                              # %for.inc74
                                        #   in Loop: Header=BB36_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_16
.LBB36_22:                              # %for.end76
                                        #   in Loop: Header=BB36_14 Depth=2
	jmp	.LBB36_23
.LBB36_23:                              # %for.inc77
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_14
.LBB36_24:                              # %for.end79
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_25:                              # %for.cond80
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	$0, -4(%rbp)
.LBB36_27:                              # %for.cond83
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB36_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_31
.LBB36_30:                              # %if.else102
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_31:                              # %if.end117
                                        #   in Loop: Header=BB36_27 Depth=3
	jmp	.LBB36_32
.LBB36_32:                              # %for.inc118
                                        #   in Loop: Header=BB36_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_27
.LBB36_33:                              # %for.end120
                                        #   in Loop: Header=BB36_25 Depth=2
	jmp	.LBB36_34
.LBB36_34:                              # %for.inc121
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_25
.LBB36_35:                              # %for.end123
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_36:                              # %for.cond124
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	$0, -4(%rbp)
.LBB36_38:                              # %for.cond127
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB36_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_42
.LBB36_41:                              # %if.else146
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_42:                              # %if.end161
                                        #   in Loop: Header=BB36_38 Depth=3
	jmp	.LBB36_43
.LBB36_43:                              # %for.inc162
                                        #   in Loop: Header=BB36_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_38
.LBB36_44:                              # %for.end164
                                        #   in Loop: Header=BB36_36 Depth=2
	jmp	.LBB36_45
.LBB36_45:                              # %for.inc165
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_36
.LBB36_46:                              # %for.end167
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_47:                              # %for.cond168
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_51
.LBB36_50:                              # %if.else184
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_51:                              # %if.end196
                                        #   in Loop: Header=BB36_47 Depth=2
	jmp	.LBB36_52
.LBB36_52:                              # %for.inc197
                                        #   in Loop: Header=BB36_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_47
.LBB36_53:                              # %for.end199
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_54:                              # %for.cond200
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_58
.LBB36_57:                              # %if.else216
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_58:                              # %if.end228
                                        #   in Loop: Header=BB36_54 Depth=2
	jmp	.LBB36_59
.LBB36_59:                              # %for.inc229
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_54
.LBB36_60:                              # %for.end231
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_61:                              # %for.cond232
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB36_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_65
.LBB36_64:                              # %if.else248
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_65:                              # %if.end260
                                        #   in Loop: Header=BB36_61 Depth=2
	jmp	.LBB36_66
.LBB36_66:                              # %for.inc261
                                        #   in Loop: Header=BB36_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_61
.LBB36_67:                              # %for.end263
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_68:                              # %for.cond264
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB36_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_72
.LBB36_71:                              # %if.else280
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_72:                              # %if.end292
                                        #   in Loop: Header=BB36_68 Depth=2
	jmp	.LBB36_73
.LBB36_73:                              # %for.inc293
                                        #   in Loop: Header=BB36_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_68
.LBB36_74:                              # %for.end295
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_75:                              # %for.cond296
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_79
.LBB36_78:                              # %if.else312
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_79:                              # %if.end324
                                        #   in Loop: Header=BB36_75 Depth=2
	jmp	.LBB36_80
.LBB36_80:                              # %for.inc325
                                        #   in Loop: Header=BB36_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_75
.LBB36_81:                              # %for.end327
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_82:                              # %for.cond328
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB36_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB36_82 Depth=2
	movl	$0, -4(%rbp)
.LBB36_84:                              # %for.cond331
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB36_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_88
.LBB36_87:                              # %if.else350
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_88:                              # %if.end365
                                        #   in Loop: Header=BB36_84 Depth=3
	jmp	.LBB36_89
.LBB36_89:                              # %for.inc366
                                        #   in Loop: Header=BB36_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_84
.LBB36_90:                              # %for.end368
                                        #   in Loop: Header=BB36_82 Depth=2
	jmp	.LBB36_91
.LBB36_91:                              # %for.inc369
                                        #   in Loop: Header=BB36_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_82
.LBB36_92:                              # %for.end371
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_93:                              # %for.cond372
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB36_93 Depth=2
	movl	$0, -4(%rbp)
.LBB36_95:                              # %for.cond375
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB36_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_99
.LBB36_98:                              # %if.else394
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_99:                              # %if.end409
                                        #   in Loop: Header=BB36_95 Depth=3
	jmp	.LBB36_100
.LBB36_100:                             # %for.inc410
                                        #   in Loop: Header=BB36_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_95
.LBB36_101:                             # %for.end412
                                        #   in Loop: Header=BB36_93 Depth=2
	jmp	.LBB36_102
.LBB36_102:                             # %for.inc413
                                        #   in Loop: Header=BB36_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_93
.LBB36_103:                             # %for.end415
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_104:                             # %for.cond416
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB36_104 Depth=2
	movl	$0, -4(%rbp)
.LBB36_106:                             # %for.cond419
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_110
.LBB36_109:                             # %if.else438
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_110:                             # %if.end453
                                        #   in Loop: Header=BB36_106 Depth=3
	jmp	.LBB36_111
.LBB36_111:                             # %for.inc454
                                        #   in Loop: Header=BB36_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_106
.LBB36_112:                             # %for.end456
                                        #   in Loop: Header=BB36_104 Depth=2
	jmp	.LBB36_113
.LBB36_113:                             # %for.inc457
                                        #   in Loop: Header=BB36_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_104
.LBB36_114:                             # %for.end459
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_115:                             # %for.cond460
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB36_115 Depth=2
	movl	$0, -4(%rbp)
.LBB36_117:                             # %for.cond463
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_121
.LBB36_120:                             # %if.else482
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_121:                             # %if.end497
                                        #   in Loop: Header=BB36_117 Depth=3
	jmp	.LBB36_122
.LBB36_122:                             # %for.inc498
                                        #   in Loop: Header=BB36_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_117
.LBB36_123:                             # %for.end500
                                        #   in Loop: Header=BB36_115 Depth=2
	jmp	.LBB36_124
.LBB36_124:                             # %for.inc501
                                        #   in Loop: Header=BB36_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_115
.LBB36_125:                             # %for.end503
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_126:                             # %for.cond504
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB36_126 Depth=2
	movl	$0, -4(%rbp)
.LBB36_128:                             # %for.cond507
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB36_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_132
.LBB36_131:                             # %if.else526
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_132:                             # %if.end541
                                        #   in Loop: Header=BB36_128 Depth=3
	jmp	.LBB36_133
.LBB36_133:                             # %for.inc542
                                        #   in Loop: Header=BB36_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_128
.LBB36_134:                             # %for.end544
                                        #   in Loop: Header=BB36_126 Depth=2
	jmp	.LBB36_135
.LBB36_135:                             # %for.inc545
                                        #   in Loop: Header=BB36_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_126
.LBB36_136:                             # %for.end547
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_137:                             # %for.cond548
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB36_137 Depth=2
	movl	$0, -4(%rbp)
.LBB36_139:                             # %for.cond551
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB36_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_143
.LBB36_142:                             # %if.else570
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_143:                             # %if.end585
                                        #   in Loop: Header=BB36_139 Depth=3
	jmp	.LBB36_144
.LBB36_144:                             # %for.inc586
                                        #   in Loop: Header=BB36_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_139
.LBB36_145:                             # %for.end588
                                        #   in Loop: Header=BB36_137 Depth=2
	jmp	.LBB36_146
.LBB36_146:                             # %for.inc589
                                        #   in Loop: Header=BB36_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_137
.LBB36_147:                             # %for.end591
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_148:                             # %for.cond592
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB36_148 Depth=2
	movl	$0, -4(%rbp)
.LBB36_150:                             # %for.cond595
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_154
.LBB36_153:                             # %if.else614
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_154:                             # %if.end629
                                        #   in Loop: Header=BB36_150 Depth=3
	jmp	.LBB36_155
.LBB36_155:                             # %for.inc630
                                        #   in Loop: Header=BB36_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_150
.LBB36_156:                             # %for.end632
                                        #   in Loop: Header=BB36_148 Depth=2
	jmp	.LBB36_157
.LBB36_157:                             # %for.inc633
                                        #   in Loop: Header=BB36_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_148
.LBB36_158:                             # %for.end635
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_159:                             # %for.cond636
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB36_159 Depth=2
	movl	$0, -4(%rbp)
.LBB36_161:                             # %for.cond639
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_165
.LBB36_164:                             # %if.else658
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_165:                             # %if.end673
                                        #   in Loop: Header=BB36_161 Depth=3
	jmp	.LBB36_166
.LBB36_166:                             # %for.inc674
                                        #   in Loop: Header=BB36_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_161
.LBB36_167:                             # %for.end676
                                        #   in Loop: Header=BB36_159 Depth=2
	jmp	.LBB36_168
.LBB36_168:                             # %for.inc677
                                        #   in Loop: Header=BB36_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_159
.LBB36_169:                             # %for.end679
                                        #   in Loop: Header=BB36_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB36_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB36_171:                             # %if.end682
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_172
.LBB36_172:                             # %for.inc683
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_1
.LBB36_173:                             # %for.end685
	cmpl	$1847222375, -48(%rbp)  # imm = 0x6E1A6067
	jne	.LBB36_175
.LBB36_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_174
.Lfunc_end36:
	.size	GetCtxModelNumber.29, .Lfunc_end36-GetCtxModelNumber.29
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.30       # -- Begin function store_contexts.30
	.p2align	4, 0x90
	.type	store_contexts.30,@function
store_contexts.30:                      # @store_contexts.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1109474134, -16(%rbp)  # imm = 0x42213B56
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB37_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB37_3
.LBB37_2:                               # %if.else
	jmp	.LBB37_3
.LBB37_3:                               # %if.end
	cmpl	$1109474134, -16(%rbp)  # imm = 0x42213B56
	jne	.LBB37_5
.LBB37_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_4
.Lfunc_end37:
	.size	store_contexts.30, .Lfunc_end37-store_contexts.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.31
.LCPI38_0:
	.quad	4607182418800017408     # double 1
.LCPI38_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI38_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI38_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.31
	.p2align	4, 0x90
	.type	XRate.31,@function
XRate.31:                               # @XRate.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$317920004, -36(%rbp)   # imm = 0x12F31304
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB38_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB38_3
.LBB38_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB38_3:                               # %cond.end
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI38_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI38_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI38_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB38_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB38_6
.LBB38_5:                               # %cond.false6
	vmovsd	.LCPI38_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI38_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI38_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB38_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB38_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB38_9
.LBB38_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB38_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB38_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB38_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB38_13
.LBB38_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB38_13:                              # %cond.end26
	jmp	.LBB38_15
.LBB38_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB38_15
.LBB38_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB38_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB38_18
.LBB38_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB38_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$317920004, -36(%rbp)   # imm = 0x12F31304
	jne	.LBB38_20
.LBB38_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB38_19
.Lfunc_end38:
	.size	XRate.31, .Lfunc_end38-XRate.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.32
.LCPI39_0:
	.quad	4611686018427387904     # double 2
.LCPI39_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.32
	.p2align	4, 0x90
	.type	create_context_memory.32,@function
create_context_memory.32:               # @create_context_memory.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1884284159, -20(%rbp)  # imm = 0x704FE4FF
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB39_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB39_3
.LBB39_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB39_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB39_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB39_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB39_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB39_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB39_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB39_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB39_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB39_11:                              # %if.end10
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB39_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB39_13:                              # %if.end16
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	$0, -8(%rbp)
.LBB39_14:                              # %for.cond17
                                        #   Parent Loop BB39_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB39_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB39_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB39_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB39_17:                              # %if.end28
                                        #   in Loop: Header=BB39_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB39_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB39_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB39_19:                              # %if.end39
                                        #   in Loop: Header=BB39_14 Depth=2
	jmp	.LBB39_20
.LBB39_20:                              # %for.inc
                                        #   in Loop: Header=BB39_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_14
.LBB39_21:                              # %for.end
                                        #   in Loop: Header=BB39_8 Depth=1
	jmp	.LBB39_22
.LBB39_22:                              # %for.inc40
                                        #   in Loop: Header=BB39_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_8
.LBB39_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB39_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_26 Depth 2
                                        #       Child Loop BB39_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB39_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB39_24 Depth=1
	movl	$0, -8(%rbp)
.LBB39_26:                              # %for.cond47
                                        #   Parent Loop BB39_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB39_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB39_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB39_26 Depth=2
	movl	$0, -12(%rbp)
.LBB39_28:                              # %for.cond51
                                        #   Parent Loop BB39_24 Depth=1
                                        #     Parent Loop BB39_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB39_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB39_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB39_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_28
.LBB39_31:                              # %for.end63
                                        #   in Loop: Header=BB39_26 Depth=2
	jmp	.LBB39_32
.LBB39_32:                              # %for.inc64
                                        #   in Loop: Header=BB39_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_26
.LBB39_33:                              # %for.end66
                                        #   in Loop: Header=BB39_24 Depth=1
	jmp	.LBB39_34
.LBB39_34:                              # %for.inc67
                                        #   in Loop: Header=BB39_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_24
.LBB39_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB39_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB39_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB39_36 Depth=1
	vmovsd	.LCPI39_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB39_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_36
.LBB39_39:                              # %for.end98
	cmpl	$1884284159, -20(%rbp)  # imm = 0x704FE4FF
	jne	.LBB39_41
.LBB39_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_40
.Lfunc_end39:
	.size	create_context_memory.32, .Lfunc_end39-create_context_memory.32
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.33    # -- Begin function SetCtxModelNumber.33
	.p2align	4, 0x90
	.type	SetCtxModelNumber.33,@function
SetCtxModelNumber.33:                   # @SetCtxModelNumber.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1276334526, -16(%rbp)  # imm = 0x4C1351BE
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB40_11
.LBB40_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB40_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_11
.LBB40_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB40_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_11
.LBB40_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB40_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB40_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB40_10
.LBB40_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB40_10:                              # %if.end38
	jmp	.LBB40_11
.LBB40_11:                              # %if.end39
	cmpl	$1276334526, -16(%rbp)  # imm = 0x4C1351BE
	jne	.LBB40_13
.LBB40_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_12
.Lfunc_end40:
	.size	SetCtxModelNumber.33, .Lfunc_end40-SetCtxModelNumber.33
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.34        # -- Begin function init_contexts.34
	.p2align	4, 0x90
	.type	init_contexts.34,@function
init_contexts.34:                       # @init_contexts.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$820779137, -28(%rbp)   # imm = 0x30EC1881
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB41_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$0, -4(%rbp)
.LBB41_3:                               # %for.cond2
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB41_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_7
.LBB41_6:                               # %if.else
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_7:                               # %if.end
                                        #   in Loop: Header=BB41_3 Depth=2
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_3
.LBB41_9:                               # %for.end
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_10
.LBB41_10:                              # %for.inc28
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_1
.LBB41_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB41_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB41_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB41_12 Depth=1
	movl	$0, -4(%rbp)
.LBB41_14:                              # %for.cond34
                                        #   Parent Loop BB41_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB41_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB41_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB41_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_18
.LBB41_17:                              # %if.else52
                                        #   in Loop: Header=BB41_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_18:                              # %if.end66
                                        #   in Loop: Header=BB41_14 Depth=2
	jmp	.LBB41_19
.LBB41_19:                              # %for.inc67
                                        #   in Loop: Header=BB41_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_14
.LBB41_20:                              # %for.end69
                                        #   in Loop: Header=BB41_12 Depth=1
	jmp	.LBB41_21
.LBB41_21:                              # %for.inc70
                                        #   in Loop: Header=BB41_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_12
.LBB41_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB41_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB41_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	$0, -4(%rbp)
.LBB41_25:                              # %for.cond76
                                        #   Parent Loop BB41_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB41_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB41_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB41_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_29
.LBB41_28:                              # %if.else94
                                        #   in Loop: Header=BB41_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_29:                              # %if.end108
                                        #   in Loop: Header=BB41_25 Depth=2
	jmp	.LBB41_30
.LBB41_30:                              # %for.inc109
                                        #   in Loop: Header=BB41_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_25
.LBB41_31:                              # %for.end111
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_32
.LBB41_32:                              # %for.inc112
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_23
.LBB41_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB41_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB41_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB41_34 Depth=1
	movl	$0, -4(%rbp)
.LBB41_36:                              # %for.cond118
                                        #   Parent Loop BB41_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB41_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB41_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB41_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_40
.LBB41_39:                              # %if.else136
                                        #   in Loop: Header=BB41_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_40:                              # %if.end150
                                        #   in Loop: Header=BB41_36 Depth=2
	jmp	.LBB41_41
.LBB41_41:                              # %for.inc151
                                        #   in Loop: Header=BB41_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_36
.LBB41_42:                              # %for.end153
                                        #   in Loop: Header=BB41_34 Depth=1
	jmp	.LBB41_43
.LBB41_43:                              # %for.inc154
                                        #   in Loop: Header=BB41_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_34
.LBB41_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB41_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB41_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB41_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB41_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_49
.LBB41_48:                              # %if.else172
                                        #   in Loop: Header=BB41_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_49:                              # %if.end183
                                        #   in Loop: Header=BB41_45 Depth=1
	jmp	.LBB41_50
.LBB41_50:                              # %for.inc184
                                        #   in Loop: Header=BB41_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_45
.LBB41_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB41_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB41_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB41_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB41_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_56
.LBB41_55:                              # %if.else202
                                        #   in Loop: Header=BB41_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_56:                              # %if.end213
                                        #   in Loop: Header=BB41_52 Depth=1
	jmp	.LBB41_57
.LBB41_57:                              # %for.inc214
                                        #   in Loop: Header=BB41_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_52
.LBB41_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB41_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB41_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB41_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB41_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_63
.LBB41_62:                              # %if.else232
                                        #   in Loop: Header=BB41_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_63:                              # %if.end243
                                        #   in Loop: Header=BB41_59 Depth=1
	jmp	.LBB41_64
.LBB41_64:                              # %for.inc244
                                        #   in Loop: Header=BB41_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_59
.LBB41_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB41_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB41_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB41_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB41_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_70
.LBB41_69:                              # %if.else262
                                        #   in Loop: Header=BB41_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_70:                              # %if.end273
                                        #   in Loop: Header=BB41_66 Depth=1
	jmp	.LBB41_71
.LBB41_71:                              # %for.inc274
                                        #   in Loop: Header=BB41_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_66
.LBB41_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB41_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB41_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB41_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB41_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_77
.LBB41_76:                              # %if.else292
                                        #   in Loop: Header=BB41_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_77:                              # %if.end303
                                        #   in Loop: Header=BB41_73 Depth=1
	jmp	.LBB41_78
.LBB41_78:                              # %for.inc304
                                        #   in Loop: Header=BB41_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_73
.LBB41_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB41_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB41_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	$0, -4(%rbp)
.LBB41_82:                              # %for.cond310
                                        #   Parent Loop BB41_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB41_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB41_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB41_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_86
.LBB41_85:                              # %if.else328
                                        #   in Loop: Header=BB41_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_86:                              # %if.end342
                                        #   in Loop: Header=BB41_82 Depth=2
	jmp	.LBB41_87
.LBB41_87:                              # %for.inc343
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_82
.LBB41_88:                              # %for.end345
                                        #   in Loop: Header=BB41_80 Depth=1
	jmp	.LBB41_89
.LBB41_89:                              # %for.inc346
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_80
.LBB41_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB41_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB41_91 Depth=1
	movl	$0, -4(%rbp)
.LBB41_93:                              # %for.cond352
                                        #   Parent Loop BB41_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB41_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB41_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB41_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_97
.LBB41_96:                              # %if.else370
                                        #   in Loop: Header=BB41_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_97:                              # %if.end384
                                        #   in Loop: Header=BB41_93 Depth=2
	jmp	.LBB41_98
.LBB41_98:                              # %for.inc385
                                        #   in Loop: Header=BB41_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_93
.LBB41_99:                              # %for.end387
                                        #   in Loop: Header=BB41_91 Depth=1
	jmp	.LBB41_100
.LBB41_100:                             # %for.inc388
                                        #   in Loop: Header=BB41_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_91
.LBB41_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB41_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB41_102 Depth=1
	movl	$0, -4(%rbp)
.LBB41_104:                             # %for.cond394
                                        #   Parent Loop BB41_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB41_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB41_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_108
.LBB41_107:                             # %if.else412
                                        #   in Loop: Header=BB41_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_108:                             # %if.end426
                                        #   in Loop: Header=BB41_104 Depth=2
	jmp	.LBB41_109
.LBB41_109:                             # %for.inc427
                                        #   in Loop: Header=BB41_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_104
.LBB41_110:                             # %for.end429
                                        #   in Loop: Header=BB41_102 Depth=1
	jmp	.LBB41_111
.LBB41_111:                             # %for.inc430
                                        #   in Loop: Header=BB41_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_102
.LBB41_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB41_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB41_113 Depth=1
	movl	$0, -4(%rbp)
.LBB41_115:                             # %for.cond436
                                        #   Parent Loop BB41_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB41_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB41_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_119
.LBB41_118:                             # %if.else454
                                        #   in Loop: Header=BB41_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_119:                             # %if.end468
                                        #   in Loop: Header=BB41_115 Depth=2
	jmp	.LBB41_120
.LBB41_120:                             # %for.inc469
                                        #   in Loop: Header=BB41_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_115
.LBB41_121:                             # %for.end471
                                        #   in Loop: Header=BB41_113 Depth=1
	jmp	.LBB41_122
.LBB41_122:                             # %for.inc472
                                        #   in Loop: Header=BB41_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_113
.LBB41_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB41_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB41_124 Depth=1
	movl	$0, -4(%rbp)
.LBB41_126:                             # %for.cond478
                                        #   Parent Loop BB41_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB41_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB41_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB41_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_130
.LBB41_129:                             # %if.else496
                                        #   in Loop: Header=BB41_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_130:                             # %if.end510
                                        #   in Loop: Header=BB41_126 Depth=2
	jmp	.LBB41_131
.LBB41_131:                             # %for.inc511
                                        #   in Loop: Header=BB41_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_126
.LBB41_132:                             # %for.end513
                                        #   in Loop: Header=BB41_124 Depth=1
	jmp	.LBB41_133
.LBB41_133:                             # %for.inc514
                                        #   in Loop: Header=BB41_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_124
.LBB41_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB41_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	$0, -4(%rbp)
.LBB41_137:                             # %for.cond520
                                        #   Parent Loop BB41_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB41_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB41_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB41_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_141
.LBB41_140:                             # %if.else538
                                        #   in Loop: Header=BB41_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_141:                             # %if.end552
                                        #   in Loop: Header=BB41_137 Depth=2
	jmp	.LBB41_142
.LBB41_142:                             # %for.inc553
                                        #   in Loop: Header=BB41_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_137
.LBB41_143:                             # %for.end555
                                        #   in Loop: Header=BB41_135 Depth=1
	jmp	.LBB41_144
.LBB41_144:                             # %for.inc556
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_135
.LBB41_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB41_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB41_146 Depth=1
	movl	$0, -4(%rbp)
.LBB41_148:                             # %for.cond562
                                        #   Parent Loop BB41_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB41_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB41_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_152
.LBB41_151:                             # %if.else580
                                        #   in Loop: Header=BB41_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_152:                             # %if.end594
                                        #   in Loop: Header=BB41_148 Depth=2
	jmp	.LBB41_153
.LBB41_153:                             # %for.inc595
                                        #   in Loop: Header=BB41_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_148
.LBB41_154:                             # %for.end597
                                        #   in Loop: Header=BB41_146 Depth=1
	jmp	.LBB41_155
.LBB41_155:                             # %for.inc598
                                        #   in Loop: Header=BB41_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_146
.LBB41_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB41_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	$0, -4(%rbp)
.LBB41_159:                             # %for.cond604
                                        #   Parent Loop BB41_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB41_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB41_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_163
.LBB41_162:                             # %if.else622
                                        #   in Loop: Header=BB41_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_163:                             # %if.end636
                                        #   in Loop: Header=BB41_159 Depth=2
	jmp	.LBB41_164
.LBB41_164:                             # %for.inc637
                                        #   in Loop: Header=BB41_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_159
.LBB41_165:                             # %for.end639
                                        #   in Loop: Header=BB41_157 Depth=1
	jmp	.LBB41_166
.LBB41_166:                             # %for.inc640
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_157
.LBB41_167:                             # %for.end642
	cmpl	$820779137, -28(%rbp)   # imm = 0x30EC1881
	jne	.LBB41_169
.LBB41_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_168
.Lfunc_end41:
	.size	init_contexts.34, .Lfunc_end41-init_contexts.34
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.35       # -- Begin function store_contexts.35
	.p2align	4, 0x90
	.type	store_contexts.35,@function
store_contexts.35:                      # @store_contexts.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1567430750, -16(%rbp)  # imm = 0x5D6D185E
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB42_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB42_3
.LBB42_2:                               # %if.else
	jmp	.LBB42_3
.LBB42_3:                               # %if.end
	cmpl	$1567430750, -16(%rbp)  # imm = 0x5D6D185E
	jne	.LBB42_5
.LBB42_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_4
.Lfunc_end42:
	.size	store_contexts.35, .Lfunc_end42-store_contexts.35
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.36    # -- Begin function SetCtxModelNumber.36
	.p2align	4, 0x90
	.type	SetCtxModelNumber.36,@function
SetCtxModelNumber.36:                   # @SetCtxModelNumber.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1716054839, -16(%rbp)  # imm = 0x6648EB37
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB43_11
.LBB43_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB43_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB43_11
.LBB43_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB43_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB43_11
.LBB43_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB43_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB43_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB43_10
.LBB43_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB43_10:                              # %if.end38
	jmp	.LBB43_11
.LBB43_11:                              # %if.end39
	cmpl	$1716054839, -16(%rbp)  # imm = 0x6648EB37
	jne	.LBB43_13
.LBB43_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_12
.Lfunc_end43:
	.size	SetCtxModelNumber.36, .Lfunc_end43-SetCtxModelNumber.36
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.37        # -- Begin function init_contexts.37
	.p2align	4, 0x90
	.type	init_contexts.37,@function
init_contexts.37:                       # @init_contexts.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2134634121, -28(%rbp)  # imm = 0x7F3BEE89
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB44_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_3:                               # %for.cond2
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB44_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_7
.LBB44_6:                               # %if.else
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_7:                               # %if.end
                                        #   in Loop: Header=BB44_3 Depth=2
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_3
.LBB44_9:                               # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_10
.LBB44_10:                              # %for.inc28
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB44_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB44_12 Depth=1
	movl	$0, -4(%rbp)
.LBB44_14:                              # %for.cond34
                                        #   Parent Loop BB44_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB44_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB44_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB44_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_18
.LBB44_17:                              # %if.else52
                                        #   in Loop: Header=BB44_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_18:                              # %if.end66
                                        #   in Loop: Header=BB44_14 Depth=2
	jmp	.LBB44_19
.LBB44_19:                              # %for.inc67
                                        #   in Loop: Header=BB44_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_14
.LBB44_20:                              # %for.end69
                                        #   in Loop: Header=BB44_12 Depth=1
	jmp	.LBB44_21
.LBB44_21:                              # %for.inc70
                                        #   in Loop: Header=BB44_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_12
.LBB44_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB44_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	$0, -4(%rbp)
.LBB44_25:                              # %for.cond76
                                        #   Parent Loop BB44_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB44_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB44_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB44_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_29
.LBB44_28:                              # %if.else94
                                        #   in Loop: Header=BB44_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_29:                              # %if.end108
                                        #   in Loop: Header=BB44_25 Depth=2
	jmp	.LBB44_30
.LBB44_30:                              # %for.inc109
                                        #   in Loop: Header=BB44_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_25
.LBB44_31:                              # %for.end111
                                        #   in Loop: Header=BB44_23 Depth=1
	jmp	.LBB44_32
.LBB44_32:                              # %for.inc112
                                        #   in Loop: Header=BB44_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_23
.LBB44_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB44_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB44_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	$0, -4(%rbp)
.LBB44_36:                              # %for.cond118
                                        #   Parent Loop BB44_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB44_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB44_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB44_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_40
.LBB44_39:                              # %if.else136
                                        #   in Loop: Header=BB44_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_40:                              # %if.end150
                                        #   in Loop: Header=BB44_36 Depth=2
	jmp	.LBB44_41
.LBB44_41:                              # %for.inc151
                                        #   in Loop: Header=BB44_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_36
.LBB44_42:                              # %for.end153
                                        #   in Loop: Header=BB44_34 Depth=1
	jmp	.LBB44_43
.LBB44_43:                              # %for.inc154
                                        #   in Loop: Header=BB44_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_34
.LBB44_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB44_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB44_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB44_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB44_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_49
.LBB44_48:                              # %if.else172
                                        #   in Loop: Header=BB44_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_49:                              # %if.end183
                                        #   in Loop: Header=BB44_45 Depth=1
	jmp	.LBB44_50
.LBB44_50:                              # %for.inc184
                                        #   in Loop: Header=BB44_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_45
.LBB44_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB44_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB44_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB44_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB44_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_56
.LBB44_55:                              # %if.else202
                                        #   in Loop: Header=BB44_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_56:                              # %if.end213
                                        #   in Loop: Header=BB44_52 Depth=1
	jmp	.LBB44_57
.LBB44_57:                              # %for.inc214
                                        #   in Loop: Header=BB44_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_52
.LBB44_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB44_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB44_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB44_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB44_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_63
.LBB44_62:                              # %if.else232
                                        #   in Loop: Header=BB44_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_63:                              # %if.end243
                                        #   in Loop: Header=BB44_59 Depth=1
	jmp	.LBB44_64
.LBB44_64:                              # %for.inc244
                                        #   in Loop: Header=BB44_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_59
.LBB44_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB44_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB44_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB44_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB44_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_70
.LBB44_69:                              # %if.else262
                                        #   in Loop: Header=BB44_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_70:                              # %if.end273
                                        #   in Loop: Header=BB44_66 Depth=1
	jmp	.LBB44_71
.LBB44_71:                              # %for.inc274
                                        #   in Loop: Header=BB44_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_66
.LBB44_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB44_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB44_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB44_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB44_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_77
.LBB44_76:                              # %if.else292
                                        #   in Loop: Header=BB44_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_77:                              # %if.end303
                                        #   in Loop: Header=BB44_73 Depth=1
	jmp	.LBB44_78
.LBB44_78:                              # %for.inc304
                                        #   in Loop: Header=BB44_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_73
.LBB44_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB44_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB44_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB44_80 Depth=1
	movl	$0, -4(%rbp)
.LBB44_82:                              # %for.cond310
                                        #   Parent Loop BB44_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB44_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB44_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_86
.LBB44_85:                              # %if.else328
                                        #   in Loop: Header=BB44_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_86:                              # %if.end342
                                        #   in Loop: Header=BB44_82 Depth=2
	jmp	.LBB44_87
.LBB44_87:                              # %for.inc343
                                        #   in Loop: Header=BB44_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_82
.LBB44_88:                              # %for.end345
                                        #   in Loop: Header=BB44_80 Depth=1
	jmp	.LBB44_89
.LBB44_89:                              # %for.inc346
                                        #   in Loop: Header=BB44_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_80
.LBB44_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB44_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB44_91 Depth=1
	movl	$0, -4(%rbp)
.LBB44_93:                              # %for.cond352
                                        #   Parent Loop BB44_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB44_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB44_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_97
.LBB44_96:                              # %if.else370
                                        #   in Loop: Header=BB44_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_97:                              # %if.end384
                                        #   in Loop: Header=BB44_93 Depth=2
	jmp	.LBB44_98
.LBB44_98:                              # %for.inc385
                                        #   in Loop: Header=BB44_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_93
.LBB44_99:                              # %for.end387
                                        #   in Loop: Header=BB44_91 Depth=1
	jmp	.LBB44_100
.LBB44_100:                             # %for.inc388
                                        #   in Loop: Header=BB44_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_91
.LBB44_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB44_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB44_102 Depth=1
	movl	$0, -4(%rbp)
.LBB44_104:                             # %for.cond394
                                        #   Parent Loop BB44_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB44_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB44_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_108
.LBB44_107:                             # %if.else412
                                        #   in Loop: Header=BB44_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_108:                             # %if.end426
                                        #   in Loop: Header=BB44_104 Depth=2
	jmp	.LBB44_109
.LBB44_109:                             # %for.inc427
                                        #   in Loop: Header=BB44_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_104
.LBB44_110:                             # %for.end429
                                        #   in Loop: Header=BB44_102 Depth=1
	jmp	.LBB44_111
.LBB44_111:                             # %for.inc430
                                        #   in Loop: Header=BB44_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_102
.LBB44_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB44_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB44_113 Depth=1
	movl	$0, -4(%rbp)
.LBB44_115:                             # %for.cond436
                                        #   Parent Loop BB44_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB44_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB44_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_119
.LBB44_118:                             # %if.else454
                                        #   in Loop: Header=BB44_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_119:                             # %if.end468
                                        #   in Loop: Header=BB44_115 Depth=2
	jmp	.LBB44_120
.LBB44_120:                             # %for.inc469
                                        #   in Loop: Header=BB44_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_115
.LBB44_121:                             # %for.end471
                                        #   in Loop: Header=BB44_113 Depth=1
	jmp	.LBB44_122
.LBB44_122:                             # %for.inc472
                                        #   in Loop: Header=BB44_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_113
.LBB44_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB44_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB44_124 Depth=1
	movl	$0, -4(%rbp)
.LBB44_126:                             # %for.cond478
                                        #   Parent Loop BB44_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB44_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_130
.LBB44_129:                             # %if.else496
                                        #   in Loop: Header=BB44_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_130:                             # %if.end510
                                        #   in Loop: Header=BB44_126 Depth=2
	jmp	.LBB44_131
.LBB44_131:                             # %for.inc511
                                        #   in Loop: Header=BB44_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_126
.LBB44_132:                             # %for.end513
                                        #   in Loop: Header=BB44_124 Depth=1
	jmp	.LBB44_133
.LBB44_133:                             # %for.inc514
                                        #   in Loop: Header=BB44_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_124
.LBB44_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB44_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	$0, -4(%rbp)
.LBB44_137:                             # %for.cond520
                                        #   Parent Loop BB44_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB44_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB44_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB44_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_141
.LBB44_140:                             # %if.else538
                                        #   in Loop: Header=BB44_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_141:                             # %if.end552
                                        #   in Loop: Header=BB44_137 Depth=2
	jmp	.LBB44_142
.LBB44_142:                             # %for.inc553
                                        #   in Loop: Header=BB44_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_137
.LBB44_143:                             # %for.end555
                                        #   in Loop: Header=BB44_135 Depth=1
	jmp	.LBB44_144
.LBB44_144:                             # %for.inc556
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_135
.LBB44_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB44_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB44_146 Depth=1
	movl	$0, -4(%rbp)
.LBB44_148:                             # %for.cond562
                                        #   Parent Loop BB44_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB44_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB44_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_152
.LBB44_151:                             # %if.else580
                                        #   in Loop: Header=BB44_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_152:                             # %if.end594
                                        #   in Loop: Header=BB44_148 Depth=2
	jmp	.LBB44_153
.LBB44_153:                             # %for.inc595
                                        #   in Loop: Header=BB44_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_148
.LBB44_154:                             # %for.end597
                                        #   in Loop: Header=BB44_146 Depth=1
	jmp	.LBB44_155
.LBB44_155:                             # %for.inc598
                                        #   in Loop: Header=BB44_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_146
.LBB44_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB44_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB44_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB44_157 Depth=1
	movl	$0, -4(%rbp)
.LBB44_159:                             # %for.cond604
                                        #   Parent Loop BB44_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB44_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB44_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB44_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB44_163
.LBB44_162:                             # %if.else622
                                        #   in Loop: Header=BB44_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB44_163:                             # %if.end636
                                        #   in Loop: Header=BB44_159 Depth=2
	jmp	.LBB44_164
.LBB44_164:                             # %for.inc637
                                        #   in Loop: Header=BB44_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_159
.LBB44_165:                             # %for.end639
                                        #   in Loop: Header=BB44_157 Depth=1
	jmp	.LBB44_166
.LBB44_166:                             # %for.inc640
                                        #   in Loop: Header=BB44_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_157
.LBB44_167:                             # %for.end642
	cmpl	$2134634121, -28(%rbp)  # imm = 0x7F3BEE89
	jne	.LBB44_169
.LBB44_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_168
.Lfunc_end44:
	.size	init_contexts.37, .Lfunc_end44-init_contexts.37
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.38
.LCPI45_0:
	.quad	4607182418800017408     # double 1
.LCPI45_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI45_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI45_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.38
	.p2align	4, 0x90
	.type	XRate.38,@function
XRate.38:                               # @XRate.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$497744979, -36(%rbp)   # imm = 0x1DAAFC53
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB45_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB45_3
.LBB45_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB45_3:                               # %cond.end
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI45_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI45_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB45_6
.LBB45_5:                               # %cond.false6
	vmovsd	.LCPI45_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI45_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI45_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB45_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB45_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB45_9
.LBB45_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB45_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB45_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB45_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB45_13
.LBB45_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB45_13:                              # %cond.end26
	jmp	.LBB45_15
.LBB45_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB45_15
.LBB45_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB45_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB45_18
.LBB45_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB45_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$497744979, -36(%rbp)   # imm = 0x1DAAFC53
	jne	.LBB45_20
.LBB45_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB45_19
.Lfunc_end45:
	.size	XRate.38, .Lfunc_end45-XRate.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.39
.LCPI46_0:
	.quad	4607182418800017408     # double 1
.LCPI46_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI46_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI46_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.39
	.p2align	4, 0x90
	.type	XRate.39,@function
XRate.39:                               # @XRate.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$2140521201, -32(%rbp)  # imm = 0x7F95C2F1
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB46_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB46_3
.LBB46_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB46_3:                               # %cond.end
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI46_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI46_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI46_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB46_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB46_6
.LBB46_5:                               # %cond.false6
	vmovsd	.LCPI46_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI46_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI46_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB46_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB46_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB46_9
.LBB46_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB46_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB46_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB46_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB46_13
.LBB46_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB46_13:                              # %cond.end26
	jmp	.LBB46_15
.LBB46_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB46_15
.LBB46_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB46_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB46_18
.LBB46_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB46_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2140521201, -32(%rbp)  # imm = 0x7F95C2F1
	jne	.LBB46_20
.LBB46_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB46_19
.Lfunc_end46:
	.size	XRate.39, .Lfunc_end46-XRate.39
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.40
.LCPI47_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.40
	.p2align	4, 0x90
	.type	GetCtxModelNumber.40,@function
GetCtxModelNumber.40:                   # @GetCtxModelNumber.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$640514993, -48(%rbp)   # imm = 0x262D7BB1
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
                                        #       Child Loop BB47_5 Depth 3
                                        #     Child Loop BB47_14 Depth 2
                                        #       Child Loop BB47_16 Depth 3
                                        #     Child Loop BB47_25 Depth 2
                                        #       Child Loop BB47_27 Depth 3
                                        #     Child Loop BB47_36 Depth 2
                                        #       Child Loop BB47_38 Depth 3
                                        #     Child Loop BB47_47 Depth 2
                                        #     Child Loop BB47_54 Depth 2
                                        #     Child Loop BB47_61 Depth 2
                                        #     Child Loop BB47_68 Depth 2
                                        #     Child Loop BB47_75 Depth 2
                                        #     Child Loop BB47_82 Depth 2
                                        #       Child Loop BB47_84 Depth 3
                                        #     Child Loop BB47_93 Depth 2
                                        #       Child Loop BB47_95 Depth 3
                                        #     Child Loop BB47_104 Depth 2
                                        #       Child Loop BB47_106 Depth 3
                                        #     Child Loop BB47_115 Depth 2
                                        #       Child Loop BB47_117 Depth 3
                                        #     Child Loop BB47_126 Depth 2
                                        #       Child Loop BB47_128 Depth 3
                                        #     Child Loop BB47_137 Depth 2
                                        #       Child Loop BB47_139 Depth 3
                                        #     Child Loop BB47_148 Depth 2
                                        #       Child Loop BB47_150 Depth 3
                                        #     Child Loop BB47_159 Depth 2
                                        #       Child Loop BB47_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB47_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB47_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	$0, -4(%rbp)
.LBB47_5:                               # %for.cond5
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB47_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_9
.LBB47_8:                               # %if.else
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_9:                               # %if.end
                                        #   in Loop: Header=BB47_5 Depth=3
	jmp	.LBB47_10
.LBB47_10:                              # %for.inc
                                        #   in Loop: Header=BB47_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_5
.LBB47_11:                              # %for.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_12
.LBB47_12:                              # %for.inc33
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_3
.LBB47_13:                              # %for.end35
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_14:                              # %for.cond36
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	$0, -4(%rbp)
.LBB47_16:                              # %for.cond39
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB47_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_20
.LBB47_19:                              # %if.else58
                                        #   in Loop: Header=BB47_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_20:                              # %if.end73
                                        #   in Loop: Header=BB47_16 Depth=3
	jmp	.LBB47_21
.LBB47_21:                              # %for.inc74
                                        #   in Loop: Header=BB47_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_16
.LBB47_22:                              # %for.end76
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_23
.LBB47_23:                              # %for.inc77
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_14
.LBB47_24:                              # %for.end79
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_25:                              # %for.cond80
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	$0, -4(%rbp)
.LBB47_27:                              # %for.cond83
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB47_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_31
.LBB47_30:                              # %if.else102
                                        #   in Loop: Header=BB47_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_31:                              # %if.end117
                                        #   in Loop: Header=BB47_27 Depth=3
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc118
                                        #   in Loop: Header=BB47_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_27
.LBB47_33:                              # %for.end120
                                        #   in Loop: Header=BB47_25 Depth=2
	jmp	.LBB47_34
.LBB47_34:                              # %for.inc121
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_25
.LBB47_35:                              # %for.end123
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_36:                              # %for.cond124
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB47_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	$0, -4(%rbp)
.LBB47_38:                              # %for.cond127
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB47_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_42
.LBB47_41:                              # %if.else146
                                        #   in Loop: Header=BB47_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_42:                              # %if.end161
                                        #   in Loop: Header=BB47_38 Depth=3
	jmp	.LBB47_43
.LBB47_43:                              # %for.inc162
                                        #   in Loop: Header=BB47_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_38
.LBB47_44:                              # %for.end164
                                        #   in Loop: Header=BB47_36 Depth=2
	jmp	.LBB47_45
.LBB47_45:                              # %for.inc165
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_36
.LBB47_46:                              # %for.end167
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_47:                              # %for.cond168
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_51
.LBB47_50:                              # %if.else184
                                        #   in Loop: Header=BB47_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_51:                              # %if.end196
                                        #   in Loop: Header=BB47_47 Depth=2
	jmp	.LBB47_52
.LBB47_52:                              # %for.inc197
                                        #   in Loop: Header=BB47_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_47
.LBB47_53:                              # %for.end199
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_54:                              # %for.cond200
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_58
.LBB47_57:                              # %if.else216
                                        #   in Loop: Header=BB47_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_58:                              # %if.end228
                                        #   in Loop: Header=BB47_54 Depth=2
	jmp	.LBB47_59
.LBB47_59:                              # %for.inc229
                                        #   in Loop: Header=BB47_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_54
.LBB47_60:                              # %for.end231
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_61:                              # %for.cond232
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB47_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_65
.LBB47_64:                              # %if.else248
                                        #   in Loop: Header=BB47_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_65:                              # %if.end260
                                        #   in Loop: Header=BB47_61 Depth=2
	jmp	.LBB47_66
.LBB47_66:                              # %for.inc261
                                        #   in Loop: Header=BB47_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_61
.LBB47_67:                              # %for.end263
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_68:                              # %for.cond264
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB47_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_72
.LBB47_71:                              # %if.else280
                                        #   in Loop: Header=BB47_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_72:                              # %if.end292
                                        #   in Loop: Header=BB47_68 Depth=2
	jmp	.LBB47_73
.LBB47_73:                              # %for.inc293
                                        #   in Loop: Header=BB47_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_68
.LBB47_74:                              # %for.end295
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_75:                              # %for.cond296
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_79
.LBB47_78:                              # %if.else312
                                        #   in Loop: Header=BB47_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_79:                              # %if.end324
                                        #   in Loop: Header=BB47_75 Depth=2
	jmp	.LBB47_80
.LBB47_80:                              # %for.inc325
                                        #   in Loop: Header=BB47_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_75
.LBB47_81:                              # %for.end327
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_82:                              # %for.cond328
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB47_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	$0, -4(%rbp)
.LBB47_84:                              # %for.cond331
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB47_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_88
.LBB47_87:                              # %if.else350
                                        #   in Loop: Header=BB47_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_88:                              # %if.end365
                                        #   in Loop: Header=BB47_84 Depth=3
	jmp	.LBB47_89
.LBB47_89:                              # %for.inc366
                                        #   in Loop: Header=BB47_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_84
.LBB47_90:                              # %for.end368
                                        #   in Loop: Header=BB47_82 Depth=2
	jmp	.LBB47_91
.LBB47_91:                              # %for.inc369
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_82
.LBB47_92:                              # %for.end371
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_93:                              # %for.cond372
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	$0, -4(%rbp)
.LBB47_95:                              # %for.cond375
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB47_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_99
.LBB47_98:                              # %if.else394
                                        #   in Loop: Header=BB47_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_99:                              # %if.end409
                                        #   in Loop: Header=BB47_95 Depth=3
	jmp	.LBB47_100
.LBB47_100:                             # %for.inc410
                                        #   in Loop: Header=BB47_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_95
.LBB47_101:                             # %for.end412
                                        #   in Loop: Header=BB47_93 Depth=2
	jmp	.LBB47_102
.LBB47_102:                             # %for.inc413
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_93
.LBB47_103:                             # %for.end415
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_104:                             # %for.cond416
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	$0, -4(%rbp)
.LBB47_106:                             # %for.cond419
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_110
.LBB47_109:                             # %if.else438
                                        #   in Loop: Header=BB47_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_110:                             # %if.end453
                                        #   in Loop: Header=BB47_106 Depth=3
	jmp	.LBB47_111
.LBB47_111:                             # %for.inc454
                                        #   in Loop: Header=BB47_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_106
.LBB47_112:                             # %for.end456
                                        #   in Loop: Header=BB47_104 Depth=2
	jmp	.LBB47_113
.LBB47_113:                             # %for.inc457
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_104
.LBB47_114:                             # %for.end459
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_115:                             # %for.cond460
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	$0, -4(%rbp)
.LBB47_117:                             # %for.cond463
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_121
.LBB47_120:                             # %if.else482
                                        #   in Loop: Header=BB47_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_121:                             # %if.end497
                                        #   in Loop: Header=BB47_117 Depth=3
	jmp	.LBB47_122
.LBB47_122:                             # %for.inc498
                                        #   in Loop: Header=BB47_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_117
.LBB47_123:                             # %for.end500
                                        #   in Loop: Header=BB47_115 Depth=2
	jmp	.LBB47_124
.LBB47_124:                             # %for.inc501
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_115
.LBB47_125:                             # %for.end503
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_126:                             # %for.cond504
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	$0, -4(%rbp)
.LBB47_128:                             # %for.cond507
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB47_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_132
.LBB47_131:                             # %if.else526
                                        #   in Loop: Header=BB47_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_132:                             # %if.end541
                                        #   in Loop: Header=BB47_128 Depth=3
	jmp	.LBB47_133
.LBB47_133:                             # %for.inc542
                                        #   in Loop: Header=BB47_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_128
.LBB47_134:                             # %for.end544
                                        #   in Loop: Header=BB47_126 Depth=2
	jmp	.LBB47_135
.LBB47_135:                             # %for.inc545
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_126
.LBB47_136:                             # %for.end547
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_137:                             # %for.cond548
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	$0, -4(%rbp)
.LBB47_139:                             # %for.cond551
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB47_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_143
.LBB47_142:                             # %if.else570
                                        #   in Loop: Header=BB47_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_143:                             # %if.end585
                                        #   in Loop: Header=BB47_139 Depth=3
	jmp	.LBB47_144
.LBB47_144:                             # %for.inc586
                                        #   in Loop: Header=BB47_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_139
.LBB47_145:                             # %for.end588
                                        #   in Loop: Header=BB47_137 Depth=2
	jmp	.LBB47_146
.LBB47_146:                             # %for.inc589
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_137
.LBB47_147:                             # %for.end591
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_148:                             # %for.cond592
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	$0, -4(%rbp)
.LBB47_150:                             # %for.cond595
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_154
.LBB47_153:                             # %if.else614
                                        #   in Loop: Header=BB47_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_154:                             # %if.end629
                                        #   in Loop: Header=BB47_150 Depth=3
	jmp	.LBB47_155
.LBB47_155:                             # %for.inc630
                                        #   in Loop: Header=BB47_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_150
.LBB47_156:                             # %for.end632
                                        #   in Loop: Header=BB47_148 Depth=2
	jmp	.LBB47_157
.LBB47_157:                             # %for.inc633
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_148
.LBB47_158:                             # %for.end635
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_159:                             # %for.cond636
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB47_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	$0, -4(%rbp)
.LBB47_161:                             # %for.cond639
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB47_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB47_165
.LBB47_164:                             # %if.else658
                                        #   in Loop: Header=BB47_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB47_165:                             # %if.end673
                                        #   in Loop: Header=BB47_161 Depth=3
	jmp	.LBB47_166
.LBB47_166:                             # %for.inc674
                                        #   in Loop: Header=BB47_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_161
.LBB47_167:                             # %for.end676
                                        #   in Loop: Header=BB47_159 Depth=2
	jmp	.LBB47_168
.LBB47_168:                             # %for.inc677
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_159
.LBB47_169:                             # %for.end679
                                        #   in Loop: Header=BB47_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB47_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB47_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB47_171:                             # %if.end682
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_172
.LBB47_172:                             # %for.inc683
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_1
.LBB47_173:                             # %for.end685
	cmpl	$640514993, -48(%rbp)   # imm = 0x262D7BB1
	jne	.LBB47_175
.LBB47_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_174
.Lfunc_end47:
	.size	GetCtxModelNumber.40, .Lfunc_end47-GetCtxModelNumber.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.41
.LCPI48_0:
	.quad	4611686018427387904     # double 2
.LCPI48_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.41
	.p2align	4, 0x90
	.type	create_context_memory.41,@function
create_context_memory.41:               # @create_context_memory.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1535483839, -20(%rbp)  # imm = 0x5B859FBF
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB48_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB48_3
.LBB48_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB48_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB48_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB48_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB48_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB48_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB48_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB48_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB48_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB48_11:                              # %if.end10
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB48_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB48_13:                              # %if.end16
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	$0, -8(%rbp)
.LBB48_14:                              # %for.cond17
                                        #   Parent Loop BB48_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB48_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB48_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB48_17:                              # %if.end28
                                        #   in Loop: Header=BB48_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB48_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB48_19:                              # %if.end39
                                        #   in Loop: Header=BB48_14 Depth=2
	jmp	.LBB48_20
.LBB48_20:                              # %for.inc
                                        #   in Loop: Header=BB48_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_14
.LBB48_21:                              # %for.end
                                        #   in Loop: Header=BB48_8 Depth=1
	jmp	.LBB48_22
.LBB48_22:                              # %for.inc40
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_8
.LBB48_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB48_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_26 Depth 2
                                        #       Child Loop BB48_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB48_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB48_24 Depth=1
	movl	$0, -8(%rbp)
.LBB48_26:                              # %for.cond47
                                        #   Parent Loop BB48_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB48_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB48_26 Depth=2
	movl	$0, -12(%rbp)
.LBB48_28:                              # %for.cond51
                                        #   Parent Loop BB48_24 Depth=1
                                        #     Parent Loop BB48_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB48_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB48_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB48_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_28
.LBB48_31:                              # %for.end63
                                        #   in Loop: Header=BB48_26 Depth=2
	jmp	.LBB48_32
.LBB48_32:                              # %for.inc64
                                        #   in Loop: Header=BB48_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_26
.LBB48_33:                              # %for.end66
                                        #   in Loop: Header=BB48_24 Depth=1
	jmp	.LBB48_34
.LBB48_34:                              # %for.inc67
                                        #   in Loop: Header=BB48_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_24
.LBB48_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB48_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB48_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB48_36 Depth=1
	vmovsd	.LCPI48_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB48_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_36
.LBB48_39:                              # %for.end98
	cmpl	$1535483839, -20(%rbp)  # imm = 0x5B859FBF
	jne	.LBB48_41
.LBB48_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_40
.Lfunc_end48:
	.size	create_context_memory.41, .Lfunc_end48-create_context_memory.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.42
.LCPI49_0:
	.quad	4607182418800017408     # double 1
.LCPI49_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI49_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI49_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.42
	.p2align	4, 0x90
	.type	XRate.42,@function
XRate.42:                               # @XRate.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$676175425, -36(%rbp)   # imm = 0x284D9E41
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB49_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB49_3
.LBB49_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB49_3:                               # %cond.end
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI49_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI49_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI49_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB49_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB49_6
.LBB49_5:                               # %cond.false6
	vmovsd	.LCPI49_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI49_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI49_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB49_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB49_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB49_9
.LBB49_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB49_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB49_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB49_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB49_13
.LBB49_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB49_13:                              # %cond.end26
	jmp	.LBB49_15
.LBB49_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB49_15
.LBB49_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB49_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB49_18
.LBB49_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB49_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$676175425, -36(%rbp)   # imm = 0x284D9E41
	jne	.LBB49_20
.LBB49_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB49_19
.Lfunc_end49:
	.size	XRate.42, .Lfunc_end49-XRate.42
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.43
.LCPI50_0:
	.quad	4611686018427387904     # double 2
.LCPI50_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.43
	.p2align	4, 0x90
	.type	create_context_memory.43,@function
create_context_memory.43:               # @create_context_memory.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$339792451, -20(%rbp)   # imm = 0x1440D243
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB50_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB50_3
.LBB50_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB50_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB50_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB50_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB50_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB50_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB50_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB50_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB50_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB50_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB50_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB50_11:                              # %if.end10
                                        #   in Loop: Header=BB50_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB50_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB50_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB50_13:                              # %if.end16
                                        #   in Loop: Header=BB50_8 Depth=1
	movl	$0, -8(%rbp)
.LBB50_14:                              # %for.cond17
                                        #   Parent Loop BB50_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB50_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB50_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB50_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB50_17:                              # %if.end28
                                        #   in Loop: Header=BB50_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB50_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB50_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB50_19:                              # %if.end39
                                        #   in Loop: Header=BB50_14 Depth=2
	jmp	.LBB50_20
.LBB50_20:                              # %for.inc
                                        #   in Loop: Header=BB50_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_14
.LBB50_21:                              # %for.end
                                        #   in Loop: Header=BB50_8 Depth=1
	jmp	.LBB50_22
.LBB50_22:                              # %for.inc40
                                        #   in Loop: Header=BB50_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_8
.LBB50_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB50_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_26 Depth 2
                                        #       Child Loop BB50_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB50_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB50_24 Depth=1
	movl	$0, -8(%rbp)
.LBB50_26:                              # %for.cond47
                                        #   Parent Loop BB50_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB50_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB50_26 Depth=2
	movl	$0, -12(%rbp)
.LBB50_28:                              # %for.cond51
                                        #   Parent Loop BB50_24 Depth=1
                                        #     Parent Loop BB50_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB50_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB50_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB50_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_28
.LBB50_31:                              # %for.end63
                                        #   in Loop: Header=BB50_26 Depth=2
	jmp	.LBB50_32
.LBB50_32:                              # %for.inc64
                                        #   in Loop: Header=BB50_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_26
.LBB50_33:                              # %for.end66
                                        #   in Loop: Header=BB50_24 Depth=1
	jmp	.LBB50_34
.LBB50_34:                              # %for.inc67
                                        #   in Loop: Header=BB50_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_24
.LBB50_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB50_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB50_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB50_36 Depth=1
	vmovsd	.LCPI50_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB50_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_36
.LBB50_39:                              # %for.end98
	cmpl	$339792451, -20(%rbp)   # imm = 0x1440D243
	jne	.LBB50_41
.LBB50_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_40
.Lfunc_end50:
	.size	create_context_memory.43, .Lfunc_end50-create_context_memory.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.44
.LCPI51_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.44
	.p2align	4, 0x90
	.type	GetCtxModelNumber.44,@function
GetCtxModelNumber.44:                   # @GetCtxModelNumber.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1145564910, -48(%rbp)  # imm = 0x4447EEEE
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
                                        #       Child Loop BB51_5 Depth 3
                                        #     Child Loop BB51_14 Depth 2
                                        #       Child Loop BB51_16 Depth 3
                                        #     Child Loop BB51_25 Depth 2
                                        #       Child Loop BB51_27 Depth 3
                                        #     Child Loop BB51_36 Depth 2
                                        #       Child Loop BB51_38 Depth 3
                                        #     Child Loop BB51_47 Depth 2
                                        #     Child Loop BB51_54 Depth 2
                                        #     Child Loop BB51_61 Depth 2
                                        #     Child Loop BB51_68 Depth 2
                                        #     Child Loop BB51_75 Depth 2
                                        #     Child Loop BB51_82 Depth 2
                                        #       Child Loop BB51_84 Depth 3
                                        #     Child Loop BB51_93 Depth 2
                                        #       Child Loop BB51_95 Depth 3
                                        #     Child Loop BB51_104 Depth 2
                                        #       Child Loop BB51_106 Depth 3
                                        #     Child Loop BB51_115 Depth 2
                                        #       Child Loop BB51_117 Depth 3
                                        #     Child Loop BB51_126 Depth 2
                                        #       Child Loop BB51_128 Depth 3
                                        #     Child Loop BB51_137 Depth 2
                                        #       Child Loop BB51_139 Depth 3
                                        #     Child Loop BB51_148 Depth 2
                                        #       Child Loop BB51_150 Depth 3
                                        #     Child Loop BB51_159 Depth 2
                                        #       Child Loop BB51_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB51_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB51_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$0, -4(%rbp)
.LBB51_5:                               # %for.cond5
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB51_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_9
.LBB51_8:                               # %if.else
                                        #   in Loop: Header=BB51_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_9:                               # %if.end
                                        #   in Loop: Header=BB51_5 Depth=3
	jmp	.LBB51_10
.LBB51_10:                              # %for.inc
                                        #   in Loop: Header=BB51_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_5
.LBB51_11:                              # %for.end
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_12
.LBB51_12:                              # %for.inc33
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_13:                              # %for.end35
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_14:                              # %for.cond36
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	$0, -4(%rbp)
.LBB51_16:                              # %for.cond39
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB51_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_20
.LBB51_19:                              # %if.else58
                                        #   in Loop: Header=BB51_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_20:                              # %if.end73
                                        #   in Loop: Header=BB51_16 Depth=3
	jmp	.LBB51_21
.LBB51_21:                              # %for.inc74
                                        #   in Loop: Header=BB51_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_16
.LBB51_22:                              # %for.end76
                                        #   in Loop: Header=BB51_14 Depth=2
	jmp	.LBB51_23
.LBB51_23:                              # %for.inc77
                                        #   in Loop: Header=BB51_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_14
.LBB51_24:                              # %for.end79
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_25:                              # %for.cond80
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB51_25 Depth=2
	movl	$0, -4(%rbp)
.LBB51_27:                              # %for.cond83
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB51_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_31
.LBB51_30:                              # %if.else102
                                        #   in Loop: Header=BB51_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_31:                              # %if.end117
                                        #   in Loop: Header=BB51_27 Depth=3
	jmp	.LBB51_32
.LBB51_32:                              # %for.inc118
                                        #   in Loop: Header=BB51_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_27
.LBB51_33:                              # %for.end120
                                        #   in Loop: Header=BB51_25 Depth=2
	jmp	.LBB51_34
.LBB51_34:                              # %for.inc121
                                        #   in Loop: Header=BB51_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_25
.LBB51_35:                              # %for.end123
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_36:                              # %for.cond124
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB51_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	$0, -4(%rbp)
.LBB51_38:                              # %for.cond127
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB51_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_42
.LBB51_41:                              # %if.else146
                                        #   in Loop: Header=BB51_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_42:                              # %if.end161
                                        #   in Loop: Header=BB51_38 Depth=3
	jmp	.LBB51_43
.LBB51_43:                              # %for.inc162
                                        #   in Loop: Header=BB51_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_38
.LBB51_44:                              # %for.end164
                                        #   in Loop: Header=BB51_36 Depth=2
	jmp	.LBB51_45
.LBB51_45:                              # %for.inc165
                                        #   in Loop: Header=BB51_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_36
.LBB51_46:                              # %for.end167
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_47:                              # %for.cond168
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_51
.LBB51_50:                              # %if.else184
                                        #   in Loop: Header=BB51_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_51:                              # %if.end196
                                        #   in Loop: Header=BB51_47 Depth=2
	jmp	.LBB51_52
.LBB51_52:                              # %for.inc197
                                        #   in Loop: Header=BB51_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_47
.LBB51_53:                              # %for.end199
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_54:                              # %for.cond200
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_58
.LBB51_57:                              # %if.else216
                                        #   in Loop: Header=BB51_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_58:                              # %if.end228
                                        #   in Loop: Header=BB51_54 Depth=2
	jmp	.LBB51_59
.LBB51_59:                              # %for.inc229
                                        #   in Loop: Header=BB51_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_54
.LBB51_60:                              # %for.end231
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_61:                              # %for.cond232
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB51_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_65
.LBB51_64:                              # %if.else248
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_65:                              # %if.end260
                                        #   in Loop: Header=BB51_61 Depth=2
	jmp	.LBB51_66
.LBB51_66:                              # %for.inc261
                                        #   in Loop: Header=BB51_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_61
.LBB51_67:                              # %for.end263
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_68:                              # %for.cond264
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB51_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_72
.LBB51_71:                              # %if.else280
                                        #   in Loop: Header=BB51_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_72:                              # %if.end292
                                        #   in Loop: Header=BB51_68 Depth=2
	jmp	.LBB51_73
.LBB51_73:                              # %for.inc293
                                        #   in Loop: Header=BB51_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_68
.LBB51_74:                              # %for.end295
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -4(%rbp)
.LBB51_75:                              # %for.cond296
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_79
.LBB51_78:                              # %if.else312
                                        #   in Loop: Header=BB51_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_79:                              # %if.end324
                                        #   in Loop: Header=BB51_75 Depth=2
	jmp	.LBB51_80
.LBB51_80:                              # %for.inc325
                                        #   in Loop: Header=BB51_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_75
.LBB51_81:                              # %for.end327
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_82:                              # %for.cond328
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB51_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	$0, -4(%rbp)
.LBB51_84:                              # %for.cond331
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB51_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_88
.LBB51_87:                              # %if.else350
                                        #   in Loop: Header=BB51_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_88:                              # %if.end365
                                        #   in Loop: Header=BB51_84 Depth=3
	jmp	.LBB51_89
.LBB51_89:                              # %for.inc366
                                        #   in Loop: Header=BB51_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_84
.LBB51_90:                              # %for.end368
                                        #   in Loop: Header=BB51_82 Depth=2
	jmp	.LBB51_91
.LBB51_91:                              # %for.inc369
                                        #   in Loop: Header=BB51_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_82
.LBB51_92:                              # %for.end371
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_93:                              # %for.cond372
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB51_93 Depth=2
	movl	$0, -4(%rbp)
.LBB51_95:                              # %for.cond375
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB51_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_99
.LBB51_98:                              # %if.else394
                                        #   in Loop: Header=BB51_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_99:                              # %if.end409
                                        #   in Loop: Header=BB51_95 Depth=3
	jmp	.LBB51_100
.LBB51_100:                             # %for.inc410
                                        #   in Loop: Header=BB51_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_95
.LBB51_101:                             # %for.end412
                                        #   in Loop: Header=BB51_93 Depth=2
	jmp	.LBB51_102
.LBB51_102:                             # %for.inc413
                                        #   in Loop: Header=BB51_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_93
.LBB51_103:                             # %for.end415
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_104:                             # %for.cond416
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB51_104 Depth=2
	movl	$0, -4(%rbp)
.LBB51_106:                             # %for.cond419
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_110
.LBB51_109:                             # %if.else438
                                        #   in Loop: Header=BB51_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_110:                             # %if.end453
                                        #   in Loop: Header=BB51_106 Depth=3
	jmp	.LBB51_111
.LBB51_111:                             # %for.inc454
                                        #   in Loop: Header=BB51_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_106
.LBB51_112:                             # %for.end456
                                        #   in Loop: Header=BB51_104 Depth=2
	jmp	.LBB51_113
.LBB51_113:                             # %for.inc457
                                        #   in Loop: Header=BB51_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_104
.LBB51_114:                             # %for.end459
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_115:                             # %for.cond460
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB51_115 Depth=2
	movl	$0, -4(%rbp)
.LBB51_117:                             # %for.cond463
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_121
.LBB51_120:                             # %if.else482
                                        #   in Loop: Header=BB51_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_121:                             # %if.end497
                                        #   in Loop: Header=BB51_117 Depth=3
	jmp	.LBB51_122
.LBB51_122:                             # %for.inc498
                                        #   in Loop: Header=BB51_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_117
.LBB51_123:                             # %for.end500
                                        #   in Loop: Header=BB51_115 Depth=2
	jmp	.LBB51_124
.LBB51_124:                             # %for.inc501
                                        #   in Loop: Header=BB51_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_115
.LBB51_125:                             # %for.end503
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_126:                             # %for.cond504
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB51_126 Depth=2
	movl	$0, -4(%rbp)
.LBB51_128:                             # %for.cond507
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB51_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_132
.LBB51_131:                             # %if.else526
                                        #   in Loop: Header=BB51_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_132:                             # %if.end541
                                        #   in Loop: Header=BB51_128 Depth=3
	jmp	.LBB51_133
.LBB51_133:                             # %for.inc542
                                        #   in Loop: Header=BB51_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_128
.LBB51_134:                             # %for.end544
                                        #   in Loop: Header=BB51_126 Depth=2
	jmp	.LBB51_135
.LBB51_135:                             # %for.inc545
                                        #   in Loop: Header=BB51_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_126
.LBB51_136:                             # %for.end547
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_137:                             # %for.cond548
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB51_137 Depth=2
	movl	$0, -4(%rbp)
.LBB51_139:                             # %for.cond551
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB51_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_143
.LBB51_142:                             # %if.else570
                                        #   in Loop: Header=BB51_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_143:                             # %if.end585
                                        #   in Loop: Header=BB51_139 Depth=3
	jmp	.LBB51_144
.LBB51_144:                             # %for.inc586
                                        #   in Loop: Header=BB51_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_139
.LBB51_145:                             # %for.end588
                                        #   in Loop: Header=BB51_137 Depth=2
	jmp	.LBB51_146
.LBB51_146:                             # %for.inc589
                                        #   in Loop: Header=BB51_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_137
.LBB51_147:                             # %for.end591
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_148:                             # %for.cond592
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB51_148 Depth=2
	movl	$0, -4(%rbp)
.LBB51_150:                             # %for.cond595
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_154
.LBB51_153:                             # %if.else614
                                        #   in Loop: Header=BB51_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_154:                             # %if.end629
                                        #   in Loop: Header=BB51_150 Depth=3
	jmp	.LBB51_155
.LBB51_155:                             # %for.inc630
                                        #   in Loop: Header=BB51_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_150
.LBB51_156:                             # %for.end632
                                        #   in Loop: Header=BB51_148 Depth=2
	jmp	.LBB51_157
.LBB51_157:                             # %for.inc633
                                        #   in Loop: Header=BB51_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_148
.LBB51_158:                             # %for.end635
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_159:                             # %for.cond636
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB51_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB51_159 Depth=2
	movl	$0, -4(%rbp)
.LBB51_161:                             # %for.cond639
                                        #   Parent Loop BB51_1 Depth=1
                                        #     Parent Loop BB51_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB51_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB51_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB51_165
.LBB51_164:                             # %if.else658
                                        #   in Loop: Header=BB51_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB51_165:                             # %if.end673
                                        #   in Loop: Header=BB51_161 Depth=3
	jmp	.LBB51_166
.LBB51_166:                             # %for.inc674
                                        #   in Loop: Header=BB51_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_161
.LBB51_167:                             # %for.end676
                                        #   in Loop: Header=BB51_159 Depth=2
	jmp	.LBB51_168
.LBB51_168:                             # %for.inc677
                                        #   in Loop: Header=BB51_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_159
.LBB51_169:                             # %for.end679
                                        #   in Loop: Header=BB51_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB51_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB51_171:                             # %if.end682
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_172
.LBB51_172:                             # %for.inc683
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_173:                             # %for.end685
	cmpl	$1145564910, -48(%rbp)  # imm = 0x4447EEEE
	jne	.LBB51_175
.LBB51_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_174
.Lfunc_end51:
	.size	GetCtxModelNumber.44, .Lfunc_end51-GetCtxModelNumber.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.45
.LCPI52_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.45
	.p2align	4, 0x90
	.type	GetCtxModelNumber.45,@function
GetCtxModelNumber.45:                   # @GetCtxModelNumber.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$577573430, -48(%rbp)   # imm = 0x226D1236
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_3 Depth 2
                                        #       Child Loop BB52_5 Depth 3
                                        #     Child Loop BB52_14 Depth 2
                                        #       Child Loop BB52_16 Depth 3
                                        #     Child Loop BB52_25 Depth 2
                                        #       Child Loop BB52_27 Depth 3
                                        #     Child Loop BB52_36 Depth 2
                                        #       Child Loop BB52_38 Depth 3
                                        #     Child Loop BB52_47 Depth 2
                                        #     Child Loop BB52_54 Depth 2
                                        #     Child Loop BB52_61 Depth 2
                                        #     Child Loop BB52_68 Depth 2
                                        #     Child Loop BB52_75 Depth 2
                                        #     Child Loop BB52_82 Depth 2
                                        #       Child Loop BB52_84 Depth 3
                                        #     Child Loop BB52_93 Depth 2
                                        #       Child Loop BB52_95 Depth 3
                                        #     Child Loop BB52_104 Depth 2
                                        #       Child Loop BB52_106 Depth 3
                                        #     Child Loop BB52_115 Depth 2
                                        #       Child Loop BB52_117 Depth 3
                                        #     Child Loop BB52_126 Depth 2
                                        #       Child Loop BB52_128 Depth 3
                                        #     Child Loop BB52_137 Depth 2
                                        #       Child Loop BB52_139 Depth 3
                                        #     Child Loop BB52_148 Depth 2
                                        #       Child Loop BB52_150 Depth 3
                                        #     Child Loop BB52_159 Depth 2
                                        #       Child Loop BB52_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB52_3:                               # %for.cond2
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB52_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	$0, -4(%rbp)
.LBB52_5:                               # %for.cond5
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB52_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_9
.LBB52_8:                               # %if.else
                                        #   in Loop: Header=BB52_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_9:                               # %if.end
                                        #   in Loop: Header=BB52_5 Depth=3
	jmp	.LBB52_10
.LBB52_10:                              # %for.inc
                                        #   in Loop: Header=BB52_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_5
.LBB52_11:                              # %for.end
                                        #   in Loop: Header=BB52_3 Depth=2
	jmp	.LBB52_12
.LBB52_12:                              # %for.inc33
                                        #   in Loop: Header=BB52_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_3
.LBB52_13:                              # %for.end35
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_14:                              # %for.cond36
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB52_14 Depth=2
	movl	$0, -4(%rbp)
.LBB52_16:                              # %for.cond39
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB52_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_20
.LBB52_19:                              # %if.else58
                                        #   in Loop: Header=BB52_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_20:                              # %if.end73
                                        #   in Loop: Header=BB52_16 Depth=3
	jmp	.LBB52_21
.LBB52_21:                              # %for.inc74
                                        #   in Loop: Header=BB52_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_16
.LBB52_22:                              # %for.end76
                                        #   in Loop: Header=BB52_14 Depth=2
	jmp	.LBB52_23
.LBB52_23:                              # %for.inc77
                                        #   in Loop: Header=BB52_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_14
.LBB52_24:                              # %for.end79
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_25:                              # %for.cond80
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB52_25 Depth=2
	movl	$0, -4(%rbp)
.LBB52_27:                              # %for.cond83
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB52_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_31
.LBB52_30:                              # %if.else102
                                        #   in Loop: Header=BB52_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_31:                              # %if.end117
                                        #   in Loop: Header=BB52_27 Depth=3
	jmp	.LBB52_32
.LBB52_32:                              # %for.inc118
                                        #   in Loop: Header=BB52_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_27
.LBB52_33:                              # %for.end120
                                        #   in Loop: Header=BB52_25 Depth=2
	jmp	.LBB52_34
.LBB52_34:                              # %for.inc121
                                        #   in Loop: Header=BB52_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_25
.LBB52_35:                              # %for.end123
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_36:                              # %for.cond124
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB52_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB52_36 Depth=2
	movl	$0, -4(%rbp)
.LBB52_38:                              # %for.cond127
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB52_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_42
.LBB52_41:                              # %if.else146
                                        #   in Loop: Header=BB52_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_42:                              # %if.end161
                                        #   in Loop: Header=BB52_38 Depth=3
	jmp	.LBB52_43
.LBB52_43:                              # %for.inc162
                                        #   in Loop: Header=BB52_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_38
.LBB52_44:                              # %for.end164
                                        #   in Loop: Header=BB52_36 Depth=2
	jmp	.LBB52_45
.LBB52_45:                              # %for.inc165
                                        #   in Loop: Header=BB52_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_36
.LBB52_46:                              # %for.end167
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_47:                              # %for.cond168
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_51
.LBB52_50:                              # %if.else184
                                        #   in Loop: Header=BB52_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_51:                              # %if.end196
                                        #   in Loop: Header=BB52_47 Depth=2
	jmp	.LBB52_52
.LBB52_52:                              # %for.inc197
                                        #   in Loop: Header=BB52_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_47
.LBB52_53:                              # %for.end199
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_54:                              # %for.cond200
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_58
.LBB52_57:                              # %if.else216
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_58:                              # %if.end228
                                        #   in Loop: Header=BB52_54 Depth=2
	jmp	.LBB52_59
.LBB52_59:                              # %for.inc229
                                        #   in Loop: Header=BB52_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_54
.LBB52_60:                              # %for.end231
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_61:                              # %for.cond232
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB52_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_65
.LBB52_64:                              # %if.else248
                                        #   in Loop: Header=BB52_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_65:                              # %if.end260
                                        #   in Loop: Header=BB52_61 Depth=2
	jmp	.LBB52_66
.LBB52_66:                              # %for.inc261
                                        #   in Loop: Header=BB52_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_61
.LBB52_67:                              # %for.end263
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_68:                              # %for.cond264
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB52_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_72
.LBB52_71:                              # %if.else280
                                        #   in Loop: Header=BB52_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_72:                              # %if.end292
                                        #   in Loop: Header=BB52_68 Depth=2
	jmp	.LBB52_73
.LBB52_73:                              # %for.inc293
                                        #   in Loop: Header=BB52_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_68
.LBB52_74:                              # %for.end295
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -4(%rbp)
.LBB52_75:                              # %for.cond296
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB52_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_79
.LBB52_78:                              # %if.else312
                                        #   in Loop: Header=BB52_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_79:                              # %if.end324
                                        #   in Loop: Header=BB52_75 Depth=2
	jmp	.LBB52_80
.LBB52_80:                              # %for.inc325
                                        #   in Loop: Header=BB52_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_75
.LBB52_81:                              # %for.end327
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_82:                              # %for.cond328
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB52_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB52_82 Depth=2
	movl	$0, -4(%rbp)
.LBB52_84:                              # %for.cond331
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB52_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_88
.LBB52_87:                              # %if.else350
                                        #   in Loop: Header=BB52_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_88:                              # %if.end365
                                        #   in Loop: Header=BB52_84 Depth=3
	jmp	.LBB52_89
.LBB52_89:                              # %for.inc366
                                        #   in Loop: Header=BB52_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_84
.LBB52_90:                              # %for.end368
                                        #   in Loop: Header=BB52_82 Depth=2
	jmp	.LBB52_91
.LBB52_91:                              # %for.inc369
                                        #   in Loop: Header=BB52_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_82
.LBB52_92:                              # %for.end371
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_93:                              # %for.cond372
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB52_93 Depth=2
	movl	$0, -4(%rbp)
.LBB52_95:                              # %for.cond375
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB52_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_99
.LBB52_98:                              # %if.else394
                                        #   in Loop: Header=BB52_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_99:                              # %if.end409
                                        #   in Loop: Header=BB52_95 Depth=3
	jmp	.LBB52_100
.LBB52_100:                             # %for.inc410
                                        #   in Loop: Header=BB52_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_95
.LBB52_101:                             # %for.end412
                                        #   in Loop: Header=BB52_93 Depth=2
	jmp	.LBB52_102
.LBB52_102:                             # %for.inc413
                                        #   in Loop: Header=BB52_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_93
.LBB52_103:                             # %for.end415
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_104:                             # %for.cond416
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB52_104 Depth=2
	movl	$0, -4(%rbp)
.LBB52_106:                             # %for.cond419
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_110
.LBB52_109:                             # %if.else438
                                        #   in Loop: Header=BB52_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_110:                             # %if.end453
                                        #   in Loop: Header=BB52_106 Depth=3
	jmp	.LBB52_111
.LBB52_111:                             # %for.inc454
                                        #   in Loop: Header=BB52_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_106
.LBB52_112:                             # %for.end456
                                        #   in Loop: Header=BB52_104 Depth=2
	jmp	.LBB52_113
.LBB52_113:                             # %for.inc457
                                        #   in Loop: Header=BB52_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_104
.LBB52_114:                             # %for.end459
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_115:                             # %for.cond460
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	$0, -4(%rbp)
.LBB52_117:                             # %for.cond463
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_121
.LBB52_120:                             # %if.else482
                                        #   in Loop: Header=BB52_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_121:                             # %if.end497
                                        #   in Loop: Header=BB52_117 Depth=3
	jmp	.LBB52_122
.LBB52_122:                             # %for.inc498
                                        #   in Loop: Header=BB52_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_117
.LBB52_123:                             # %for.end500
                                        #   in Loop: Header=BB52_115 Depth=2
	jmp	.LBB52_124
.LBB52_124:                             # %for.inc501
                                        #   in Loop: Header=BB52_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_115
.LBB52_125:                             # %for.end503
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_126:                             # %for.cond504
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB52_126 Depth=2
	movl	$0, -4(%rbp)
.LBB52_128:                             # %for.cond507
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB52_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_132
.LBB52_131:                             # %if.else526
                                        #   in Loop: Header=BB52_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_132:                             # %if.end541
                                        #   in Loop: Header=BB52_128 Depth=3
	jmp	.LBB52_133
.LBB52_133:                             # %for.inc542
                                        #   in Loop: Header=BB52_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_128
.LBB52_134:                             # %for.end544
                                        #   in Loop: Header=BB52_126 Depth=2
	jmp	.LBB52_135
.LBB52_135:                             # %for.inc545
                                        #   in Loop: Header=BB52_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_126
.LBB52_136:                             # %for.end547
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_137:                             # %for.cond548
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB52_137 Depth=2
	movl	$0, -4(%rbp)
.LBB52_139:                             # %for.cond551
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB52_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_143
.LBB52_142:                             # %if.else570
                                        #   in Loop: Header=BB52_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_143:                             # %if.end585
                                        #   in Loop: Header=BB52_139 Depth=3
	jmp	.LBB52_144
.LBB52_144:                             # %for.inc586
                                        #   in Loop: Header=BB52_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_139
.LBB52_145:                             # %for.end588
                                        #   in Loop: Header=BB52_137 Depth=2
	jmp	.LBB52_146
.LBB52_146:                             # %for.inc589
                                        #   in Loop: Header=BB52_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_137
.LBB52_147:                             # %for.end591
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_148:                             # %for.cond592
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB52_148 Depth=2
	movl	$0, -4(%rbp)
.LBB52_150:                             # %for.cond595
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_154
.LBB52_153:                             # %if.else614
                                        #   in Loop: Header=BB52_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_154:                             # %if.end629
                                        #   in Loop: Header=BB52_150 Depth=3
	jmp	.LBB52_155
.LBB52_155:                             # %for.inc630
                                        #   in Loop: Header=BB52_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_150
.LBB52_156:                             # %for.end632
                                        #   in Loop: Header=BB52_148 Depth=2
	jmp	.LBB52_157
.LBB52_157:                             # %for.inc633
                                        #   in Loop: Header=BB52_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_148
.LBB52_158:                             # %for.end635
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$0, -8(%rbp)
.LBB52_159:                             # %for.cond636
                                        #   Parent Loop BB52_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB52_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB52_159 Depth=2
	movl	$0, -4(%rbp)
.LBB52_161:                             # %for.cond639
                                        #   Parent Loop BB52_1 Depth=1
                                        #     Parent Loop BB52_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB52_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB52_165
.LBB52_164:                             # %if.else658
                                        #   in Loop: Header=BB52_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB52_165:                             # %if.end673
                                        #   in Loop: Header=BB52_161 Depth=3
	jmp	.LBB52_166
.LBB52_166:                             # %for.inc674
                                        #   in Loop: Header=BB52_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_161
.LBB52_167:                             # %for.end676
                                        #   in Loop: Header=BB52_159 Depth=2
	jmp	.LBB52_168
.LBB52_168:                             # %for.inc677
                                        #   in Loop: Header=BB52_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_159
.LBB52_169:                             # %for.end679
                                        #   in Loop: Header=BB52_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB52_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB52_171:                             # %if.end682
                                        #   in Loop: Header=BB52_1 Depth=1
	jmp	.LBB52_172
.LBB52_172:                             # %for.inc683
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_1
.LBB52_173:                             # %for.end685
	cmpl	$577573430, -48(%rbp)   # imm = 0x226D1236
	jne	.LBB52_175
.LBB52_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_174
.Lfunc_end52:
	.size	GetCtxModelNumber.45, .Lfunc_end52-GetCtxModelNumber.45
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.46    # -- Begin function SetCtxModelNumber.46
	.p2align	4, 0x90
	.type	SetCtxModelNumber.46,@function
SetCtxModelNumber.46:                   # @SetCtxModelNumber.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2086652944, -16(%rbp)  # imm = 0x7C5FCC10
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB53_11
.LBB53_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB53_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB53_11
.LBB53_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB53_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB53_11
.LBB53_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB53_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB53_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB53_10
.LBB53_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB53_10:                              # %if.end38
	jmp	.LBB53_11
.LBB53_11:                              # %if.end39
	cmpl	$2086652944, -16(%rbp)  # imm = 0x7C5FCC10
	jne	.LBB53_13
.LBB53_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_12
.Lfunc_end53:
	.size	SetCtxModelNumber.46, .Lfunc_end53-SetCtxModelNumber.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.47
.LCPI54_0:
	.quad	4611686018427387904     # double 2
.LCPI54_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.47
	.p2align	4, 0x90
	.type	create_context_memory.47,@function
create_context_memory.47:               # @create_context_memory.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$637675995, -20(%rbp)   # imm = 0x260229DB
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB54_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB54_3
.LBB54_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB54_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB54_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB54_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB54_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB54_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB54_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB54_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB54_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB54_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB54_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB54_11:                              # %if.end10
                                        #   in Loop: Header=BB54_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB54_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB54_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB54_13:                              # %if.end16
                                        #   in Loop: Header=BB54_8 Depth=1
	movl	$0, -8(%rbp)
.LBB54_14:                              # %for.cond17
                                        #   Parent Loop BB54_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB54_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB54_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB54_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB54_17:                              # %if.end28
                                        #   in Loop: Header=BB54_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB54_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB54_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB54_19:                              # %if.end39
                                        #   in Loop: Header=BB54_14 Depth=2
	jmp	.LBB54_20
.LBB54_20:                              # %for.inc
                                        #   in Loop: Header=BB54_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_14
.LBB54_21:                              # %for.end
                                        #   in Loop: Header=BB54_8 Depth=1
	jmp	.LBB54_22
.LBB54_22:                              # %for.inc40
                                        #   in Loop: Header=BB54_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_8
.LBB54_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB54_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_26 Depth 2
                                        #       Child Loop BB54_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB54_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB54_24 Depth=1
	movl	$0, -8(%rbp)
.LBB54_26:                              # %for.cond47
                                        #   Parent Loop BB54_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB54_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB54_26 Depth=2
	movl	$0, -12(%rbp)
.LBB54_28:                              # %for.cond51
                                        #   Parent Loop BB54_24 Depth=1
                                        #     Parent Loop BB54_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB54_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB54_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB54_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_28
.LBB54_31:                              # %for.end63
                                        #   in Loop: Header=BB54_26 Depth=2
	jmp	.LBB54_32
.LBB54_32:                              # %for.inc64
                                        #   in Loop: Header=BB54_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_26
.LBB54_33:                              # %for.end66
                                        #   in Loop: Header=BB54_24 Depth=1
	jmp	.LBB54_34
.LBB54_34:                              # %for.inc67
                                        #   in Loop: Header=BB54_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_24
.LBB54_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB54_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB54_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB54_36 Depth=1
	vmovsd	.LCPI54_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB54_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_36
.LBB54_39:                              # %for.end98
	cmpl	$637675995, -20(%rbp)   # imm = 0x260229DB
	jne	.LBB54_41
.LBB54_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_40
.Lfunc_end54:
	.size	create_context_memory.47, .Lfunc_end54-create_context_memory.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.48
.LCPI55_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.48
	.p2align	4, 0x90
	.type	GetCtxModelNumber.48,@function
GetCtxModelNumber.48:                   # @GetCtxModelNumber.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1786284124, -44(%rbp)  # imm = 0x6A78885C
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
                                        #       Child Loop BB55_5 Depth 3
                                        #     Child Loop BB55_14 Depth 2
                                        #       Child Loop BB55_16 Depth 3
                                        #     Child Loop BB55_25 Depth 2
                                        #       Child Loop BB55_27 Depth 3
                                        #     Child Loop BB55_36 Depth 2
                                        #       Child Loop BB55_38 Depth 3
                                        #     Child Loop BB55_47 Depth 2
                                        #     Child Loop BB55_54 Depth 2
                                        #     Child Loop BB55_61 Depth 2
                                        #     Child Loop BB55_68 Depth 2
                                        #     Child Loop BB55_75 Depth 2
                                        #     Child Loop BB55_82 Depth 2
                                        #       Child Loop BB55_84 Depth 3
                                        #     Child Loop BB55_93 Depth 2
                                        #       Child Loop BB55_95 Depth 3
                                        #     Child Loop BB55_104 Depth 2
                                        #       Child Loop BB55_106 Depth 3
                                        #     Child Loop BB55_115 Depth 2
                                        #       Child Loop BB55_117 Depth 3
                                        #     Child Loop BB55_126 Depth 2
                                        #       Child Loop BB55_128 Depth 3
                                        #     Child Loop BB55_137 Depth 2
                                        #       Child Loop BB55_139 Depth 3
                                        #     Child Loop BB55_148 Depth 2
                                        #       Child Loop BB55_150 Depth 3
                                        #     Child Loop BB55_159 Depth 2
                                        #       Child Loop BB55_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB55_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB55_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	$0, -4(%rbp)
.LBB55_5:                               # %for.cond5
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB55_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_9
.LBB55_8:                               # %if.else
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_9:                               # %if.end
                                        #   in Loop: Header=BB55_5 Depth=3
	jmp	.LBB55_10
.LBB55_10:                              # %for.inc
                                        #   in Loop: Header=BB55_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_5
.LBB55_11:                              # %for.end
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_12
.LBB55_12:                              # %for.inc33
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_3
.LBB55_13:                              # %for.end35
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_14:                              # %for.cond36
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB55_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB55_14 Depth=2
	movl	$0, -4(%rbp)
.LBB55_16:                              # %for.cond39
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB55_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB55_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB55_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_20
.LBB55_19:                              # %if.else58
                                        #   in Loop: Header=BB55_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_20:                              # %if.end73
                                        #   in Loop: Header=BB55_16 Depth=3
	jmp	.LBB55_21
.LBB55_21:                              # %for.inc74
                                        #   in Loop: Header=BB55_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_16
.LBB55_22:                              # %for.end76
                                        #   in Loop: Header=BB55_14 Depth=2
	jmp	.LBB55_23
.LBB55_23:                              # %for.inc77
                                        #   in Loop: Header=BB55_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_14
.LBB55_24:                              # %for.end79
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_25:                              # %for.cond80
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB55_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB55_25 Depth=2
	movl	$0, -4(%rbp)
.LBB55_27:                              # %for.cond83
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB55_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB55_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB55_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_31
.LBB55_30:                              # %if.else102
                                        #   in Loop: Header=BB55_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_31:                              # %if.end117
                                        #   in Loop: Header=BB55_27 Depth=3
	jmp	.LBB55_32
.LBB55_32:                              # %for.inc118
                                        #   in Loop: Header=BB55_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_27
.LBB55_33:                              # %for.end120
                                        #   in Loop: Header=BB55_25 Depth=2
	jmp	.LBB55_34
.LBB55_34:                              # %for.inc121
                                        #   in Loop: Header=BB55_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_25
.LBB55_35:                              # %for.end123
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_36:                              # %for.cond124
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB55_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB55_36 Depth=2
	movl	$0, -4(%rbp)
.LBB55_38:                              # %for.cond127
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB55_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB55_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB55_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_42
.LBB55_41:                              # %if.else146
                                        #   in Loop: Header=BB55_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_42:                              # %if.end161
                                        #   in Loop: Header=BB55_38 Depth=3
	jmp	.LBB55_43
.LBB55_43:                              # %for.inc162
                                        #   in Loop: Header=BB55_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_38
.LBB55_44:                              # %for.end164
                                        #   in Loop: Header=BB55_36 Depth=2
	jmp	.LBB55_45
.LBB55_45:                              # %for.inc165
                                        #   in Loop: Header=BB55_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_36
.LBB55_46:                              # %for.end167
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_47:                              # %for.cond168
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_51
.LBB55_50:                              # %if.else184
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_51:                              # %if.end196
                                        #   in Loop: Header=BB55_47 Depth=2
	jmp	.LBB55_52
.LBB55_52:                              # %for.inc197
                                        #   in Loop: Header=BB55_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_47
.LBB55_53:                              # %for.end199
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_54:                              # %for.cond200
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB55_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB55_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_58
.LBB55_57:                              # %if.else216
                                        #   in Loop: Header=BB55_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_58:                              # %if.end228
                                        #   in Loop: Header=BB55_54 Depth=2
	jmp	.LBB55_59
.LBB55_59:                              # %for.inc229
                                        #   in Loop: Header=BB55_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_54
.LBB55_60:                              # %for.end231
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_61:                              # %for.cond232
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB55_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB55_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB55_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_65
.LBB55_64:                              # %if.else248
                                        #   in Loop: Header=BB55_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_65:                              # %if.end260
                                        #   in Loop: Header=BB55_61 Depth=2
	jmp	.LBB55_66
.LBB55_66:                              # %for.inc261
                                        #   in Loop: Header=BB55_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_61
.LBB55_67:                              # %for.end263
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_68:                              # %for.cond264
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB55_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB55_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB55_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_72
.LBB55_71:                              # %if.else280
                                        #   in Loop: Header=BB55_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_72:                              # %if.end292
                                        #   in Loop: Header=BB55_68 Depth=2
	jmp	.LBB55_73
.LBB55_73:                              # %for.inc293
                                        #   in Loop: Header=BB55_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_68
.LBB55_74:                              # %for.end295
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_75:                              # %for.cond296
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB55_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB55_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_79
.LBB55_78:                              # %if.else312
                                        #   in Loop: Header=BB55_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_79:                              # %if.end324
                                        #   in Loop: Header=BB55_75 Depth=2
	jmp	.LBB55_80
.LBB55_80:                              # %for.inc325
                                        #   in Loop: Header=BB55_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_75
.LBB55_81:                              # %for.end327
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_82:                              # %for.cond328
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB55_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB55_82 Depth=2
	movl	$0, -4(%rbp)
.LBB55_84:                              # %for.cond331
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB55_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB55_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB55_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_88
.LBB55_87:                              # %if.else350
                                        #   in Loop: Header=BB55_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_88:                              # %if.end365
                                        #   in Loop: Header=BB55_84 Depth=3
	jmp	.LBB55_89
.LBB55_89:                              # %for.inc366
                                        #   in Loop: Header=BB55_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_84
.LBB55_90:                              # %for.end368
                                        #   in Loop: Header=BB55_82 Depth=2
	jmp	.LBB55_91
.LBB55_91:                              # %for.inc369
                                        #   in Loop: Header=BB55_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_82
.LBB55_92:                              # %for.end371
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_93:                              # %for.cond372
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB55_93 Depth=2
	movl	$0, -4(%rbp)
.LBB55_95:                              # %for.cond375
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB55_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB55_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB55_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_99
.LBB55_98:                              # %if.else394
                                        #   in Loop: Header=BB55_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_99:                              # %if.end409
                                        #   in Loop: Header=BB55_95 Depth=3
	jmp	.LBB55_100
.LBB55_100:                             # %for.inc410
                                        #   in Loop: Header=BB55_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_95
.LBB55_101:                             # %for.end412
                                        #   in Loop: Header=BB55_93 Depth=2
	jmp	.LBB55_102
.LBB55_102:                             # %for.inc413
                                        #   in Loop: Header=BB55_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_93
.LBB55_103:                             # %for.end415
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_104:                             # %for.cond416
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB55_104 Depth=2
	movl	$0, -4(%rbp)
.LBB55_106:                             # %for.cond419
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB55_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB55_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_110
.LBB55_109:                             # %if.else438
                                        #   in Loop: Header=BB55_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_110:                             # %if.end453
                                        #   in Loop: Header=BB55_106 Depth=3
	jmp	.LBB55_111
.LBB55_111:                             # %for.inc454
                                        #   in Loop: Header=BB55_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_106
.LBB55_112:                             # %for.end456
                                        #   in Loop: Header=BB55_104 Depth=2
	jmp	.LBB55_113
.LBB55_113:                             # %for.inc457
                                        #   in Loop: Header=BB55_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_104
.LBB55_114:                             # %for.end459
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_115:                             # %for.cond460
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB55_115 Depth=2
	movl	$0, -4(%rbp)
.LBB55_117:                             # %for.cond463
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB55_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB55_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_121
.LBB55_120:                             # %if.else482
                                        #   in Loop: Header=BB55_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_121:                             # %if.end497
                                        #   in Loop: Header=BB55_117 Depth=3
	jmp	.LBB55_122
.LBB55_122:                             # %for.inc498
                                        #   in Loop: Header=BB55_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_117
.LBB55_123:                             # %for.end500
                                        #   in Loop: Header=BB55_115 Depth=2
	jmp	.LBB55_124
.LBB55_124:                             # %for.inc501
                                        #   in Loop: Header=BB55_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_115
.LBB55_125:                             # %for.end503
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_126:                             # %for.cond504
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB55_126 Depth=2
	movl	$0, -4(%rbp)
.LBB55_128:                             # %for.cond507
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB55_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB55_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB55_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_132
.LBB55_131:                             # %if.else526
                                        #   in Loop: Header=BB55_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_132:                             # %if.end541
                                        #   in Loop: Header=BB55_128 Depth=3
	jmp	.LBB55_133
.LBB55_133:                             # %for.inc542
                                        #   in Loop: Header=BB55_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_128
.LBB55_134:                             # %for.end544
                                        #   in Loop: Header=BB55_126 Depth=2
	jmp	.LBB55_135
.LBB55_135:                             # %for.inc545
                                        #   in Loop: Header=BB55_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_126
.LBB55_136:                             # %for.end547
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_137:                             # %for.cond548
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB55_137 Depth=2
	movl	$0, -4(%rbp)
.LBB55_139:                             # %for.cond551
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB55_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB55_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB55_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_143
.LBB55_142:                             # %if.else570
                                        #   in Loop: Header=BB55_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_143:                             # %if.end585
                                        #   in Loop: Header=BB55_139 Depth=3
	jmp	.LBB55_144
.LBB55_144:                             # %for.inc586
                                        #   in Loop: Header=BB55_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_139
.LBB55_145:                             # %for.end588
                                        #   in Loop: Header=BB55_137 Depth=2
	jmp	.LBB55_146
.LBB55_146:                             # %for.inc589
                                        #   in Loop: Header=BB55_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_137
.LBB55_147:                             # %for.end591
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_148:                             # %for.cond592
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB55_148 Depth=2
	movl	$0, -4(%rbp)
.LBB55_150:                             # %for.cond595
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB55_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB55_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_154
.LBB55_153:                             # %if.else614
                                        #   in Loop: Header=BB55_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_154:                             # %if.end629
                                        #   in Loop: Header=BB55_150 Depth=3
	jmp	.LBB55_155
.LBB55_155:                             # %for.inc630
                                        #   in Loop: Header=BB55_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_150
.LBB55_156:                             # %for.end632
                                        #   in Loop: Header=BB55_148 Depth=2
	jmp	.LBB55_157
.LBB55_157:                             # %for.inc633
                                        #   in Loop: Header=BB55_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_148
.LBB55_158:                             # %for.end635
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_159:                             # %for.cond636
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB55_159 Depth=2
	movl	$0, -4(%rbp)
.LBB55_161:                             # %for.cond639
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB55_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB55_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_165
.LBB55_164:                             # %if.else658
                                        #   in Loop: Header=BB55_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_165:                             # %if.end673
                                        #   in Loop: Header=BB55_161 Depth=3
	jmp	.LBB55_166
.LBB55_166:                             # %for.inc674
                                        #   in Loop: Header=BB55_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_161
.LBB55_167:                             # %for.end676
                                        #   in Loop: Header=BB55_159 Depth=2
	jmp	.LBB55_168
.LBB55_168:                             # %for.inc677
                                        #   in Loop: Header=BB55_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_159
.LBB55_169:                             # %for.end679
                                        #   in Loop: Header=BB55_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB55_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB55_171:                             # %if.end682
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_172
.LBB55_172:                             # %for.inc683
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_1
.LBB55_173:                             # %for.end685
	cmpl	$1786284124, -44(%rbp)  # imm = 0x6A78885C
	jne	.LBB55_175
.LBB55_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_174
.Lfunc_end55:
	.size	GetCtxModelNumber.48, .Lfunc_end55-GetCtxModelNumber.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.49
.LCPI56_0:
	.quad	4607182418800017408     # double 1
.LCPI56_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI56_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI56_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.49
	.p2align	4, 0x90
	.type	XRate.49,@function
XRate.49:                               # @XRate.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$357964267, -36(%rbp)   # imm = 0x155619EB
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB56_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB56_3
.LBB56_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB56_3:                               # %cond.end
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI56_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB56_6
.LBB56_5:                               # %cond.false6
	vmovsd	.LCPI56_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI56_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB56_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB56_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB56_9
.LBB56_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB56_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB56_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB56_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB56_13
.LBB56_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB56_13:                              # %cond.end26
	jmp	.LBB56_15
.LBB56_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB56_15
.LBB56_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB56_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB56_18
.LBB56_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB56_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$357964267, -36(%rbp)   # imm = 0x155619EB
	jne	.LBB56_20
.LBB56_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB56_19
.Lfunc_end56:
	.size	XRate.49, .Lfunc_end56-XRate.49
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.50
.LCPI57_0:
	.quad	4607182418800017408     # double 1
.LCPI57_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI57_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI57_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.50
	.p2align	4, 0x90
	.type	XRate.50,@function
XRate.50:                               # @XRate.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$687222865, -36(%rbp)   # imm = 0x28F63051
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB57_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB57_3
.LBB57_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB57_3:                               # %cond.end
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI57_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI57_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI57_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB57_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI57_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB57_6
.LBB57_5:                               # %cond.false6
	vmovsd	.LCPI57_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI57_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI57_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB57_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB57_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB57_9
.LBB57_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB57_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB57_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB57_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB57_13
.LBB57_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB57_13:                              # %cond.end26
	jmp	.LBB57_15
.LBB57_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB57_15
.LBB57_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB57_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB57_18
.LBB57_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB57_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$687222865, -36(%rbp)   # imm = 0x28F63051
	jne	.LBB57_20
.LBB57_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB57_19
.Lfunc_end57:
	.size	XRate.50, .Lfunc_end57-XRate.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.51
.LCPI58_0:
	.quad	4611686018427387904     # double 2
.LCPI58_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.51
	.p2align	4, 0x90
	.type	create_context_memory.51,@function
create_context_memory.51:               # @create_context_memory.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$442500595, -20(%rbp)   # imm = 0x1A6005F3
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB58_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB58_3
.LBB58_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB58_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB58_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB58_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB58_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB58_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB58_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB58_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB58_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB58_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB58_11:                              # %if.end10
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB58_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB58_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB58_13:                              # %if.end16
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	$0, -8(%rbp)
.LBB58_14:                              # %for.cond17
                                        #   Parent Loop BB58_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB58_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB58_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB58_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB58_17:                              # %if.end28
                                        #   in Loop: Header=BB58_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB58_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB58_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB58_19:                              # %if.end39
                                        #   in Loop: Header=BB58_14 Depth=2
	jmp	.LBB58_20
.LBB58_20:                              # %for.inc
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_14
.LBB58_21:                              # %for.end
                                        #   in Loop: Header=BB58_8 Depth=1
	jmp	.LBB58_22
.LBB58_22:                              # %for.inc40
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_8
.LBB58_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB58_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_26 Depth 2
                                        #       Child Loop BB58_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB58_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	$0, -8(%rbp)
.LBB58_26:                              # %for.cond47
                                        #   Parent Loop BB58_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB58_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB58_26 Depth=2
	movl	$0, -12(%rbp)
.LBB58_28:                              # %for.cond51
                                        #   Parent Loop BB58_24 Depth=1
                                        #     Parent Loop BB58_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB58_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB58_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB58_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_28
.LBB58_31:                              # %for.end63
                                        #   in Loop: Header=BB58_26 Depth=2
	jmp	.LBB58_32
.LBB58_32:                              # %for.inc64
                                        #   in Loop: Header=BB58_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_26
.LBB58_33:                              # %for.end66
                                        #   in Loop: Header=BB58_24 Depth=1
	jmp	.LBB58_34
.LBB58_34:                              # %for.inc67
                                        #   in Loop: Header=BB58_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_24
.LBB58_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB58_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB58_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB58_36 Depth=1
	vmovsd	.LCPI58_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB58_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_36
.LBB58_39:                              # %for.end98
	cmpl	$442500595, -20(%rbp)   # imm = 0x1A6005F3
	jne	.LBB58_41
.LBB58_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_40
.Lfunc_end58:
	.size	create_context_memory.51, .Lfunc_end58-create_context_memory.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.52
.LCPI59_0:
	.quad	4607182418800017408     # double 1
.LCPI59_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI59_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI59_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.52
	.p2align	4, 0x90
	.type	XRate.52,@function
XRate.52:                               # @XRate.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1696846955, -36(%rbp)  # imm = 0x6523D46B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB59_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB59_3
.LBB59_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB59_3:                               # %cond.end
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI59_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI59_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI59_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB59_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB59_6
.LBB59_5:                               # %cond.false6
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI59_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI59_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB59_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB59_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB59_9
.LBB59_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB59_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB59_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB59_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB59_13
.LBB59_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB59_13:                              # %cond.end26
	jmp	.LBB59_15
.LBB59_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB59_15
.LBB59_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB59_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB59_18
.LBB59_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB59_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1696846955, -36(%rbp)  # imm = 0x6523D46B
	jne	.LBB59_20
.LBB59_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB59_19
.Lfunc_end59:
	.size	XRate.52, .Lfunc_end59-XRate.52
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
