	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_decode_one_b8block.18
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.33
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_decode_one_b8block.75
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_decode_one_b8block.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_decode_one_b8block.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_decode_one_b8block.91
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_decode_one_b8block.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_decode_one_b8block.94
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_decode_one_b8block.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.96
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_decode_one_b8block.102
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.102
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_Get_Reference_Block.2
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.3
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.3
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_Get_Reference_Block.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_Get_Reference_Block.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_Get_Reference_Block.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_Get_Reference_Block.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_Get_Reference_Block.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_Get_Reference_Block.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_Get_Reference_Block.73
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_Get_Reference_Block.97
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movq	-48(%rbp), %r10         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	%r10, %r9
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movl	%esi, %r14d
	movq	%rdi, %rbx
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.6
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_Get_Reference_Pixel.11
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.11
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.12
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.38
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.40
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.50
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.55
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.56
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.79
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_Get_Reference_Pixel.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.84
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_Get_Reference_Pixel.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.87
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_Get_Reference_Pixel.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.88
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_Get_Reference_Pixel.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.89
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_Get_Reference_Pixel.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.92
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_Get_Reference_Pixel.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.105
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_Get_Reference_Pixel.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.109
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_Get_Reference_Pixel.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.110
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_Build_Status_Map.1
	movq	%rbx, %rdi
	callq	Build_Status_Map.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.4
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.10
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.76
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_Build_Status_Map.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_Build_Status_Map.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.82
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_Build_Status_Map.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.95
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_Build_Status_Map.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_Build_Status_Map.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_Build_Status_Map.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_Build_Status_Map.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.104
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_Build_Status_Map.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.120
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_17
# %bb.1:                                # %func_Error_Concealment.19
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.99
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.108
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %func_Error_Concealment.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_10:                               # %func_Error_Concealment.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               # %func_Error_Concealment.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.117
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_12:                               # %func_Error_Concealment.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_13:                               # %func_Error_Concealment.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.119
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_14:                               # %func_Error_Concealment.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.123
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_15:                               # %func_Error_Concealment.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.125
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_16:                               # %func_Error_Concealment.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.127
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB6_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB6_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB6_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB6_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB6_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB6_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB6_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB6_15
	jmp	.LBB6_16
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.1:                                # %func_DecOneForthPix.8
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.59
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %func_DecOneForthPix.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_10:                               # %func_DecOneForthPix.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_11:                               # %func_DecOneForthPix.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:                               # %func_DecOneForthPix.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_13:                               # %func_DecOneForthPix.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.86
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_14:                               # %func_DecOneForthPix.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.101
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_15:                               # %func_DecOneForthPix.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.106
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_16:                               # %func_DecOneForthPix.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.113
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB7_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB7_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB7_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB7_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB7_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB7_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB7_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB7_15
	jmp	.LBB7_16
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_compute_residue_b8block.5
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.14
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.114
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.114
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_compute_residue_b8block.116
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.116
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_compute_residue_b8block.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.121
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_compute_residue_b8block.122
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_compute_residue_b8block.124
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_compute_residue_b8block.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.126
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_compute_residue_b8block.128
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.128
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_compute_residue_b8block.129
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.129
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_compute_residue_b8block.130
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.130
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_Conceal_Error.7
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_Conceal_Error.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_Conceal_Error.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_Conceal_Error.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_Conceal_Error.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_Conceal_Error.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_Conceal_Error.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_Conceal_Error.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_Conceal_Error.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.1
.LCPI11_0:
	.quad	4636737291354636288     # double 100
.LCPI11_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.1
	.p2align	4, 0x90
	.type	Build_Status_Map.1,@function
Build_Status_Map.1:                     # @Build_Status_Map.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$705819693, -44(%rbp)   # imm = 0x2A11F42D
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB11_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB11_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	$0, -8(%rbp)
.LBB11_3:                               # %for.cond2
                                        #   Parent Loop BB11_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB11_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB11_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB11_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB11_13
.LBB11_6:                               # %if.then
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI11_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB11_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB11_8:                               # %if.end
                                        #   in Loop: Header=BB11_3 Depth=2
	callq	rand
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI11_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB11_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB11_10:                              # %if.end20
                                        #   in Loop: Header=BB11_3 Depth=2
	callq	rand
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI11_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB11_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	$1, -4(%rbp)
.LBB11_12:                              # %if.end29
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB11_13:                              # %if.end30
                                        #   in Loop: Header=BB11_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB11_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB11_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB11_18
.LBB11_15:                              # %if.else
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB11_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB11_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB11_17:                              # %if.end49
                                        #   in Loop: Header=BB11_3 Depth=2
	jmp	.LBB11_18
.LBB11_18:                              # %if.end50
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB11_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_3
.LBB11_20:                              # %for.end
                                        #   in Loop: Header=BB11_1 Depth=1
	jmp	.LBB11_21
.LBB11_21:                              # %for.inc53
                                        #   in Loop: Header=BB11_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_1
.LBB11_22:                              # %for.end55
	cmpl	$705819693, -44(%rbp)   # imm = 0x2A11F42D
	jne	.LBB11_24
.LBB11_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_23
.Lfunc_end11:
	.size	Build_Status_Map.1, .Lfunc_end11-Build_Status_Map.1
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.2   # -- Begin function Get_Reference_Block.2
	.p2align	4, 0x90
	.type	Get_Reference_Block.2,@function
Get_Reference_Block.2:                  # @Get_Reference_Block.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$160830053, -24(%rbp)   # imm = 0x9961265
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB12_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -4(%rbp)
.LBB12_3:                               # %for.cond5
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB12_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_3
.LBB12_6:                               # %for.end
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_7
.LBB12_7:                               # %for.inc14
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_1
.LBB12_8:                               # %for.end16
	cmpl	$160830053, -24(%rbp)   # imm = 0x9961265
	jne	.LBB12_10
.LBB12_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_9
.Lfunc_end12:
	.size	Get_Reference_Block.2, .Lfunc_end12-Get_Reference_Block.2
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.3   # -- Begin function Get_Reference_Block.3
	.p2align	4, 0x90
	.type	Get_Reference_Block.3,@function
Get_Reference_Block.3:                  # @Get_Reference_Block.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$381490624, -32(%rbp)   # imm = 0x16BD15C0
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB13_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_3:                               # %for.cond5
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB13_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_3
.LBB13_6:                               # %for.end
                                        #   in Loop: Header=BB13_1 Depth=1
	jmp	.LBB13_7
.LBB13_7:                               # %for.inc14
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_1
.LBB13_8:                               # %for.end16
	cmpl	$381490624, -32(%rbp)   # imm = 0x16BD15C0
	jne	.LBB13_10
.LBB13_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_9
.Lfunc_end13:
	.size	Get_Reference_Block.3, .Lfunc_end13-Get_Reference_Block.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.4
.LCPI14_0:
	.quad	4636737291354636288     # double 100
.LCPI14_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.4
	.p2align	4, 0x90
	.type	Build_Status_Map.4,@function
Build_Status_Map.4:                     # @Build_Status_Map.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1872657524, -36(%rbp)  # imm = 0x6F9E7C74
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	$0, -12(%rbp)
.LBB14_3:                               # %for.cond2
                                        #   Parent Loop BB14_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB14_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB14_13
.LBB14_6:                               # %if.then
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB14_8:                               # %if.end
                                        #   in Loop: Header=BB14_3 Depth=2
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB14_10:                              # %if.end20
                                        #   in Loop: Header=BB14_3 Depth=2
	callq	rand
	vmovsd	.LCPI14_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI14_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB14_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	$1, -4(%rbp)
.LBB14_12:                              # %if.end29
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB14_13:                              # %if.end30
                                        #   in Loop: Header=BB14_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB14_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB14_18
.LBB14_15:                              # %if.else
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB14_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB14_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB14_17:                              # %if.end49
                                        #   in Loop: Header=BB14_3 Depth=2
	jmp	.LBB14_18
.LBB14_18:                              # %if.end50
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB14_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_3
.LBB14_20:                              # %for.end
                                        #   in Loop: Header=BB14_1 Depth=1
	jmp	.LBB14_21
.LBB14_21:                              # %for.inc53
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_1
.LBB14_22:                              # %for.end55
	cmpl	$1872657524, -36(%rbp)  # imm = 0x6F9E7C74
	jne	.LBB14_24
.LBB14_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_23
.Lfunc_end14:
	.size	Build_Status_Map.4, .Lfunc_end14-Build_Status_Map.4
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.5 # -- Begin function compute_residue_b8block.5
	.p2align	4, 0x90
	.type	compute_residue_b8block.5,@function
compute_residue_b8block.5:              # @compute_residue_b8block.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$270291483, -36(%rbp)   # imm = 0x101C521B
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB15_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB15_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB15_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB15_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB15_4:                               # %for.cond4
                                        #   Parent Loop BB15_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB15_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB15_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB15_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_4
.LBB15_7:                               # %for.end
                                        #   in Loop: Header=BB15_2 Depth=1
	jmp	.LBB15_8
.LBB15_8:                               # %for.inc22
                                        #   in Loop: Header=BB15_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_2
.LBB15_9:                               # %for.end24
	jmp	.LBB15_19
.LBB15_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB15_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB15_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB15_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB15_13:                              # %for.cond29
                                        #   Parent Loop BB15_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB15_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB15_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB15_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_13
.LBB15_16:                              # %for.end56
                                        #   in Loop: Header=BB15_11 Depth=1
	jmp	.LBB15_17
.LBB15_17:                              # %for.inc57
                                        #   in Loop: Header=BB15_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_11
.LBB15_18:                              # %for.end59
	jmp	.LBB15_19
.LBB15_19:                              # %if.end
	cmpl	$270291483, -36(%rbp)   # imm = 0x101C521B
	jne	.LBB15_21
.LBB15_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_20
.Lfunc_end15:
	.size	compute_residue_b8block.5, .Lfunc_end15-compute_residue_b8block.5
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.6         # -- Begin function decode_one_mb.6
	.p2align	4, 0x90
	.type	decode_one_mb.6,@function
decode_one_mb.6:                        # @decode_one_mb.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1407714126, -4(%rbp)   # imm = 0x53E8034E
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$1407714126, -4(%rbp)   # imm = 0x53E8034E
	jne	.LBB16_2
.LBB16_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_1
.Lfunc_end16:
	.size	decode_one_mb.6, .Lfunc_end16-decode_one_mb.6
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.7         # -- Begin function Conceal_Error.7
	.p2align	4, 0x90
	.type	Conceal_Error.7,@function
Conceal_Error.7:                        # @Conceal_Error.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1733569504, -68(%rbp)  # imm = 0x67542BE0
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB17_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB17_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB17_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB17_4:                               # %land.end
.LBB17_5:                               # %lor.end
.LBB17_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB17_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB17_9
.LBB17_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB17_14
.LBB17_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB17_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB17_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB17_12:                              # %land.end51
.LBB17_13:                              # %lor.end53
.LBB17_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB17_180
# %bb.15:                               # %land.end54
	movq	.LJTI17_0(,%rax,8), %rax
	jmpq	*%rax
.LBB17_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB17_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB17_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB17_18 Depth=1
	movl	$0, -4(%rbp)
.LBB17_20:                              # %for.cond68
                                        #   Parent Loop BB17_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB17_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB17_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_20
.LBB17_23:                              # %for.end
                                        #   in Loop: Header=BB17_18 Depth=1
	jmp	.LBB17_24
.LBB17_24:                              # %for.inc85
                                        #   in Loop: Header=BB17_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_18
.LBB17_25:                              # %for.end87
	jmp	.LBB17_35
.LBB17_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB17_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB17_27 Depth=1
	movl	$0, -4(%rbp)
.LBB17_29:                              # %for.cond92
                                        #   Parent Loop BB17_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB17_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB17_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_29
.LBB17_32:                              # %for.end104
                                        #   in Loop: Header=BB17_27 Depth=1
	jmp	.LBB17_33
.LBB17_33:                              # %for.inc105
                                        #   in Loop: Header=BB17_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_27
.LBB17_34:                              # %for.end107
	jmp	.LBB17_35
.LBB17_35:                              # %if.end
	jmp	.LBB17_180
.LBB17_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB17_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_39 Depth 2
                                        #       Child Loop BB17_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB17_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB17_37 Depth=1
	movl	$0, -12(%rbp)
.LBB17_39:                              # %for.cond113
                                        #   Parent Loop BB17_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB17_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB17_39 Depth=2
	movl	$0, -4(%rbp)
.LBB17_41:                              # %for.cond117
                                        #   Parent Loop BB17_37 Depth=1
                                        #     Parent Loop BB17_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB17_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB17_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB17_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_41
.LBB17_44:                              # %for.end141
                                        #   in Loop: Header=BB17_39 Depth=2
	jmp	.LBB17_45
.LBB17_45:                              # %for.inc142
                                        #   in Loop: Header=BB17_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_39
.LBB17_46:                              # %for.end144
                                        #   in Loop: Header=BB17_37 Depth=1
	jmp	.LBB17_47
.LBB17_47:                              # %for.inc145
                                        #   in Loop: Header=BB17_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_37
.LBB17_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB17_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB17_49 Depth=1
	movl	$0, -8(%rbp)
.LBB17_51:                              # %for.cond152
                                        #   Parent Loop BB17_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB17_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB17_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_51
.LBB17_54:                              # %for.end162
                                        #   in Loop: Header=BB17_49 Depth=1
	jmp	.LBB17_55
.LBB17_55:                              # %for.inc163
                                        #   in Loop: Header=BB17_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_49
.LBB17_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB17_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB17_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB17_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB17_59 Depth=1
	movl	$0, -4(%rbp)
.LBB17_61:                              # %for.cond175
                                        #   Parent Loop BB17_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB17_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB17_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_61
.LBB17_64:                              # %for.end195
                                        #   in Loop: Header=BB17_59 Depth=1
	jmp	.LBB17_65
.LBB17_65:                              # %for.inc196
                                        #   in Loop: Header=BB17_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_59
.LBB17_66:                              # %for.end198
	jmp	.LBB17_95
.LBB17_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB17_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB17_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_71 Depth 2
                                        #       Child Loop BB17_73 Depth 3
                                        #         Child Loop BB17_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB17_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB17_71:                              # %for.cond210
                                        #   Parent Loop BB17_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_73 Depth 3
                                        #         Child Loop BB17_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB17_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB17_73:                              # %for.cond236
                                        #   Parent Loop BB17_69 Depth=1
                                        #     Parent Loop BB17_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB17_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB17_73 Depth=3
	movl	$0, -4(%rbp)
.LBB17_75:                              # %for.cond240
                                        #   Parent Loop BB17_69 Depth=1
                                        #     Parent Loop BB17_71 Depth=2
                                        #       Parent Loop BB17_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB17_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB17_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB17_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_75
.LBB17_78:                              # %for.end259
                                        #   in Loop: Header=BB17_73 Depth=3
	jmp	.LBB17_79
.LBB17_79:                              # %for.inc260
                                        #   in Loop: Header=BB17_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_73
.LBB17_80:                              # %for.end262
                                        #   in Loop: Header=BB17_71 Depth=2
	jmp	.LBB17_81
.LBB17_81:                              # %for.inc263
                                        #   in Loop: Header=BB17_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_71
.LBB17_82:                              # %for.end265
                                        #   in Loop: Header=BB17_69 Depth=1
	jmp	.LBB17_83
.LBB17_83:                              # %for.inc266
                                        #   in Loop: Header=BB17_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_69
.LBB17_84:                              # %for.end268
	jmp	.LBB17_94
.LBB17_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB17_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB17_86 Depth=1
	movl	$0, -4(%rbp)
.LBB17_88:                              # %for.cond274
                                        #   Parent Loop BB17_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB17_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB17_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_88
.LBB17_91:                              # %for.end294
                                        #   in Loop: Header=BB17_86 Depth=1
	jmp	.LBB17_92
.LBB17_92:                              # %for.inc295
                                        #   in Loop: Header=BB17_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_86
.LBB17_93:                              # %for.end297
	jmp	.LBB17_94
.LBB17_94:                              # %if.end298
	jmp	.LBB17_95
.LBB17_95:                              # %if.end299
	jmp	.LBB17_105
.LBB17_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB17_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB17_97 Depth=1
	movl	$0, -4(%rbp)
.LBB17_99:                              # %for.cond305
                                        #   Parent Loop BB17_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB17_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB17_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_99
.LBB17_102:                             # %for.end317
                                        #   in Loop: Header=BB17_97 Depth=1
	jmp	.LBB17_103
.LBB17_103:                             # %for.inc318
                                        #   in Loop: Header=BB17_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_97
.LBB17_104:                             # %for.end320
	jmp	.LBB17_105
.LBB17_105:                             # %if.end321
	jmp	.LBB17_180
.LBB17_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB17_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB17_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_110 Depth 2
                                        #       Child Loop BB17_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB17_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB17_108 Depth=1
	movl	$0, -12(%rbp)
.LBB17_110:                             # %for.cond331
                                        #   Parent Loop BB17_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB17_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB17_110 Depth=2
	movl	$0, -4(%rbp)
.LBB17_112:                             # %for.cond335
                                        #   Parent Loop BB17_108 Depth=1
                                        #     Parent Loop BB17_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB17_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB17_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB17_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_112
.LBB17_115:                             # %for.end359
                                        #   in Loop: Header=BB17_110 Depth=2
	jmp	.LBB17_116
.LBB17_116:                             # %for.inc360
                                        #   in Loop: Header=BB17_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_110
.LBB17_117:                             # %for.end362
                                        #   in Loop: Header=BB17_108 Depth=1
	jmp	.LBB17_118
.LBB17_118:                             # %for.inc363
                                        #   in Loop: Header=BB17_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_108
.LBB17_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB17_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB17_120 Depth=1
	movl	$0, -8(%rbp)
.LBB17_122:                             # %for.cond370
                                        #   Parent Loop BB17_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB17_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB17_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_122
.LBB17_125:                             # %for.end380
                                        #   in Loop: Header=BB17_120 Depth=1
	jmp	.LBB17_126
.LBB17_126:                             # %for.inc381
                                        #   in Loop: Header=BB17_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_120
.LBB17_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB17_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB17_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB17_129 Depth=1
	movl	$0, -4(%rbp)
.LBB17_131:                             # %for.cond390
                                        #   Parent Loop BB17_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB17_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB17_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_131
.LBB17_134:                             # %for.end410
                                        #   in Loop: Header=BB17_129 Depth=1
	jmp	.LBB17_135
.LBB17_135:                             # %for.inc411
                                        #   in Loop: Header=BB17_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_129
.LBB17_136:                             # %for.end413
	jmp	.LBB17_156
.LBB17_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB17_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB17_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_141 Depth 2
                                        #       Child Loop BB17_143 Depth 3
                                        #         Child Loop BB17_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB17_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB17_141:                             # %for.cond425
                                        #   Parent Loop BB17_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB17_143 Depth 3
                                        #         Child Loop BB17_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB17_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB17_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB17_143:                             # %for.cond452
                                        #   Parent Loop BB17_139 Depth=1
                                        #     Parent Loop BB17_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB17_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB17_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB17_143 Depth=3
	movl	$0, -4(%rbp)
.LBB17_145:                             # %for.cond456
                                        #   Parent Loop BB17_139 Depth=1
                                        #     Parent Loop BB17_141 Depth=2
                                        #       Parent Loop BB17_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB17_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB17_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB17_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_145
.LBB17_148:                             # %for.end475
                                        #   in Loop: Header=BB17_143 Depth=3
	jmp	.LBB17_149
.LBB17_149:                             # %for.inc476
                                        #   in Loop: Header=BB17_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_143
.LBB17_150:                             # %for.end478
                                        #   in Loop: Header=BB17_141 Depth=2
	jmp	.LBB17_151
.LBB17_151:                             # %for.inc479
                                        #   in Loop: Header=BB17_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB17_141
.LBB17_152:                             # %for.end481
                                        #   in Loop: Header=BB17_139 Depth=1
	jmp	.LBB17_153
.LBB17_153:                             # %for.inc482
                                        #   in Loop: Header=BB17_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB17_139
.LBB17_154:                             # %for.end484
	jmp	.LBB17_155
.LBB17_155:                             # %if.end485
	jmp	.LBB17_156
.LBB17_156:                             # %if.end486
	jmp	.LBB17_157
.LBB17_157:                             # %if.end487
	jmp	.LBB17_180
.LBB17_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB17_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB17_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB17_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB17_161 Depth=1
	movl	$0, -4(%rbp)
.LBB17_163:                             # %for.cond499
                                        #   Parent Loop BB17_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB17_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB17_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_163
.LBB17_166:                             # %for.end519
                                        #   in Loop: Header=BB17_161 Depth=1
	jmp	.LBB17_167
.LBB17_167:                             # %for.inc520
                                        #   in Loop: Header=BB17_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_161
.LBB17_168:                             # %for.end522
	jmp	.LBB17_169
.LBB17_169:                             # %if.end523
	jmp	.LBB17_179
.LBB17_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB17_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB17_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB17_171 Depth=1
	movl	$0, -4(%rbp)
.LBB17_173:                             # %for.cond529
                                        #   Parent Loop BB17_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB17_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB17_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB17_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_173
.LBB17_176:                             # %for.end541
                                        #   in Loop: Header=BB17_171 Depth=1
	jmp	.LBB17_177
.LBB17_177:                             # %for.inc542
                                        #   in Loop: Header=BB17_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_171
.LBB17_178:                             # %for.end544
	jmp	.LBB17_179
.LBB17_179:                             # %if.end545
	jmp	.LBB17_180
.LBB17_180:                             # %sw.epilog
	cmpl	$1733569504, -68(%rbp)  # imm = 0x67542BE0
	jne	.LBB17_182
.LBB17_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_181
.Lfunc_end17:
	.size	Conceal_Error.7, .Lfunc_end17-Conceal_Error.7
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI17_0:
	.quad	.LBB17_16
	.quad	.LBB17_158
	.quad	.LBB17_106
	.quad	.LBB17_180
	.quad	.LBB17_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.8        # -- Begin function DecOneForthPix.8
	.p2align	4, 0x90
	.type	DecOneForthPix.8,@function
DecOneForthPix.8:                       # @DecOneForthPix.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$290495465, -12(%rbp)   # imm = 0x11509BE9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB18_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_1
.LBB18_4:                               # %for.end
	cmpl	$290495465, -12(%rbp)   # imm = 0x11509BE9
	jne	.LBB18_6
.LBB18_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_5
.Lfunc_end18:
	.size	DecOneForthPix.8, .Lfunc_end18-DecOneForthPix.8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.9   # -- Begin function Get_Reference_Block.9
	.p2align	4, 0x90
	.type	Get_Reference_Block.9,@function
Get_Reference_Block.9:                  # @Get_Reference_Block.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$724971786, -32(%rbp)   # imm = 0x2B36310A
	movq	%rdi, -56(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_3:                               # %for.cond5
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_3
.LBB19_6:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_7
.LBB19_7:                               # %for.inc14
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_8:                               # %for.end16
	cmpl	$724971786, -32(%rbp)   # imm = 0x2B36310A
	jne	.LBB19_10
.LBB19_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_9
.Lfunc_end19:
	.size	Get_Reference_Block.9, .Lfunc_end19-Get_Reference_Block.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.10
.LCPI20_0:
	.quad	4636737291354636288     # double 100
.LCPI20_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.10
	.p2align	4, 0x90
	.type	Build_Status_Map.10,@function
Build_Status_Map.10:                    # @Build_Status_Map.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$288259700, -36(%rbp)   # imm = 0x112E7E74
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB20_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -8(%rbp)
.LBB20_3:                               # %for.cond2
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB20_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB20_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB20_13
.LBB20_6:                               # %if.then
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB20_8:                               # %if.end
                                        #   in Loop: Header=BB20_3 Depth=2
	callq	rand
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB20_10:                              # %if.end20
                                        #   in Loop: Header=BB20_3 Depth=2
	callq	rand
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	$1, -4(%rbp)
.LBB20_12:                              # %if.end29
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB20_13:                              # %if.end30
                                        #   in Loop: Header=BB20_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB20_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB20_18
.LBB20_15:                              # %if.else
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB20_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB20_17:                              # %if.end49
                                        #   in Loop: Header=BB20_3 Depth=2
	jmp	.LBB20_18
.LBB20_18:                              # %if.end50
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_3
.LBB20_20:                              # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_21
.LBB20_21:                              # %for.inc53
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_1
.LBB20_22:                              # %for.end55
	cmpl	$288259700, -36(%rbp)   # imm = 0x112E7E74
	jne	.LBB20_24
.LBB20_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_23
.Lfunc_end20:
	.size	Build_Status_Map.10, .Lfunc_end20-Build_Status_Map.10
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.11  # -- Begin function Get_Reference_Pixel.11
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.11,@function
Get_Reference_Pixel.11:                 # @Get_Reference_Pixel.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1103737238, -100(%rbp) # imm = 0x41C9B196
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB21_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB21_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB21_5
.LBB21_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB21_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB21_11
.LBB21_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB21_10
.LBB21_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB21_10:                              # %cond.end14
.LBB21_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB21_14
.LBB21_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB21_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB21_20
.LBB21_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB21_19
.LBB21_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB21_19:                              # %cond.end29
.LBB21_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_332
.LBB21_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB21_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB21_25
.LBB21_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB21_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB21_31
.LBB21_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB21_30
.LBB21_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB21_30:                              # %cond.end52
.LBB21_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_36
.LBB21_35:                              # %cond.false61
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_36:                              # %cond.end63
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_42
.LBB21_38:                              # %cond.false68
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_41
.LBB21_40:                              # %cond.false73
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_41:                              # %cond.end75
                                        #   in Loop: Header=BB21_32 Depth=1
.LBB21_42:                              # %cond.end77
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_32
.LBB21_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_47
.LBB21_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB21_53
.LBB21_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_52
.LBB21_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_52:                              # %cond.end113
.LBB21_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB21_57
.LBB21_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB21_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB21_63
.LBB21_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB21_62
.LBB21_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB21_62:                              # %cond.end136
.LBB21_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_76
.LBB21_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB21_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB21_68
.LBB21_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB21_74
.LBB21_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB21_73
.LBB21_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_73:                              # %cond.end169
.LBB21_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_75:                              # %if.end
	jmp	.LBB21_76
.LBB21_76:                              # %if.end178
	jmp	.LBB21_331
.LBB21_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB21_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB21_81
.LBB21_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB21_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB21_87
.LBB21_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB21_86
.LBB21_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB21_86:                              # %cond.end197
.LBB21_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_92
.LBB21_91:                              # %cond.false209
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_92:                              # %cond.end211
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_98
.LBB21_94:                              # %cond.false216
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_97
.LBB21_96:                              # %cond.false221
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_97:                              # %cond.end223
                                        #   in Loop: Header=BB21_88 Depth=1
.LBB21_98:                              # %cond.end225
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_88
.LBB21_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_103
.LBB21_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB21_109
.LBB21_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_108
.LBB21_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_108:                             # %cond.end266
.LBB21_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB21_113
.LBB21_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB21_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB21_119
.LBB21_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB21_118
.LBB21_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB21_118:                             # %cond.end287
.LBB21_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_132
.LBB21_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB21_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB21_124
.LBB21_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB21_130
.LBB21_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB21_129
.LBB21_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_129:                             # %cond.end320
.LBB21_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_131:                             # %if.end331
	jmp	.LBB21_132
.LBB21_132:                             # %if.end332
	jmp	.LBB21_330
.LBB21_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB21_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB21_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_139
.LBB21_138:                             # %cond.false345
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_139:                             # %cond.end347
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_145
.LBB21_141:                             # %cond.false352
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_144
.LBB21_143:                             # %cond.false357
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_144:                             # %cond.end359
                                        #   in Loop: Header=BB21_135 Depth=1
.LBB21_145:                             # %cond.end361
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_146:                             # %for.cond363
                                        #   Parent Loop BB21_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_150
.LBB21_149:                             # %cond.false371
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_150:                             # %cond.end373
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_156
.LBB21_152:                             # %cond.false378
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_155
.LBB21_154:                             # %cond.false383
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_155:                             # %cond.end385
                                        #   in Loop: Header=BB21_146 Depth=2
.LBB21_156:                             # %cond.end387
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_146
.LBB21_158:                             # %for.end401
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_135
.LBB21_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_161
.LBB21_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_167
.LBB21_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB21_173
.LBB21_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_172
.LBB21_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_172:                             # %cond.end449
.LBB21_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_177
.LBB21_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB21_183
.LBB21_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_182
.LBB21_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_182:                             # %cond.end486
.LBB21_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_196
.LBB21_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB21_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_188
.LBB21_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB21_194
.LBB21_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_193
.LBB21_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_193:                             # %cond.end526
.LBB21_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_195:                             # %if.end532
	jmp	.LBB21_196
.LBB21_196:                             # %if.end533
	jmp	.LBB21_329
.LBB21_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB21_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB21_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_203
.LBB21_202:                             # %cond.false546
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_203:                             # %cond.end548
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_209
.LBB21_205:                             # %cond.false553
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_208
.LBB21_207:                             # %cond.false558
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_208:                             # %cond.end560
                                        #   in Loop: Header=BB21_199 Depth=1
.LBB21_209:                             # %cond.end562
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_210:                             # %for.cond564
                                        #   Parent Loop BB21_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_214
.LBB21_213:                             # %cond.false572
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_214:                             # %cond.end574
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_220
.LBB21_216:                             # %cond.false579
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_219
.LBB21_218:                             # %cond.false584
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_219:                             # %cond.end586
                                        #   in Loop: Header=BB21_210 Depth=2
.LBB21_220:                             # %cond.end588
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_210
.LBB21_222:                             # %for.end602
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_199
.LBB21_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_225
.LBB21_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_231
.LBB21_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB21_237
.LBB21_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_236
.LBB21_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_236:                             # %cond.end650
.LBB21_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_241
.LBB21_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB21_247
.LBB21_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_246
.LBB21_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_246:                             # %cond.end687
.LBB21_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_258
.LBB21_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_251
.LBB21_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB21_257
.LBB21_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_256
.LBB21_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_256:                             # %cond.end724
.LBB21_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_258:                             # %if.end730
	jmp	.LBB21_328
.LBB21_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB21_262
.LBB21_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB21_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB21_265
.LBB21_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB21_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB21_271
.LBB21_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB21_270
.LBB21_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB21_270:                             # %cond.end753
.LBB21_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_276
.LBB21_275:                             # %cond.false765
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_276:                             # %cond.end767
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_282
.LBB21_278:                             # %cond.false772
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_281
.LBB21_280:                             # %cond.false777
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_281:                             # %cond.end779
                                        #   in Loop: Header=BB21_272 Depth=1
.LBB21_282:                             # %cond.end781
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_272
.LBB21_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_287
.LBB21_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB21_293
.LBB21_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_292
.LBB21_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_292:                             # %cond.end822
.LBB21_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB21_296
.LBB21_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB21_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB21_299
.LBB21_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB21_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB21_305
.LBB21_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB21_304
.LBB21_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB21_304:                             # %cond.end847
.LBB21_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_310
.LBB21_309:                             # %cond.false859
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_310:                             # %cond.end861
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_316
.LBB21_312:                             # %cond.false866
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_315
.LBB21_314:                             # %cond.false871
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_315:                             # %cond.end873
                                        #   in Loop: Header=BB21_306 Depth=1
.LBB21_316:                             # %cond.end875
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_306
.LBB21_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_321
.LBB21_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB21_327
.LBB21_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_326
.LBB21_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_326:                             # %cond.end916
.LBB21_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_328:                             # %if.end922
	jmp	.LBB21_329
.LBB21_329:                             # %if.end923
	jmp	.LBB21_330
.LBB21_330:                             # %if.end924
	jmp	.LBB21_331
.LBB21_331:                             # %if.end925
	jmp	.LBB21_332
.LBB21_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1103737238, -100(%rbp) # imm = 0x41C9B196
	jne	.LBB21_334
.LBB21_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_333
.Lfunc_end21:
	.size	Get_Reference_Pixel.11, .Lfunc_end21-Get_Reference_Pixel.11
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.12  # -- Begin function Get_Reference_Pixel.12
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.12,@function
Get_Reference_Pixel.12:                 # @Get_Reference_Pixel.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1788821295, -108(%rbp) # imm = 0x6A9F3F2F
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB22_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB22_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB22_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB22_5
.LBB22_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB22_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB22_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB22_11
.LBB22_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB22_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB22_10
.LBB22_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB22_10:                              # %cond.end14
.LBB22_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB22_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB22_14
.LBB22_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB22_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB22_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB22_20
.LBB22_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB22_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB22_19
.LBB22_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB22_19:                              # %cond.end29
.LBB22_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_332
.LBB22_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB22_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB22_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB22_25
.LBB22_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB22_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB22_31
.LBB22_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB22_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB22_30
.LBB22_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB22_30:                              # %cond.end52
.LBB22_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_36
.LBB22_35:                              # %cond.false61
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_36:                              # %cond.end63
                                        #   in Loop: Header=BB22_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB22_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_42
.LBB22_38:                              # %cond.false68
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_41
.LBB22_40:                              # %cond.false73
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_41:                              # %cond.end75
                                        #   in Loop: Header=BB22_32 Depth=1
.LBB22_42:                              # %cond.end77
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_32
.LBB22_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_47
.LBB22_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB22_53
.LBB22_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_52
.LBB22_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_52:                              # %cond.end113
.LBB22_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB22_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB22_57
.LBB22_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB22_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB22_63
.LBB22_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB22_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB22_62
.LBB22_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB22_62:                              # %cond.end136
.LBB22_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_76
.LBB22_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB22_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB22_68
.LBB22_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB22_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB22_74
.LBB22_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB22_73
.LBB22_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB22_73:                              # %cond.end169
.LBB22_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_75:                              # %if.end
	jmp	.LBB22_76
.LBB22_76:                              # %if.end178
	jmp	.LBB22_331
.LBB22_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB22_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB22_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB22_81
.LBB22_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB22_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB22_87
.LBB22_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB22_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB22_86
.LBB22_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB22_86:                              # %cond.end197
.LBB22_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_92
.LBB22_91:                              # %cond.false209
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_92:                              # %cond.end211
                                        #   in Loop: Header=BB22_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB22_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_98
.LBB22_94:                              # %cond.false216
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_97
.LBB22_96:                              # %cond.false221
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_97:                              # %cond.end223
                                        #   in Loop: Header=BB22_88 Depth=1
.LBB22_98:                              # %cond.end225
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_88
.LBB22_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_103
.LBB22_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB22_109
.LBB22_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_108
.LBB22_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_108:                             # %cond.end266
.LBB22_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB22_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB22_113
.LBB22_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB22_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB22_119
.LBB22_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB22_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB22_118
.LBB22_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB22_118:                             # %cond.end287
.LBB22_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_132
.LBB22_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB22_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB22_124
.LBB22_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB22_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB22_130
.LBB22_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB22_129
.LBB22_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB22_129:                             # %cond.end320
.LBB22_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_131:                             # %if.end331
	jmp	.LBB22_132
.LBB22_132:                             # %if.end332
	jmp	.LBB22_330
.LBB22_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB22_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB22_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_139
.LBB22_138:                             # %cond.false345
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_139:                             # %cond.end347
                                        #   in Loop: Header=BB22_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB22_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_145
.LBB22_141:                             # %cond.false352
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_144
.LBB22_143:                             # %cond.false357
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_144:                             # %cond.end359
                                        #   in Loop: Header=BB22_135 Depth=1
.LBB22_145:                             # %cond.end361
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_146:                             # %for.cond363
                                        #   Parent Loop BB22_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB22_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB22_150
.LBB22_149:                             # %cond.false371
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_150:                             # %cond.end373
                                        #   in Loop: Header=BB22_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB22_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_156
.LBB22_152:                             # %cond.false378
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB22_155
.LBB22_154:                             # %cond.false383
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_155:                             # %cond.end385
                                        #   in Loop: Header=BB22_146 Depth=2
.LBB22_156:                             # %cond.end387
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_146
.LBB22_158:                             # %for.end401
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_135
.LBB22_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_161
.LBB22_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_167
.LBB22_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB22_173
.LBB22_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_172
.LBB22_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_172:                             # %cond.end449
.LBB22_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_177
.LBB22_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB22_183
.LBB22_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_182
.LBB22_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_182:                             # %cond.end486
.LBB22_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_196
.LBB22_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB22_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_188
.LBB22_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB22_194
.LBB22_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_193
.LBB22_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_193:                             # %cond.end526
.LBB22_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_195:                             # %if.end532
	jmp	.LBB22_196
.LBB22_196:                             # %if.end533
	jmp	.LBB22_329
.LBB22_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB22_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB22_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB22_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_203
.LBB22_202:                             # %cond.false546
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_203:                             # %cond.end548
                                        #   in Loop: Header=BB22_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB22_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_209
.LBB22_205:                             # %cond.false553
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_208
.LBB22_207:                             # %cond.false558
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_208:                             # %cond.end560
                                        #   in Loop: Header=BB22_199 Depth=1
.LBB22_209:                             # %cond.end562
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_210:                             # %for.cond564
                                        #   Parent Loop BB22_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB22_214
.LBB22_213:                             # %cond.false572
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_214:                             # %cond.end574
                                        #   in Loop: Header=BB22_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB22_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_220
.LBB22_216:                             # %cond.false579
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB22_219
.LBB22_218:                             # %cond.false584
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_219:                             # %cond.end586
                                        #   in Loop: Header=BB22_210 Depth=2
.LBB22_220:                             # %cond.end588
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_210
.LBB22_222:                             # %for.end602
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_199
.LBB22_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB22_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB22_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_225
.LBB22_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_231
.LBB22_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB22_237
.LBB22_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_236
.LBB22_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_236:                             # %cond.end650
.LBB22_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_241
.LBB22_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB22_247
.LBB22_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_246
.LBB22_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_246:                             # %cond.end687
.LBB22_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_258
.LBB22_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_251
.LBB22_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB22_257
.LBB22_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_256
.LBB22_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_256:                             # %cond.end724
.LBB22_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_258:                             # %if.end730
	jmp	.LBB22_328
.LBB22_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB22_262
.LBB22_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB22_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB22_265
.LBB22_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB22_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB22_271
.LBB22_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB22_270
.LBB22_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB22_270:                             # %cond.end753
.LBB22_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_276
.LBB22_275:                             # %cond.false765
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_276:                             # %cond.end767
                                        #   in Loop: Header=BB22_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB22_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_282
.LBB22_278:                             # %cond.false772
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_281
.LBB22_280:                             # %cond.false777
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_281:                             # %cond.end779
                                        #   in Loop: Header=BB22_272 Depth=1
.LBB22_282:                             # %cond.end781
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_272
.LBB22_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_287
.LBB22_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB22_293
.LBB22_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_292
.LBB22_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_292:                             # %cond.end822
.LBB22_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB22_296
.LBB22_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB22_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB22_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB22_299
.LBB22_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB22_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB22_305
.LBB22_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB22_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB22_304
.LBB22_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB22_304:                             # %cond.end847
.LBB22_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_310
.LBB22_309:                             # %cond.false859
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_310:                             # %cond.end861
                                        #   in Loop: Header=BB22_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB22_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_316
.LBB22_312:                             # %cond.false866
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_315
.LBB22_314:                             # %cond.false871
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_315:                             # %cond.end873
                                        #   in Loop: Header=BB22_306 Depth=1
.LBB22_316:                             # %cond.end875
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_306
.LBB22_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_321
.LBB22_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB22_327
.LBB22_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_326
.LBB22_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_326:                             # %cond.end916
.LBB22_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_328:                             # %if.end922
	jmp	.LBB22_329
.LBB22_329:                             # %if.end923
	jmp	.LBB22_330
.LBB22_330:                             # %if.end924
	jmp	.LBB22_331
.LBB22_331:                             # %if.end925
	jmp	.LBB22_332
.LBB22_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1788821295, -108(%rbp) # imm = 0x6A9F3F2F
	jne	.LBB22_334
.LBB22_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_333
.Lfunc_end22:
	.size	Get_Reference_Pixel.12, .Lfunc_end22-Get_Reference_Pixel.12
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.13        # -- Begin function Conceal_Error.13
	.p2align	4, 0x90
	.type	Conceal_Error.13,@function
Conceal_Error.13:                       # @Conceal_Error.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1787435017, -68(%rbp)  # imm = 0x6A8A1809
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB23_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB23_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB23_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB23_4:                               # %land.end
.LBB23_5:                               # %lor.end
.LBB23_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB23_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB23_9
.LBB23_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB23_14
.LBB23_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB23_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB23_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB23_12:                              # %land.end51
.LBB23_13:                              # %lor.end53
.LBB23_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB23_180
# %bb.15:                               # %land.end54
	movq	.LJTI23_0(,%rax,8), %rax
	jmpq	*%rax
.LBB23_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB23_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB23_18 Depth=1
	movl	$0, -4(%rbp)
.LBB23_20:                              # %for.cond68
                                        #   Parent Loop BB23_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB23_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB23_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_20
.LBB23_23:                              # %for.end
                                        #   in Loop: Header=BB23_18 Depth=1
	jmp	.LBB23_24
.LBB23_24:                              # %for.inc85
                                        #   in Loop: Header=BB23_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_18
.LBB23_25:                              # %for.end87
	jmp	.LBB23_35
.LBB23_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB23_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB23_27 Depth=1
	movl	$0, -4(%rbp)
.LBB23_29:                              # %for.cond92
                                        #   Parent Loop BB23_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB23_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB23_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_29
.LBB23_32:                              # %for.end104
                                        #   in Loop: Header=BB23_27 Depth=1
	jmp	.LBB23_33
.LBB23_33:                              # %for.inc105
                                        #   in Loop: Header=BB23_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_27
.LBB23_34:                              # %for.end107
	jmp	.LBB23_35
.LBB23_35:                              # %if.end
	jmp	.LBB23_180
.LBB23_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB23_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_39 Depth 2
                                        #       Child Loop BB23_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB23_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB23_37 Depth=1
	movl	$0, -12(%rbp)
.LBB23_39:                              # %for.cond113
                                        #   Parent Loop BB23_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB23_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB23_39 Depth=2
	movl	$0, -4(%rbp)
.LBB23_41:                              # %for.cond117
                                        #   Parent Loop BB23_37 Depth=1
                                        #     Parent Loop BB23_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB23_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB23_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB23_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_41
.LBB23_44:                              # %for.end141
                                        #   in Loop: Header=BB23_39 Depth=2
	jmp	.LBB23_45
.LBB23_45:                              # %for.inc142
                                        #   in Loop: Header=BB23_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_39
.LBB23_46:                              # %for.end144
                                        #   in Loop: Header=BB23_37 Depth=1
	jmp	.LBB23_47
.LBB23_47:                              # %for.inc145
                                        #   in Loop: Header=BB23_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_37
.LBB23_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB23_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB23_49 Depth=1
	movl	$0, -8(%rbp)
.LBB23_51:                              # %for.cond152
                                        #   Parent Loop BB23_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB23_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB23_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_51
.LBB23_54:                              # %for.end162
                                        #   in Loop: Header=BB23_49 Depth=1
	jmp	.LBB23_55
.LBB23_55:                              # %for.inc163
                                        #   in Loop: Header=BB23_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_49
.LBB23_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB23_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB23_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB23_59 Depth=1
	movl	$0, -4(%rbp)
.LBB23_61:                              # %for.cond175
                                        #   Parent Loop BB23_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB23_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB23_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_61
.LBB23_64:                              # %for.end195
                                        #   in Loop: Header=BB23_59 Depth=1
	jmp	.LBB23_65
.LBB23_65:                              # %for.inc196
                                        #   in Loop: Header=BB23_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_59
.LBB23_66:                              # %for.end198
	jmp	.LBB23_95
.LBB23_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB23_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB23_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_71 Depth 2
                                        #       Child Loop BB23_73 Depth 3
                                        #         Child Loop BB23_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB23_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB23_71:                              # %for.cond210
                                        #   Parent Loop BB23_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_73 Depth 3
                                        #         Child Loop BB23_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB23_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB23_73:                              # %for.cond236
                                        #   Parent Loop BB23_69 Depth=1
                                        #     Parent Loop BB23_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB23_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB23_73 Depth=3
	movl	$0, -4(%rbp)
.LBB23_75:                              # %for.cond240
                                        #   Parent Loop BB23_69 Depth=1
                                        #     Parent Loop BB23_71 Depth=2
                                        #       Parent Loop BB23_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB23_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB23_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB23_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_75
.LBB23_78:                              # %for.end259
                                        #   in Loop: Header=BB23_73 Depth=3
	jmp	.LBB23_79
.LBB23_79:                              # %for.inc260
                                        #   in Loop: Header=BB23_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_73
.LBB23_80:                              # %for.end262
                                        #   in Loop: Header=BB23_71 Depth=2
	jmp	.LBB23_81
.LBB23_81:                              # %for.inc263
                                        #   in Loop: Header=BB23_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_71
.LBB23_82:                              # %for.end265
                                        #   in Loop: Header=BB23_69 Depth=1
	jmp	.LBB23_83
.LBB23_83:                              # %for.inc266
                                        #   in Loop: Header=BB23_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_69
.LBB23_84:                              # %for.end268
	jmp	.LBB23_94
.LBB23_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB23_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB23_86 Depth=1
	movl	$0, -4(%rbp)
.LBB23_88:                              # %for.cond274
                                        #   Parent Loop BB23_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB23_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB23_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_88
.LBB23_91:                              # %for.end294
                                        #   in Loop: Header=BB23_86 Depth=1
	jmp	.LBB23_92
.LBB23_92:                              # %for.inc295
                                        #   in Loop: Header=BB23_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_86
.LBB23_93:                              # %for.end297
	jmp	.LBB23_94
.LBB23_94:                              # %if.end298
	jmp	.LBB23_95
.LBB23_95:                              # %if.end299
	jmp	.LBB23_105
.LBB23_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB23_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB23_97 Depth=1
	movl	$0, -4(%rbp)
.LBB23_99:                              # %for.cond305
                                        #   Parent Loop BB23_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB23_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB23_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_99
.LBB23_102:                             # %for.end317
                                        #   in Loop: Header=BB23_97 Depth=1
	jmp	.LBB23_103
.LBB23_103:                             # %for.inc318
                                        #   in Loop: Header=BB23_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_97
.LBB23_104:                             # %for.end320
	jmp	.LBB23_105
.LBB23_105:                             # %if.end321
	jmp	.LBB23_180
.LBB23_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB23_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_110 Depth 2
                                        #       Child Loop BB23_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB23_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB23_108 Depth=1
	movl	$0, -12(%rbp)
.LBB23_110:                             # %for.cond331
                                        #   Parent Loop BB23_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB23_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB23_110 Depth=2
	movl	$0, -4(%rbp)
.LBB23_112:                             # %for.cond335
                                        #   Parent Loop BB23_108 Depth=1
                                        #     Parent Loop BB23_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB23_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB23_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB23_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_112
.LBB23_115:                             # %for.end359
                                        #   in Loop: Header=BB23_110 Depth=2
	jmp	.LBB23_116
.LBB23_116:                             # %for.inc360
                                        #   in Loop: Header=BB23_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_110
.LBB23_117:                             # %for.end362
                                        #   in Loop: Header=BB23_108 Depth=1
	jmp	.LBB23_118
.LBB23_118:                             # %for.inc363
                                        #   in Loop: Header=BB23_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_108
.LBB23_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB23_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB23_120 Depth=1
	movl	$0, -8(%rbp)
.LBB23_122:                             # %for.cond370
                                        #   Parent Loop BB23_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB23_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB23_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_122
.LBB23_125:                             # %for.end380
                                        #   in Loop: Header=BB23_120 Depth=1
	jmp	.LBB23_126
.LBB23_126:                             # %for.inc381
                                        #   in Loop: Header=BB23_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_120
.LBB23_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB23_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB23_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB23_129 Depth=1
	movl	$0, -4(%rbp)
.LBB23_131:                             # %for.cond390
                                        #   Parent Loop BB23_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB23_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB23_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_131
.LBB23_134:                             # %for.end410
                                        #   in Loop: Header=BB23_129 Depth=1
	jmp	.LBB23_135
.LBB23_135:                             # %for.inc411
                                        #   in Loop: Header=BB23_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_129
.LBB23_136:                             # %for.end413
	jmp	.LBB23_156
.LBB23_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB23_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB23_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_141 Depth 2
                                        #       Child Loop BB23_143 Depth 3
                                        #         Child Loop BB23_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB23_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB23_141:                             # %for.cond425
                                        #   Parent Loop BB23_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_143 Depth 3
                                        #         Child Loop BB23_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB23_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB23_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB23_143:                             # %for.cond452
                                        #   Parent Loop BB23_139 Depth=1
                                        #     Parent Loop BB23_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB23_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB23_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB23_143 Depth=3
	movl	$0, -4(%rbp)
.LBB23_145:                             # %for.cond456
                                        #   Parent Loop BB23_139 Depth=1
                                        #     Parent Loop BB23_141 Depth=2
                                        #       Parent Loop BB23_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB23_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB23_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB23_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_145
.LBB23_148:                             # %for.end475
                                        #   in Loop: Header=BB23_143 Depth=3
	jmp	.LBB23_149
.LBB23_149:                             # %for.inc476
                                        #   in Loop: Header=BB23_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_143
.LBB23_150:                             # %for.end478
                                        #   in Loop: Header=BB23_141 Depth=2
	jmp	.LBB23_151
.LBB23_151:                             # %for.inc479
                                        #   in Loop: Header=BB23_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB23_141
.LBB23_152:                             # %for.end481
                                        #   in Loop: Header=BB23_139 Depth=1
	jmp	.LBB23_153
.LBB23_153:                             # %for.inc482
                                        #   in Loop: Header=BB23_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB23_139
.LBB23_154:                             # %for.end484
	jmp	.LBB23_155
.LBB23_155:                             # %if.end485
	jmp	.LBB23_156
.LBB23_156:                             # %if.end486
	jmp	.LBB23_157
.LBB23_157:                             # %if.end487
	jmp	.LBB23_180
.LBB23_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB23_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB23_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB23_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB23_161 Depth=1
	movl	$0, -4(%rbp)
.LBB23_163:                             # %for.cond499
                                        #   Parent Loop BB23_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB23_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB23_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_163
.LBB23_166:                             # %for.end519
                                        #   in Loop: Header=BB23_161 Depth=1
	jmp	.LBB23_167
.LBB23_167:                             # %for.inc520
                                        #   in Loop: Header=BB23_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_161
.LBB23_168:                             # %for.end522
	jmp	.LBB23_169
.LBB23_169:                             # %if.end523
	jmp	.LBB23_179
.LBB23_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB23_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB23_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB23_171 Depth=1
	movl	$0, -4(%rbp)
.LBB23_173:                             # %for.cond529
                                        #   Parent Loop BB23_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB23_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB23_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB23_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_173
.LBB23_176:                             # %for.end541
                                        #   in Loop: Header=BB23_171 Depth=1
	jmp	.LBB23_177
.LBB23_177:                             # %for.inc542
                                        #   in Loop: Header=BB23_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_171
.LBB23_178:                             # %for.end544
	jmp	.LBB23_179
.LBB23_179:                             # %if.end545
	jmp	.LBB23_180
.LBB23_180:                             # %sw.epilog
	cmpl	$1787435017, -68(%rbp)  # imm = 0x6A8A1809
	jne	.LBB23_182
.LBB23_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_181
.Lfunc_end23:
	.size	Conceal_Error.13, .Lfunc_end23-Conceal_Error.13
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI23_0:
	.quad	.LBB23_16
	.quad	.LBB23_158
	.quad	.LBB23_106
	.quad	.LBB23_180
	.quad	.LBB23_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.14 # -- Begin function compute_residue_b8block.14
	.p2align	4, 0x90
	.type	compute_residue_b8block.14,@function
compute_residue_b8block.14:             # @compute_residue_b8block.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1465587282, -36(%rbp)  # imm = 0x575B1652
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB24_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB24_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB24_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB24_4:                               # %for.cond4
                                        #   Parent Loop BB24_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB24_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB24_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB24_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_4
.LBB24_7:                               # %for.end
                                        #   in Loop: Header=BB24_2 Depth=1
	jmp	.LBB24_8
.LBB24_8:                               # %for.inc22
                                        #   in Loop: Header=BB24_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_2
.LBB24_9:                               # %for.end24
	jmp	.LBB24_19
.LBB24_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB24_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB24_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB24_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB24_13:                              # %for.cond29
                                        #   Parent Loop BB24_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB24_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB24_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB24_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_13
.LBB24_16:                              # %for.end56
                                        #   in Loop: Header=BB24_11 Depth=1
	jmp	.LBB24_17
.LBB24_17:                              # %for.inc57
                                        #   in Loop: Header=BB24_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_11
.LBB24_18:                              # %for.end59
	jmp	.LBB24_19
.LBB24_19:                              # %if.end
	cmpl	$1465587282, -36(%rbp)  # imm = 0x575B1652
	jne	.LBB24_21
.LBB24_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_20
.Lfunc_end24:
	.size	compute_residue_b8block.14, .Lfunc_end24-compute_residue_b8block.14
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.15        # -- Begin function decode_one_mb.15
	.p2align	4, 0x90
	.type	decode_one_mb.15,@function
decode_one_mb.15:                       # @decode_one_mb.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1119072700, -4(%rbp)   # imm = 0x42B3B1BC
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$1119072700, -4(%rbp)   # imm = 0x42B3B1BC
	jne	.LBB25_2
.LBB25_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_1
.Lfunc_end25:
	.size	decode_one_mb.15, .Lfunc_end25-decode_one_mb.15
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.16 # -- Begin function compute_residue_b8block.16
	.p2align	4, 0x90
	.type	compute_residue_b8block.16,@function
compute_residue_b8block.16:             # @compute_residue_b8block.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1812203935, -36(%rbp)  # imm = 0x6C04099F
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB26_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB26_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_4:                               # %for.cond4
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB26_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB26_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB26_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_4
.LBB26_7:                               # %for.end
                                        #   in Loop: Header=BB26_2 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc22
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_2
.LBB26_9:                               # %for.end24
	jmp	.LBB26_19
.LBB26_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB26_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_13:                              # %for.cond29
                                        #   Parent Loop BB26_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB26_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB26_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB26_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_13
.LBB26_16:                              # %for.end56
                                        #   in Loop: Header=BB26_11 Depth=1
	jmp	.LBB26_17
.LBB26_17:                              # %for.inc57
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_11
.LBB26_18:                              # %for.end59
	jmp	.LBB26_19
.LBB26_19:                              # %if.end
	cmpl	$1812203935, -36(%rbp)  # imm = 0x6C04099F
	jne	.LBB26_21
.LBB26_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_20
.Lfunc_end26:
	.size	compute_residue_b8block.16, .Lfunc_end26-compute_residue_b8block.16
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.17        # -- Begin function Conceal_Error.17
	.p2align	4, 0x90
	.type	Conceal_Error.17,@function
Conceal_Error.17:                       # @Conceal_Error.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$805347232, -68(%rbp)   # imm = 0x30009FA0
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB27_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB27_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB27_4:                               # %land.end
.LBB27_5:                               # %lor.end
.LBB27_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB27_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB27_9
.LBB27_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB27_14
.LBB27_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB27_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB27_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB27_12:                              # %land.end51
.LBB27_13:                              # %lor.end53
.LBB27_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB27_180
# %bb.15:                               # %land.end54
	movq	.LJTI27_0(,%rax,8), %rax
	jmpq	*%rax
.LBB27_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB27_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB27_18 Depth=1
	movl	$0, -4(%rbp)
.LBB27_20:                              # %for.cond68
                                        #   Parent Loop BB27_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB27_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB27_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_20
.LBB27_23:                              # %for.end
                                        #   in Loop: Header=BB27_18 Depth=1
	jmp	.LBB27_24
.LBB27_24:                              # %for.inc85
                                        #   in Loop: Header=BB27_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_18
.LBB27_25:                              # %for.end87
	jmp	.LBB27_35
.LBB27_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB27_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB27_27 Depth=1
	movl	$0, -4(%rbp)
.LBB27_29:                              # %for.cond92
                                        #   Parent Loop BB27_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB27_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB27_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_29
.LBB27_32:                              # %for.end104
                                        #   in Loop: Header=BB27_27 Depth=1
	jmp	.LBB27_33
.LBB27_33:                              # %for.inc105
                                        #   in Loop: Header=BB27_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_27
.LBB27_34:                              # %for.end107
	jmp	.LBB27_35
.LBB27_35:                              # %if.end
	jmp	.LBB27_180
.LBB27_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB27_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_39 Depth 2
                                        #       Child Loop BB27_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB27_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB27_37 Depth=1
	movl	$0, -16(%rbp)
.LBB27_39:                              # %for.cond113
                                        #   Parent Loop BB27_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB27_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB27_39 Depth=2
	movl	$0, -4(%rbp)
.LBB27_41:                              # %for.cond117
                                        #   Parent Loop BB27_37 Depth=1
                                        #     Parent Loop BB27_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB27_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB27_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB27_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_41
.LBB27_44:                              # %for.end141
                                        #   in Loop: Header=BB27_39 Depth=2
	jmp	.LBB27_45
.LBB27_45:                              # %for.inc142
                                        #   in Loop: Header=BB27_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_39
.LBB27_46:                              # %for.end144
                                        #   in Loop: Header=BB27_37 Depth=1
	jmp	.LBB27_47
.LBB27_47:                              # %for.inc145
                                        #   in Loop: Header=BB27_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_37
.LBB27_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB27_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	$0, -8(%rbp)
.LBB27_51:                              # %for.cond152
                                        #   Parent Loop BB27_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB27_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB27_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_51
.LBB27_54:                              # %for.end162
                                        #   in Loop: Header=BB27_49 Depth=1
	jmp	.LBB27_55
.LBB27_55:                              # %for.inc163
                                        #   in Loop: Header=BB27_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_49
.LBB27_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB27_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB27_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	$0, -4(%rbp)
.LBB27_61:                              # %for.cond175
                                        #   Parent Loop BB27_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB27_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB27_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_61
.LBB27_64:                              # %for.end195
                                        #   in Loop: Header=BB27_59 Depth=1
	jmp	.LBB27_65
.LBB27_65:                              # %for.inc196
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_59
.LBB27_66:                              # %for.end198
	jmp	.LBB27_95
.LBB27_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB27_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB27_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_71 Depth 2
                                        #       Child Loop BB27_73 Depth 3
                                        #         Child Loop BB27_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB27_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB27_71:                              # %for.cond210
                                        #   Parent Loop BB27_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_73 Depth 3
                                        #         Child Loop BB27_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB27_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB27_73:                              # %for.cond236
                                        #   Parent Loop BB27_69 Depth=1
                                        #     Parent Loop BB27_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB27_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB27_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB27_73 Depth=3
	movl	$0, -4(%rbp)
.LBB27_75:                              # %for.cond240
                                        #   Parent Loop BB27_69 Depth=1
                                        #     Parent Loop BB27_71 Depth=2
                                        #       Parent Loop BB27_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB27_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB27_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB27_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_75
.LBB27_78:                              # %for.end259
                                        #   in Loop: Header=BB27_73 Depth=3
	jmp	.LBB27_79
.LBB27_79:                              # %for.inc260
                                        #   in Loop: Header=BB27_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_73
.LBB27_80:                              # %for.end262
                                        #   in Loop: Header=BB27_71 Depth=2
	jmp	.LBB27_81
.LBB27_81:                              # %for.inc263
                                        #   in Loop: Header=BB27_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_71
.LBB27_82:                              # %for.end265
                                        #   in Loop: Header=BB27_69 Depth=1
	jmp	.LBB27_83
.LBB27_83:                              # %for.inc266
                                        #   in Loop: Header=BB27_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_69
.LBB27_84:                              # %for.end268
	jmp	.LBB27_94
.LBB27_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB27_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB27_86 Depth=1
	movl	$0, -4(%rbp)
.LBB27_88:                              # %for.cond274
                                        #   Parent Loop BB27_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB27_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB27_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_88
.LBB27_91:                              # %for.end294
                                        #   in Loop: Header=BB27_86 Depth=1
	jmp	.LBB27_92
.LBB27_92:                              # %for.inc295
                                        #   in Loop: Header=BB27_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_86
.LBB27_93:                              # %for.end297
	jmp	.LBB27_94
.LBB27_94:                              # %if.end298
	jmp	.LBB27_95
.LBB27_95:                              # %if.end299
	jmp	.LBB27_105
.LBB27_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB27_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB27_97 Depth=1
	movl	$0, -4(%rbp)
.LBB27_99:                              # %for.cond305
                                        #   Parent Loop BB27_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB27_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB27_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_99
.LBB27_102:                             # %for.end317
                                        #   in Loop: Header=BB27_97 Depth=1
	jmp	.LBB27_103
.LBB27_103:                             # %for.inc318
                                        #   in Loop: Header=BB27_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_97
.LBB27_104:                             # %for.end320
	jmp	.LBB27_105
.LBB27_105:                             # %if.end321
	jmp	.LBB27_180
.LBB27_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB27_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_110 Depth 2
                                        #       Child Loop BB27_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB27_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB27_108 Depth=1
	movl	$0, -16(%rbp)
.LBB27_110:                             # %for.cond331
                                        #   Parent Loop BB27_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB27_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB27_110 Depth=2
	movl	$0, -4(%rbp)
.LBB27_112:                             # %for.cond335
                                        #   Parent Loop BB27_108 Depth=1
                                        #     Parent Loop BB27_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB27_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB27_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB27_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_112
.LBB27_115:                             # %for.end359
                                        #   in Loop: Header=BB27_110 Depth=2
	jmp	.LBB27_116
.LBB27_116:                             # %for.inc360
                                        #   in Loop: Header=BB27_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_110
.LBB27_117:                             # %for.end362
                                        #   in Loop: Header=BB27_108 Depth=1
	jmp	.LBB27_118
.LBB27_118:                             # %for.inc363
                                        #   in Loop: Header=BB27_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_108
.LBB27_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB27_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB27_120 Depth=1
	movl	$0, -8(%rbp)
.LBB27_122:                             # %for.cond370
                                        #   Parent Loop BB27_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB27_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB27_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_122
.LBB27_125:                             # %for.end380
                                        #   in Loop: Header=BB27_120 Depth=1
	jmp	.LBB27_126
.LBB27_126:                             # %for.inc381
                                        #   in Loop: Header=BB27_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_120
.LBB27_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB27_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB27_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB27_129 Depth=1
	movl	$0, -4(%rbp)
.LBB27_131:                             # %for.cond390
                                        #   Parent Loop BB27_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB27_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB27_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_131
.LBB27_134:                             # %for.end410
                                        #   in Loop: Header=BB27_129 Depth=1
	jmp	.LBB27_135
.LBB27_135:                             # %for.inc411
                                        #   in Loop: Header=BB27_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_129
.LBB27_136:                             # %for.end413
	jmp	.LBB27_156
.LBB27_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB27_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB27_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_141 Depth 2
                                        #       Child Loop BB27_143 Depth 3
                                        #         Child Loop BB27_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB27_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB27_141:                             # %for.cond425
                                        #   Parent Loop BB27_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB27_143 Depth 3
                                        #         Child Loop BB27_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB27_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB27_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB27_143:                             # %for.cond452
                                        #   Parent Loop BB27_139 Depth=1
                                        #     Parent Loop BB27_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB27_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB27_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB27_143 Depth=3
	movl	$0, -4(%rbp)
.LBB27_145:                             # %for.cond456
                                        #   Parent Loop BB27_139 Depth=1
                                        #     Parent Loop BB27_141 Depth=2
                                        #       Parent Loop BB27_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB27_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB27_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB27_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_145
.LBB27_148:                             # %for.end475
                                        #   in Loop: Header=BB27_143 Depth=3
	jmp	.LBB27_149
.LBB27_149:                             # %for.inc476
                                        #   in Loop: Header=BB27_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_143
.LBB27_150:                             # %for.end478
                                        #   in Loop: Header=BB27_141 Depth=2
	jmp	.LBB27_151
.LBB27_151:                             # %for.inc479
                                        #   in Loop: Header=BB27_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_141
.LBB27_152:                             # %for.end481
                                        #   in Loop: Header=BB27_139 Depth=1
	jmp	.LBB27_153
.LBB27_153:                             # %for.inc482
                                        #   in Loop: Header=BB27_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_139
.LBB27_154:                             # %for.end484
	jmp	.LBB27_155
.LBB27_155:                             # %if.end485
	jmp	.LBB27_156
.LBB27_156:                             # %if.end486
	jmp	.LBB27_157
.LBB27_157:                             # %if.end487
	jmp	.LBB27_180
.LBB27_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB27_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB27_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB27_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB27_161 Depth=1
	movl	$0, -4(%rbp)
.LBB27_163:                             # %for.cond499
                                        #   Parent Loop BB27_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB27_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB27_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_163
.LBB27_166:                             # %for.end519
                                        #   in Loop: Header=BB27_161 Depth=1
	jmp	.LBB27_167
.LBB27_167:                             # %for.inc520
                                        #   in Loop: Header=BB27_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_161
.LBB27_168:                             # %for.end522
	jmp	.LBB27_169
.LBB27_169:                             # %if.end523
	jmp	.LBB27_179
.LBB27_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB27_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB27_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB27_171 Depth=1
	movl	$0, -4(%rbp)
.LBB27_173:                             # %for.cond529
                                        #   Parent Loop BB27_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB27_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB27_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB27_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_173
.LBB27_176:                             # %for.end541
                                        #   in Loop: Header=BB27_171 Depth=1
	jmp	.LBB27_177
.LBB27_177:                             # %for.inc542
                                        #   in Loop: Header=BB27_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_171
.LBB27_178:                             # %for.end544
	jmp	.LBB27_179
.LBB27_179:                             # %if.end545
	jmp	.LBB27_180
.LBB27_180:                             # %sw.epilog
	cmpl	$805347232, -68(%rbp)   # imm = 0x30009FA0
	jne	.LBB27_182
.LBB27_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_181
.Lfunc_end27:
	.size	Conceal_Error.17, .Lfunc_end27-Conceal_Error.17
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI27_0:
	.quad	.LBB27_16
	.quad	.LBB27_158
	.quad	.LBB27_106
	.quad	.LBB27_180
	.quad	.LBB27_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.18   # -- Begin function decode_one_b8block.18
	.p2align	4, 0x90
	.type	decode_one_b8block.18,@function
decode_one_b8block.18:                  # @decode_one_b8block.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1475640870, -84(%rbp)  # imm = 0x57F47E26
	movl	%edi, -40(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_4:                               # %for.cond9
                                        #   Parent Loop BB28_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB28_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB28_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_4
.LBB28_7:                               # %for.end
                                        #   in Loop: Header=BB28_2 Depth=1
	jmp	.LBB28_8
.LBB28_8:                               # %for.inc26
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_2
.LBB28_9:                               # %for.end28
	jmp	.LBB28_96
.LBB28_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB28_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB28_31
.LBB28_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB28_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_17:                              # %for.cond40
                                        #   Parent Loop BB28_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB28_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB28_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_17
.LBB28_20:                              # %for.end49
                                        #   in Loop: Header=BB28_15 Depth=1
	jmp	.LBB28_21
.LBB28_21:                              # %for.inc50
                                        #   in Loop: Header=BB28_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_15
.LBB28_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_25:                              # %for.cond56
                                        #   Parent Loop BB28_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB28_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB28_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_25
.LBB28_28:                              # %for.end71
                                        #   in Loop: Header=BB28_23 Depth=1
	jmp	.LBB28_29
.LBB28_29:                              # %for.inc72
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_23
.LBB28_30:                              # %for.end74
	jmp	.LBB28_60
.LBB28_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB28_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB28_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_36:                              # %for.cond83
                                        #   Parent Loop BB28_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB28_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB28_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_36
.LBB28_39:                              # %for.end120
                                        #   in Loop: Header=BB28_34 Depth=1
	jmp	.LBB28_40
.LBB28_40:                              # %for.inc121
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_34
.LBB28_41:                              # %for.end123
	jmp	.LBB28_51
.LBB28_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB28_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_45:                              # %for.cond129
                                        #   Parent Loop BB28_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB28_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB28_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_45
.LBB28_48:                              # %for.end145
                                        #   in Loop: Header=BB28_43 Depth=1
	jmp	.LBB28_49
.LBB28_49:                              # %for.inc146
                                        #   in Loop: Header=BB28_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_43
.LBB28_50:                              # %for.end148
	jmp	.LBB28_51
.LBB28_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB28_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_54:                              # %for.cond153
                                        #   Parent Loop BB28_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB28_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB28_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_54
.LBB28_57:                              # %for.end167
                                        #   in Loop: Header=BB28_52 Depth=1
	jmp	.LBB28_58
.LBB28_58:                              # %for.inc168
                                        #   in Loop: Header=BB28_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_52
.LBB28_59:                              # %for.end170
	jmp	.LBB28_60
.LBB28_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB28_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB28_66
.LBB28_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB28_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB28_86
.LBB28_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_69 Depth 2
                                        #       Child Loop BB28_74 Depth 3
                                        #         Child Loop BB28_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB28_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB28_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_69:                              # %for.cond197
                                        #   Parent Loop BB28_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_74 Depth 3
                                        #         Child Loop BB28_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB28_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB28_73:                              # %if.end218
                                        #   in Loop: Header=BB28_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB28_74:                              # %for.cond233
                                        #   Parent Loop BB28_67 Depth=1
                                        #     Parent Loop BB28_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB28_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB28_74 Depth=3
	movl	$0, -8(%rbp)
.LBB28_76:                              # %for.cond237
                                        #   Parent Loop BB28_67 Depth=1
                                        #     Parent Loop BB28_69 Depth=2
                                        #       Parent Loop BB28_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB28_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB28_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB28_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_76
.LBB28_79:                              # %for.end269
                                        #   in Loop: Header=BB28_74 Depth=3
	jmp	.LBB28_80
.LBB28_80:                              # %for.inc270
                                        #   in Loop: Header=BB28_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_74
.LBB28_81:                              # %for.end272
                                        #   in Loop: Header=BB28_69 Depth=2
	jmp	.LBB28_82
.LBB28_82:                              # %for.inc273
                                        #   in Loop: Header=BB28_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_69
.LBB28_83:                              # %for.end275
                                        #   in Loop: Header=BB28_67 Depth=1
	jmp	.LBB28_84
.LBB28_84:                              # %for.inc276
                                        #   in Loop: Header=BB28_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_67
.LBB28_85:                              # %for.end278
	jmp	.LBB28_95
.LBB28_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB28_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_89:                              # %for.cond284
                                        #   Parent Loop BB28_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB28_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB28_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_89
.LBB28_92:                              # %for.end310
                                        #   in Loop: Header=BB28_87 Depth=1
	jmp	.LBB28_93
.LBB28_93:                              # %for.inc311
                                        #   in Loop: Header=BB28_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_87
.LBB28_94:                              # %for.end313
	jmp	.LBB28_95
.LBB28_95:                              # %if.end314
	jmp	.LBB28_96
.LBB28_96:                              # %if.end315
	cmpl	$1475640870, -84(%rbp)  # imm = 0x57F47E26
	jne	.LBB28_98
.LBB28_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_97
.Lfunc_end28:
	.size	decode_one_b8block.18, .Lfunc_end28-decode_one_b8block.18
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.19    # -- Begin function Error_Concealment.19
	.p2align	4, 0x90
	.type	Error_Concealment.19,@function
Error_Concealment.19:                   # @Error_Concealment.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1232892054, -16(%rbp)  # imm = 0x497C7096
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB29_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_3:                               # %for.cond2
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB29_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB29_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB29_6:                               # %if.end
                                        #   in Loop: Header=BB29_3 Depth=2
	jmp	.LBB29_7
.LBB29_7:                               # %for.inc
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_3
.LBB29_8:                               # %for.end
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_9
.LBB29_9:                               # %for.inc7
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_1
.LBB29_10:                              # %for.end9
	cmpl	$1232892054, -16(%rbp)  # imm = 0x497C7096
	jne	.LBB29_12
.LBB29_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_11
.Lfunc_end29:
	.size	Error_Concealment.19, .Lfunc_end29-Error_Concealment.19
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.20  # -- Begin function Get_Reference_Block.20
	.p2align	4, 0x90
	.type	Get_Reference_Block.20,@function
Get_Reference_Block.20:                 # @Get_Reference_Block.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$141668625, -36(%rbp)   # imm = 0x871B111
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_3:                               # %for.cond5
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_3
.LBB30_6:                               # %for.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_7
.LBB30_7:                               # %for.inc14
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_1
.LBB30_8:                               # %for.end16
	cmpl	$141668625, -36(%rbp)   # imm = 0x871B111
	jne	.LBB30_10
.LBB30_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_9
.Lfunc_end30:
	.size	Get_Reference_Block.20, .Lfunc_end30-Get_Reference_Block.20
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.21       # -- Begin function DecOneForthPix.21
	.p2align	4, 0x90
	.type	DecOneForthPix.21,@function
DecOneForthPix.21:                      # @DecOneForthPix.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$148324039, -12(%rbp)   # imm = 0x8D73EC7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB31_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_4:                               # %for.end
	cmpl	$148324039, -12(%rbp)   # imm = 0x8D73EC7
	jne	.LBB31_6
.LBB31_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_5
.Lfunc_end31:
	.size	DecOneForthPix.21, .Lfunc_end31-DecOneForthPix.21
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.22        # -- Begin function Conceal_Error.22
	.p2align	4, 0x90
	.type	Conceal_Error.22,@function
Conceal_Error.22:                       # @Conceal_Error.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$412117305, -68(%rbp)   # imm = 0x18906939
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB32_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB32_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB32_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB32_4:                               # %land.end
.LBB32_5:                               # %lor.end
.LBB32_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB32_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB32_9
.LBB32_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB32_14
.LBB32_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB32_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB32_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB32_12:                              # %land.end51
.LBB32_13:                              # %lor.end53
.LBB32_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB32_180
# %bb.15:                               # %land.end54
	movq	.LJTI32_0(,%rax,8), %rax
	jmpq	*%rax
.LBB32_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB32_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB32_18 Depth=1
	movl	$0, -4(%rbp)
.LBB32_20:                              # %for.cond68
                                        #   Parent Loop BB32_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB32_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB32_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_20
.LBB32_23:                              # %for.end
                                        #   in Loop: Header=BB32_18 Depth=1
	jmp	.LBB32_24
.LBB32_24:                              # %for.inc85
                                        #   in Loop: Header=BB32_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_18
.LBB32_25:                              # %for.end87
	jmp	.LBB32_35
.LBB32_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB32_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB32_27 Depth=1
	movl	$0, -4(%rbp)
.LBB32_29:                              # %for.cond92
                                        #   Parent Loop BB32_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB32_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB32_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_29
.LBB32_32:                              # %for.end104
                                        #   in Loop: Header=BB32_27 Depth=1
	jmp	.LBB32_33
.LBB32_33:                              # %for.inc105
                                        #   in Loop: Header=BB32_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_27
.LBB32_34:                              # %for.end107
	jmp	.LBB32_35
.LBB32_35:                              # %if.end
	jmp	.LBB32_180
.LBB32_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB32_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_39 Depth 2
                                        #       Child Loop BB32_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB32_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB32_37 Depth=1
	movl	$0, -12(%rbp)
.LBB32_39:                              # %for.cond113
                                        #   Parent Loop BB32_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB32_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB32_39 Depth=2
	movl	$0, -4(%rbp)
.LBB32_41:                              # %for.cond117
                                        #   Parent Loop BB32_37 Depth=1
                                        #     Parent Loop BB32_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB32_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB32_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB32_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_41
.LBB32_44:                              # %for.end141
                                        #   in Loop: Header=BB32_39 Depth=2
	jmp	.LBB32_45
.LBB32_45:                              # %for.inc142
                                        #   in Loop: Header=BB32_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_39
.LBB32_46:                              # %for.end144
                                        #   in Loop: Header=BB32_37 Depth=1
	jmp	.LBB32_47
.LBB32_47:                              # %for.inc145
                                        #   in Loop: Header=BB32_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_37
.LBB32_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB32_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB32_49 Depth=1
	movl	$0, -8(%rbp)
.LBB32_51:                              # %for.cond152
                                        #   Parent Loop BB32_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB32_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB32_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_51
.LBB32_54:                              # %for.end162
                                        #   in Loop: Header=BB32_49 Depth=1
	jmp	.LBB32_55
.LBB32_55:                              # %for.inc163
                                        #   in Loop: Header=BB32_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_49
.LBB32_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB32_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB32_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB32_59 Depth=1
	movl	$0, -4(%rbp)
.LBB32_61:                              # %for.cond175
                                        #   Parent Loop BB32_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB32_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB32_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_61
.LBB32_64:                              # %for.end195
                                        #   in Loop: Header=BB32_59 Depth=1
	jmp	.LBB32_65
.LBB32_65:                              # %for.inc196
                                        #   in Loop: Header=BB32_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_59
.LBB32_66:                              # %for.end198
	jmp	.LBB32_95
.LBB32_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB32_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB32_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_71 Depth 2
                                        #       Child Loop BB32_73 Depth 3
                                        #         Child Loop BB32_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB32_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB32_71:                              # %for.cond210
                                        #   Parent Loop BB32_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_73 Depth 3
                                        #         Child Loop BB32_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB32_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB32_73:                              # %for.cond236
                                        #   Parent Loop BB32_69 Depth=1
                                        #     Parent Loop BB32_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB32_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB32_73 Depth=3
	movl	$0, -4(%rbp)
.LBB32_75:                              # %for.cond240
                                        #   Parent Loop BB32_69 Depth=1
                                        #     Parent Loop BB32_71 Depth=2
                                        #       Parent Loop BB32_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB32_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB32_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB32_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_75
.LBB32_78:                              # %for.end259
                                        #   in Loop: Header=BB32_73 Depth=3
	jmp	.LBB32_79
.LBB32_79:                              # %for.inc260
                                        #   in Loop: Header=BB32_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_73
.LBB32_80:                              # %for.end262
                                        #   in Loop: Header=BB32_71 Depth=2
	jmp	.LBB32_81
.LBB32_81:                              # %for.inc263
                                        #   in Loop: Header=BB32_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_71
.LBB32_82:                              # %for.end265
                                        #   in Loop: Header=BB32_69 Depth=1
	jmp	.LBB32_83
.LBB32_83:                              # %for.inc266
                                        #   in Loop: Header=BB32_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_69
.LBB32_84:                              # %for.end268
	jmp	.LBB32_94
.LBB32_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB32_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB32_86 Depth=1
	movl	$0, -4(%rbp)
.LBB32_88:                              # %for.cond274
                                        #   Parent Loop BB32_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB32_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB32_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_88
.LBB32_91:                              # %for.end294
                                        #   in Loop: Header=BB32_86 Depth=1
	jmp	.LBB32_92
.LBB32_92:                              # %for.inc295
                                        #   in Loop: Header=BB32_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_86
.LBB32_93:                              # %for.end297
	jmp	.LBB32_94
.LBB32_94:                              # %if.end298
	jmp	.LBB32_95
.LBB32_95:                              # %if.end299
	jmp	.LBB32_105
.LBB32_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB32_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB32_97 Depth=1
	movl	$0, -4(%rbp)
.LBB32_99:                              # %for.cond305
                                        #   Parent Loop BB32_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB32_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB32_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_99
.LBB32_102:                             # %for.end317
                                        #   in Loop: Header=BB32_97 Depth=1
	jmp	.LBB32_103
.LBB32_103:                             # %for.inc318
                                        #   in Loop: Header=BB32_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_97
.LBB32_104:                             # %for.end320
	jmp	.LBB32_105
.LBB32_105:                             # %if.end321
	jmp	.LBB32_180
.LBB32_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB32_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_110 Depth 2
                                        #       Child Loop BB32_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB32_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB32_108 Depth=1
	movl	$0, -12(%rbp)
.LBB32_110:                             # %for.cond331
                                        #   Parent Loop BB32_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB32_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB32_110 Depth=2
	movl	$0, -4(%rbp)
.LBB32_112:                             # %for.cond335
                                        #   Parent Loop BB32_108 Depth=1
                                        #     Parent Loop BB32_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB32_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB32_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB32_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_112
.LBB32_115:                             # %for.end359
                                        #   in Loop: Header=BB32_110 Depth=2
	jmp	.LBB32_116
.LBB32_116:                             # %for.inc360
                                        #   in Loop: Header=BB32_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_110
.LBB32_117:                             # %for.end362
                                        #   in Loop: Header=BB32_108 Depth=1
	jmp	.LBB32_118
.LBB32_118:                             # %for.inc363
                                        #   in Loop: Header=BB32_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_108
.LBB32_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB32_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB32_120 Depth=1
	movl	$0, -8(%rbp)
.LBB32_122:                             # %for.cond370
                                        #   Parent Loop BB32_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB32_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB32_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_122
.LBB32_125:                             # %for.end380
                                        #   in Loop: Header=BB32_120 Depth=1
	jmp	.LBB32_126
.LBB32_126:                             # %for.inc381
                                        #   in Loop: Header=BB32_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_120
.LBB32_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB32_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB32_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB32_129 Depth=1
	movl	$0, -4(%rbp)
.LBB32_131:                             # %for.cond390
                                        #   Parent Loop BB32_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB32_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB32_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_131
.LBB32_134:                             # %for.end410
                                        #   in Loop: Header=BB32_129 Depth=1
	jmp	.LBB32_135
.LBB32_135:                             # %for.inc411
                                        #   in Loop: Header=BB32_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_129
.LBB32_136:                             # %for.end413
	jmp	.LBB32_156
.LBB32_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB32_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB32_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_141 Depth 2
                                        #       Child Loop BB32_143 Depth 3
                                        #         Child Loop BB32_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB32_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB32_141:                             # %for.cond425
                                        #   Parent Loop BB32_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB32_143 Depth 3
                                        #         Child Loop BB32_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB32_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB32_143:                             # %for.cond452
                                        #   Parent Loop BB32_139 Depth=1
                                        #     Parent Loop BB32_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB32_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB32_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB32_143 Depth=3
	movl	$0, -4(%rbp)
.LBB32_145:                             # %for.cond456
                                        #   Parent Loop BB32_139 Depth=1
                                        #     Parent Loop BB32_141 Depth=2
                                        #       Parent Loop BB32_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB32_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB32_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB32_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_145
.LBB32_148:                             # %for.end475
                                        #   in Loop: Header=BB32_143 Depth=3
	jmp	.LBB32_149
.LBB32_149:                             # %for.inc476
                                        #   in Loop: Header=BB32_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_143
.LBB32_150:                             # %for.end478
                                        #   in Loop: Header=BB32_141 Depth=2
	jmp	.LBB32_151
.LBB32_151:                             # %for.inc479
                                        #   in Loop: Header=BB32_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_141
.LBB32_152:                             # %for.end481
                                        #   in Loop: Header=BB32_139 Depth=1
	jmp	.LBB32_153
.LBB32_153:                             # %for.inc482
                                        #   in Loop: Header=BB32_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB32_139
.LBB32_154:                             # %for.end484
	jmp	.LBB32_155
.LBB32_155:                             # %if.end485
	jmp	.LBB32_156
.LBB32_156:                             # %if.end486
	jmp	.LBB32_157
.LBB32_157:                             # %if.end487
	jmp	.LBB32_180
.LBB32_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB32_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB32_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB32_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB32_161 Depth=1
	movl	$0, -4(%rbp)
.LBB32_163:                             # %for.cond499
                                        #   Parent Loop BB32_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB32_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB32_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_163
.LBB32_166:                             # %for.end519
                                        #   in Loop: Header=BB32_161 Depth=1
	jmp	.LBB32_167
.LBB32_167:                             # %for.inc520
                                        #   in Loop: Header=BB32_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_161
.LBB32_168:                             # %for.end522
	jmp	.LBB32_169
.LBB32_169:                             # %if.end523
	jmp	.LBB32_179
.LBB32_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB32_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB32_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	$0, -4(%rbp)
.LBB32_173:                             # %for.cond529
                                        #   Parent Loop BB32_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB32_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB32_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB32_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_173
.LBB32_176:                             # %for.end541
                                        #   in Loop: Header=BB32_171 Depth=1
	jmp	.LBB32_177
.LBB32_177:                             # %for.inc542
                                        #   in Loop: Header=BB32_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_171
.LBB32_178:                             # %for.end544
	jmp	.LBB32_179
.LBB32_179:                             # %if.end545
	jmp	.LBB32_180
.LBB32_180:                             # %sw.epilog
	cmpl	$412117305, -68(%rbp)   # imm = 0x18906939
	jne	.LBB32_182
.LBB32_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_181
.Lfunc_end32:
	.size	Conceal_Error.22, .Lfunc_end32-Conceal_Error.22
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI32_0:
	.quad	.LBB32_16
	.quad	.LBB32_158
	.quad	.LBB32_106
	.quad	.LBB32_180
	.quad	.LBB32_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.23       # -- Begin function DecOneForthPix.23
	.p2align	4, 0x90
	.type	DecOneForthPix.23,@function
DecOneForthPix.23:                      # @DecOneForthPix.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$475898249, -12(%rbp)   # imm = 0x1C5DA189
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB33_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_1
.LBB33_4:                               # %for.end
	cmpl	$475898249, -12(%rbp)   # imm = 0x1C5DA189
	jne	.LBB33_6
.LBB33_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_5
.Lfunc_end33:
	.size	DecOneForthPix.23, .Lfunc_end33-DecOneForthPix.23
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.24   # -- Begin function decode_one_b8block.24
	.p2align	4, 0x90
	.type	decode_one_b8block.24,@function
decode_one_b8block.24:                  # @decode_one_b8block.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1281621723, -84(%rbp)  # imm = 0x4C63FEDB
	movl	%edi, -40(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_4:                               # %for.cond9
                                        #   Parent Loop BB34_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB34_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB34_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_4
.LBB34_7:                               # %for.end
                                        #   in Loop: Header=BB34_2 Depth=1
	jmp	.LBB34_8
.LBB34_8:                               # %for.inc26
                                        #   in Loop: Header=BB34_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_2
.LBB34_9:                               # %for.end28
	jmp	.LBB34_96
.LBB34_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB34_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_31
.LBB34_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_17:                              # %for.cond40
                                        #   Parent Loop BB34_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB34_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB34_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_17
.LBB34_20:                              # %for.end49
                                        #   in Loop: Header=BB34_15 Depth=1
	jmp	.LBB34_21
.LBB34_21:                              # %for.inc50
                                        #   in Loop: Header=BB34_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_15
.LBB34_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_25:                              # %for.cond56
                                        #   Parent Loop BB34_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB34_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB34_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_25
.LBB34_28:                              # %for.end71
                                        #   in Loop: Header=BB34_23 Depth=1
	jmp	.LBB34_29
.LBB34_29:                              # %for.inc72
                                        #   in Loop: Header=BB34_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_23
.LBB34_30:                              # %for.end74
	jmp	.LBB34_60
.LBB34_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB34_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB34_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_36:                              # %for.cond83
                                        #   Parent Loop BB34_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB34_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB34_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_36
.LBB34_39:                              # %for.end120
                                        #   in Loop: Header=BB34_34 Depth=1
	jmp	.LBB34_40
.LBB34_40:                              # %for.inc121
                                        #   in Loop: Header=BB34_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_34
.LBB34_41:                              # %for.end123
	jmp	.LBB34_51
.LBB34_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_45:                              # %for.cond129
                                        #   Parent Loop BB34_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB34_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB34_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_45
.LBB34_48:                              # %for.end145
                                        #   in Loop: Header=BB34_43 Depth=1
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc146
                                        #   in Loop: Header=BB34_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_43
.LBB34_50:                              # %for.end148
	jmp	.LBB34_51
.LBB34_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_54:                              # %for.cond153
                                        #   Parent Loop BB34_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB34_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB34_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_54
.LBB34_57:                              # %for.end167
                                        #   in Loop: Header=BB34_52 Depth=1
	jmp	.LBB34_58
.LBB34_58:                              # %for.inc168
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_52
.LBB34_59:                              # %for.end170
	jmp	.LBB34_60
.LBB34_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB34_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB34_66
.LBB34_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB34_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB34_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB34_86
.LBB34_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB34_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_69 Depth 2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB34_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB34_69:                              # %for.cond197
                                        #   Parent Loop BB34_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_74 Depth 3
                                        #         Child Loop BB34_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB34_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB34_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB34_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB34_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB34_73:                              # %if.end218
                                        #   in Loop: Header=BB34_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB34_74:                              # %for.cond233
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB34_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	$0, -8(%rbp)
.LBB34_76:                              # %for.cond237
                                        #   Parent Loop BB34_67 Depth=1
                                        #     Parent Loop BB34_69 Depth=2
                                        #       Parent Loop BB34_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB34_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_76
.LBB34_79:                              # %for.end269
                                        #   in Loop: Header=BB34_74 Depth=3
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc270
                                        #   in Loop: Header=BB34_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_74
.LBB34_81:                              # %for.end272
                                        #   in Loop: Header=BB34_69 Depth=2
	jmp	.LBB34_82
.LBB34_82:                              # %for.inc273
                                        #   in Loop: Header=BB34_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_69
.LBB34_83:                              # %for.end275
                                        #   in Loop: Header=BB34_67 Depth=1
	jmp	.LBB34_84
.LBB34_84:                              # %for.inc276
                                        #   in Loop: Header=BB34_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_67
.LBB34_85:                              # %for.end278
	jmp	.LBB34_95
.LBB34_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB34_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB34_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB34_89:                              # %for.cond284
                                        #   Parent Loop BB34_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB34_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB34_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB34_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_89
.LBB34_92:                              # %for.end310
                                        #   in Loop: Header=BB34_87 Depth=1
	jmp	.LBB34_93
.LBB34_93:                              # %for.inc311
                                        #   in Loop: Header=BB34_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_87
.LBB34_94:                              # %for.end313
	jmp	.LBB34_95
.LBB34_95:                              # %if.end314
	jmp	.LBB34_96
.LBB34_96:                              # %if.end315
	cmpl	$1281621723, -84(%rbp)  # imm = 0x4C63FEDB
	jne	.LBB34_98
.LBB34_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_97
.Lfunc_end34:
	.size	decode_one_b8block.24, .Lfunc_end34-decode_one_b8block.24
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.25        # -- Begin function Conceal_Error.25
	.p2align	4, 0x90
	.type	Conceal_Error.25,@function
Conceal_Error.25:                       # @Conceal_Error.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$924098366, -68(%rbp)   # imm = 0x37149F3E
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB35_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB35_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB35_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB35_4:                               # %land.end
.LBB35_5:                               # %lor.end
.LBB35_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB35_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB35_9
.LBB35_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB35_14
.LBB35_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB35_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB35_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB35_12:                              # %land.end51
.LBB35_13:                              # %lor.end53
.LBB35_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB35_180
# %bb.15:                               # %land.end54
	movq	.LJTI35_0(,%rax,8), %rax
	jmpq	*%rax
.LBB35_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB35_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB35_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB35_18 Depth=1
	movl	$0, -4(%rbp)
.LBB35_20:                              # %for.cond68
                                        #   Parent Loop BB35_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB35_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB35_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_20
.LBB35_23:                              # %for.end
                                        #   in Loop: Header=BB35_18 Depth=1
	jmp	.LBB35_24
.LBB35_24:                              # %for.inc85
                                        #   in Loop: Header=BB35_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_18
.LBB35_25:                              # %for.end87
	jmp	.LBB35_35
.LBB35_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB35_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB35_27 Depth=1
	movl	$0, -4(%rbp)
.LBB35_29:                              # %for.cond92
                                        #   Parent Loop BB35_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB35_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB35_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_29
.LBB35_32:                              # %for.end104
                                        #   in Loop: Header=BB35_27 Depth=1
	jmp	.LBB35_33
.LBB35_33:                              # %for.inc105
                                        #   in Loop: Header=BB35_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_27
.LBB35_34:                              # %for.end107
	jmp	.LBB35_35
.LBB35_35:                              # %if.end
	jmp	.LBB35_180
.LBB35_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB35_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_39 Depth 2
                                        #       Child Loop BB35_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB35_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB35_37 Depth=1
	movl	$0, -12(%rbp)
.LBB35_39:                              # %for.cond113
                                        #   Parent Loop BB35_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB35_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	$0, -4(%rbp)
.LBB35_41:                              # %for.cond117
                                        #   Parent Loop BB35_37 Depth=1
                                        #     Parent Loop BB35_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB35_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB35_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB35_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_41
.LBB35_44:                              # %for.end141
                                        #   in Loop: Header=BB35_39 Depth=2
	jmp	.LBB35_45
.LBB35_45:                              # %for.inc142
                                        #   in Loop: Header=BB35_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_39
.LBB35_46:                              # %for.end144
                                        #   in Loop: Header=BB35_37 Depth=1
	jmp	.LBB35_47
.LBB35_47:                              # %for.inc145
                                        #   in Loop: Header=BB35_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_37
.LBB35_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB35_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB35_49 Depth=1
	movl	$0, -8(%rbp)
.LBB35_51:                              # %for.cond152
                                        #   Parent Loop BB35_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB35_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB35_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_51
.LBB35_54:                              # %for.end162
                                        #   in Loop: Header=BB35_49 Depth=1
	jmp	.LBB35_55
.LBB35_55:                              # %for.inc163
                                        #   in Loop: Header=BB35_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_49
.LBB35_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB35_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB35_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB35_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB35_59 Depth=1
	movl	$0, -4(%rbp)
.LBB35_61:                              # %for.cond175
                                        #   Parent Loop BB35_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB35_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB35_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_61
.LBB35_64:                              # %for.end195
                                        #   in Loop: Header=BB35_59 Depth=1
	jmp	.LBB35_65
.LBB35_65:                              # %for.inc196
                                        #   in Loop: Header=BB35_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_59
.LBB35_66:                              # %for.end198
	jmp	.LBB35_95
.LBB35_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB35_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB35_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_71 Depth 2
                                        #       Child Loop BB35_73 Depth 3
                                        #         Child Loop BB35_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB35_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB35_71:                              # %for.cond210
                                        #   Parent Loop BB35_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_73 Depth 3
                                        #         Child Loop BB35_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB35_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB35_73:                              # %for.cond236
                                        #   Parent Loop BB35_69 Depth=1
                                        #     Parent Loop BB35_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB35_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB35_73 Depth=3
	movl	$0, -4(%rbp)
.LBB35_75:                              # %for.cond240
                                        #   Parent Loop BB35_69 Depth=1
                                        #     Parent Loop BB35_71 Depth=2
                                        #       Parent Loop BB35_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB35_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB35_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB35_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_75
.LBB35_78:                              # %for.end259
                                        #   in Loop: Header=BB35_73 Depth=3
	jmp	.LBB35_79
.LBB35_79:                              # %for.inc260
                                        #   in Loop: Header=BB35_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_73
.LBB35_80:                              # %for.end262
                                        #   in Loop: Header=BB35_71 Depth=2
	jmp	.LBB35_81
.LBB35_81:                              # %for.inc263
                                        #   in Loop: Header=BB35_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_71
.LBB35_82:                              # %for.end265
                                        #   in Loop: Header=BB35_69 Depth=1
	jmp	.LBB35_83
.LBB35_83:                              # %for.inc266
                                        #   in Loop: Header=BB35_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_69
.LBB35_84:                              # %for.end268
	jmp	.LBB35_94
.LBB35_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB35_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB35_86 Depth=1
	movl	$0, -4(%rbp)
.LBB35_88:                              # %for.cond274
                                        #   Parent Loop BB35_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB35_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB35_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_88
.LBB35_91:                              # %for.end294
                                        #   in Loop: Header=BB35_86 Depth=1
	jmp	.LBB35_92
.LBB35_92:                              # %for.inc295
                                        #   in Loop: Header=BB35_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_86
.LBB35_93:                              # %for.end297
	jmp	.LBB35_94
.LBB35_94:                              # %if.end298
	jmp	.LBB35_95
.LBB35_95:                              # %if.end299
	jmp	.LBB35_105
.LBB35_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB35_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB35_97 Depth=1
	movl	$0, -4(%rbp)
.LBB35_99:                              # %for.cond305
                                        #   Parent Loop BB35_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB35_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB35_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_99
.LBB35_102:                             # %for.end317
                                        #   in Loop: Header=BB35_97 Depth=1
	jmp	.LBB35_103
.LBB35_103:                             # %for.inc318
                                        #   in Loop: Header=BB35_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_97
.LBB35_104:                             # %for.end320
	jmp	.LBB35_105
.LBB35_105:                             # %if.end321
	jmp	.LBB35_180
.LBB35_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB35_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB35_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_110 Depth 2
                                        #       Child Loop BB35_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB35_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	$0, -12(%rbp)
.LBB35_110:                             # %for.cond331
                                        #   Parent Loop BB35_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB35_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB35_110 Depth=2
	movl	$0, -4(%rbp)
.LBB35_112:                             # %for.cond335
                                        #   Parent Loop BB35_108 Depth=1
                                        #     Parent Loop BB35_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB35_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB35_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB35_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_112
.LBB35_115:                             # %for.end359
                                        #   in Loop: Header=BB35_110 Depth=2
	jmp	.LBB35_116
.LBB35_116:                             # %for.inc360
                                        #   in Loop: Header=BB35_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_110
.LBB35_117:                             # %for.end362
                                        #   in Loop: Header=BB35_108 Depth=1
	jmp	.LBB35_118
.LBB35_118:                             # %for.inc363
                                        #   in Loop: Header=BB35_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_108
.LBB35_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB35_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB35_120 Depth=1
	movl	$0, -8(%rbp)
.LBB35_122:                             # %for.cond370
                                        #   Parent Loop BB35_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB35_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB35_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_122
.LBB35_125:                             # %for.end380
                                        #   in Loop: Header=BB35_120 Depth=1
	jmp	.LBB35_126
.LBB35_126:                             # %for.inc381
                                        #   in Loop: Header=BB35_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_120
.LBB35_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB35_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB35_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB35_129 Depth=1
	movl	$0, -4(%rbp)
.LBB35_131:                             # %for.cond390
                                        #   Parent Loop BB35_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB35_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB35_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_131
.LBB35_134:                             # %for.end410
                                        #   in Loop: Header=BB35_129 Depth=1
	jmp	.LBB35_135
.LBB35_135:                             # %for.inc411
                                        #   in Loop: Header=BB35_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_129
.LBB35_136:                             # %for.end413
	jmp	.LBB35_156
.LBB35_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB35_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB35_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_141 Depth 2
                                        #       Child Loop BB35_143 Depth 3
                                        #         Child Loop BB35_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB35_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB35_141:                             # %for.cond425
                                        #   Parent Loop BB35_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_143 Depth 3
                                        #         Child Loop BB35_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB35_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB35_143:                             # %for.cond452
                                        #   Parent Loop BB35_139 Depth=1
                                        #     Parent Loop BB35_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB35_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB35_143 Depth=3
	movl	$0, -4(%rbp)
.LBB35_145:                             # %for.cond456
                                        #   Parent Loop BB35_139 Depth=1
                                        #     Parent Loop BB35_141 Depth=2
                                        #       Parent Loop BB35_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB35_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB35_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB35_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_145
.LBB35_148:                             # %for.end475
                                        #   in Loop: Header=BB35_143 Depth=3
	jmp	.LBB35_149
.LBB35_149:                             # %for.inc476
                                        #   in Loop: Header=BB35_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_143
.LBB35_150:                             # %for.end478
                                        #   in Loop: Header=BB35_141 Depth=2
	jmp	.LBB35_151
.LBB35_151:                             # %for.inc479
                                        #   in Loop: Header=BB35_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_141
.LBB35_152:                             # %for.end481
                                        #   in Loop: Header=BB35_139 Depth=1
	jmp	.LBB35_153
.LBB35_153:                             # %for.inc482
                                        #   in Loop: Header=BB35_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_139
.LBB35_154:                             # %for.end484
	jmp	.LBB35_155
.LBB35_155:                             # %if.end485
	jmp	.LBB35_156
.LBB35_156:                             # %if.end486
	jmp	.LBB35_157
.LBB35_157:                             # %if.end487
	jmp	.LBB35_180
.LBB35_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB35_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB35_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB35_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB35_161 Depth=1
	movl	$0, -4(%rbp)
.LBB35_163:                             # %for.cond499
                                        #   Parent Loop BB35_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB35_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB35_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_163
.LBB35_166:                             # %for.end519
                                        #   in Loop: Header=BB35_161 Depth=1
	jmp	.LBB35_167
.LBB35_167:                             # %for.inc520
                                        #   in Loop: Header=BB35_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_161
.LBB35_168:                             # %for.end522
	jmp	.LBB35_169
.LBB35_169:                             # %if.end523
	jmp	.LBB35_179
.LBB35_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB35_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB35_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB35_171 Depth=1
	movl	$0, -4(%rbp)
.LBB35_173:                             # %for.cond529
                                        #   Parent Loop BB35_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB35_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB35_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB35_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_173
.LBB35_176:                             # %for.end541
                                        #   in Loop: Header=BB35_171 Depth=1
	jmp	.LBB35_177
.LBB35_177:                             # %for.inc542
                                        #   in Loop: Header=BB35_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_171
.LBB35_178:                             # %for.end544
	jmp	.LBB35_179
.LBB35_179:                             # %if.end545
	jmp	.LBB35_180
.LBB35_180:                             # %sw.epilog
	cmpl	$924098366, -68(%rbp)   # imm = 0x37149F3E
	jne	.LBB35_182
.LBB35_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_181
.Lfunc_end35:
	.size	Conceal_Error.25, .Lfunc_end35-Conceal_Error.25
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI35_0:
	.quad	.LBB35_16
	.quad	.LBB35_158
	.quad	.LBB35_106
	.quad	.LBB35_180
	.quad	.LBB35_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.26
.LCPI36_0:
	.quad	4636737291354636288     # double 100
.LCPI36_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.26
	.p2align	4, 0x90
	.type	Build_Status_Map.26,@function
Build_Status_Map.26:                    # @Build_Status_Map.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$931128491, -44(%rbp)   # imm = 0x377FE4AB
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB36_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -12(%rbp)
.LBB36_3:                               # %for.cond2
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB36_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB36_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB36_13
.LBB36_6:                               # %if.then
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB36_8:                               # %if.end
                                        #   in Loop: Header=BB36_3 Depth=2
	callq	rand
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB36_10:                              # %if.end20
                                        #   in Loop: Header=BB36_3 Depth=2
	callq	rand
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI36_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	$1, -4(%rbp)
.LBB36_12:                              # %if.end29
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB36_13:                              # %if.end30
                                        #   in Loop: Header=BB36_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB36_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB36_18
.LBB36_15:                              # %if.else
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB36_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB36_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB36_17:                              # %if.end49
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_18
.LBB36_18:                              # %if.end50
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_3
.LBB36_20:                              # %for.end
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_21
.LBB36_21:                              # %for.inc53
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_1
.LBB36_22:                              # %for.end55
	cmpl	$931128491, -44(%rbp)   # imm = 0x377FE4AB
	jne	.LBB36_24
.LBB36_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_23
.Lfunc_end36:
	.size	Build_Status_Map.26, .Lfunc_end36-Build_Status_Map.26
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.27        # -- Begin function Conceal_Error.27
	.p2align	4, 0x90
	.type	Conceal_Error.27,@function
Conceal_Error.27:                       # @Conceal_Error.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1653742521, -68(%rbp)  # imm = 0x62921BB9
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB37_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB37_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB37_4:                               # %land.end
.LBB37_5:                               # %lor.end
.LBB37_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB37_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB37_9
.LBB37_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB37_14
.LBB37_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB37_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB37_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB37_12:                              # %land.end51
.LBB37_13:                              # %lor.end53
.LBB37_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB37_180
# %bb.15:                               # %land.end54
	movq	.LJTI37_0(,%rax,8), %rax
	jmpq	*%rax
.LBB37_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB37_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	$0, -4(%rbp)
.LBB37_20:                              # %for.cond68
                                        #   Parent Loop BB37_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB37_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB37_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_20
.LBB37_23:                              # %for.end
                                        #   in Loop: Header=BB37_18 Depth=1
	jmp	.LBB37_24
.LBB37_24:                              # %for.inc85
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_18
.LBB37_25:                              # %for.end87
	jmp	.LBB37_35
.LBB37_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB37_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	$0, -4(%rbp)
.LBB37_29:                              # %for.cond92
                                        #   Parent Loop BB37_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB37_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB37_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_29
.LBB37_32:                              # %for.end104
                                        #   in Loop: Header=BB37_27 Depth=1
	jmp	.LBB37_33
.LBB37_33:                              # %for.inc105
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_27
.LBB37_34:                              # %for.end107
	jmp	.LBB37_35
.LBB37_35:                              # %if.end
	jmp	.LBB37_180
.LBB37_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB37_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_39 Depth 2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	$0, -12(%rbp)
.LBB37_39:                              # %for.cond113
                                        #   Parent Loop BB37_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	$0, -4(%rbp)
.LBB37_41:                              # %for.cond117
                                        #   Parent Loop BB37_37 Depth=1
                                        #     Parent Loop BB37_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB37_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB37_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_41
.LBB37_44:                              # %for.end141
                                        #   in Loop: Header=BB37_39 Depth=2
	jmp	.LBB37_45
.LBB37_45:                              # %for.inc142
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_39
.LBB37_46:                              # %for.end144
                                        #   in Loop: Header=BB37_37 Depth=1
	jmp	.LBB37_47
.LBB37_47:                              # %for.inc145
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_37
.LBB37_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB37_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	$0, -8(%rbp)
.LBB37_51:                              # %for.cond152
                                        #   Parent Loop BB37_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB37_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB37_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_51
.LBB37_54:                              # %for.end162
                                        #   in Loop: Header=BB37_49 Depth=1
	jmp	.LBB37_55
.LBB37_55:                              # %for.inc163
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_49
.LBB37_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB37_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB37_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	$0, -4(%rbp)
.LBB37_61:                              # %for.cond175
                                        #   Parent Loop BB37_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB37_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB37_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_61
.LBB37_64:                              # %for.end195
                                        #   in Loop: Header=BB37_59 Depth=1
	jmp	.LBB37_65
.LBB37_65:                              # %for.inc196
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_59
.LBB37_66:                              # %for.end198
	jmp	.LBB37_95
.LBB37_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB37_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_71 Depth 2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_71:                              # %for.cond210
                                        #   Parent Loop BB37_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB37_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_73:                              # %for.cond236
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	$0, -4(%rbp)
.LBB37_75:                              # %for.cond240
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        #       Parent Loop BB37_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB37_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB37_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_75
.LBB37_78:                              # %for.end259
                                        #   in Loop: Header=BB37_73 Depth=3
	jmp	.LBB37_79
.LBB37_79:                              # %for.inc260
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_73
.LBB37_80:                              # %for.end262
                                        #   in Loop: Header=BB37_71 Depth=2
	jmp	.LBB37_81
.LBB37_81:                              # %for.inc263
                                        #   in Loop: Header=BB37_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_71
.LBB37_82:                              # %for.end265
                                        #   in Loop: Header=BB37_69 Depth=1
	jmp	.LBB37_83
.LBB37_83:                              # %for.inc266
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_69
.LBB37_84:                              # %for.end268
	jmp	.LBB37_94
.LBB37_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB37_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	$0, -4(%rbp)
.LBB37_88:                              # %for.cond274
                                        #   Parent Loop BB37_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB37_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB37_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_88
.LBB37_91:                              # %for.end294
                                        #   in Loop: Header=BB37_86 Depth=1
	jmp	.LBB37_92
.LBB37_92:                              # %for.inc295
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_86
.LBB37_93:                              # %for.end297
	jmp	.LBB37_94
.LBB37_94:                              # %if.end298
	jmp	.LBB37_95
.LBB37_95:                              # %if.end299
	jmp	.LBB37_105
.LBB37_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB37_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	$0, -4(%rbp)
.LBB37_99:                              # %for.cond305
                                        #   Parent Loop BB37_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB37_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB37_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_99
.LBB37_102:                             # %for.end317
                                        #   in Loop: Header=BB37_97 Depth=1
	jmp	.LBB37_103
.LBB37_103:                             # %for.inc318
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_97
.LBB37_104:                             # %for.end320
	jmp	.LBB37_105
.LBB37_105:                             # %if.end321
	jmp	.LBB37_180
.LBB37_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB37_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_110 Depth 2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	$0, -12(%rbp)
.LBB37_110:                             # %for.cond331
                                        #   Parent Loop BB37_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	$0, -4(%rbp)
.LBB37_112:                             # %for.cond335
                                        #   Parent Loop BB37_108 Depth=1
                                        #     Parent Loop BB37_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB37_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB37_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_112
.LBB37_115:                             # %for.end359
                                        #   in Loop: Header=BB37_110 Depth=2
	jmp	.LBB37_116
.LBB37_116:                             # %for.inc360
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_110
.LBB37_117:                             # %for.end362
                                        #   in Loop: Header=BB37_108 Depth=1
	jmp	.LBB37_118
.LBB37_118:                             # %for.inc363
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_108
.LBB37_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB37_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	$0, -8(%rbp)
.LBB37_122:                             # %for.cond370
                                        #   Parent Loop BB37_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB37_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB37_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_122
.LBB37_125:                             # %for.end380
                                        #   in Loop: Header=BB37_120 Depth=1
	jmp	.LBB37_126
.LBB37_126:                             # %for.inc381
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_120
.LBB37_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB37_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB37_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	$0, -4(%rbp)
.LBB37_131:                             # %for.cond390
                                        #   Parent Loop BB37_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB37_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB37_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_131
.LBB37_134:                             # %for.end410
                                        #   in Loop: Header=BB37_129 Depth=1
	jmp	.LBB37_135
.LBB37_135:                             # %for.inc411
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_129
.LBB37_136:                             # %for.end413
	jmp	.LBB37_156
.LBB37_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB37_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_141 Depth 2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_141:                             # %for.cond425
                                        #   Parent Loop BB37_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB37_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_143:                             # %for.cond452
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	$0, -4(%rbp)
.LBB37_145:                             # %for.cond456
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        #       Parent Loop BB37_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB37_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB37_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_145
.LBB37_148:                             # %for.end475
                                        #   in Loop: Header=BB37_143 Depth=3
	jmp	.LBB37_149
.LBB37_149:                             # %for.inc476
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_143
.LBB37_150:                             # %for.end478
                                        #   in Loop: Header=BB37_141 Depth=2
	jmp	.LBB37_151
.LBB37_151:                             # %for.inc479
                                        #   in Loop: Header=BB37_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_141
.LBB37_152:                             # %for.end481
                                        #   in Loop: Header=BB37_139 Depth=1
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc482
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_139
.LBB37_154:                             # %for.end484
	jmp	.LBB37_155
.LBB37_155:                             # %if.end485
	jmp	.LBB37_156
.LBB37_156:                             # %if.end486
	jmp	.LBB37_157
.LBB37_157:                             # %if.end487
	jmp	.LBB37_180
.LBB37_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB37_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB37_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	$0, -4(%rbp)
.LBB37_163:                             # %for.cond499
                                        #   Parent Loop BB37_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB37_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB37_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_163
.LBB37_166:                             # %for.end519
                                        #   in Loop: Header=BB37_161 Depth=1
	jmp	.LBB37_167
.LBB37_167:                             # %for.inc520
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_161
.LBB37_168:                             # %for.end522
	jmp	.LBB37_169
.LBB37_169:                             # %if.end523
	jmp	.LBB37_179
.LBB37_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB37_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	$0, -4(%rbp)
.LBB37_173:                             # %for.cond529
                                        #   Parent Loop BB37_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB37_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB37_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_173
.LBB37_176:                             # %for.end541
                                        #   in Loop: Header=BB37_171 Depth=1
	jmp	.LBB37_177
.LBB37_177:                             # %for.inc542
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_171
.LBB37_178:                             # %for.end544
	jmp	.LBB37_179
.LBB37_179:                             # %if.end545
	jmp	.LBB37_180
.LBB37_180:                             # %sw.epilog
	cmpl	$1653742521, -68(%rbp)  # imm = 0x62921BB9
	jne	.LBB37_182
.LBB37_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_181
.Lfunc_end37:
	.size	Conceal_Error.27, .Lfunc_end37-Conceal_Error.27
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI37_0:
	.quad	.LBB37_16
	.quad	.LBB37_158
	.quad	.LBB37_106
	.quad	.LBB37_180
	.quad	.LBB37_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.28 # -- Begin function compute_residue_b8block.28
	.p2align	4, 0x90
	.type	compute_residue_b8block.28,@function
compute_residue_b8block.28:             # @compute_residue_b8block.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$816812702, -36(%rbp)   # imm = 0x30AF929E
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB38_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_4:                               # %for.cond4
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc22
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end24
	jmp	.LBB38_19
.LBB38_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB38_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB38_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_13:                              # %for.cond29
                                        #   Parent Loop BB38_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB38_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB38_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_13
.LBB38_16:                              # %for.end56
                                        #   in Loop: Header=BB38_11 Depth=1
	jmp	.LBB38_17
.LBB38_17:                              # %for.inc57
                                        #   in Loop: Header=BB38_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_11
.LBB38_18:                              # %for.end59
	jmp	.LBB38_19
.LBB38_19:                              # %if.end
	cmpl	$816812702, -36(%rbp)   # imm = 0x30AF929E
	jne	.LBB38_21
.LBB38_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_20
.Lfunc_end38:
	.size	compute_residue_b8block.28, .Lfunc_end38-compute_residue_b8block.28
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.29       # -- Begin function DecOneForthPix.29
	.p2align	4, 0x90
	.type	DecOneForthPix.29,@function
DecOneForthPix.29:                      # @DecOneForthPix.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$986011873, -12(%rbp)   # imm = 0x3AC558E1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	cmpl	$986011873, -12(%rbp)   # imm = 0x3AC558E1
	jne	.LBB39_6
.LBB39_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_5
.Lfunc_end39:
	.size	DecOneForthPix.29, .Lfunc_end39-DecOneForthPix.29
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.30 # -- Begin function compute_residue_b8block.30
	.p2align	4, 0x90
	.type	compute_residue_b8block.30,@function
compute_residue_b8block.30:             # @compute_residue_b8block.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$765774910, -36(%rbp)   # imm = 0x2DA4CC3E
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB40_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_4:                               # %for.cond4
                                        #   Parent Loop BB40_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB40_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB40_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_4
.LBB40_7:                               # %for.end
                                        #   in Loop: Header=BB40_2 Depth=1
	jmp	.LBB40_8
.LBB40_8:                               # %for.inc22
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_2
.LBB40_9:                               # %for.end24
	jmp	.LBB40_19
.LBB40_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB40_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB40_13:                              # %for.cond29
                                        #   Parent Loop BB40_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB40_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB40_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB40_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_13
.LBB40_16:                              # %for.end56
                                        #   in Loop: Header=BB40_11 Depth=1
	jmp	.LBB40_17
.LBB40_17:                              # %for.inc57
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_11
.LBB40_18:                              # %for.end59
	jmp	.LBB40_19
.LBB40_19:                              # %if.end
	cmpl	$765774910, -36(%rbp)   # imm = 0x2DA4CC3E
	jne	.LBB40_21
.LBB40_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_20
.Lfunc_end40:
	.size	compute_residue_b8block.30, .Lfunc_end40-compute_residue_b8block.30
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.31 # -- Begin function compute_residue_b8block.31
	.p2align	4, 0x90
	.type	compute_residue_b8block.31,@function
compute_residue_b8block.31:             # @compute_residue_b8block.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$678655075, -36(%rbp)   # imm = 0x28737463
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB41_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_4:                               # %for.cond4
                                        #   Parent Loop BB41_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB41_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB41_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB41_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_4
.LBB41_7:                               # %for.end
                                        #   in Loop: Header=BB41_2 Depth=1
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc22
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_2
.LBB41_9:                               # %for.end24
	jmp	.LBB41_19
.LBB41_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB41_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB41_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB41_13:                              # %for.cond29
                                        #   Parent Loop BB41_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB41_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB41_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB41_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_13
.LBB41_16:                              # %for.end56
                                        #   in Loop: Header=BB41_11 Depth=1
	jmp	.LBB41_17
.LBB41_17:                              # %for.inc57
                                        #   in Loop: Header=BB41_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_11
.LBB41_18:                              # %for.end59
	jmp	.LBB41_19
.LBB41_19:                              # %if.end
	cmpl	$678655075, -36(%rbp)   # imm = 0x28737463
	jne	.LBB41_21
.LBB41_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_20
.Lfunc_end41:
	.size	compute_residue_b8block.31, .Lfunc_end41-compute_residue_b8block.31
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.32       # -- Begin function DecOneForthPix.32
	.p2align	4, 0x90
	.type	DecOneForthPix.32,@function
DecOneForthPix.32:                      # @DecOneForthPix.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1851964185, -12(%rbp)  # imm = 0x6E62BB19
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB42_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_1
.LBB42_4:                               # %for.end
	cmpl	$1851964185, -12(%rbp)  # imm = 0x6E62BB19
	jne	.LBB42_6
.LBB42_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_5
.Lfunc_end42:
	.size	DecOneForthPix.32, .Lfunc_end42-DecOneForthPix.32
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.33   # -- Begin function decode_one_b8block.33
	.p2align	4, 0x90
	.type	decode_one_b8block.33,@function
decode_one_b8block.33:                  # @decode_one_b8block.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1224653637, -84(%rbp)  # imm = 0x48FEBB45
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB43_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB43_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_4:                               # %for.cond9
                                        #   Parent Loop BB43_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB43_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB43_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB43_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_4
.LBB43_7:                               # %for.end
                                        #   in Loop: Header=BB43_2 Depth=1
	jmp	.LBB43_8
.LBB43_8:                               # %for.inc26
                                        #   in Loop: Header=BB43_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_2
.LBB43_9:                               # %for.end28
	jmp	.LBB43_96
.LBB43_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB43_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB43_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB43_31
.LBB43_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB43_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB43_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_17:                              # %for.cond40
                                        #   Parent Loop BB43_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB43_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB43_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB43_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_17
.LBB43_20:                              # %for.end49
                                        #   in Loop: Header=BB43_15 Depth=1
	jmp	.LBB43_21
.LBB43_21:                              # %for.inc50
                                        #   in Loop: Header=BB43_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_15
.LBB43_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB43_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_25:                              # %for.cond56
                                        #   Parent Loop BB43_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB43_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB43_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_25
.LBB43_28:                              # %for.end71
                                        #   in Loop: Header=BB43_23 Depth=1
	jmp	.LBB43_29
.LBB43_29:                              # %for.inc72
                                        #   in Loop: Header=BB43_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_23
.LBB43_30:                              # %for.end74
	jmp	.LBB43_60
.LBB43_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB43_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB43_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB43_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB43_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_36:                              # %for.cond83
                                        #   Parent Loop BB43_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB43_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB43_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_36
.LBB43_39:                              # %for.end120
                                        #   in Loop: Header=BB43_34 Depth=1
	jmp	.LBB43_40
.LBB43_40:                              # %for.inc121
                                        #   in Loop: Header=BB43_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_34
.LBB43_41:                              # %for.end123
	jmp	.LBB43_51
.LBB43_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB43_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB43_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_45:                              # %for.cond129
                                        #   Parent Loop BB43_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB43_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB43_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_45
.LBB43_48:                              # %for.end145
                                        #   in Loop: Header=BB43_43 Depth=1
	jmp	.LBB43_49
.LBB43_49:                              # %for.inc146
                                        #   in Loop: Header=BB43_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_43
.LBB43_50:                              # %for.end148
	jmp	.LBB43_51
.LBB43_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB43_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB43_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_54:                              # %for.cond153
                                        #   Parent Loop BB43_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB43_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB43_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_54
.LBB43_57:                              # %for.end167
                                        #   in Loop: Header=BB43_52 Depth=1
	jmp	.LBB43_58
.LBB43_58:                              # %for.inc168
                                        #   in Loop: Header=BB43_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_52
.LBB43_59:                              # %for.end170
	jmp	.LBB43_60
.LBB43_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB43_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB43_66
.LBB43_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB43_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB43_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB43_86
.LBB43_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB43_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_69 Depth 2
                                        #       Child Loop BB43_74 Depth 3
                                        #         Child Loop BB43_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB43_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB43_69:                              # %for.cond197
                                        #   Parent Loop BB43_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_74 Depth 3
                                        #         Child Loop BB43_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB43_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB43_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB43_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB43_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB43_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB43_73:                              # %if.end218
                                        #   in Loop: Header=BB43_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB43_74:                              # %for.cond233
                                        #   Parent Loop BB43_67 Depth=1
                                        #     Parent Loop BB43_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB43_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB43_74 Depth=3
	movl	$0, -8(%rbp)
.LBB43_76:                              # %for.cond237
                                        #   Parent Loop BB43_67 Depth=1
                                        #     Parent Loop BB43_69 Depth=2
                                        #       Parent Loop BB43_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB43_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB43_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB43_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_76
.LBB43_79:                              # %for.end269
                                        #   in Loop: Header=BB43_74 Depth=3
	jmp	.LBB43_80
.LBB43_80:                              # %for.inc270
                                        #   in Loop: Header=BB43_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_74
.LBB43_81:                              # %for.end272
                                        #   in Loop: Header=BB43_69 Depth=2
	jmp	.LBB43_82
.LBB43_82:                              # %for.inc273
                                        #   in Loop: Header=BB43_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_69
.LBB43_83:                              # %for.end275
                                        #   in Loop: Header=BB43_67 Depth=1
	jmp	.LBB43_84
.LBB43_84:                              # %for.inc276
                                        #   in Loop: Header=BB43_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_67
.LBB43_85:                              # %for.end278
	jmp	.LBB43_95
.LBB43_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB43_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB43_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_89:                              # %for.cond284
                                        #   Parent Loop BB43_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB43_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB43_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB43_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_89
.LBB43_92:                              # %for.end310
                                        #   in Loop: Header=BB43_87 Depth=1
	jmp	.LBB43_93
.LBB43_93:                              # %for.inc311
                                        #   in Loop: Header=BB43_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_87
.LBB43_94:                              # %for.end313
	jmp	.LBB43_95
.LBB43_95:                              # %if.end314
	jmp	.LBB43_96
.LBB43_96:                              # %if.end315
	cmpl	$1224653637, -84(%rbp)  # imm = 0x48FEBB45
	jne	.LBB43_98
.LBB43_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_97
.Lfunc_end43:
	.size	decode_one_b8block.33, .Lfunc_end43-decode_one_b8block.33
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.34  # -- Begin function Get_Reference_Block.34
	.p2align	4, 0x90
	.type	Get_Reference_Block.34,@function
Get_Reference_Block.34:                 # @Get_Reference_Block.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$825604169, -36(%rbp)   # imm = 0x3135B849
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -8(%rbp)
.LBB44_3:                               # %for.cond5
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_3
.LBB44_6:                               # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_7
.LBB44_7:                               # %for.inc14
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_1
.LBB44_8:                               # %for.end16
	cmpl	$825604169, -36(%rbp)   # imm = 0x3135B849
	jne	.LBB44_10
.LBB44_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_9
.Lfunc_end44:
	.size	Get_Reference_Block.34, .Lfunc_end44-Get_Reference_Block.34
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.35  # -- Begin function Get_Reference_Block.35
	.p2align	4, 0x90
	.type	Get_Reference_Block.35,@function
Get_Reference_Block.35:                 # @Get_Reference_Block.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1185480394, -24(%rbp)  # imm = 0x46A8FECA
	movq	%rdi, -48(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -56(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -8(%rbp)
.LBB45_3:                               # %for.cond5
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_3
.LBB45_6:                               # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_7
.LBB45_7:                               # %for.inc14
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_1
.LBB45_8:                               # %for.end16
	cmpl	$1185480394, -24(%rbp)  # imm = 0x46A8FECA
	jne	.LBB45_10
.LBB45_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_9
.Lfunc_end45:
	.size	Get_Reference_Block.35, .Lfunc_end45-Get_Reference_Block.35
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.36        # -- Begin function Conceal_Error.36
	.p2align	4, 0x90
	.type	Conceal_Error.36,@function
Conceal_Error.36:                       # @Conceal_Error.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$361141748, -68(%rbp)   # imm = 0x158695F4
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB46_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB46_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB46_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB46_4:                               # %land.end
.LBB46_5:                               # %lor.end
.LBB46_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB46_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB46_9
.LBB46_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB46_14
.LBB46_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB46_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB46_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB46_12:                              # %land.end51
.LBB46_13:                              # %lor.end53
.LBB46_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB46_180
# %bb.15:                               # %land.end54
	movq	.LJTI46_0(,%rax,8), %rax
	jmpq	*%rax
.LBB46_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB46_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB46_18 Depth=1
	movl	$0, -4(%rbp)
.LBB46_20:                              # %for.cond68
                                        #   Parent Loop BB46_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB46_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB46_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_20
.LBB46_23:                              # %for.end
                                        #   in Loop: Header=BB46_18 Depth=1
	jmp	.LBB46_24
.LBB46_24:                              # %for.inc85
                                        #   in Loop: Header=BB46_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_18
.LBB46_25:                              # %for.end87
	jmp	.LBB46_35
.LBB46_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB46_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB46_27 Depth=1
	movl	$0, -4(%rbp)
.LBB46_29:                              # %for.cond92
                                        #   Parent Loop BB46_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB46_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB46_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_29
.LBB46_32:                              # %for.end104
                                        #   in Loop: Header=BB46_27 Depth=1
	jmp	.LBB46_33
.LBB46_33:                              # %for.inc105
                                        #   in Loop: Header=BB46_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_27
.LBB46_34:                              # %for.end107
	jmp	.LBB46_35
.LBB46_35:                              # %if.end
	jmp	.LBB46_180
.LBB46_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB46_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_39 Depth 2
                                        #       Child Loop BB46_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB46_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB46_37 Depth=1
	movl	$0, -16(%rbp)
.LBB46_39:                              # %for.cond113
                                        #   Parent Loop BB46_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB46_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB46_39 Depth=2
	movl	$0, -4(%rbp)
.LBB46_41:                              # %for.cond117
                                        #   Parent Loop BB46_37 Depth=1
                                        #     Parent Loop BB46_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB46_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB46_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB46_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_41
.LBB46_44:                              # %for.end141
                                        #   in Loop: Header=BB46_39 Depth=2
	jmp	.LBB46_45
.LBB46_45:                              # %for.inc142
                                        #   in Loop: Header=BB46_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_39
.LBB46_46:                              # %for.end144
                                        #   in Loop: Header=BB46_37 Depth=1
	jmp	.LBB46_47
.LBB46_47:                              # %for.inc145
                                        #   in Loop: Header=BB46_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_37
.LBB46_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB46_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB46_49 Depth=1
	movl	$0, -8(%rbp)
.LBB46_51:                              # %for.cond152
                                        #   Parent Loop BB46_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB46_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB46_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_51
.LBB46_54:                              # %for.end162
                                        #   in Loop: Header=BB46_49 Depth=1
	jmp	.LBB46_55
.LBB46_55:                              # %for.inc163
                                        #   in Loop: Header=BB46_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_49
.LBB46_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB46_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB46_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB46_59 Depth=1
	movl	$0, -4(%rbp)
.LBB46_61:                              # %for.cond175
                                        #   Parent Loop BB46_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB46_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB46_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_61
.LBB46_64:                              # %for.end195
                                        #   in Loop: Header=BB46_59 Depth=1
	jmp	.LBB46_65
.LBB46_65:                              # %for.inc196
                                        #   in Loop: Header=BB46_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_59
.LBB46_66:                              # %for.end198
	jmp	.LBB46_95
.LBB46_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB46_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB46_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_71 Depth 2
                                        #       Child Loop BB46_73 Depth 3
                                        #         Child Loop BB46_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB46_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB46_71:                              # %for.cond210
                                        #   Parent Loop BB46_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_73 Depth 3
                                        #         Child Loop BB46_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB46_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB46_73:                              # %for.cond236
                                        #   Parent Loop BB46_69 Depth=1
                                        #     Parent Loop BB46_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB46_73 Depth=3
	movl	$0, -4(%rbp)
.LBB46_75:                              # %for.cond240
                                        #   Parent Loop BB46_69 Depth=1
                                        #     Parent Loop BB46_71 Depth=2
                                        #       Parent Loop BB46_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB46_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB46_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB46_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_75
.LBB46_78:                              # %for.end259
                                        #   in Loop: Header=BB46_73 Depth=3
	jmp	.LBB46_79
.LBB46_79:                              # %for.inc260
                                        #   in Loop: Header=BB46_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_73
.LBB46_80:                              # %for.end262
                                        #   in Loop: Header=BB46_71 Depth=2
	jmp	.LBB46_81
.LBB46_81:                              # %for.inc263
                                        #   in Loop: Header=BB46_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_71
.LBB46_82:                              # %for.end265
                                        #   in Loop: Header=BB46_69 Depth=1
	jmp	.LBB46_83
.LBB46_83:                              # %for.inc266
                                        #   in Loop: Header=BB46_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_69
.LBB46_84:                              # %for.end268
	jmp	.LBB46_94
.LBB46_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB46_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB46_86 Depth=1
	movl	$0, -4(%rbp)
.LBB46_88:                              # %for.cond274
                                        #   Parent Loop BB46_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB46_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB46_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_88
.LBB46_91:                              # %for.end294
                                        #   in Loop: Header=BB46_86 Depth=1
	jmp	.LBB46_92
.LBB46_92:                              # %for.inc295
                                        #   in Loop: Header=BB46_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_86
.LBB46_93:                              # %for.end297
	jmp	.LBB46_94
.LBB46_94:                              # %if.end298
	jmp	.LBB46_95
.LBB46_95:                              # %if.end299
	jmp	.LBB46_105
.LBB46_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB46_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB46_97 Depth=1
	movl	$0, -4(%rbp)
.LBB46_99:                              # %for.cond305
                                        #   Parent Loop BB46_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB46_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB46_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_99
.LBB46_102:                             # %for.end317
                                        #   in Loop: Header=BB46_97 Depth=1
	jmp	.LBB46_103
.LBB46_103:                             # %for.inc318
                                        #   in Loop: Header=BB46_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_97
.LBB46_104:                             # %for.end320
	jmp	.LBB46_105
.LBB46_105:                             # %if.end321
	jmp	.LBB46_180
.LBB46_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB46_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_110 Depth 2
                                        #       Child Loop BB46_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB46_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB46_108 Depth=1
	movl	$0, -16(%rbp)
.LBB46_110:                             # %for.cond331
                                        #   Parent Loop BB46_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB46_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB46_110 Depth=2
	movl	$0, -4(%rbp)
.LBB46_112:                             # %for.cond335
                                        #   Parent Loop BB46_108 Depth=1
                                        #     Parent Loop BB46_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB46_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB46_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB46_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_112
.LBB46_115:                             # %for.end359
                                        #   in Loop: Header=BB46_110 Depth=2
	jmp	.LBB46_116
.LBB46_116:                             # %for.inc360
                                        #   in Loop: Header=BB46_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_110
.LBB46_117:                             # %for.end362
                                        #   in Loop: Header=BB46_108 Depth=1
	jmp	.LBB46_118
.LBB46_118:                             # %for.inc363
                                        #   in Loop: Header=BB46_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_108
.LBB46_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB46_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB46_120 Depth=1
	movl	$0, -8(%rbp)
.LBB46_122:                             # %for.cond370
                                        #   Parent Loop BB46_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB46_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB46_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_122
.LBB46_125:                             # %for.end380
                                        #   in Loop: Header=BB46_120 Depth=1
	jmp	.LBB46_126
.LBB46_126:                             # %for.inc381
                                        #   in Loop: Header=BB46_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_120
.LBB46_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB46_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB46_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB46_129 Depth=1
	movl	$0, -4(%rbp)
.LBB46_131:                             # %for.cond390
                                        #   Parent Loop BB46_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB46_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB46_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_131
.LBB46_134:                             # %for.end410
                                        #   in Loop: Header=BB46_129 Depth=1
	jmp	.LBB46_135
.LBB46_135:                             # %for.inc411
                                        #   in Loop: Header=BB46_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_129
.LBB46_136:                             # %for.end413
	jmp	.LBB46_156
.LBB46_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB46_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB46_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_141 Depth 2
                                        #       Child Loop BB46_143 Depth 3
                                        #         Child Loop BB46_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB46_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB46_141:                             # %for.cond425
                                        #   Parent Loop BB46_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_143 Depth 3
                                        #         Child Loop BB46_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB46_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB46_143:                             # %for.cond452
                                        #   Parent Loop BB46_139 Depth=1
                                        #     Parent Loop BB46_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB46_143 Depth=3
	movl	$0, -4(%rbp)
.LBB46_145:                             # %for.cond456
                                        #   Parent Loop BB46_139 Depth=1
                                        #     Parent Loop BB46_141 Depth=2
                                        #       Parent Loop BB46_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB46_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB46_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB46_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_145
.LBB46_148:                             # %for.end475
                                        #   in Loop: Header=BB46_143 Depth=3
	jmp	.LBB46_149
.LBB46_149:                             # %for.inc476
                                        #   in Loop: Header=BB46_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_143
.LBB46_150:                             # %for.end478
                                        #   in Loop: Header=BB46_141 Depth=2
	jmp	.LBB46_151
.LBB46_151:                             # %for.inc479
                                        #   in Loop: Header=BB46_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_141
.LBB46_152:                             # %for.end481
                                        #   in Loop: Header=BB46_139 Depth=1
	jmp	.LBB46_153
.LBB46_153:                             # %for.inc482
                                        #   in Loop: Header=BB46_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_139
.LBB46_154:                             # %for.end484
	jmp	.LBB46_155
.LBB46_155:                             # %if.end485
	jmp	.LBB46_156
.LBB46_156:                             # %if.end486
	jmp	.LBB46_157
.LBB46_157:                             # %if.end487
	jmp	.LBB46_180
.LBB46_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB46_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB46_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB46_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB46_161 Depth=1
	movl	$0, -4(%rbp)
.LBB46_163:                             # %for.cond499
                                        #   Parent Loop BB46_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB46_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB46_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_163
.LBB46_166:                             # %for.end519
                                        #   in Loop: Header=BB46_161 Depth=1
	jmp	.LBB46_167
.LBB46_167:                             # %for.inc520
                                        #   in Loop: Header=BB46_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_161
.LBB46_168:                             # %for.end522
	jmp	.LBB46_169
.LBB46_169:                             # %if.end523
	jmp	.LBB46_179
.LBB46_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB46_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB46_171 Depth=1
	movl	$0, -4(%rbp)
.LBB46_173:                             # %for.cond529
                                        #   Parent Loop BB46_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB46_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB46_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_173
.LBB46_176:                             # %for.end541
                                        #   in Loop: Header=BB46_171 Depth=1
	jmp	.LBB46_177
.LBB46_177:                             # %for.inc542
                                        #   in Loop: Header=BB46_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_171
.LBB46_178:                             # %for.end544
	jmp	.LBB46_179
.LBB46_179:                             # %if.end545
	jmp	.LBB46_180
.LBB46_180:                             # %sw.epilog
	cmpl	$361141748, -68(%rbp)   # imm = 0x158695F4
	jne	.LBB46_182
.LBB46_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_181
.Lfunc_end46:
	.size	Conceal_Error.36, .Lfunc_end46-Conceal_Error.36
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI46_0:
	.quad	.LBB46_16
	.quad	.LBB46_158
	.quad	.LBB46_106
	.quad	.LBB46_180
	.quad	.LBB46_36
                                        # -- End function
	.text
	.globl	Error_Concealment.37    # -- Begin function Error_Concealment.37
	.p2align	4, 0x90
	.type	Error_Concealment.37,@function
Error_Concealment.37:                   # @Error_Concealment.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1757733679, -16(%rbp)  # imm = 0x68C4E32F
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB47_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB47_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB47_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB47_6:                               # %if.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_7
.LBB47_7:                               # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_3
.LBB47_8:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_9
.LBB47_9:                               # %for.inc7
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_10:                              # %for.end9
	cmpl	$1757733679, -16(%rbp)  # imm = 0x68C4E32F
	jne	.LBB47_12
.LBB47_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_11
.Lfunc_end47:
	.size	Error_Concealment.37, .Lfunc_end47-Error_Concealment.37
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.38  # -- Begin function Get_Reference_Pixel.38
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.38,@function
Get_Reference_Pixel.38:                 # @Get_Reference_Pixel.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$160353706, -108(%rbp)  # imm = 0x98ECDAA
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB48_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB48_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB48_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB48_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB48_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB48_11
.LBB48_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB48_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB48_10
.LBB48_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB48_10:                              # %cond.end14
.LBB48_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB48_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB48_14
.LBB48_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB48_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB48_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB48_20
.LBB48_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB48_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB48_19
.LBB48_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB48_19:                              # %cond.end29
.LBB48_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_332
.LBB48_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB48_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB48_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB48_25
.LBB48_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB48_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB48_31
.LBB48_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB48_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB48_30
.LBB48_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB48_30:                              # %cond.end52
.LBB48_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB48_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_36
.LBB48_35:                              # %cond.false61
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_36:                              # %cond.end63
                                        #   in Loop: Header=BB48_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB48_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_42
.LBB48_38:                              # %cond.false68
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_41
.LBB48_40:                              # %cond.false73
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_41:                              # %cond.end75
                                        #   in Loop: Header=BB48_32 Depth=1
.LBB48_42:                              # %cond.end77
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_32
.LBB48_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_47
.LBB48_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB48_53
.LBB48_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_52
.LBB48_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_52:                              # %cond.end113
.LBB48_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB48_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB48_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB48_57
.LBB48_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB48_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB48_63
.LBB48_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB48_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB48_62
.LBB48_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB48_62:                              # %cond.end136
.LBB48_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_76
.LBB48_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB48_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB48_68
.LBB48_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB48_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB48_74
.LBB48_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB48_73
.LBB48_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB48_73:                              # %cond.end169
.LBB48_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_75:                              # %if.end
	jmp	.LBB48_76
.LBB48_76:                              # %if.end178
	jmp	.LBB48_331
.LBB48_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB48_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB48_81
.LBB48_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB48_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB48_87
.LBB48_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB48_86
.LBB48_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB48_86:                              # %cond.end197
.LBB48_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB48_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_92
.LBB48_91:                              # %cond.false209
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_92:                              # %cond.end211
                                        #   in Loop: Header=BB48_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB48_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_98
.LBB48_94:                              # %cond.false216
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_97
.LBB48_96:                              # %cond.false221
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_97:                              # %cond.end223
                                        #   in Loop: Header=BB48_88 Depth=1
.LBB48_98:                              # %cond.end225
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_88
.LBB48_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_103
.LBB48_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB48_109
.LBB48_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_108
.LBB48_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_108:                             # %cond.end266
.LBB48_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB48_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB48_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB48_113
.LBB48_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB48_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB48_119
.LBB48_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB48_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB48_118
.LBB48_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB48_118:                             # %cond.end287
.LBB48_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_132
.LBB48_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB48_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB48_124
.LBB48_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB48_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB48_130
.LBB48_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB48_129
.LBB48_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB48_129:                             # %cond.end320
.LBB48_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_131:                             # %if.end331
	jmp	.LBB48_132
.LBB48_132:                             # %if.end332
	jmp	.LBB48_330
.LBB48_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB48_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB48_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB48_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_139
.LBB48_138:                             # %cond.false345
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_139:                             # %cond.end347
                                        #   in Loop: Header=BB48_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB48_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_145
.LBB48_141:                             # %cond.false352
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_144
.LBB48_143:                             # %cond.false357
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_144:                             # %cond.end359
                                        #   in Loop: Header=BB48_135 Depth=1
.LBB48_145:                             # %cond.end361
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_146:                             # %for.cond363
                                        #   Parent Loop BB48_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB48_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB48_150
.LBB48_149:                             # %cond.false371
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_150:                             # %cond.end373
                                        #   in Loop: Header=BB48_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB48_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_156
.LBB48_152:                             # %cond.false378
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB48_155
.LBB48_154:                             # %cond.false383
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_155:                             # %cond.end385
                                        #   in Loop: Header=BB48_146 Depth=2
.LBB48_156:                             # %cond.end387
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_146
.LBB48_158:                             # %for.end401
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_135
.LBB48_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB48_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB48_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB48_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_161
.LBB48_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_167
.LBB48_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB48_173
.LBB48_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_172
.LBB48_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_172:                             # %cond.end449
.LBB48_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB48_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_177
.LBB48_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB48_183
.LBB48_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_182
.LBB48_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_182:                             # %cond.end486
.LBB48_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_196
.LBB48_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB48_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_188
.LBB48_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB48_194
.LBB48_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_193
.LBB48_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_193:                             # %cond.end526
.LBB48_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_195:                             # %if.end532
	jmp	.LBB48_196
.LBB48_196:                             # %if.end533
	jmp	.LBB48_329
.LBB48_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB48_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB48_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB48_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_203
.LBB48_202:                             # %cond.false546
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_203:                             # %cond.end548
                                        #   in Loop: Header=BB48_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB48_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_209
.LBB48_205:                             # %cond.false553
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_208
.LBB48_207:                             # %cond.false558
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_208:                             # %cond.end560
                                        #   in Loop: Header=BB48_199 Depth=1
.LBB48_209:                             # %cond.end562
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_210:                             # %for.cond564
                                        #   Parent Loop BB48_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB48_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB48_214
.LBB48_213:                             # %cond.false572
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_214:                             # %cond.end574
                                        #   in Loop: Header=BB48_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB48_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_220
.LBB48_216:                             # %cond.false579
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB48_219
.LBB48_218:                             # %cond.false584
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_219:                             # %cond.end586
                                        #   in Loop: Header=BB48_210 Depth=2
.LBB48_220:                             # %cond.end588
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_210
.LBB48_222:                             # %for.end602
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_199
.LBB48_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB48_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB48_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB48_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_225
.LBB48_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_231
.LBB48_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB48_237
.LBB48_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_236
.LBB48_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_236:                             # %cond.end650
.LBB48_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB48_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_241
.LBB48_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB48_247
.LBB48_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_246
.LBB48_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_246:                             # %cond.end687
.LBB48_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_258
.LBB48_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_251
.LBB48_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB48_257
.LBB48_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_256
.LBB48_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_256:                             # %cond.end724
.LBB48_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_258:                             # %if.end730
	jmp	.LBB48_328
.LBB48_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB48_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB48_262
.LBB48_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB48_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB48_265
.LBB48_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB48_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB48_271
.LBB48_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB48_270
.LBB48_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB48_270:                             # %cond.end753
.LBB48_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB48_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_276
.LBB48_275:                             # %cond.false765
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_276:                             # %cond.end767
                                        #   in Loop: Header=BB48_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB48_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_282
.LBB48_278:                             # %cond.false772
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_281
.LBB48_280:                             # %cond.false777
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_281:                             # %cond.end779
                                        #   in Loop: Header=BB48_272 Depth=1
.LBB48_282:                             # %cond.end781
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_272
.LBB48_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_287
.LBB48_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB48_293
.LBB48_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_292
.LBB48_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_292:                             # %cond.end822
.LBB48_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB48_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB48_296
.LBB48_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB48_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB48_299
.LBB48_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB48_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB48_305
.LBB48_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB48_304
.LBB48_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB48_304:                             # %cond.end847
.LBB48_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB48_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_310
.LBB48_309:                             # %cond.false859
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_310:                             # %cond.end861
                                        #   in Loop: Header=BB48_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB48_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_316
.LBB48_312:                             # %cond.false866
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_315
.LBB48_314:                             # %cond.false871
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_315:                             # %cond.end873
                                        #   in Loop: Header=BB48_306 Depth=1
.LBB48_316:                             # %cond.end875
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_306
.LBB48_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_321
.LBB48_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB48_327
.LBB48_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_326
.LBB48_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_326:                             # %cond.end916
.LBB48_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_328:                             # %if.end922
	jmp	.LBB48_329
.LBB48_329:                             # %if.end923
	jmp	.LBB48_330
.LBB48_330:                             # %if.end924
	jmp	.LBB48_331
.LBB48_331:                             # %if.end925
	jmp	.LBB48_332
.LBB48_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$160353706, -108(%rbp)  # imm = 0x98ECDAA
	jne	.LBB48_334
.LBB48_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_333
.Lfunc_end48:
	.size	Get_Reference_Pixel.38, .Lfunc_end48-Get_Reference_Pixel.38
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.39  # -- Begin function Get_Reference_Block.39
	.p2align	4, 0x90
	.type	Get_Reference_Block.39,@function
Get_Reference_Block.39:                 # @Get_Reference_Block.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1027920542, -16(%rbp)  # imm = 0x3D44D29E
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB49_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_3:                               # %for.cond5
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB49_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_3
.LBB49_6:                               # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_7
.LBB49_7:                               # %for.inc14
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_8:                               # %for.end16
	cmpl	$1027920542, -16(%rbp)  # imm = 0x3D44D29E
	jne	.LBB49_10
.LBB49_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_9
.Lfunc_end49:
	.size	Get_Reference_Block.39, .Lfunc_end49-Get_Reference_Block.39
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.40  # -- Begin function Get_Reference_Pixel.40
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.40,@function
Get_Reference_Pixel.40:                 # @Get_Reference_Pixel.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1622358148, -104(%rbp) # imm = 0x60B33884
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB50_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB50_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB50_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB50_5
.LBB50_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB50_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB50_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB50_11
.LBB50_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB50_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB50_10
.LBB50_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB50_10:                              # %cond.end14
.LBB50_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB50_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB50_14
.LBB50_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB50_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB50_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB50_20
.LBB50_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB50_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB50_19
.LBB50_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB50_19:                              # %cond.end29
.LBB50_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_332
.LBB50_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB50_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB50_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB50_25
.LBB50_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB50_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB50_31
.LBB50_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB50_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB50_30
.LBB50_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB50_30:                              # %cond.end52
.LBB50_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB50_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_36
.LBB50_35:                              # %cond.false61
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_36:                              # %cond.end63
                                        #   in Loop: Header=BB50_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB50_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_42
.LBB50_38:                              # %cond.false68
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_41
.LBB50_40:                              # %cond.false73
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_41:                              # %cond.end75
                                        #   in Loop: Header=BB50_32 Depth=1
.LBB50_42:                              # %cond.end77
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB50_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_32
.LBB50_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_47
.LBB50_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB50_53
.LBB50_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_52
.LBB50_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_52:                              # %cond.end113
.LBB50_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB50_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB50_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB50_57
.LBB50_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB50_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB50_63
.LBB50_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB50_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB50_62
.LBB50_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB50_62:                              # %cond.end136
.LBB50_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_76
.LBB50_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB50_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB50_68
.LBB50_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB50_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB50_74
.LBB50_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB50_73
.LBB50_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB50_73:                              # %cond.end169
.LBB50_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_75:                              # %if.end
	jmp	.LBB50_76
.LBB50_76:                              # %if.end178
	jmp	.LBB50_331
.LBB50_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB50_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB50_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB50_81
.LBB50_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB50_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB50_87
.LBB50_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB50_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB50_86
.LBB50_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB50_86:                              # %cond.end197
.LBB50_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB50_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_92
.LBB50_91:                              # %cond.false209
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_92:                              # %cond.end211
                                        #   in Loop: Header=BB50_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB50_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_98
.LBB50_94:                              # %cond.false216
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_97
.LBB50_96:                              # %cond.false221
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_97:                              # %cond.end223
                                        #   in Loop: Header=BB50_88 Depth=1
.LBB50_98:                              # %cond.end225
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB50_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_88
.LBB50_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_103
.LBB50_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB50_109
.LBB50_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_108
.LBB50_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_108:                             # %cond.end266
.LBB50_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB50_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB50_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB50_113
.LBB50_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB50_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB50_119
.LBB50_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB50_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB50_118
.LBB50_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB50_118:                             # %cond.end287
.LBB50_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_132
.LBB50_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB50_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB50_124
.LBB50_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB50_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB50_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB50_130
.LBB50_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB50_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB50_129
.LBB50_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB50_129:                             # %cond.end320
.LBB50_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_131:                             # %if.end331
	jmp	.LBB50_132
.LBB50_132:                             # %if.end332
	jmp	.LBB50_330
.LBB50_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB50_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB50_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB50_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_139
.LBB50_138:                             # %cond.false345
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_139:                             # %cond.end347
                                        #   in Loop: Header=BB50_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB50_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_145
.LBB50_141:                             # %cond.false352
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_144
.LBB50_143:                             # %cond.false357
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_144:                             # %cond.end359
                                        #   in Loop: Header=BB50_135 Depth=1
.LBB50_145:                             # %cond.end361
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_146:                             # %for.cond363
                                        #   Parent Loop BB50_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB50_150
.LBB50_149:                             # %cond.false371
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_150:                             # %cond.end373
                                        #   in Loop: Header=BB50_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB50_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_156
.LBB50_152:                             # %cond.false378
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB50_155
.LBB50_154:                             # %cond.false383
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_155:                             # %cond.end385
                                        #   in Loop: Header=BB50_146 Depth=2
.LBB50_156:                             # %cond.end387
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB50_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_146
.LBB50_158:                             # %for.end401
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB50_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_135
.LBB50_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB50_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB50_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB50_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_161
.LBB50_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_167
.LBB50_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB50_173
.LBB50_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_172
.LBB50_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_172:                             # %cond.end449
.LBB50_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB50_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_177
.LBB50_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB50_183
.LBB50_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_182
.LBB50_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_182:                             # %cond.end486
.LBB50_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_196
.LBB50_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB50_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_188
.LBB50_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB50_194
.LBB50_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_193
.LBB50_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_193:                             # %cond.end526
.LBB50_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_195:                             # %if.end532
	jmp	.LBB50_196
.LBB50_196:                             # %if.end533
	jmp	.LBB50_329
.LBB50_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB50_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB50_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB50_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_203
.LBB50_202:                             # %cond.false546
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_203:                             # %cond.end548
                                        #   in Loop: Header=BB50_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB50_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_209
.LBB50_205:                             # %cond.false553
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_208
.LBB50_207:                             # %cond.false558
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_208:                             # %cond.end560
                                        #   in Loop: Header=BB50_199 Depth=1
.LBB50_209:                             # %cond.end562
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_210:                             # %for.cond564
                                        #   Parent Loop BB50_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB50_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB50_214
.LBB50_213:                             # %cond.false572
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_214:                             # %cond.end574
                                        #   in Loop: Header=BB50_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB50_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB50_220
.LBB50_216:                             # %cond.false579
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB50_219
.LBB50_218:                             # %cond.false584
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_219:                             # %cond.end586
                                        #   in Loop: Header=BB50_210 Depth=2
.LBB50_220:                             # %cond.end588
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB50_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_210
.LBB50_222:                             # %for.end602
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB50_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_199
.LBB50_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB50_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB50_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB50_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_225
.LBB50_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_231
.LBB50_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB50_237
.LBB50_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_236
.LBB50_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB50_236:                             # %cond.end650
.LBB50_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB50_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_241
.LBB50_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB50_247
.LBB50_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_246
.LBB50_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_246:                             # %cond.end687
.LBB50_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB50_258
.LBB50_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_251
.LBB50_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB50_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB50_257
.LBB50_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB50_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_256
.LBB50_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB50_256:                             # %cond.end724
.LBB50_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_258:                             # %if.end730
	jmp	.LBB50_328
.LBB50_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB50_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB50_262
.LBB50_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB50_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB50_265
.LBB50_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB50_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB50_271
.LBB50_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB50_270
.LBB50_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB50_270:                             # %cond.end753
.LBB50_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB50_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB50_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_276
.LBB50_275:                             # %cond.false765
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_276:                             # %cond.end767
                                        #   in Loop: Header=BB50_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB50_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_282
.LBB50_278:                             # %cond.false772
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB50_281
.LBB50_280:                             # %cond.false777
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_281:                             # %cond.end779
                                        #   in Loop: Header=BB50_272 Depth=1
.LBB50_282:                             # %cond.end781
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB50_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_272
.LBB50_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_287
.LBB50_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB50_293
.LBB50_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_292
.LBB50_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_292:                             # %cond.end822
.LBB50_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB50_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB50_296
.LBB50_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB50_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB50_299
.LBB50_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB50_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB50_305
.LBB50_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB50_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB50_304
.LBB50_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB50_304:                             # %cond.end847
.LBB50_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB50_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB50_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_310
.LBB50_309:                             # %cond.false859
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_310:                             # %cond.end861
                                        #   in Loop: Header=BB50_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB50_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB50_316
.LBB50_312:                             # %cond.false866
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB50_315
.LBB50_314:                             # %cond.false871
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB50_315:                             # %cond.end873
                                        #   in Loop: Header=BB50_306 Depth=1
.LBB50_316:                             # %cond.end875
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB50_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB50_306
.LBB50_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_321
.LBB50_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB50_327
.LBB50_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB50_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB50_326
.LBB50_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB50_326:                             # %cond.end916
.LBB50_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_328:                             # %if.end922
	jmp	.LBB50_329
.LBB50_329:                             # %if.end923
	jmp	.LBB50_330
.LBB50_330:                             # %if.end924
	jmp	.LBB50_331
.LBB50_331:                             # %if.end925
	jmp	.LBB50_332
.LBB50_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1622358148, -104(%rbp) # imm = 0x60B33884
	jne	.LBB50_334
.LBB50_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_333
.Lfunc_end50:
	.size	Get_Reference_Pixel.40, .Lfunc_end50-Get_Reference_Pixel.40
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.41  # -- Begin function Get_Reference_Block.41
	.p2align	4, 0x90
	.type	Get_Reference_Block.41,@function
Get_Reference_Block.41:                 # @Get_Reference_Block.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$200957002, -36(%rbp)   # imm = 0xBFA5C4A
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB51_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_3:                               # %for.cond5
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB51_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_6:                               # %for.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_7
.LBB51_7:                               # %for.inc14
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_1
.LBB51_8:                               # %for.end16
	cmpl	$200957002, -36(%rbp)   # imm = 0xBFA5C4A
	jne	.LBB51_10
.LBB51_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_9
.Lfunc_end51:
	.size	Get_Reference_Block.41, .Lfunc_end51-Get_Reference_Block.41
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.42   # -- Begin function decode_one_b8block.42
	.p2align	4, 0x90
	.type	decode_one_b8block.42,@function
decode_one_b8block.42:                  # @decode_one_b8block.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$130283833, -84(%rbp)   # imm = 0x7C3F939
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB52_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB52_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_4:                               # %for.cond9
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB52_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB52_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB52_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_4
.LBB52_7:                               # %for.end
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_8
.LBB52_8:                               # %for.inc26
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_2
.LBB52_9:                               # %for.end28
	jmp	.LBB52_96
.LBB52_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB52_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB52_31
.LBB52_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB52_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB52_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_17:                              # %for.cond40
                                        #   Parent Loop BB52_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB52_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB52_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB52_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_17
.LBB52_20:                              # %for.end49
                                        #   in Loop: Header=BB52_15 Depth=1
	jmp	.LBB52_21
.LBB52_21:                              # %for.inc50
                                        #   in Loop: Header=BB52_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_15
.LBB52_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB52_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_25:                              # %for.cond56
                                        #   Parent Loop BB52_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB52_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB52_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_25
.LBB52_28:                              # %for.end71
                                        #   in Loop: Header=BB52_23 Depth=1
	jmp	.LBB52_29
.LBB52_29:                              # %for.inc72
                                        #   in Loop: Header=BB52_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_23
.LBB52_30:                              # %for.end74
	jmp	.LBB52_60
.LBB52_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB52_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB52_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB52_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_36:                              # %for.cond83
                                        #   Parent Loop BB52_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB52_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB52_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_36
.LBB52_39:                              # %for.end120
                                        #   in Loop: Header=BB52_34 Depth=1
	jmp	.LBB52_40
.LBB52_40:                              # %for.inc121
                                        #   in Loop: Header=BB52_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_34
.LBB52_41:                              # %for.end123
	jmp	.LBB52_51
.LBB52_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB52_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_45:                              # %for.cond129
                                        #   Parent Loop BB52_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB52_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB52_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_45
.LBB52_48:                              # %for.end145
                                        #   in Loop: Header=BB52_43 Depth=1
	jmp	.LBB52_49
.LBB52_49:                              # %for.inc146
                                        #   in Loop: Header=BB52_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_43
.LBB52_50:                              # %for.end148
	jmp	.LBB52_51
.LBB52_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB52_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB52_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_54:                              # %for.cond153
                                        #   Parent Loop BB52_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB52_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB52_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB52_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_54
.LBB52_57:                              # %for.end167
                                        #   in Loop: Header=BB52_52 Depth=1
	jmp	.LBB52_58
.LBB52_58:                              # %for.inc168
                                        #   in Loop: Header=BB52_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_52
.LBB52_59:                              # %for.end170
	jmp	.LBB52_60
.LBB52_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB52_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB52_66
.LBB52_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB52_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB52_86
.LBB52_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB52_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_69 Depth 2
                                        #       Child Loop BB52_74 Depth 3
                                        #         Child Loop BB52_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB52_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB52_69:                              # %for.cond197
                                        #   Parent Loop BB52_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_74 Depth 3
                                        #         Child Loop BB52_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB52_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB52_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB52_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB52_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB52_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB52_73:                              # %if.end218
                                        #   in Loop: Header=BB52_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB52_74:                              # %for.cond233
                                        #   Parent Loop BB52_67 Depth=1
                                        #     Parent Loop BB52_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB52_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB52_74 Depth=3
	movl	$0, -8(%rbp)
.LBB52_76:                              # %for.cond237
                                        #   Parent Loop BB52_67 Depth=1
                                        #     Parent Loop BB52_69 Depth=2
                                        #       Parent Loop BB52_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB52_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB52_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB52_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_76
.LBB52_79:                              # %for.end269
                                        #   in Loop: Header=BB52_74 Depth=3
	jmp	.LBB52_80
.LBB52_80:                              # %for.inc270
                                        #   in Loop: Header=BB52_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_74
.LBB52_81:                              # %for.end272
                                        #   in Loop: Header=BB52_69 Depth=2
	jmp	.LBB52_82
.LBB52_82:                              # %for.inc273
                                        #   in Loop: Header=BB52_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_69
.LBB52_83:                              # %for.end275
                                        #   in Loop: Header=BB52_67 Depth=1
	jmp	.LBB52_84
.LBB52_84:                              # %for.inc276
                                        #   in Loop: Header=BB52_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_67
.LBB52_85:                              # %for.end278
	jmp	.LBB52_95
.LBB52_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB52_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB52_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_89:                              # %for.cond284
                                        #   Parent Loop BB52_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB52_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB52_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB52_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_89
.LBB52_92:                              # %for.end310
                                        #   in Loop: Header=BB52_87 Depth=1
	jmp	.LBB52_93
.LBB52_93:                              # %for.inc311
                                        #   in Loop: Header=BB52_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_87
.LBB52_94:                              # %for.end313
	jmp	.LBB52_95
.LBB52_95:                              # %if.end314
	jmp	.LBB52_96
.LBB52_96:                              # %if.end315
	cmpl	$130283833, -84(%rbp)   # imm = 0x7C3F939
	jne	.LBB52_98
.LBB52_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_97
.Lfunc_end52:
	.size	decode_one_b8block.42, .Lfunc_end52-decode_one_b8block.42
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.43  # -- Begin function Get_Reference_Block.43
	.p2align	4, 0x90
	.type	Get_Reference_Block.43,@function
Get_Reference_Block.43:                 # @Get_Reference_Block.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$177491621, -32(%rbp)   # imm = 0xA944EA5
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -8(%rbp)
.LBB53_3:                               # %for.cond5
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_3
.LBB53_6:                               # %for.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_7
.LBB53_7:                               # %for.inc14
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_1
.LBB53_8:                               # %for.end16
	cmpl	$177491621, -32(%rbp)   # imm = 0xA944EA5
	jne	.LBB53_10
.LBB53_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_9
.Lfunc_end53:
	.size	Get_Reference_Block.43, .Lfunc_end53-Get_Reference_Block.43
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.44  # -- Begin function Get_Reference_Block.44
	.p2align	4, 0x90
	.type	Get_Reference_Block.44,@function
Get_Reference_Block.44:                 # @Get_Reference_Block.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1262965082, -16(%rbp)  # imm = 0x4B47515A
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	$0, -4(%rbp)
.LBB54_3:                               # %for.cond5
                                        #   Parent Loop BB54_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB54_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_3
.LBB54_6:                               # %for.end
                                        #   in Loop: Header=BB54_1 Depth=1
	jmp	.LBB54_7
.LBB54_7:                               # %for.inc14
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_1
.LBB54_8:                               # %for.end16
	cmpl	$1262965082, -16(%rbp)  # imm = 0x4B47515A
	jne	.LBB54_10
.LBB54_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_9
.Lfunc_end54:
	.size	Get_Reference_Block.44, .Lfunc_end54-Get_Reference_Block.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.45
.LCPI55_0:
	.quad	4636737291354636288     # double 100
.LCPI55_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.45
	.p2align	4, 0x90
	.type	Build_Status_Map.45,@function
Build_Status_Map.45:                    # @Build_Status_Map.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1676999389, -40(%rbp)  # imm = 0x63F4FADD
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -12(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB55_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB55_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB55_13
.LBB55_6:                               # %if.then
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB55_8:                               # %if.end
                                        #   in Loop: Header=BB55_3 Depth=2
	callq	rand
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB55_10:                              # %if.end20
                                        #   in Loop: Header=BB55_3 Depth=2
	callq	rand
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI55_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	$1, -4(%rbp)
.LBB55_12:                              # %if.end29
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB55_13:                              # %if.end30
                                        #   in Loop: Header=BB55_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB55_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB55_18
.LBB55_15:                              # %if.else
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB55_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB55_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB55_17:                              # %if.end49
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_18
.LBB55_18:                              # %if.end50
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_3
.LBB55_20:                              # %for.end
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_21
.LBB55_21:                              # %for.inc53
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_1
.LBB55_22:                              # %for.end55
	cmpl	$1676999389, -40(%rbp)  # imm = 0x63F4FADD
	jne	.LBB55_24
.LBB55_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_23
.Lfunc_end55:
	.size	Build_Status_Map.45, .Lfunc_end55-Build_Status_Map.45
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.46        # -- Begin function Conceal_Error.46
	.p2align	4, 0x90
	.type	Conceal_Error.46,@function
Conceal_Error.46:                       # @Conceal_Error.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1730983229, -68(%rbp)  # imm = 0x672CB53D
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB56_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB56_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB56_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB56_4:                               # %land.end
.LBB56_5:                               # %lor.end
.LBB56_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB56_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB56_9
.LBB56_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB56_14
.LBB56_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB56_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB56_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB56_12:                              # %land.end51
.LBB56_13:                              # %lor.end53
.LBB56_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB56_180
# %bb.15:                               # %land.end54
	movq	.LJTI56_0(,%rax,8), %rax
	jmpq	*%rax
.LBB56_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB56_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB56_18 Depth=1
	movl	$0, -4(%rbp)
.LBB56_20:                              # %for.cond68
                                        #   Parent Loop BB56_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB56_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB56_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_20
.LBB56_23:                              # %for.end
                                        #   in Loop: Header=BB56_18 Depth=1
	jmp	.LBB56_24
.LBB56_24:                              # %for.inc85
                                        #   in Loop: Header=BB56_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_18
.LBB56_25:                              # %for.end87
	jmp	.LBB56_35
.LBB56_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB56_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB56_27 Depth=1
	movl	$0, -4(%rbp)
.LBB56_29:                              # %for.cond92
                                        #   Parent Loop BB56_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB56_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB56_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_29
.LBB56_32:                              # %for.end104
                                        #   in Loop: Header=BB56_27 Depth=1
	jmp	.LBB56_33
.LBB56_33:                              # %for.inc105
                                        #   in Loop: Header=BB56_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_27
.LBB56_34:                              # %for.end107
	jmp	.LBB56_35
.LBB56_35:                              # %if.end
	jmp	.LBB56_180
.LBB56_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB56_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_39 Depth 2
                                        #       Child Loop BB56_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB56_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB56_37 Depth=1
	movl	$0, -12(%rbp)
.LBB56_39:                              # %for.cond113
                                        #   Parent Loop BB56_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB56_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB56_39 Depth=2
	movl	$0, -4(%rbp)
.LBB56_41:                              # %for.cond117
                                        #   Parent Loop BB56_37 Depth=1
                                        #     Parent Loop BB56_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB56_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB56_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB56_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_41
.LBB56_44:                              # %for.end141
                                        #   in Loop: Header=BB56_39 Depth=2
	jmp	.LBB56_45
.LBB56_45:                              # %for.inc142
                                        #   in Loop: Header=BB56_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_39
.LBB56_46:                              # %for.end144
                                        #   in Loop: Header=BB56_37 Depth=1
	jmp	.LBB56_47
.LBB56_47:                              # %for.inc145
                                        #   in Loop: Header=BB56_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_37
.LBB56_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB56_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	$0, -8(%rbp)
.LBB56_51:                              # %for.cond152
                                        #   Parent Loop BB56_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB56_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB56_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_51
.LBB56_54:                              # %for.end162
                                        #   in Loop: Header=BB56_49 Depth=1
	jmp	.LBB56_55
.LBB56_55:                              # %for.inc163
                                        #   in Loop: Header=BB56_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_49
.LBB56_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB56_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB56_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB56_59 Depth=1
	movl	$0, -4(%rbp)
.LBB56_61:                              # %for.cond175
                                        #   Parent Loop BB56_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB56_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB56_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_61
.LBB56_64:                              # %for.end195
                                        #   in Loop: Header=BB56_59 Depth=1
	jmp	.LBB56_65
.LBB56_65:                              # %for.inc196
                                        #   in Loop: Header=BB56_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_59
.LBB56_66:                              # %for.end198
	jmp	.LBB56_95
.LBB56_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB56_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB56_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_71 Depth 2
                                        #       Child Loop BB56_73 Depth 3
                                        #         Child Loop BB56_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB56_71:                              # %for.cond210
                                        #   Parent Loop BB56_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_73 Depth 3
                                        #         Child Loop BB56_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB56_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB56_73:                              # %for.cond236
                                        #   Parent Loop BB56_69 Depth=1
                                        #     Parent Loop BB56_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB56_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB56_73 Depth=3
	movl	$0, -4(%rbp)
.LBB56_75:                              # %for.cond240
                                        #   Parent Loop BB56_69 Depth=1
                                        #     Parent Loop BB56_71 Depth=2
                                        #       Parent Loop BB56_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB56_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB56_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB56_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_75
.LBB56_78:                              # %for.end259
                                        #   in Loop: Header=BB56_73 Depth=3
	jmp	.LBB56_79
.LBB56_79:                              # %for.inc260
                                        #   in Loop: Header=BB56_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_73
.LBB56_80:                              # %for.end262
                                        #   in Loop: Header=BB56_71 Depth=2
	jmp	.LBB56_81
.LBB56_81:                              # %for.inc263
                                        #   in Loop: Header=BB56_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_71
.LBB56_82:                              # %for.end265
                                        #   in Loop: Header=BB56_69 Depth=1
	jmp	.LBB56_83
.LBB56_83:                              # %for.inc266
                                        #   in Loop: Header=BB56_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_69
.LBB56_84:                              # %for.end268
	jmp	.LBB56_94
.LBB56_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB56_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	$0, -4(%rbp)
.LBB56_88:                              # %for.cond274
                                        #   Parent Loop BB56_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB56_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB56_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_88
.LBB56_91:                              # %for.end294
                                        #   in Loop: Header=BB56_86 Depth=1
	jmp	.LBB56_92
.LBB56_92:                              # %for.inc295
                                        #   in Loop: Header=BB56_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_86
.LBB56_93:                              # %for.end297
	jmp	.LBB56_94
.LBB56_94:                              # %if.end298
	jmp	.LBB56_95
.LBB56_95:                              # %if.end299
	jmp	.LBB56_105
.LBB56_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB56_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB56_97 Depth=1
	movl	$0, -4(%rbp)
.LBB56_99:                              # %for.cond305
                                        #   Parent Loop BB56_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB56_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB56_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_99
.LBB56_102:                             # %for.end317
                                        #   in Loop: Header=BB56_97 Depth=1
	jmp	.LBB56_103
.LBB56_103:                             # %for.inc318
                                        #   in Loop: Header=BB56_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_97
.LBB56_104:                             # %for.end320
	jmp	.LBB56_105
.LBB56_105:                             # %if.end321
	jmp	.LBB56_180
.LBB56_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB56_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_110 Depth 2
                                        #       Child Loop BB56_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB56_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB56_108 Depth=1
	movl	$0, -12(%rbp)
.LBB56_110:                             # %for.cond331
                                        #   Parent Loop BB56_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB56_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB56_110 Depth=2
	movl	$0, -4(%rbp)
.LBB56_112:                             # %for.cond335
                                        #   Parent Loop BB56_108 Depth=1
                                        #     Parent Loop BB56_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB56_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB56_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB56_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_112
.LBB56_115:                             # %for.end359
                                        #   in Loop: Header=BB56_110 Depth=2
	jmp	.LBB56_116
.LBB56_116:                             # %for.inc360
                                        #   in Loop: Header=BB56_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_110
.LBB56_117:                             # %for.end362
                                        #   in Loop: Header=BB56_108 Depth=1
	jmp	.LBB56_118
.LBB56_118:                             # %for.inc363
                                        #   in Loop: Header=BB56_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_108
.LBB56_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB56_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB56_120 Depth=1
	movl	$0, -8(%rbp)
.LBB56_122:                             # %for.cond370
                                        #   Parent Loop BB56_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB56_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB56_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_122
.LBB56_125:                             # %for.end380
                                        #   in Loop: Header=BB56_120 Depth=1
	jmp	.LBB56_126
.LBB56_126:                             # %for.inc381
                                        #   in Loop: Header=BB56_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_120
.LBB56_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB56_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB56_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB56_129 Depth=1
	movl	$0, -4(%rbp)
.LBB56_131:                             # %for.cond390
                                        #   Parent Loop BB56_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB56_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB56_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_131
.LBB56_134:                             # %for.end410
                                        #   in Loop: Header=BB56_129 Depth=1
	jmp	.LBB56_135
.LBB56_135:                             # %for.inc411
                                        #   in Loop: Header=BB56_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_129
.LBB56_136:                             # %for.end413
	jmp	.LBB56_156
.LBB56_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB56_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB56_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_141 Depth 2
                                        #       Child Loop BB56_143 Depth 3
                                        #         Child Loop BB56_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB56_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB56_141:                             # %for.cond425
                                        #   Parent Loop BB56_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_143 Depth 3
                                        #         Child Loop BB56_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB56_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB56_143:                             # %for.cond452
                                        #   Parent Loop BB56_139 Depth=1
                                        #     Parent Loop BB56_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB56_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB56_143 Depth=3
	movl	$0, -4(%rbp)
.LBB56_145:                             # %for.cond456
                                        #   Parent Loop BB56_139 Depth=1
                                        #     Parent Loop BB56_141 Depth=2
                                        #       Parent Loop BB56_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB56_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB56_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB56_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_145
.LBB56_148:                             # %for.end475
                                        #   in Loop: Header=BB56_143 Depth=3
	jmp	.LBB56_149
.LBB56_149:                             # %for.inc476
                                        #   in Loop: Header=BB56_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_143
.LBB56_150:                             # %for.end478
                                        #   in Loop: Header=BB56_141 Depth=2
	jmp	.LBB56_151
.LBB56_151:                             # %for.inc479
                                        #   in Loop: Header=BB56_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_141
.LBB56_152:                             # %for.end481
                                        #   in Loop: Header=BB56_139 Depth=1
	jmp	.LBB56_153
.LBB56_153:                             # %for.inc482
                                        #   in Loop: Header=BB56_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_139
.LBB56_154:                             # %for.end484
	jmp	.LBB56_155
.LBB56_155:                             # %if.end485
	jmp	.LBB56_156
.LBB56_156:                             # %if.end486
	jmp	.LBB56_157
.LBB56_157:                             # %if.end487
	jmp	.LBB56_180
.LBB56_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB56_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB56_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB56_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	$0, -4(%rbp)
.LBB56_163:                             # %for.cond499
                                        #   Parent Loop BB56_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB56_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB56_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_163
.LBB56_166:                             # %for.end519
                                        #   in Loop: Header=BB56_161 Depth=1
	jmp	.LBB56_167
.LBB56_167:                             # %for.inc520
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_161
.LBB56_168:                             # %for.end522
	jmp	.LBB56_169
.LBB56_169:                             # %if.end523
	jmp	.LBB56_179
.LBB56_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB56_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB56_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	$0, -4(%rbp)
.LBB56_173:                             # %for.cond529
                                        #   Parent Loop BB56_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB56_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB56_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB56_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_173
.LBB56_176:                             # %for.end541
                                        #   in Loop: Header=BB56_171 Depth=1
	jmp	.LBB56_177
.LBB56_177:                             # %for.inc542
                                        #   in Loop: Header=BB56_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_171
.LBB56_178:                             # %for.end544
	jmp	.LBB56_179
.LBB56_179:                             # %if.end545
	jmp	.LBB56_180
.LBB56_180:                             # %sw.epilog
	cmpl	$1730983229, -68(%rbp)  # imm = 0x672CB53D
	jne	.LBB56_182
.LBB56_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_181
.Lfunc_end56:
	.size	Conceal_Error.46, .Lfunc_end56-Conceal_Error.46
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI56_0:
	.quad	.LBB56_16
	.quad	.LBB56_158
	.quad	.LBB56_106
	.quad	.LBB56_180
	.quad	.LBB56_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.47  # -- Begin function Get_Reference_Block.47
	.p2align	4, 0x90
	.type	Get_Reference_Block.47,@function
Get_Reference_Block.47:                 # @Get_Reference_Block.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1908499099, -36(%rbp)  # imm = 0x71C1629B
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB57_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -8(%rbp)
.LBB57_3:                               # %for.cond5
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB57_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_3
.LBB57_6:                               # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_7
.LBB57_7:                               # %for.inc14
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_1
.LBB57_8:                               # %for.end16
	cmpl	$1908499099, -36(%rbp)  # imm = 0x71C1629B
	jne	.LBB57_10
.LBB57_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_9
.Lfunc_end57:
	.size	Get_Reference_Block.47, .Lfunc_end57-Get_Reference_Block.47
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.48   # -- Begin function decode_one_b8block.48
	.p2align	4, 0x90
	.type	decode_one_b8block.48,@function
decode_one_b8block.48:                  # @decode_one_b8block.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1577593821, -84(%rbp)  # imm = 0x5E082BDD
	movl	%edi, -48(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB58_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB58_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_4:                               # %for.cond9
                                        #   Parent Loop BB58_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB58_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB58_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_4
.LBB58_7:                               # %for.end
                                        #   in Loop: Header=BB58_2 Depth=1
	jmp	.LBB58_8
.LBB58_8:                               # %for.inc26
                                        #   in Loop: Header=BB58_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_2
.LBB58_9:                               # %for.end28
	jmp	.LBB58_96
.LBB58_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB58_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB58_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB58_31
.LBB58_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB58_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB58_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_17:                              # %for.cond40
                                        #   Parent Loop BB58_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB58_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB58_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_17
.LBB58_20:                              # %for.end49
                                        #   in Loop: Header=BB58_15 Depth=1
	jmp	.LBB58_21
.LBB58_21:                              # %for.inc50
                                        #   in Loop: Header=BB58_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_15
.LBB58_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB58_25:                              # %for.cond56
                                        #   Parent Loop BB58_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB58_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB58_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB58_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_25
.LBB58_28:                              # %for.end71
                                        #   in Loop: Header=BB58_23 Depth=1
	jmp	.LBB58_29
.LBB58_29:                              # %for.inc72
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_23
.LBB58_30:                              # %for.end74
	jmp	.LBB58_60
.LBB58_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB58_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB58_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB58_36:                              # %for.cond83
                                        #   Parent Loop BB58_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB58_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB58_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB58_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_36
.LBB58_39:                              # %for.end120
                                        #   in Loop: Header=BB58_34 Depth=1
	jmp	.LBB58_40
.LBB58_40:                              # %for.inc121
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_34
.LBB58_41:                              # %for.end123
	jmp	.LBB58_51
.LBB58_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB58_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB58_45:                              # %for.cond129
                                        #   Parent Loop BB58_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB58_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB58_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB58_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_45
.LBB58_48:                              # %for.end145
                                        #   in Loop: Header=BB58_43 Depth=1
	jmp	.LBB58_49
.LBB58_49:                              # %for.inc146
                                        #   in Loop: Header=BB58_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_43
.LBB58_50:                              # %for.end148
	jmp	.LBB58_51
.LBB58_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB58_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB58_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_54:                              # %for.cond153
                                        #   Parent Loop BB58_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB58_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB58_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_54
.LBB58_57:                              # %for.end167
                                        #   in Loop: Header=BB58_52 Depth=1
	jmp	.LBB58_58
.LBB58_58:                              # %for.inc168
                                        #   in Loop: Header=BB58_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_52
.LBB58_59:                              # %for.end170
	jmp	.LBB58_60
.LBB58_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB58_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB58_66
.LBB58_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB58_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB58_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB58_86
.LBB58_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB58_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_69 Depth 2
                                        #       Child Loop BB58_74 Depth 3
                                        #         Child Loop BB58_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB58_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB58_69:                              # %for.cond197
                                        #   Parent Loop BB58_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_74 Depth 3
                                        #         Child Loop BB58_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB58_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB58_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB58_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB58_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB58_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB58_73:                              # %if.end218
                                        #   in Loop: Header=BB58_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB58_74:                              # %for.cond233
                                        #   Parent Loop BB58_67 Depth=1
                                        #     Parent Loop BB58_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB58_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB58_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB58_74 Depth=3
	movl	$0, -8(%rbp)
.LBB58_76:                              # %for.cond237
                                        #   Parent Loop BB58_67 Depth=1
                                        #     Parent Loop BB58_69 Depth=2
                                        #       Parent Loop BB58_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB58_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB58_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB58_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_76
.LBB58_79:                              # %for.end269
                                        #   in Loop: Header=BB58_74 Depth=3
	jmp	.LBB58_80
.LBB58_80:                              # %for.inc270
                                        #   in Loop: Header=BB58_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_74
.LBB58_81:                              # %for.end272
                                        #   in Loop: Header=BB58_69 Depth=2
	jmp	.LBB58_82
.LBB58_82:                              # %for.inc273
                                        #   in Loop: Header=BB58_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_69
.LBB58_83:                              # %for.end275
                                        #   in Loop: Header=BB58_67 Depth=1
	jmp	.LBB58_84
.LBB58_84:                              # %for.inc276
                                        #   in Loop: Header=BB58_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_67
.LBB58_85:                              # %for.end278
	jmp	.LBB58_95
.LBB58_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB58_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB58_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB58_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB58_89:                              # %for.cond284
                                        #   Parent Loop BB58_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB58_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB58_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_89
.LBB58_92:                              # %for.end310
                                        #   in Loop: Header=BB58_87 Depth=1
	jmp	.LBB58_93
.LBB58_93:                              # %for.inc311
                                        #   in Loop: Header=BB58_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_87
.LBB58_94:                              # %for.end313
	jmp	.LBB58_95
.LBB58_95:                              # %if.end314
	jmp	.LBB58_96
.LBB58_96:                              # %if.end315
	cmpl	$1577593821, -84(%rbp)  # imm = 0x5E082BDD
	jne	.LBB58_98
.LBB58_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_97
.Lfunc_end58:
	.size	decode_one_b8block.48, .Lfunc_end58-decode_one_b8block.48
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.49        # -- Begin function Conceal_Error.49
	.p2align	4, 0x90
	.type	Conceal_Error.49,@function
Conceal_Error.49:                       # @Conceal_Error.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$732439192, -68(%rbp)   # imm = 0x2BA82298
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB59_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB59_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB59_4:                               # %land.end
.LBB59_5:                               # %lor.end
.LBB59_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB59_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB59_9
.LBB59_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB59_14
.LBB59_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB59_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB59_12:                              # %land.end51
.LBB59_13:                              # %lor.end53
.LBB59_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB59_180
# %bb.15:                               # %land.end54
	movq	.LJTI59_0(,%rax,8), %rax
	jmpq	*%rax
.LBB59_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB59_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	$0, -4(%rbp)
.LBB59_20:                              # %for.cond68
                                        #   Parent Loop BB59_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB59_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB59_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_20
.LBB59_23:                              # %for.end
                                        #   in Loop: Header=BB59_18 Depth=1
	jmp	.LBB59_24
.LBB59_24:                              # %for.inc85
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_18
.LBB59_25:                              # %for.end87
	jmp	.LBB59_35
.LBB59_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB59_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	$0, -4(%rbp)
.LBB59_29:                              # %for.cond92
                                        #   Parent Loop BB59_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB59_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB59_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_29
.LBB59_32:                              # %for.end104
                                        #   in Loop: Header=BB59_27 Depth=1
	jmp	.LBB59_33
.LBB59_33:                              # %for.inc105
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_27
.LBB59_34:                              # %for.end107
	jmp	.LBB59_35
.LBB59_35:                              # %if.end
	jmp	.LBB59_180
.LBB59_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB59_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_39 Depth 2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	$0, -12(%rbp)
.LBB59_39:                              # %for.cond113
                                        #   Parent Loop BB59_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	$0, -4(%rbp)
.LBB59_41:                              # %for.cond117
                                        #   Parent Loop BB59_37 Depth=1
                                        #     Parent Loop BB59_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB59_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB59_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_44:                              # %for.end141
                                        #   in Loop: Header=BB59_39 Depth=2
	jmp	.LBB59_45
.LBB59_45:                              # %for.inc142
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_39
.LBB59_46:                              # %for.end144
                                        #   in Loop: Header=BB59_37 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc145
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_37
.LBB59_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB59_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	$0, -8(%rbp)
.LBB59_51:                              # %for.cond152
                                        #   Parent Loop BB59_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB59_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB59_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_51
.LBB59_54:                              # %for.end162
                                        #   in Loop: Header=BB59_49 Depth=1
	jmp	.LBB59_55
.LBB59_55:                              # %for.inc163
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB59_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB59_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	$0, -4(%rbp)
.LBB59_61:                              # %for.cond175
                                        #   Parent Loop BB59_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB59_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_61
.LBB59_64:                              # %for.end195
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_65
.LBB59_65:                              # %for.inc196
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_59
.LBB59_66:                              # %for.end198
	jmp	.LBB59_95
.LBB59_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB59_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_71 Depth 2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_71:                              # %for.cond210
                                        #   Parent Loop BB59_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB59_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_73:                              # %for.cond236
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	$0, -4(%rbp)
.LBB59_75:                              # %for.cond240
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        #       Parent Loop BB59_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB59_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB59_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_75
.LBB59_78:                              # %for.end259
                                        #   in Loop: Header=BB59_73 Depth=3
	jmp	.LBB59_79
.LBB59_79:                              # %for.inc260
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_73
.LBB59_80:                              # %for.end262
                                        #   in Loop: Header=BB59_71 Depth=2
	jmp	.LBB59_81
.LBB59_81:                              # %for.inc263
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_71
.LBB59_82:                              # %for.end265
                                        #   in Loop: Header=BB59_69 Depth=1
	jmp	.LBB59_83
.LBB59_83:                              # %for.inc266
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_69
.LBB59_84:                              # %for.end268
	jmp	.LBB59_94
.LBB59_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB59_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	$0, -4(%rbp)
.LBB59_88:                              # %for.cond274
                                        #   Parent Loop BB59_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB59_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_88
.LBB59_91:                              # %for.end294
                                        #   in Loop: Header=BB59_86 Depth=1
	jmp	.LBB59_92
.LBB59_92:                              # %for.inc295
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_86
.LBB59_93:                              # %for.end297
	jmp	.LBB59_94
.LBB59_94:                              # %if.end298
	jmp	.LBB59_95
.LBB59_95:                              # %if.end299
	jmp	.LBB59_105
.LBB59_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB59_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	$0, -4(%rbp)
.LBB59_99:                              # %for.cond305
                                        #   Parent Loop BB59_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB59_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB59_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_99
.LBB59_102:                             # %for.end317
                                        #   in Loop: Header=BB59_97 Depth=1
	jmp	.LBB59_103
.LBB59_103:                             # %for.inc318
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_97
.LBB59_104:                             # %for.end320
	jmp	.LBB59_105
.LBB59_105:                             # %if.end321
	jmp	.LBB59_180
.LBB59_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB59_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_110 Depth 2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	$0, -12(%rbp)
.LBB59_110:                             # %for.cond331
                                        #   Parent Loop BB59_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	$0, -4(%rbp)
.LBB59_112:                             # %for.cond335
                                        #   Parent Loop BB59_108 Depth=1
                                        #     Parent Loop BB59_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB59_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB59_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_112
.LBB59_115:                             # %for.end359
                                        #   in Loop: Header=BB59_110 Depth=2
	jmp	.LBB59_116
.LBB59_116:                             # %for.inc360
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_110
.LBB59_117:                             # %for.end362
                                        #   in Loop: Header=BB59_108 Depth=1
	jmp	.LBB59_118
.LBB59_118:                             # %for.inc363
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_108
.LBB59_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB59_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	$0, -8(%rbp)
.LBB59_122:                             # %for.cond370
                                        #   Parent Loop BB59_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB59_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB59_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_122
.LBB59_125:                             # %for.end380
                                        #   in Loop: Header=BB59_120 Depth=1
	jmp	.LBB59_126
.LBB59_126:                             # %for.inc381
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_120
.LBB59_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB59_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB59_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	$0, -4(%rbp)
.LBB59_131:                             # %for.cond390
                                        #   Parent Loop BB59_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB59_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB59_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_131
.LBB59_134:                             # %for.end410
                                        #   in Loop: Header=BB59_129 Depth=1
	jmp	.LBB59_135
.LBB59_135:                             # %for.inc411
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_129
.LBB59_136:                             # %for.end413
	jmp	.LBB59_156
.LBB59_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB59_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_141 Depth 2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_141:                             # %for.cond425
                                        #   Parent Loop BB59_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB59_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_143:                             # %for.cond452
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	$0, -4(%rbp)
.LBB59_145:                             # %for.cond456
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        #       Parent Loop BB59_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB59_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB59_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_145
.LBB59_148:                             # %for.end475
                                        #   in Loop: Header=BB59_143 Depth=3
	jmp	.LBB59_149
.LBB59_149:                             # %for.inc476
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_143
.LBB59_150:                             # %for.end478
                                        #   in Loop: Header=BB59_141 Depth=2
	jmp	.LBB59_151
.LBB59_151:                             # %for.inc479
                                        #   in Loop: Header=BB59_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_141
.LBB59_152:                             # %for.end481
                                        #   in Loop: Header=BB59_139 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc482
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_139
.LBB59_154:                             # %for.end484
	jmp	.LBB59_155
.LBB59_155:                             # %if.end485
	jmp	.LBB59_156
.LBB59_156:                             # %if.end486
	jmp	.LBB59_157
.LBB59_157:                             # %if.end487
	jmp	.LBB59_180
.LBB59_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB59_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB59_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	$0, -4(%rbp)
.LBB59_163:                             # %for.cond499
                                        #   Parent Loop BB59_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB59_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB59_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_163
.LBB59_166:                             # %for.end519
                                        #   in Loop: Header=BB59_161 Depth=1
	jmp	.LBB59_167
.LBB59_167:                             # %for.inc520
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_161
.LBB59_168:                             # %for.end522
	jmp	.LBB59_169
.LBB59_169:                             # %if.end523
	jmp	.LBB59_179
.LBB59_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB59_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	$0, -4(%rbp)
.LBB59_173:                             # %for.cond529
                                        #   Parent Loop BB59_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB59_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_173
.LBB59_176:                             # %for.end541
                                        #   in Loop: Header=BB59_171 Depth=1
	jmp	.LBB59_177
.LBB59_177:                             # %for.inc542
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_171
.LBB59_178:                             # %for.end544
	jmp	.LBB59_179
.LBB59_179:                             # %if.end545
	jmp	.LBB59_180
.LBB59_180:                             # %sw.epilog
	cmpl	$732439192, -68(%rbp)   # imm = 0x2BA82298
	jne	.LBB59_182
.LBB59_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_181
.Lfunc_end59:
	.size	Conceal_Error.49, .Lfunc_end59-Conceal_Error.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI59_0:
	.quad	.LBB59_16
	.quad	.LBB59_158
	.quad	.LBB59_106
	.quad	.LBB59_180
	.quad	.LBB59_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.50  # -- Begin function Get_Reference_Pixel.50
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.50,@function
Get_Reference_Pixel.50:                 # @Get_Reference_Pixel.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1317609921, -108(%rbp) # imm = 0x4E8921C1
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB60_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB60_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB60_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB60_5
.LBB60_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB60_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB60_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB60_11
.LBB60_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB60_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB60_10
.LBB60_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB60_10:                              # %cond.end14
.LBB60_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB60_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB60_14
.LBB60_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB60_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB60_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB60_20
.LBB60_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB60_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB60_19
.LBB60_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB60_19:                              # %cond.end29
.LBB60_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_332
.LBB60_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB60_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB60_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB60_25
.LBB60_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB60_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB60_31
.LBB60_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB60_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB60_30
.LBB60_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB60_30:                              # %cond.end52
.LBB60_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB60_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB60_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB60_36
.LBB60_35:                              # %cond.false61
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_36:                              # %cond.end63
                                        #   in Loop: Header=BB60_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB60_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_42
.LBB60_38:                              # %cond.false68
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB60_41
.LBB60_40:                              # %cond.false73
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_41:                              # %cond.end75
                                        #   in Loop: Header=BB60_32 Depth=1
.LBB60_42:                              # %cond.end77
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB60_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_32
.LBB60_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_47
.LBB60_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB60_53
.LBB60_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_52
.LBB60_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_52:                              # %cond.end113
.LBB60_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB60_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB60_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB60_57
.LBB60_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB60_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB60_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB60_63
.LBB60_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB60_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB60_62
.LBB60_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB60_62:                              # %cond.end136
.LBB60_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB60_76
.LBB60_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB60_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB60_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB60_68
.LBB60_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB60_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB60_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB60_74
.LBB60_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB60_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB60_73
.LBB60_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB60_73:                              # %cond.end169
.LBB60_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB60_75:                              # %if.end
	jmp	.LBB60_76
.LBB60_76:                              # %if.end178
	jmp	.LBB60_331
.LBB60_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB60_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB60_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB60_81
.LBB60_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB60_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB60_87
.LBB60_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB60_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB60_86
.LBB60_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB60_86:                              # %cond.end197
.LBB60_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB60_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB60_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB60_92
.LBB60_91:                              # %cond.false209
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_92:                              # %cond.end211
                                        #   in Loop: Header=BB60_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB60_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_98
.LBB60_94:                              # %cond.false216
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB60_97
.LBB60_96:                              # %cond.false221
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_97:                              # %cond.end223
                                        #   in Loop: Header=BB60_88 Depth=1
.LBB60_98:                              # %cond.end225
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB60_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_88
.LBB60_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_103
.LBB60_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB60_109
.LBB60_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_108
.LBB60_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_108:                             # %cond.end266
.LBB60_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB60_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB60_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB60_113
.LBB60_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB60_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB60_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB60_119
.LBB60_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB60_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB60_118
.LBB60_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB60_118:                             # %cond.end287
.LBB60_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB60_132
.LBB60_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB60_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB60_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB60_124
.LBB60_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB60_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB60_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB60_130
.LBB60_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB60_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB60_129
.LBB60_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB60_129:                             # %cond.end320
.LBB60_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB60_131:                             # %if.end331
	jmp	.LBB60_132
.LBB60_132:                             # %if.end332
	jmp	.LBB60_330
.LBB60_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB60_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB60_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB60_139
.LBB60_138:                             # %cond.false345
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_139:                             # %cond.end347
                                        #   in Loop: Header=BB60_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB60_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_145
.LBB60_141:                             # %cond.false352
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB60_144
.LBB60_143:                             # %cond.false357
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_144:                             # %cond.end359
                                        #   in Loop: Header=BB60_135 Depth=1
.LBB60_145:                             # %cond.end361
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB60_146:                             # %for.cond363
                                        #   Parent Loop BB60_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB60_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB60_150
.LBB60_149:                             # %cond.false371
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_150:                             # %cond.end373
                                        #   in Loop: Header=BB60_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB60_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_156
.LBB60_152:                             # %cond.false378
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB60_155
.LBB60_154:                             # %cond.false383
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_155:                             # %cond.end385
                                        #   in Loop: Header=BB60_146 Depth=2
.LBB60_156:                             # %cond.end387
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB60_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_146
.LBB60_158:                             # %for.end401
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB60_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_135
.LBB60_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB60_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB60_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB60_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB60_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_161
.LBB60_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_167
.LBB60_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB60_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB60_173
.LBB60_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_172
.LBB60_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB60_172:                             # %cond.end449
.LBB60_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB60_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_177
.LBB60_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB60_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB60_183
.LBB60_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_182
.LBB60_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_182:                             # %cond.end486
.LBB60_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB60_196
.LBB60_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB60_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_188
.LBB60_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB60_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB60_194
.LBB60_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_193
.LBB60_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_193:                             # %cond.end526
.LBB60_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB60_195:                             # %if.end532
	jmp	.LBB60_196
.LBB60_196:                             # %if.end533
	jmp	.LBB60_329
.LBB60_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB60_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB60_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB60_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB60_203
.LBB60_202:                             # %cond.false546
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_203:                             # %cond.end548
                                        #   in Loop: Header=BB60_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB60_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_209
.LBB60_205:                             # %cond.false553
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB60_208
.LBB60_207:                             # %cond.false558
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_208:                             # %cond.end560
                                        #   in Loop: Header=BB60_199 Depth=1
.LBB60_209:                             # %cond.end562
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB60_210:                             # %for.cond564
                                        #   Parent Loop BB60_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB60_214
.LBB60_213:                             # %cond.false572
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_214:                             # %cond.end574
                                        #   in Loop: Header=BB60_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB60_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_220
.LBB60_216:                             # %cond.false579
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB60_219
.LBB60_218:                             # %cond.false584
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_219:                             # %cond.end586
                                        #   in Loop: Header=BB60_210 Depth=2
.LBB60_220:                             # %cond.end588
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB60_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_210
.LBB60_222:                             # %for.end602
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB60_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_199
.LBB60_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB60_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB60_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB60_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB60_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_225
.LBB60_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_231
.LBB60_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB60_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB60_237
.LBB60_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_236
.LBB60_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB60_236:                             # %cond.end650
.LBB60_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB60_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_241
.LBB60_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB60_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB60_247
.LBB60_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_246
.LBB60_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_246:                             # %cond.end687
.LBB60_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB60_258
.LBB60_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_251
.LBB60_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB60_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB60_257
.LBB60_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB60_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_256
.LBB60_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB60_256:                             # %cond.end724
.LBB60_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB60_258:                             # %if.end730
	jmp	.LBB60_328
.LBB60_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB60_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB60_262
.LBB60_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB60_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB60_265
.LBB60_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB60_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB60_271
.LBB60_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB60_270
.LBB60_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB60_270:                             # %cond.end753
.LBB60_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB60_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB60_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB60_276
.LBB60_275:                             # %cond.false765
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_276:                             # %cond.end767
                                        #   in Loop: Header=BB60_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB60_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_282
.LBB60_278:                             # %cond.false772
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB60_281
.LBB60_280:                             # %cond.false777
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB60_281:                             # %cond.end779
                                        #   in Loop: Header=BB60_272 Depth=1
.LBB60_282:                             # %cond.end781
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB60_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_272
.LBB60_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_287
.LBB60_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB60_293
.LBB60_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_292
.LBB60_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_292:                             # %cond.end822
.LBB60_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB60_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB60_296
.LBB60_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB60_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB60_299
.LBB60_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB60_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB60_305
.LBB60_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB60_304
.LBB60_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB60_304:                             # %cond.end847
.LBB60_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB60_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB60_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB60_310
.LBB60_309:                             # %cond.false859
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_310:                             # %cond.end861
                                        #   in Loop: Header=BB60_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB60_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB60_316
.LBB60_312:                             # %cond.false866
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB60_315
.LBB60_314:                             # %cond.false871
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB60_315:                             # %cond.end873
                                        #   in Loop: Header=BB60_306 Depth=1
.LBB60_316:                             # %cond.end875
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB60_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_306
.LBB60_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_321
.LBB60_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB60_327
.LBB60_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB60_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_326
.LBB60_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB60_326:                             # %cond.end916
.LBB60_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB60_328:                             # %if.end922
	jmp	.LBB60_329
.LBB60_329:                             # %if.end923
	jmp	.LBB60_330
.LBB60_330:                             # %if.end924
	jmp	.LBB60_331
.LBB60_331:                             # %if.end925
	jmp	.LBB60_332
.LBB60_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1317609921, -108(%rbp) # imm = 0x4E8921C1
	jne	.LBB60_334
.LBB60_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_333
.Lfunc_end60:
	.size	Get_Reference_Pixel.50, .Lfunc_end60-Get_Reference_Pixel.50
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.51   # -- Begin function decode_one_b8block.51
	.p2align	4, 0x90
	.type	decode_one_b8block.51,@function
decode_one_b8block.51:                  # @decode_one_b8block.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1424195967, -84(%rbp)  # imm = 0x54E3817F
	movl	%edi, -56(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB61_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_4:                               # %for.cond9
                                        #   Parent Loop BB61_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB61_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB61_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_4
.LBB61_7:                               # %for.end
                                        #   in Loop: Header=BB61_2 Depth=1
	jmp	.LBB61_8
.LBB61_8:                               # %for.inc26
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_2
.LBB61_9:                               # %for.end28
	jmp	.LBB61_96
.LBB61_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB61_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_31
.LBB61_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB61_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_17:                              # %for.cond40
                                        #   Parent Loop BB61_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB61_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB61_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_17
.LBB61_20:                              # %for.end49
                                        #   in Loop: Header=BB61_15 Depth=1
	jmp	.LBB61_21
.LBB61_21:                              # %for.inc50
                                        #   in Loop: Header=BB61_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_15
.LBB61_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_25:                              # %for.cond56
                                        #   Parent Loop BB61_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB61_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB61_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_25
.LBB61_28:                              # %for.end71
                                        #   in Loop: Header=BB61_23 Depth=1
	jmp	.LBB61_29
.LBB61_29:                              # %for.inc72
                                        #   in Loop: Header=BB61_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_23
.LBB61_30:                              # %for.end74
	jmp	.LBB61_60
.LBB61_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB61_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB61_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_36:                              # %for.cond83
                                        #   Parent Loop BB61_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB61_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB61_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_36
.LBB61_39:                              # %for.end120
                                        #   in Loop: Header=BB61_34 Depth=1
	jmp	.LBB61_40
.LBB61_40:                              # %for.inc121
                                        #   in Loop: Header=BB61_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_34
.LBB61_41:                              # %for.end123
	jmp	.LBB61_51
.LBB61_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_45:                              # %for.cond129
                                        #   Parent Loop BB61_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB61_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB61_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_45
.LBB61_48:                              # %for.end145
                                        #   in Loop: Header=BB61_43 Depth=1
	jmp	.LBB61_49
.LBB61_49:                              # %for.inc146
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_43
.LBB61_50:                              # %for.end148
	jmp	.LBB61_51
.LBB61_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_54:                              # %for.cond153
                                        #   Parent Loop BB61_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB61_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB61_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_54
.LBB61_57:                              # %for.end167
                                        #   in Loop: Header=BB61_52 Depth=1
	jmp	.LBB61_58
.LBB61_58:                              # %for.inc168
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_52
.LBB61_59:                              # %for.end170
	jmp	.LBB61_60
.LBB61_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB61_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB61_66
.LBB61_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB61_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB61_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB61_86
.LBB61_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB61_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_69 Depth 2
                                        #       Child Loop BB61_74 Depth 3
                                        #         Child Loop BB61_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB61_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB61_69:                              # %for.cond197
                                        #   Parent Loop BB61_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_74 Depth 3
                                        #         Child Loop BB61_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB61_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB61_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB61_73:                              # %if.end218
                                        #   in Loop: Header=BB61_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB61_74:                              # %for.cond233
                                        #   Parent Loop BB61_67 Depth=1
                                        #     Parent Loop BB61_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB61_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB61_74 Depth=3
	movl	$0, -4(%rbp)
.LBB61_76:                              # %for.cond237
                                        #   Parent Loop BB61_67 Depth=1
                                        #     Parent Loop BB61_69 Depth=2
                                        #       Parent Loop BB61_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB61_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB61_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB61_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_76
.LBB61_79:                              # %for.end269
                                        #   in Loop: Header=BB61_74 Depth=3
	jmp	.LBB61_80
.LBB61_80:                              # %for.inc270
                                        #   in Loop: Header=BB61_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_74
.LBB61_81:                              # %for.end272
                                        #   in Loop: Header=BB61_69 Depth=2
	jmp	.LBB61_82
.LBB61_82:                              # %for.inc273
                                        #   in Loop: Header=BB61_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_69
.LBB61_83:                              # %for.end275
                                        #   in Loop: Header=BB61_67 Depth=1
	jmp	.LBB61_84
.LBB61_84:                              # %for.inc276
                                        #   in Loop: Header=BB61_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_67
.LBB61_85:                              # %for.end278
	jmp	.LBB61_95
.LBB61_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB61_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB61_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB61_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB61_89:                              # %for.cond284
                                        #   Parent Loop BB61_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB61_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB61_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_89
.LBB61_92:                              # %for.end310
                                        #   in Loop: Header=BB61_87 Depth=1
	jmp	.LBB61_93
.LBB61_93:                              # %for.inc311
                                        #   in Loop: Header=BB61_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_87
.LBB61_94:                              # %for.end313
	jmp	.LBB61_95
.LBB61_95:                              # %if.end314
	jmp	.LBB61_96
.LBB61_96:                              # %if.end315
	cmpl	$1424195967, -84(%rbp)  # imm = 0x54E3817F
	jne	.LBB61_98
.LBB61_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_97
.Lfunc_end61:
	.size	decode_one_b8block.51, .Lfunc_end61-decode_one_b8block.51
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.52    # -- Begin function Error_Concealment.52
	.p2align	4, 0x90
	.type	Error_Concealment.52,@function
Error_Concealment.52:                   # @Error_Concealment.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1261287387, -12(%rbp)  # imm = 0x4B2DB7DB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB62_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$0, -8(%rbp)
.LBB62_3:                               # %for.cond2
                                        #   Parent Loop BB62_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB62_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB62_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB62_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB62_6:                               # %if.end
                                        #   in Loop: Header=BB62_3 Depth=2
	jmp	.LBB62_7
.LBB62_7:                               # %for.inc
                                        #   in Loop: Header=BB62_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_3
.LBB62_8:                               # %for.end
                                        #   in Loop: Header=BB62_1 Depth=1
	jmp	.LBB62_9
.LBB62_9:                               # %for.inc7
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_1
.LBB62_10:                              # %for.end9
	cmpl	$1261287387, -12(%rbp)  # imm = 0x4B2DB7DB
	jne	.LBB62_12
.LBB62_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_11
.Lfunc_end62:
	.size	Error_Concealment.52, .Lfunc_end62-Error_Concealment.52
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.53       # -- Begin function DecOneForthPix.53
	.p2align	4, 0x90
	.type	DecOneForthPix.53,@function
DecOneForthPix.53:                      # @DecOneForthPix.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1490264045, -12(%rbp)  # imm = 0x58D39FED
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB63_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_1
.LBB63_4:                               # %for.end
	cmpl	$1490264045, -12(%rbp)  # imm = 0x58D39FED
	jne	.LBB63_6
.LBB63_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_5
.Lfunc_end63:
	.size	DecOneForthPix.53, .Lfunc_end63-DecOneForthPix.53
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.54       # -- Begin function DecOneForthPix.54
	.p2align	4, 0x90
	.type	DecOneForthPix.54,@function
DecOneForthPix.54:                      # @DecOneForthPix.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$825123180, -12(%rbp)   # imm = 0x312E616C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	cmpl	$825123180, -12(%rbp)   # imm = 0x312E616C
	jne	.LBB64_6
.LBB64_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_5
.Lfunc_end64:
	.size	DecOneForthPix.54, .Lfunc_end64-DecOneForthPix.54
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.55  # -- Begin function Get_Reference_Pixel.55
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.55,@function
Get_Reference_Pixel.55:                 # @Get_Reference_Pixel.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$661988503, -100(%rbp)  # imm = 0x27752497
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB65_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB65_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB65_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB65_5
.LBB65_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB65_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB65_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB65_11
.LBB65_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB65_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB65_10
.LBB65_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB65_10:                              # %cond.end14
.LBB65_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB65_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB65_14
.LBB65_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB65_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB65_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB65_20
.LBB65_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB65_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB65_19
.LBB65_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB65_19:                              # %cond.end29
.LBB65_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_332
.LBB65_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB65_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB65_25
.LBB65_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB65_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB65_31
.LBB65_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB65_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB65_30
.LBB65_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB65_30:                              # %cond.end52
.LBB65_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB65_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_36
.LBB65_35:                              # %cond.false61
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_36:                              # %cond.end63
                                        #   in Loop: Header=BB65_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB65_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_42
.LBB65_38:                              # %cond.false68
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_41
.LBB65_40:                              # %cond.false73
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_41:                              # %cond.end75
                                        #   in Loop: Header=BB65_32 Depth=1
.LBB65_42:                              # %cond.end77
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_32
.LBB65_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_47
.LBB65_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB65_53
.LBB65_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_52
.LBB65_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_52:                              # %cond.end113
.LBB65_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB65_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB65_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB65_57
.LBB65_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB65_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB65_63
.LBB65_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB65_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB65_62
.LBB65_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB65_62:                              # %cond.end136
.LBB65_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_76
.LBB65_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB65_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB65_68
.LBB65_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB65_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB65_74
.LBB65_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB65_73
.LBB65_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB65_73:                              # %cond.end169
.LBB65_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_75:                              # %if.end
	jmp	.LBB65_76
.LBB65_76:                              # %if.end178
	jmp	.LBB65_331
.LBB65_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB65_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB65_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB65_81
.LBB65_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB65_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB65_87
.LBB65_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB65_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB65_86
.LBB65_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB65_86:                              # %cond.end197
.LBB65_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB65_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_92
.LBB65_91:                              # %cond.false209
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_92:                              # %cond.end211
                                        #   in Loop: Header=BB65_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB65_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_98
.LBB65_94:                              # %cond.false216
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_97
.LBB65_96:                              # %cond.false221
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_97:                              # %cond.end223
                                        #   in Loop: Header=BB65_88 Depth=1
.LBB65_98:                              # %cond.end225
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB65_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_88
.LBB65_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_103
.LBB65_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB65_109
.LBB65_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_108
.LBB65_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_108:                             # %cond.end266
.LBB65_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB65_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB65_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB65_113
.LBB65_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB65_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB65_119
.LBB65_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB65_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB65_118
.LBB65_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB65_118:                             # %cond.end287
.LBB65_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_132
.LBB65_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB65_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB65_124
.LBB65_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB65_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB65_130
.LBB65_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB65_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB65_129
.LBB65_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB65_129:                             # %cond.end320
.LBB65_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_131:                             # %if.end331
	jmp	.LBB65_132
.LBB65_132:                             # %if.end332
	jmp	.LBB65_330
.LBB65_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB65_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB65_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB65_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_139
.LBB65_138:                             # %cond.false345
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_139:                             # %cond.end347
                                        #   in Loop: Header=BB65_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB65_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_145
.LBB65_141:                             # %cond.false352
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_144
.LBB65_143:                             # %cond.false357
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_144:                             # %cond.end359
                                        #   in Loop: Header=BB65_135 Depth=1
.LBB65_145:                             # %cond.end361
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_146:                             # %for.cond363
                                        #   Parent Loop BB65_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB65_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB65_150
.LBB65_149:                             # %cond.false371
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_150:                             # %cond.end373
                                        #   in Loop: Header=BB65_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB65_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_156
.LBB65_152:                             # %cond.false378
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB65_155
.LBB65_154:                             # %cond.false383
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_155:                             # %cond.end385
                                        #   in Loop: Header=BB65_146 Depth=2
.LBB65_156:                             # %cond.end387
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB65_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_146
.LBB65_158:                             # %for.end401
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB65_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_135
.LBB65_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB65_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB65_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB65_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_161
.LBB65_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_167
.LBB65_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB65_173
.LBB65_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_172
.LBB65_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_172:                             # %cond.end449
.LBB65_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB65_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_177
.LBB65_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB65_183
.LBB65_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_182
.LBB65_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_182:                             # %cond.end486
.LBB65_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_196
.LBB65_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB65_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_188
.LBB65_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB65_194
.LBB65_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_193
.LBB65_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_193:                             # %cond.end526
.LBB65_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_195:                             # %if.end532
	jmp	.LBB65_196
.LBB65_196:                             # %if.end533
	jmp	.LBB65_329
.LBB65_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB65_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB65_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB65_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_203
.LBB65_202:                             # %cond.false546
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_203:                             # %cond.end548
                                        #   in Loop: Header=BB65_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB65_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_209
.LBB65_205:                             # %cond.false553
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_208
.LBB65_207:                             # %cond.false558
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_208:                             # %cond.end560
                                        #   in Loop: Header=BB65_199 Depth=1
.LBB65_209:                             # %cond.end562
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_210:                             # %for.cond564
                                        #   Parent Loop BB65_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB65_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB65_214
.LBB65_213:                             # %cond.false572
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_214:                             # %cond.end574
                                        #   in Loop: Header=BB65_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB65_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_220
.LBB65_216:                             # %cond.false579
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB65_219
.LBB65_218:                             # %cond.false584
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_219:                             # %cond.end586
                                        #   in Loop: Header=BB65_210 Depth=2
.LBB65_220:                             # %cond.end588
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB65_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_210
.LBB65_222:                             # %for.end602
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB65_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_199
.LBB65_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB65_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB65_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB65_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_225
.LBB65_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_231
.LBB65_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB65_237
.LBB65_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_236
.LBB65_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_236:                             # %cond.end650
.LBB65_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB65_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_241
.LBB65_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB65_247
.LBB65_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_246
.LBB65_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_246:                             # %cond.end687
.LBB65_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB65_258
.LBB65_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_251
.LBB65_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB65_257
.LBB65_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB65_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_256
.LBB65_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB65_256:                             # %cond.end724
.LBB65_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_258:                             # %if.end730
	jmp	.LBB65_328
.LBB65_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB65_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB65_262
.LBB65_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB65_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB65_265
.LBB65_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB65_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB65_271
.LBB65_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB65_270
.LBB65_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB65_270:                             # %cond.end753
.LBB65_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB65_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB65_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_276
.LBB65_275:                             # %cond.false765
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_276:                             # %cond.end767
                                        #   in Loop: Header=BB65_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB65_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_282
.LBB65_278:                             # %cond.false772
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB65_281
.LBB65_280:                             # %cond.false777
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB65_281:                             # %cond.end779
                                        #   in Loop: Header=BB65_272 Depth=1
.LBB65_282:                             # %cond.end781
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB65_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_272
.LBB65_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_287
.LBB65_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB65_293
.LBB65_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_292
.LBB65_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_292:                             # %cond.end822
.LBB65_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB65_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB65_296
.LBB65_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB65_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB65_299
.LBB65_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB65_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB65_305
.LBB65_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB65_304
.LBB65_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB65_304:                             # %cond.end847
.LBB65_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB65_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB65_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_310
.LBB65_309:                             # %cond.false859
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_310:                             # %cond.end861
                                        #   in Loop: Header=BB65_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB65_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB65_316
.LBB65_312:                             # %cond.false866
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB65_315
.LBB65_314:                             # %cond.false871
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB65_315:                             # %cond.end873
                                        #   in Loop: Header=BB65_306 Depth=1
.LBB65_316:                             # %cond.end875
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB65_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_306
.LBB65_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_321
.LBB65_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB65_327
.LBB65_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB65_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_326
.LBB65_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB65_326:                             # %cond.end916
.LBB65_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB65_328:                             # %if.end922
	jmp	.LBB65_329
.LBB65_329:                             # %if.end923
	jmp	.LBB65_330
.LBB65_330:                             # %if.end924
	jmp	.LBB65_331
.LBB65_331:                             # %if.end925
	jmp	.LBB65_332
.LBB65_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$661988503, -100(%rbp)  # imm = 0x27752497
	jne	.LBB65_334
.LBB65_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_333
.Lfunc_end65:
	.size	Get_Reference_Pixel.55, .Lfunc_end65-Get_Reference_Pixel.55
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.56  # -- Begin function Get_Reference_Pixel.56
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.56,@function
Get_Reference_Pixel.56:                 # @Get_Reference_Pixel.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1043192509, -104(%rbp) # imm = 0x3E2DDABD
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB66_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB66_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB66_5
.LBB66_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB66_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB66_11
.LBB66_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB66_10
.LBB66_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB66_10:                              # %cond.end14
.LBB66_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB66_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB66_20
.LBB66_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB66_19
.LBB66_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB66_19:                              # %cond.end29
.LBB66_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_332
.LBB66_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB66_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB66_25
.LBB66_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB66_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB66_31
.LBB66_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB66_30
.LBB66_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB66_30:                              # %cond.end52
.LBB66_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_36
.LBB66_35:                              # %cond.false61
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_36:                              # %cond.end63
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_42
.LBB66_38:                              # %cond.false68
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_41
.LBB66_40:                              # %cond.false73
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_41:                              # %cond.end75
                                        #   in Loop: Header=BB66_32 Depth=1
.LBB66_42:                              # %cond.end77
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_32
.LBB66_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_47
.LBB66_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB66_53
.LBB66_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_52
.LBB66_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_52:                              # %cond.end113
.LBB66_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB66_57
.LBB66_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB66_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB66_63
.LBB66_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB66_62
.LBB66_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB66_62:                              # %cond.end136
.LBB66_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_76
.LBB66_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB66_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB66_68
.LBB66_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB66_74
.LBB66_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB66_73
.LBB66_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_73:                              # %cond.end169
.LBB66_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_75:                              # %if.end
	jmp	.LBB66_76
.LBB66_76:                              # %if.end178
	jmp	.LBB66_331
.LBB66_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB66_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB66_81
.LBB66_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB66_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB66_87
.LBB66_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB66_86
.LBB66_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB66_86:                              # %cond.end197
.LBB66_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_92
.LBB66_91:                              # %cond.false209
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_92:                              # %cond.end211
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_98
.LBB66_94:                              # %cond.false216
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_97
.LBB66_96:                              # %cond.false221
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_97:                              # %cond.end223
                                        #   in Loop: Header=BB66_88 Depth=1
.LBB66_98:                              # %cond.end225
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_88
.LBB66_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_103
.LBB66_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB66_109
.LBB66_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_108
.LBB66_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_108:                             # %cond.end266
.LBB66_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB66_113
.LBB66_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB66_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB66_119
.LBB66_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB66_118
.LBB66_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB66_118:                             # %cond.end287
.LBB66_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_132
.LBB66_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB66_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB66_124
.LBB66_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB66_130
.LBB66_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB66_129
.LBB66_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_129:                             # %cond.end320
.LBB66_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_131:                             # %if.end331
	jmp	.LBB66_132
.LBB66_132:                             # %if.end332
	jmp	.LBB66_330
.LBB66_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB66_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB66_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_139
.LBB66_138:                             # %cond.false345
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_139:                             # %cond.end347
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_145
.LBB66_141:                             # %cond.false352
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_144
.LBB66_143:                             # %cond.false357
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_144:                             # %cond.end359
                                        #   in Loop: Header=BB66_135 Depth=1
.LBB66_145:                             # %cond.end361
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_146:                             # %for.cond363
                                        #   Parent Loop BB66_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_150
.LBB66_149:                             # %cond.false371
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_150:                             # %cond.end373
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_156
.LBB66_152:                             # %cond.false378
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_155
.LBB66_154:                             # %cond.false383
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_155:                             # %cond.end385
                                        #   in Loop: Header=BB66_146 Depth=2
.LBB66_156:                             # %cond.end387
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_146
.LBB66_158:                             # %for.end401
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_135
.LBB66_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_161
.LBB66_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_167
.LBB66_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB66_173
.LBB66_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_172
.LBB66_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_172:                             # %cond.end449
.LBB66_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_177
.LBB66_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB66_183
.LBB66_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_182
.LBB66_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_182:                             # %cond.end486
.LBB66_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_196
.LBB66_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB66_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_188
.LBB66_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB66_194
.LBB66_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_193
.LBB66_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_193:                             # %cond.end526
.LBB66_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_195:                             # %if.end532
	jmp	.LBB66_196
.LBB66_196:                             # %if.end533
	jmp	.LBB66_329
.LBB66_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB66_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB66_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_203
.LBB66_202:                             # %cond.false546
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_203:                             # %cond.end548
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_209
.LBB66_205:                             # %cond.false553
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_208
.LBB66_207:                             # %cond.false558
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_208:                             # %cond.end560
                                        #   in Loop: Header=BB66_199 Depth=1
.LBB66_209:                             # %cond.end562
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_210:                             # %for.cond564
                                        #   Parent Loop BB66_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_214
.LBB66_213:                             # %cond.false572
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_214:                             # %cond.end574
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_220
.LBB66_216:                             # %cond.false579
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_219
.LBB66_218:                             # %cond.false584
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_219:                             # %cond.end586
                                        #   in Loop: Header=BB66_210 Depth=2
.LBB66_220:                             # %cond.end588
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_210
.LBB66_222:                             # %for.end602
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_199
.LBB66_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_225
.LBB66_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_231
.LBB66_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB66_237
.LBB66_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_236
.LBB66_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_236:                             # %cond.end650
.LBB66_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_241
.LBB66_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB66_247
.LBB66_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_246
.LBB66_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_246:                             # %cond.end687
.LBB66_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_258
.LBB66_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_251
.LBB66_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB66_257
.LBB66_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_256
.LBB66_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_256:                             # %cond.end724
.LBB66_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_258:                             # %if.end730
	jmp	.LBB66_328
.LBB66_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB66_262
.LBB66_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB66_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB66_265
.LBB66_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB66_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB66_271
.LBB66_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB66_270
.LBB66_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB66_270:                             # %cond.end753
.LBB66_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_276
.LBB66_275:                             # %cond.false765
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_276:                             # %cond.end767
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_282
.LBB66_278:                             # %cond.false772
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_281
.LBB66_280:                             # %cond.false777
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_281:                             # %cond.end779
                                        #   in Loop: Header=BB66_272 Depth=1
.LBB66_282:                             # %cond.end781
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_272
.LBB66_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_287
.LBB66_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB66_293
.LBB66_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_292
.LBB66_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_292:                             # %cond.end822
.LBB66_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB66_296
.LBB66_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB66_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB66_299
.LBB66_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB66_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB66_305
.LBB66_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB66_304
.LBB66_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB66_304:                             # %cond.end847
.LBB66_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_310
.LBB66_309:                             # %cond.false859
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_310:                             # %cond.end861
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_316
.LBB66_312:                             # %cond.false866
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_315
.LBB66_314:                             # %cond.false871
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_315:                             # %cond.end873
                                        #   in Loop: Header=BB66_306 Depth=1
.LBB66_316:                             # %cond.end875
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_306
.LBB66_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_321
.LBB66_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB66_327
.LBB66_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_326
.LBB66_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_326:                             # %cond.end916
.LBB66_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_328:                             # %if.end922
	jmp	.LBB66_329
.LBB66_329:                             # %if.end923
	jmp	.LBB66_330
.LBB66_330:                             # %if.end924
	jmp	.LBB66_331
.LBB66_331:                             # %if.end925
	jmp	.LBB66_332
.LBB66_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1043192509, -104(%rbp) # imm = 0x3E2DDABD
	jne	.LBB66_334
.LBB66_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_333
.Lfunc_end66:
	.size	Get_Reference_Pixel.56, .Lfunc_end66-Get_Reference_Pixel.56
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.57        # -- Begin function Conceal_Error.57
	.p2align	4, 0x90
	.type	Conceal_Error.57,@function
Conceal_Error.57:                       # @Conceal_Error.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1018444248, -68(%rbp)  # imm = 0x3CB439D8
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB67_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB67_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB67_4:                               # %land.end
.LBB67_5:                               # %lor.end
.LBB67_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB67_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB67_9
.LBB67_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB67_14
.LBB67_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB67_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB67_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB67_12:                              # %land.end51
.LBB67_13:                              # %lor.end53
.LBB67_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB67_180
# %bb.15:                               # %land.end54
	movq	.LJTI67_0(,%rax,8), %rax
	jmpq	*%rax
.LBB67_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB67_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB67_18 Depth=1
	movl	$0, -4(%rbp)
.LBB67_20:                              # %for.cond68
                                        #   Parent Loop BB67_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB67_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB67_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_20
.LBB67_23:                              # %for.end
                                        #   in Loop: Header=BB67_18 Depth=1
	jmp	.LBB67_24
.LBB67_24:                              # %for.inc85
                                        #   in Loop: Header=BB67_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_18
.LBB67_25:                              # %for.end87
	jmp	.LBB67_35
.LBB67_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB67_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB67_27 Depth=1
	movl	$0, -4(%rbp)
.LBB67_29:                              # %for.cond92
                                        #   Parent Loop BB67_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB67_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB67_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_29
.LBB67_32:                              # %for.end104
                                        #   in Loop: Header=BB67_27 Depth=1
	jmp	.LBB67_33
.LBB67_33:                              # %for.inc105
                                        #   in Loop: Header=BB67_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_27
.LBB67_34:                              # %for.end107
	jmp	.LBB67_35
.LBB67_35:                              # %if.end
	jmp	.LBB67_180
.LBB67_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB67_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_39 Depth 2
                                        #       Child Loop BB67_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB67_37 Depth=1
	movl	$0, -12(%rbp)
.LBB67_39:                              # %for.cond113
                                        #   Parent Loop BB67_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB67_39 Depth=2
	movl	$0, -4(%rbp)
.LBB67_41:                              # %for.cond117
                                        #   Parent Loop BB67_37 Depth=1
                                        #     Parent Loop BB67_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB67_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB67_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB67_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_41
.LBB67_44:                              # %for.end141
                                        #   in Loop: Header=BB67_39 Depth=2
	jmp	.LBB67_45
.LBB67_45:                              # %for.inc142
                                        #   in Loop: Header=BB67_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_39
.LBB67_46:                              # %for.end144
                                        #   in Loop: Header=BB67_37 Depth=1
	jmp	.LBB67_47
.LBB67_47:                              # %for.inc145
                                        #   in Loop: Header=BB67_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_37
.LBB67_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB67_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	$0, -8(%rbp)
.LBB67_51:                              # %for.cond152
                                        #   Parent Loop BB67_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB67_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB67_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_51
.LBB67_54:                              # %for.end162
                                        #   in Loop: Header=BB67_49 Depth=1
	jmp	.LBB67_55
.LBB67_55:                              # %for.inc163
                                        #   in Loop: Header=BB67_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_49
.LBB67_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB67_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB67_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	$0, -4(%rbp)
.LBB67_61:                              # %for.cond175
                                        #   Parent Loop BB67_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB67_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB67_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_61
.LBB67_64:                              # %for.end195
                                        #   in Loop: Header=BB67_59 Depth=1
	jmp	.LBB67_65
.LBB67_65:                              # %for.inc196
                                        #   in Loop: Header=BB67_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_59
.LBB67_66:                              # %for.end198
	jmp	.LBB67_95
.LBB67_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB67_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB67_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_71 Depth 2
                                        #       Child Loop BB67_73 Depth 3
                                        #         Child Loop BB67_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB67_71:                              # %for.cond210
                                        #   Parent Loop BB67_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_73 Depth 3
                                        #         Child Loop BB67_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB67_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB67_73:                              # %for.cond236
                                        #   Parent Loop BB67_69 Depth=1
                                        #     Parent Loop BB67_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB67_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB67_73 Depth=3
	movl	$0, -4(%rbp)
.LBB67_75:                              # %for.cond240
                                        #   Parent Loop BB67_69 Depth=1
                                        #     Parent Loop BB67_71 Depth=2
                                        #       Parent Loop BB67_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB67_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB67_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB67_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_75
.LBB67_78:                              # %for.end259
                                        #   in Loop: Header=BB67_73 Depth=3
	jmp	.LBB67_79
.LBB67_79:                              # %for.inc260
                                        #   in Loop: Header=BB67_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_73
.LBB67_80:                              # %for.end262
                                        #   in Loop: Header=BB67_71 Depth=2
	jmp	.LBB67_81
.LBB67_81:                              # %for.inc263
                                        #   in Loop: Header=BB67_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_71
.LBB67_82:                              # %for.end265
                                        #   in Loop: Header=BB67_69 Depth=1
	jmp	.LBB67_83
.LBB67_83:                              # %for.inc266
                                        #   in Loop: Header=BB67_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_69
.LBB67_84:                              # %for.end268
	jmp	.LBB67_94
.LBB67_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB67_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB67_86 Depth=1
	movl	$0, -4(%rbp)
.LBB67_88:                              # %for.cond274
                                        #   Parent Loop BB67_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB67_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB67_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_88
.LBB67_91:                              # %for.end294
                                        #   in Loop: Header=BB67_86 Depth=1
	jmp	.LBB67_92
.LBB67_92:                              # %for.inc295
                                        #   in Loop: Header=BB67_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_86
.LBB67_93:                              # %for.end297
	jmp	.LBB67_94
.LBB67_94:                              # %if.end298
	jmp	.LBB67_95
.LBB67_95:                              # %if.end299
	jmp	.LBB67_105
.LBB67_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB67_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB67_97 Depth=1
	movl	$0, -4(%rbp)
.LBB67_99:                              # %for.cond305
                                        #   Parent Loop BB67_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB67_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB67_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_99
.LBB67_102:                             # %for.end317
                                        #   in Loop: Header=BB67_97 Depth=1
	jmp	.LBB67_103
.LBB67_103:                             # %for.inc318
                                        #   in Loop: Header=BB67_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_97
.LBB67_104:                             # %for.end320
	jmp	.LBB67_105
.LBB67_105:                             # %if.end321
	jmp	.LBB67_180
.LBB67_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB67_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_110 Depth 2
                                        #       Child Loop BB67_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB67_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB67_108 Depth=1
	movl	$0, -12(%rbp)
.LBB67_110:                             # %for.cond331
                                        #   Parent Loop BB67_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB67_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB67_110 Depth=2
	movl	$0, -4(%rbp)
.LBB67_112:                             # %for.cond335
                                        #   Parent Loop BB67_108 Depth=1
                                        #     Parent Loop BB67_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB67_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB67_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB67_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_112
.LBB67_115:                             # %for.end359
                                        #   in Loop: Header=BB67_110 Depth=2
	jmp	.LBB67_116
.LBB67_116:                             # %for.inc360
                                        #   in Loop: Header=BB67_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_110
.LBB67_117:                             # %for.end362
                                        #   in Loop: Header=BB67_108 Depth=1
	jmp	.LBB67_118
.LBB67_118:                             # %for.inc363
                                        #   in Loop: Header=BB67_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_108
.LBB67_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB67_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB67_120 Depth=1
	movl	$0, -8(%rbp)
.LBB67_122:                             # %for.cond370
                                        #   Parent Loop BB67_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB67_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB67_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_122
.LBB67_125:                             # %for.end380
                                        #   in Loop: Header=BB67_120 Depth=1
	jmp	.LBB67_126
.LBB67_126:                             # %for.inc381
                                        #   in Loop: Header=BB67_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_120
.LBB67_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB67_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB67_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB67_129 Depth=1
	movl	$0, -4(%rbp)
.LBB67_131:                             # %for.cond390
                                        #   Parent Loop BB67_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB67_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB67_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_131
.LBB67_134:                             # %for.end410
                                        #   in Loop: Header=BB67_129 Depth=1
	jmp	.LBB67_135
.LBB67_135:                             # %for.inc411
                                        #   in Loop: Header=BB67_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_129
.LBB67_136:                             # %for.end413
	jmp	.LBB67_156
.LBB67_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB67_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB67_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_141 Depth 2
                                        #       Child Loop BB67_143 Depth 3
                                        #         Child Loop BB67_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB67_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB67_141:                             # %for.cond425
                                        #   Parent Loop BB67_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_143 Depth 3
                                        #         Child Loop BB67_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB67_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB67_143:                             # %for.cond452
                                        #   Parent Loop BB67_139 Depth=1
                                        #     Parent Loop BB67_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB67_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB67_143 Depth=3
	movl	$0, -4(%rbp)
.LBB67_145:                             # %for.cond456
                                        #   Parent Loop BB67_139 Depth=1
                                        #     Parent Loop BB67_141 Depth=2
                                        #       Parent Loop BB67_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB67_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB67_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB67_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_145
.LBB67_148:                             # %for.end475
                                        #   in Loop: Header=BB67_143 Depth=3
	jmp	.LBB67_149
.LBB67_149:                             # %for.inc476
                                        #   in Loop: Header=BB67_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_143
.LBB67_150:                             # %for.end478
                                        #   in Loop: Header=BB67_141 Depth=2
	jmp	.LBB67_151
.LBB67_151:                             # %for.inc479
                                        #   in Loop: Header=BB67_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_141
.LBB67_152:                             # %for.end481
                                        #   in Loop: Header=BB67_139 Depth=1
	jmp	.LBB67_153
.LBB67_153:                             # %for.inc482
                                        #   in Loop: Header=BB67_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_139
.LBB67_154:                             # %for.end484
	jmp	.LBB67_155
.LBB67_155:                             # %if.end485
	jmp	.LBB67_156
.LBB67_156:                             # %if.end486
	jmp	.LBB67_157
.LBB67_157:                             # %if.end487
	jmp	.LBB67_180
.LBB67_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB67_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB67_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB67_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	$0, -4(%rbp)
.LBB67_163:                             # %for.cond499
                                        #   Parent Loop BB67_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB67_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB67_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_163
.LBB67_166:                             # %for.end519
                                        #   in Loop: Header=BB67_161 Depth=1
	jmp	.LBB67_167
.LBB67_167:                             # %for.inc520
                                        #   in Loop: Header=BB67_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_161
.LBB67_168:                             # %for.end522
	jmp	.LBB67_169
.LBB67_169:                             # %if.end523
	jmp	.LBB67_179
.LBB67_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB67_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB67_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	$0, -4(%rbp)
.LBB67_173:                             # %for.cond529
                                        #   Parent Loop BB67_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB67_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB67_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB67_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_173
.LBB67_176:                             # %for.end541
                                        #   in Loop: Header=BB67_171 Depth=1
	jmp	.LBB67_177
.LBB67_177:                             # %for.inc542
                                        #   in Loop: Header=BB67_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_171
.LBB67_178:                             # %for.end544
	jmp	.LBB67_179
.LBB67_179:                             # %if.end545
	jmp	.LBB67_180
.LBB67_180:                             # %sw.epilog
	cmpl	$1018444248, -68(%rbp)  # imm = 0x3CB439D8
	jne	.LBB67_182
.LBB67_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_181
.Lfunc_end67:
	.size	Conceal_Error.57, .Lfunc_end67-Conceal_Error.57
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI67_0:
	.quad	.LBB67_16
	.quad	.LBB67_158
	.quad	.LBB67_106
	.quad	.LBB67_180
	.quad	.LBB67_36
                                        # -- End function
	.text
	.globl	Error_Concealment.58    # -- Begin function Error_Concealment.58
	.p2align	4, 0x90
	.type	Error_Concealment.58,@function
Error_Concealment.58:                   # @Error_Concealment.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1929485483, -20(%rbp)  # imm = 0x73019CAB
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB68_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_3:                               # %for.cond2
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB68_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB68_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB68_6:                               # %if.end
                                        #   in Loop: Header=BB68_3 Depth=2
	jmp	.LBB68_7
.LBB68_7:                               # %for.inc
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_3
.LBB68_8:                               # %for.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_9
.LBB68_9:                               # %for.inc7
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_1
.LBB68_10:                              # %for.end9
	cmpl	$1929485483, -20(%rbp)  # imm = 0x73019CAB
	jne	.LBB68_12
.LBB68_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_11
.Lfunc_end68:
	.size	Error_Concealment.58, .Lfunc_end68-Error_Concealment.58
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.59       # -- Begin function DecOneForthPix.59
	.p2align	4, 0x90
	.type	DecOneForthPix.59,@function
DecOneForthPix.59:                      # @DecOneForthPix.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$556653192, -12(%rbp)   # imm = 0x212DDA88
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB69_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_1
.LBB69_4:                               # %for.end
	cmpl	$556653192, -12(%rbp)   # imm = 0x212DDA88
	jne	.LBB69_6
.LBB69_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_5
.Lfunc_end69:
	.size	DecOneForthPix.59, .Lfunc_end69-DecOneForthPix.59
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.60        # -- Begin function Conceal_Error.60
	.p2align	4, 0x90
	.type	Conceal_Error.60,@function
Conceal_Error.60:                       # @Conceal_Error.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$204495557, -68(%rbp)   # imm = 0xC305AC5
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB70_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB70_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB70_4:                               # %land.end
.LBB70_5:                               # %lor.end
.LBB70_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB70_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB70_9
.LBB70_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB70_14
.LBB70_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB70_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB70_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB70_12:                              # %land.end51
.LBB70_13:                              # %lor.end53
.LBB70_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB70_180
# %bb.15:                               # %land.end54
	movq	.LJTI70_0(,%rax,8), %rax
	jmpq	*%rax
.LBB70_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB70_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	$0, -4(%rbp)
.LBB70_20:                              # %for.cond68
                                        #   Parent Loop BB70_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB70_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB70_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_20
.LBB70_23:                              # %for.end
                                        #   in Loop: Header=BB70_18 Depth=1
	jmp	.LBB70_24
.LBB70_24:                              # %for.inc85
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_18
.LBB70_25:                              # %for.end87
	jmp	.LBB70_35
.LBB70_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB70_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	$0, -4(%rbp)
.LBB70_29:                              # %for.cond92
                                        #   Parent Loop BB70_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB70_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB70_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_29
.LBB70_32:                              # %for.end104
                                        #   in Loop: Header=BB70_27 Depth=1
	jmp	.LBB70_33
.LBB70_33:                              # %for.inc105
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_27
.LBB70_34:                              # %for.end107
	jmp	.LBB70_35
.LBB70_35:                              # %if.end
	jmp	.LBB70_180
.LBB70_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB70_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_39 Depth 2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	$0, -16(%rbp)
.LBB70_39:                              # %for.cond113
                                        #   Parent Loop BB70_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	$0, -4(%rbp)
.LBB70_41:                              # %for.cond117
                                        #   Parent Loop BB70_37 Depth=1
                                        #     Parent Loop BB70_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB70_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB70_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_41
.LBB70_44:                              # %for.end141
                                        #   in Loop: Header=BB70_39 Depth=2
	jmp	.LBB70_45
.LBB70_45:                              # %for.inc142
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_39
.LBB70_46:                              # %for.end144
                                        #   in Loop: Header=BB70_37 Depth=1
	jmp	.LBB70_47
.LBB70_47:                              # %for.inc145
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_37
.LBB70_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB70_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	$0, -8(%rbp)
.LBB70_51:                              # %for.cond152
                                        #   Parent Loop BB70_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB70_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB70_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_51
.LBB70_54:                              # %for.end162
                                        #   in Loop: Header=BB70_49 Depth=1
	jmp	.LBB70_55
.LBB70_55:                              # %for.inc163
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_49
.LBB70_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB70_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB70_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	$0, -4(%rbp)
.LBB70_61:                              # %for.cond175
                                        #   Parent Loop BB70_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB70_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB70_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_61
.LBB70_64:                              # %for.end195
                                        #   in Loop: Header=BB70_59 Depth=1
	jmp	.LBB70_65
.LBB70_65:                              # %for.inc196
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_59
.LBB70_66:                              # %for.end198
	jmp	.LBB70_95
.LBB70_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB70_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_71 Depth 2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_71:                              # %for.cond210
                                        #   Parent Loop BB70_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB70_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_73:                              # %for.cond236
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	$0, -4(%rbp)
.LBB70_75:                              # %for.cond240
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        #       Parent Loop BB70_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB70_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB70_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_75
.LBB70_78:                              # %for.end259
                                        #   in Loop: Header=BB70_73 Depth=3
	jmp	.LBB70_79
.LBB70_79:                              # %for.inc260
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_73
.LBB70_80:                              # %for.end262
                                        #   in Loop: Header=BB70_71 Depth=2
	jmp	.LBB70_81
.LBB70_81:                              # %for.inc263
                                        #   in Loop: Header=BB70_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_71
.LBB70_82:                              # %for.end265
                                        #   in Loop: Header=BB70_69 Depth=1
	jmp	.LBB70_83
.LBB70_83:                              # %for.inc266
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_69
.LBB70_84:                              # %for.end268
	jmp	.LBB70_94
.LBB70_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB70_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	$0, -4(%rbp)
.LBB70_88:                              # %for.cond274
                                        #   Parent Loop BB70_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB70_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB70_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_88
.LBB70_91:                              # %for.end294
                                        #   in Loop: Header=BB70_86 Depth=1
	jmp	.LBB70_92
.LBB70_92:                              # %for.inc295
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_86
.LBB70_93:                              # %for.end297
	jmp	.LBB70_94
.LBB70_94:                              # %if.end298
	jmp	.LBB70_95
.LBB70_95:                              # %if.end299
	jmp	.LBB70_105
.LBB70_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB70_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	$0, -4(%rbp)
.LBB70_99:                              # %for.cond305
                                        #   Parent Loop BB70_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB70_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB70_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_99
.LBB70_102:                             # %for.end317
                                        #   in Loop: Header=BB70_97 Depth=1
	jmp	.LBB70_103
.LBB70_103:                             # %for.inc318
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_97
.LBB70_104:                             # %for.end320
	jmp	.LBB70_105
.LBB70_105:                             # %if.end321
	jmp	.LBB70_180
.LBB70_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB70_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_110 Depth 2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	$0, -16(%rbp)
.LBB70_110:                             # %for.cond331
                                        #   Parent Loop BB70_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	$0, -4(%rbp)
.LBB70_112:                             # %for.cond335
                                        #   Parent Loop BB70_108 Depth=1
                                        #     Parent Loop BB70_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB70_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB70_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_112
.LBB70_115:                             # %for.end359
                                        #   in Loop: Header=BB70_110 Depth=2
	jmp	.LBB70_116
.LBB70_116:                             # %for.inc360
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_110
.LBB70_117:                             # %for.end362
                                        #   in Loop: Header=BB70_108 Depth=1
	jmp	.LBB70_118
.LBB70_118:                             # %for.inc363
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_108
.LBB70_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB70_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	$0, -8(%rbp)
.LBB70_122:                             # %for.cond370
                                        #   Parent Loop BB70_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB70_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB70_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_122
.LBB70_125:                             # %for.end380
                                        #   in Loop: Header=BB70_120 Depth=1
	jmp	.LBB70_126
.LBB70_126:                             # %for.inc381
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_120
.LBB70_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB70_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB70_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	$0, -4(%rbp)
.LBB70_131:                             # %for.cond390
                                        #   Parent Loop BB70_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB70_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB70_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_131
.LBB70_134:                             # %for.end410
                                        #   in Loop: Header=BB70_129 Depth=1
	jmp	.LBB70_135
.LBB70_135:                             # %for.inc411
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_129
.LBB70_136:                             # %for.end413
	jmp	.LBB70_156
.LBB70_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB70_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_141 Depth 2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_141:                             # %for.cond425
                                        #   Parent Loop BB70_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB70_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_143:                             # %for.cond452
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	$0, -4(%rbp)
.LBB70_145:                             # %for.cond456
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        #       Parent Loop BB70_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB70_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB70_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_145
.LBB70_148:                             # %for.end475
                                        #   in Loop: Header=BB70_143 Depth=3
	jmp	.LBB70_149
.LBB70_149:                             # %for.inc476
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_143
.LBB70_150:                             # %for.end478
                                        #   in Loop: Header=BB70_141 Depth=2
	jmp	.LBB70_151
.LBB70_151:                             # %for.inc479
                                        #   in Loop: Header=BB70_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_141
.LBB70_152:                             # %for.end481
                                        #   in Loop: Header=BB70_139 Depth=1
	jmp	.LBB70_153
.LBB70_153:                             # %for.inc482
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_139
.LBB70_154:                             # %for.end484
	jmp	.LBB70_155
.LBB70_155:                             # %if.end485
	jmp	.LBB70_156
.LBB70_156:                             # %if.end486
	jmp	.LBB70_157
.LBB70_157:                             # %if.end487
	jmp	.LBB70_180
.LBB70_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB70_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB70_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	$0, -4(%rbp)
.LBB70_163:                             # %for.cond499
                                        #   Parent Loop BB70_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB70_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB70_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_163
.LBB70_166:                             # %for.end519
                                        #   in Loop: Header=BB70_161 Depth=1
	jmp	.LBB70_167
.LBB70_167:                             # %for.inc520
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_161
.LBB70_168:                             # %for.end522
	jmp	.LBB70_169
.LBB70_169:                             # %if.end523
	jmp	.LBB70_179
.LBB70_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB70_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	$0, -4(%rbp)
.LBB70_173:                             # %for.cond529
                                        #   Parent Loop BB70_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB70_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB70_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_173
.LBB70_176:                             # %for.end541
                                        #   in Loop: Header=BB70_171 Depth=1
	jmp	.LBB70_177
.LBB70_177:                             # %for.inc542
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_171
.LBB70_178:                             # %for.end544
	jmp	.LBB70_179
.LBB70_179:                             # %if.end545
	jmp	.LBB70_180
.LBB70_180:                             # %sw.epilog
	cmpl	$204495557, -68(%rbp)   # imm = 0xC305AC5
	jne	.LBB70_182
.LBB70_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_181
.Lfunc_end70:
	.size	Conceal_Error.60, .Lfunc_end70-Conceal_Error.60
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI70_0:
	.quad	.LBB70_16
	.quad	.LBB70_158
	.quad	.LBB70_106
	.quad	.LBB70_180
	.quad	.LBB70_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.61
.LCPI71_0:
	.quad	4636737291354636288     # double 100
.LCPI71_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.61
	.p2align	4, 0x90
	.type	Build_Status_Map.61,@function
Build_Status_Map.61:                    # @Build_Status_Map.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$150605171, -44(%rbp)   # imm = 0x8FA0D73
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB71_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB71_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB71_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB71_13
.LBB71_6:                               # %if.then
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB71_8:                               # %if.end
                                        #   in Loop: Header=BB71_3 Depth=2
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB71_10:                              # %if.end20
                                        #   in Loop: Header=BB71_3 Depth=2
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$1, -4(%rbp)
.LBB71_12:                              # %if.end29
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB71_13:                              # %if.end30
                                        #   in Loop: Header=BB71_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB71_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB71_18
.LBB71_15:                              # %if.else
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB71_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB71_17:                              # %if.end49
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_18
.LBB71_18:                              # %if.end50
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_3
.LBB71_20:                              # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_21
.LBB71_21:                              # %for.inc53
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_1
.LBB71_22:                              # %for.end55
	cmpl	$150605171, -44(%rbp)   # imm = 0x8FA0D73
	jne	.LBB71_24
.LBB71_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_23
.Lfunc_end71:
	.size	Build_Status_Map.61, .Lfunc_end71-Build_Status_Map.61
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.62        # -- Begin function Conceal_Error.62
	.p2align	4, 0x90
	.type	Conceal_Error.62,@function
Conceal_Error.62:                       # @Conceal_Error.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$88930461, -68(%rbp)    # imm = 0x54CF89D
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB72_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB72_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB72_4:                               # %land.end
.LBB72_5:                               # %lor.end
.LBB72_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB72_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB72_9
.LBB72_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB72_14
.LBB72_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB72_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB72_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB72_12:                              # %land.end51
.LBB72_13:                              # %lor.end53
.LBB72_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB72_180
# %bb.15:                               # %land.end54
	movq	.LJTI72_0(,%rax,8), %rax
	jmpq	*%rax
.LBB72_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB72_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB72_18 Depth=1
	movl	$0, -4(%rbp)
.LBB72_20:                              # %for.cond68
                                        #   Parent Loop BB72_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB72_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB72_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_20
.LBB72_23:                              # %for.end
                                        #   in Loop: Header=BB72_18 Depth=1
	jmp	.LBB72_24
.LBB72_24:                              # %for.inc85
                                        #   in Loop: Header=BB72_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_18
.LBB72_25:                              # %for.end87
	jmp	.LBB72_35
.LBB72_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB72_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB72_27 Depth=1
	movl	$0, -4(%rbp)
.LBB72_29:                              # %for.cond92
                                        #   Parent Loop BB72_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB72_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB72_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_29
.LBB72_32:                              # %for.end104
                                        #   in Loop: Header=BB72_27 Depth=1
	jmp	.LBB72_33
.LBB72_33:                              # %for.inc105
                                        #   in Loop: Header=BB72_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_27
.LBB72_34:                              # %for.end107
	jmp	.LBB72_35
.LBB72_35:                              # %if.end
	jmp	.LBB72_180
.LBB72_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB72_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_39 Depth 2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB72_37 Depth=1
	movl	$0, -12(%rbp)
.LBB72_39:                              # %for.cond113
                                        #   Parent Loop BB72_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	$0, -4(%rbp)
.LBB72_41:                              # %for.cond117
                                        #   Parent Loop BB72_37 Depth=1
                                        #     Parent Loop BB72_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB72_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB72_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB72_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_41
.LBB72_44:                              # %for.end141
                                        #   in Loop: Header=BB72_39 Depth=2
	jmp	.LBB72_45
.LBB72_45:                              # %for.inc142
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_39
.LBB72_46:                              # %for.end144
                                        #   in Loop: Header=BB72_37 Depth=1
	jmp	.LBB72_47
.LBB72_47:                              # %for.inc145
                                        #   in Loop: Header=BB72_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_37
.LBB72_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB72_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	$0, -8(%rbp)
.LBB72_51:                              # %for.cond152
                                        #   Parent Loop BB72_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB72_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB72_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_51
.LBB72_54:                              # %for.end162
                                        #   in Loop: Header=BB72_49 Depth=1
	jmp	.LBB72_55
.LBB72_55:                              # %for.inc163
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_49
.LBB72_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB72_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB72_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB72_59 Depth=1
	movl	$0, -4(%rbp)
.LBB72_61:                              # %for.cond175
                                        #   Parent Loop BB72_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB72_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_61
.LBB72_64:                              # %for.end195
                                        #   in Loop: Header=BB72_59 Depth=1
	jmp	.LBB72_65
.LBB72_65:                              # %for.inc196
                                        #   in Loop: Header=BB72_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_59
.LBB72_66:                              # %for.end198
	jmp	.LBB72_95
.LBB72_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB72_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB72_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_71 Depth 2
                                        #       Child Loop BB72_73 Depth 3
                                        #         Child Loop BB72_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB72_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB72_71:                              # %for.cond210
                                        #   Parent Loop BB72_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_73 Depth 3
                                        #         Child Loop BB72_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB72_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB72_73:                              # %for.cond236
                                        #   Parent Loop BB72_69 Depth=1
                                        #     Parent Loop BB72_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB72_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB72_73 Depth=3
	movl	$0, -4(%rbp)
.LBB72_75:                              # %for.cond240
                                        #   Parent Loop BB72_69 Depth=1
                                        #     Parent Loop BB72_71 Depth=2
                                        #       Parent Loop BB72_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB72_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB72_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB72_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_75
.LBB72_78:                              # %for.end259
                                        #   in Loop: Header=BB72_73 Depth=3
	jmp	.LBB72_79
.LBB72_79:                              # %for.inc260
                                        #   in Loop: Header=BB72_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_73
.LBB72_80:                              # %for.end262
                                        #   in Loop: Header=BB72_71 Depth=2
	jmp	.LBB72_81
.LBB72_81:                              # %for.inc263
                                        #   in Loop: Header=BB72_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_71
.LBB72_82:                              # %for.end265
                                        #   in Loop: Header=BB72_69 Depth=1
	jmp	.LBB72_83
.LBB72_83:                              # %for.inc266
                                        #   in Loop: Header=BB72_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_69
.LBB72_84:                              # %for.end268
	jmp	.LBB72_94
.LBB72_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB72_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB72_86 Depth=1
	movl	$0, -4(%rbp)
.LBB72_88:                              # %for.cond274
                                        #   Parent Loop BB72_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB72_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB72_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_88
.LBB72_91:                              # %for.end294
                                        #   in Loop: Header=BB72_86 Depth=1
	jmp	.LBB72_92
.LBB72_92:                              # %for.inc295
                                        #   in Loop: Header=BB72_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_86
.LBB72_93:                              # %for.end297
	jmp	.LBB72_94
.LBB72_94:                              # %if.end298
	jmp	.LBB72_95
.LBB72_95:                              # %if.end299
	jmp	.LBB72_105
.LBB72_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB72_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB72_97 Depth=1
	movl	$0, -4(%rbp)
.LBB72_99:                              # %for.cond305
                                        #   Parent Loop BB72_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB72_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB72_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_99
.LBB72_102:                             # %for.end317
                                        #   in Loop: Header=BB72_97 Depth=1
	jmp	.LBB72_103
.LBB72_103:                             # %for.inc318
                                        #   in Loop: Header=BB72_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_97
.LBB72_104:                             # %for.end320
	jmp	.LBB72_105
.LBB72_105:                             # %if.end321
	jmp	.LBB72_180
.LBB72_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB72_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_110 Depth 2
                                        #       Child Loop BB72_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB72_108 Depth=1
	movl	$0, -12(%rbp)
.LBB72_110:                             # %for.cond331
                                        #   Parent Loop BB72_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB72_110 Depth=2
	movl	$0, -4(%rbp)
.LBB72_112:                             # %for.cond335
                                        #   Parent Loop BB72_108 Depth=1
                                        #     Parent Loop BB72_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB72_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB72_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB72_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_112
.LBB72_115:                             # %for.end359
                                        #   in Loop: Header=BB72_110 Depth=2
	jmp	.LBB72_116
.LBB72_116:                             # %for.inc360
                                        #   in Loop: Header=BB72_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_110
.LBB72_117:                             # %for.end362
                                        #   in Loop: Header=BB72_108 Depth=1
	jmp	.LBB72_118
.LBB72_118:                             # %for.inc363
                                        #   in Loop: Header=BB72_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_108
.LBB72_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB72_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	$0, -8(%rbp)
.LBB72_122:                             # %for.cond370
                                        #   Parent Loop BB72_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB72_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB72_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_122
.LBB72_125:                             # %for.end380
                                        #   in Loop: Header=BB72_120 Depth=1
	jmp	.LBB72_126
.LBB72_126:                             # %for.inc381
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_120
.LBB72_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB72_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB72_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB72_129 Depth=1
	movl	$0, -4(%rbp)
.LBB72_131:                             # %for.cond390
                                        #   Parent Loop BB72_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB72_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB72_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_131
.LBB72_134:                             # %for.end410
                                        #   in Loop: Header=BB72_129 Depth=1
	jmp	.LBB72_135
.LBB72_135:                             # %for.inc411
                                        #   in Loop: Header=BB72_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_129
.LBB72_136:                             # %for.end413
	jmp	.LBB72_156
.LBB72_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB72_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB72_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_141 Depth 2
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB72_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB72_141:                             # %for.cond425
                                        #   Parent Loop BB72_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB72_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB72_143:                             # %for.cond452
                                        #   Parent Loop BB72_139 Depth=1
                                        #     Parent Loop BB72_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB72_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	$0, -4(%rbp)
.LBB72_145:                             # %for.cond456
                                        #   Parent Loop BB72_139 Depth=1
                                        #     Parent Loop BB72_141 Depth=2
                                        #       Parent Loop BB72_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB72_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB72_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB72_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_145
.LBB72_148:                             # %for.end475
                                        #   in Loop: Header=BB72_143 Depth=3
	jmp	.LBB72_149
.LBB72_149:                             # %for.inc476
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_143
.LBB72_150:                             # %for.end478
                                        #   in Loop: Header=BB72_141 Depth=2
	jmp	.LBB72_151
.LBB72_151:                             # %for.inc479
                                        #   in Loop: Header=BB72_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_141
.LBB72_152:                             # %for.end481
                                        #   in Loop: Header=BB72_139 Depth=1
	jmp	.LBB72_153
.LBB72_153:                             # %for.inc482
                                        #   in Loop: Header=BB72_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_139
.LBB72_154:                             # %for.end484
	jmp	.LBB72_155
.LBB72_155:                             # %if.end485
	jmp	.LBB72_156
.LBB72_156:                             # %if.end486
	jmp	.LBB72_157
.LBB72_157:                             # %if.end487
	jmp	.LBB72_180
.LBB72_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB72_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB72_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	$0, -4(%rbp)
.LBB72_163:                             # %for.cond499
                                        #   Parent Loop BB72_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB72_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB72_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_163
.LBB72_166:                             # %for.end519
                                        #   in Loop: Header=BB72_161 Depth=1
	jmp	.LBB72_167
.LBB72_167:                             # %for.inc520
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_161
.LBB72_168:                             # %for.end522
	jmp	.LBB72_169
.LBB72_169:                             # %if.end523
	jmp	.LBB72_179
.LBB72_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB72_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB72_171 Depth=1
	movl	$0, -4(%rbp)
.LBB72_173:                             # %for.cond529
                                        #   Parent Loop BB72_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB72_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB72_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_173
.LBB72_176:                             # %for.end541
                                        #   in Loop: Header=BB72_171 Depth=1
	jmp	.LBB72_177
.LBB72_177:                             # %for.inc542
                                        #   in Loop: Header=BB72_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_171
.LBB72_178:                             # %for.end544
	jmp	.LBB72_179
.LBB72_179:                             # %if.end545
	jmp	.LBB72_180
.LBB72_180:                             # %sw.epilog
	cmpl	$88930461, -68(%rbp)    # imm = 0x54CF89D
	jne	.LBB72_182
.LBB72_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_181
.Lfunc_end72:
	.size	Conceal_Error.62, .Lfunc_end72-Conceal_Error.62
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI72_0:
	.quad	.LBB72_16
	.quad	.LBB72_158
	.quad	.LBB72_106
	.quad	.LBB72_180
	.quad	.LBB72_36
                                        # -- End function
	.text
	.globl	Conceal_Error.63        # -- Begin function Conceal_Error.63
	.p2align	4, 0x90
	.type	Conceal_Error.63,@function
Conceal_Error.63:                       # @Conceal_Error.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$351005406, -68(%rbp)   # imm = 0x14EBEADE
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB73_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB73_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB73_4:                               # %land.end
.LBB73_5:                               # %lor.end
.LBB73_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB73_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB73_9
.LBB73_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB73_14
.LBB73_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB73_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB73_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB73_12:                              # %land.end51
.LBB73_13:                              # %lor.end53
.LBB73_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB73_180
# %bb.15:                               # %land.end54
	movq	.LJTI73_0(,%rax,8), %rax
	jmpq	*%rax
.LBB73_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB73_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	$0, -4(%rbp)
.LBB73_20:                              # %for.cond68
                                        #   Parent Loop BB73_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB73_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB73_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_20
.LBB73_23:                              # %for.end
                                        #   in Loop: Header=BB73_18 Depth=1
	jmp	.LBB73_24
.LBB73_24:                              # %for.inc85
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_18
.LBB73_25:                              # %for.end87
	jmp	.LBB73_35
.LBB73_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB73_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	$0, -4(%rbp)
.LBB73_29:                              # %for.cond92
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_29
.LBB73_32:                              # %for.end104
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_33
.LBB73_33:                              # %for.inc105
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_34:                              # %for.end107
	jmp	.LBB73_35
.LBB73_35:                              # %if.end
	jmp	.LBB73_180
.LBB73_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB73_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_39 Depth 2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	$0, -16(%rbp)
.LBB73_39:                              # %for.cond113
                                        #   Parent Loop BB73_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	$0, -4(%rbp)
.LBB73_41:                              # %for.cond117
                                        #   Parent Loop BB73_37 Depth=1
                                        #     Parent Loop BB73_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB73_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB73_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_41
.LBB73_44:                              # %for.end141
                                        #   in Loop: Header=BB73_39 Depth=2
	jmp	.LBB73_45
.LBB73_45:                              # %for.inc142
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_39
.LBB73_46:                              # %for.end144
                                        #   in Loop: Header=BB73_37 Depth=1
	jmp	.LBB73_47
.LBB73_47:                              # %for.inc145
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_37
.LBB73_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB73_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	$0, -8(%rbp)
.LBB73_51:                              # %for.cond152
                                        #   Parent Loop BB73_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB73_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_51
.LBB73_54:                              # %for.end162
                                        #   in Loop: Header=BB73_49 Depth=1
	jmp	.LBB73_55
.LBB73_55:                              # %for.inc163
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_49
.LBB73_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB73_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB73_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	$0, -4(%rbp)
.LBB73_61:                              # %for.cond175
                                        #   Parent Loop BB73_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB73_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_64:                              # %for.end195
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_65
.LBB73_65:                              # %for.inc196
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_59
.LBB73_66:                              # %for.end198
	jmp	.LBB73_95
.LBB73_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB73_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_71 Depth 2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_71:                              # %for.cond210
                                        #   Parent Loop BB73_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB73_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_73:                              # %for.cond236
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond240
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        #       Parent Loop BB73_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB73_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB73_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_78:                              # %for.end259
                                        #   in Loop: Header=BB73_73 Depth=3
	jmp	.LBB73_79
.LBB73_79:                              # %for.inc260
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_73
.LBB73_80:                              # %for.end262
                                        #   in Loop: Header=BB73_71 Depth=2
	jmp	.LBB73_81
.LBB73_81:                              # %for.inc263
                                        #   in Loop: Header=BB73_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_71
.LBB73_82:                              # %for.end265
                                        #   in Loop: Header=BB73_69 Depth=1
	jmp	.LBB73_83
.LBB73_83:                              # %for.inc266
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_69
.LBB73_84:                              # %for.end268
	jmp	.LBB73_94
.LBB73_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB73_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	$0, -4(%rbp)
.LBB73_88:                              # %for.cond274
                                        #   Parent Loop BB73_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB73_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB73_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_88
.LBB73_91:                              # %for.end294
                                        #   in Loop: Header=BB73_86 Depth=1
	jmp	.LBB73_92
.LBB73_92:                              # %for.inc295
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_86
.LBB73_93:                              # %for.end297
	jmp	.LBB73_94
.LBB73_94:                              # %if.end298
	jmp	.LBB73_95
.LBB73_95:                              # %if.end299
	jmp	.LBB73_105
.LBB73_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB73_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	$0, -4(%rbp)
.LBB73_99:                              # %for.cond305
                                        #   Parent Loop BB73_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB73_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB73_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_99
.LBB73_102:                             # %for.end317
                                        #   in Loop: Header=BB73_97 Depth=1
	jmp	.LBB73_103
.LBB73_103:                             # %for.inc318
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_97
.LBB73_104:                             # %for.end320
	jmp	.LBB73_105
.LBB73_105:                             # %if.end321
	jmp	.LBB73_180
.LBB73_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB73_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_110 Depth 2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	$0, -16(%rbp)
.LBB73_110:                             # %for.cond331
                                        #   Parent Loop BB73_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	$0, -4(%rbp)
.LBB73_112:                             # %for.cond335
                                        #   Parent Loop BB73_108 Depth=1
                                        #     Parent Loop BB73_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB73_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB73_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_112
.LBB73_115:                             # %for.end359
                                        #   in Loop: Header=BB73_110 Depth=2
	jmp	.LBB73_116
.LBB73_116:                             # %for.inc360
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_110
.LBB73_117:                             # %for.end362
                                        #   in Loop: Header=BB73_108 Depth=1
	jmp	.LBB73_118
.LBB73_118:                             # %for.inc363
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_108
.LBB73_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB73_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	$0, -8(%rbp)
.LBB73_122:                             # %for.cond370
                                        #   Parent Loop BB73_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB73_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB73_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_122
.LBB73_125:                             # %for.end380
                                        #   in Loop: Header=BB73_120 Depth=1
	jmp	.LBB73_126
.LBB73_126:                             # %for.inc381
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_120
.LBB73_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB73_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB73_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	$0, -4(%rbp)
.LBB73_131:                             # %for.cond390
                                        #   Parent Loop BB73_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB73_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB73_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_131
.LBB73_134:                             # %for.end410
                                        #   in Loop: Header=BB73_129 Depth=1
	jmp	.LBB73_135
.LBB73_135:                             # %for.inc411
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_129
.LBB73_136:                             # %for.end413
	jmp	.LBB73_156
.LBB73_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB73_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_141 Depth 2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_141:                             # %for.cond425
                                        #   Parent Loop BB73_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB73_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_143:                             # %for.cond452
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	$0, -4(%rbp)
.LBB73_145:                             # %for.cond456
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        #       Parent Loop BB73_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB73_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB73_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_145
.LBB73_148:                             # %for.end475
                                        #   in Loop: Header=BB73_143 Depth=3
	jmp	.LBB73_149
.LBB73_149:                             # %for.inc476
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_143
.LBB73_150:                             # %for.end478
                                        #   in Loop: Header=BB73_141 Depth=2
	jmp	.LBB73_151
.LBB73_151:                             # %for.inc479
                                        #   in Loop: Header=BB73_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_141
.LBB73_152:                             # %for.end481
                                        #   in Loop: Header=BB73_139 Depth=1
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc482
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_139
.LBB73_154:                             # %for.end484
	jmp	.LBB73_155
.LBB73_155:                             # %if.end485
	jmp	.LBB73_156
.LBB73_156:                             # %if.end486
	jmp	.LBB73_157
.LBB73_157:                             # %if.end487
	jmp	.LBB73_180
.LBB73_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB73_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB73_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	$0, -4(%rbp)
.LBB73_163:                             # %for.cond499
                                        #   Parent Loop BB73_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB73_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB73_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_163
.LBB73_166:                             # %for.end519
                                        #   in Loop: Header=BB73_161 Depth=1
	jmp	.LBB73_167
.LBB73_167:                             # %for.inc520
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_161
.LBB73_168:                             # %for.end522
	jmp	.LBB73_169
.LBB73_169:                             # %if.end523
	jmp	.LBB73_179
.LBB73_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB73_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	$0, -4(%rbp)
.LBB73_173:                             # %for.cond529
                                        #   Parent Loop BB73_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB73_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB73_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_173
.LBB73_176:                             # %for.end541
                                        #   in Loop: Header=BB73_171 Depth=1
	jmp	.LBB73_177
.LBB73_177:                             # %for.inc542
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_171
.LBB73_178:                             # %for.end544
	jmp	.LBB73_179
.LBB73_179:                             # %if.end545
	jmp	.LBB73_180
.LBB73_180:                             # %sw.epilog
	cmpl	$351005406, -68(%rbp)   # imm = 0x14EBEADE
	jne	.LBB73_182
.LBB73_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_181
.Lfunc_end73:
	.size	Conceal_Error.63, .Lfunc_end73-Conceal_Error.63
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI73_0:
	.quad	.LBB73_16
	.quad	.LBB73_158
	.quad	.LBB73_106
	.quad	.LBB73_180
	.quad	.LBB73_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.64 # -- Begin function compute_residue_b8block.64
	.p2align	4, 0x90
	.type	compute_residue_b8block.64,@function
compute_residue_b8block.64:             # @compute_residue_b8block.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$78784503, -36(%rbp)    # imm = 0x4B227F7
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB74_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB74_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB74_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_4:                               # %for.cond4
                                        #   Parent Loop BB74_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB74_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB74_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB74_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_4
.LBB74_7:                               # %for.end
                                        #   in Loop: Header=BB74_2 Depth=1
	jmp	.LBB74_8
.LBB74_8:                               # %for.inc22
                                        #   in Loop: Header=BB74_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_2
.LBB74_9:                               # %for.end24
	jmp	.LBB74_19
.LBB74_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB74_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB74_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_13:                              # %for.cond29
                                        #   Parent Loop BB74_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB74_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB74_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB74_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_13
.LBB74_16:                              # %for.end56
                                        #   in Loop: Header=BB74_11 Depth=1
	jmp	.LBB74_17
.LBB74_17:                              # %for.inc57
                                        #   in Loop: Header=BB74_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_11
.LBB74_18:                              # %for.end59
	jmp	.LBB74_19
.LBB74_19:                              # %if.end
	cmpl	$78784503, -36(%rbp)    # imm = 0x4B227F7
	jne	.LBB74_21
.LBB74_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_20
.Lfunc_end74:
	.size	compute_residue_b8block.64, .Lfunc_end74-compute_residue_b8block.64
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.65   # -- Begin function decode_one_b8block.65
	.p2align	4, 0x90
	.type	decode_one_b8block.65,@function
decode_one_b8block.65:                  # @decode_one_b8block.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1589222103, -84(%rbp)  # imm = 0x5EB99AD7
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB75_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_4:                               # %for.cond9
                                        #   Parent Loop BB75_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB75_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB75_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_4
.LBB75_7:                               # %for.end
                                        #   in Loop: Header=BB75_2 Depth=1
	jmp	.LBB75_8
.LBB75_8:                               # %for.inc26
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_2
.LBB75_9:                               # %for.end28
	jmp	.LBB75_96
.LBB75_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB75_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB75_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB75_31
.LBB75_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB75_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB75_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_17:                              # %for.cond40
                                        #   Parent Loop BB75_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB75_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB75_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_17
.LBB75_20:                              # %for.end49
                                        #   in Loop: Header=BB75_15 Depth=1
	jmp	.LBB75_21
.LBB75_21:                              # %for.inc50
                                        #   in Loop: Header=BB75_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_15
.LBB75_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB75_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB75_25:                              # %for.cond56
                                        #   Parent Loop BB75_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB75_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB75_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB75_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_25
.LBB75_28:                              # %for.end71
                                        #   in Loop: Header=BB75_23 Depth=1
	jmp	.LBB75_29
.LBB75_29:                              # %for.inc72
                                        #   in Loop: Header=BB75_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_23
.LBB75_30:                              # %for.end74
	jmp	.LBB75_60
.LBB75_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB75_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB75_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB75_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB75_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB75_36:                              # %for.cond83
                                        #   Parent Loop BB75_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB75_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB75_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB75_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_36
.LBB75_39:                              # %for.end120
                                        #   in Loop: Header=BB75_34 Depth=1
	jmp	.LBB75_40
.LBB75_40:                              # %for.inc121
                                        #   in Loop: Header=BB75_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_34
.LBB75_41:                              # %for.end123
	jmp	.LBB75_51
.LBB75_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB75_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB75_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB75_45:                              # %for.cond129
                                        #   Parent Loop BB75_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB75_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB75_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB75_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_45
.LBB75_48:                              # %for.end145
                                        #   in Loop: Header=BB75_43 Depth=1
	jmp	.LBB75_49
.LBB75_49:                              # %for.inc146
                                        #   in Loop: Header=BB75_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_43
.LBB75_50:                              # %for.end148
	jmp	.LBB75_51
.LBB75_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB75_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_54:                              # %for.cond153
                                        #   Parent Loop BB75_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB75_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB75_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_54
.LBB75_57:                              # %for.end167
                                        #   in Loop: Header=BB75_52 Depth=1
	jmp	.LBB75_58
.LBB75_58:                              # %for.inc168
                                        #   in Loop: Header=BB75_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_52
.LBB75_59:                              # %for.end170
	jmp	.LBB75_60
.LBB75_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB75_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB75_66
.LBB75_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB75_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB75_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB75_86
.LBB75_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB75_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_69 Depth 2
                                        #       Child Loop BB75_74 Depth 3
                                        #         Child Loop BB75_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB75_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB75_69:                              # %for.cond197
                                        #   Parent Loop BB75_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_74 Depth 3
                                        #         Child Loop BB75_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB75_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB75_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB75_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB75_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB75_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB75_73:                              # %if.end218
                                        #   in Loop: Header=BB75_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_74:                              # %for.cond233
                                        #   Parent Loop BB75_67 Depth=1
                                        #     Parent Loop BB75_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB75_74 Depth=3
	movl	$0, -4(%rbp)
.LBB75_76:                              # %for.cond237
                                        #   Parent Loop BB75_67 Depth=1
                                        #     Parent Loop BB75_69 Depth=2
                                        #       Parent Loop BB75_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB75_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB75_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_76
.LBB75_79:                              # %for.end269
                                        #   in Loop: Header=BB75_74 Depth=3
	jmp	.LBB75_80
.LBB75_80:                              # %for.inc270
                                        #   in Loop: Header=BB75_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_74
.LBB75_81:                              # %for.end272
                                        #   in Loop: Header=BB75_69 Depth=2
	jmp	.LBB75_82
.LBB75_82:                              # %for.inc273
                                        #   in Loop: Header=BB75_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_69
.LBB75_83:                              # %for.end275
                                        #   in Loop: Header=BB75_67 Depth=1
	jmp	.LBB75_84
.LBB75_84:                              # %for.inc276
                                        #   in Loop: Header=BB75_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_67
.LBB75_85:                              # %for.end278
	jmp	.LBB75_95
.LBB75_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB75_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB75_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB75_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB75_89:                              # %for.cond284
                                        #   Parent Loop BB75_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB75_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB75_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_89
.LBB75_92:                              # %for.end310
                                        #   in Loop: Header=BB75_87 Depth=1
	jmp	.LBB75_93
.LBB75_93:                              # %for.inc311
                                        #   in Loop: Header=BB75_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_87
.LBB75_94:                              # %for.end313
	jmp	.LBB75_95
.LBB75_95:                              # %if.end314
	jmp	.LBB75_96
.LBB75_96:                              # %if.end315
	cmpl	$1589222103, -84(%rbp)  # imm = 0x5EB99AD7
	jne	.LBB75_98
.LBB75_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_97
.Lfunc_end75:
	.size	decode_one_b8block.65, .Lfunc_end75-decode_one_b8block.65
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.66        # -- Begin function Conceal_Error.66
	.p2align	4, 0x90
	.type	Conceal_Error.66,@function
Conceal_Error.66:                       # @Conceal_Error.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1453511627, -68(%rbp)  # imm = 0x56A2D3CB
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB76_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB76_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB76_4:                               # %land.end
.LBB76_5:                               # %lor.end
.LBB76_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB76_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB76_9
.LBB76_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB76_14
.LBB76_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB76_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB76_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB76_12:                              # %land.end51
.LBB76_13:                              # %lor.end53
.LBB76_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB76_180
# %bb.15:                               # %land.end54
	movq	.LJTI76_0(,%rax,8), %rax
	jmpq	*%rax
.LBB76_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB76_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB76_18 Depth=1
	movl	$0, -4(%rbp)
.LBB76_20:                              # %for.cond68
                                        #   Parent Loop BB76_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB76_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB76_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_20
.LBB76_23:                              # %for.end
                                        #   in Loop: Header=BB76_18 Depth=1
	jmp	.LBB76_24
.LBB76_24:                              # %for.inc85
                                        #   in Loop: Header=BB76_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_18
.LBB76_25:                              # %for.end87
	jmp	.LBB76_35
.LBB76_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB76_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB76_27 Depth=1
	movl	$0, -4(%rbp)
.LBB76_29:                              # %for.cond92
                                        #   Parent Loop BB76_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB76_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB76_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_29
.LBB76_32:                              # %for.end104
                                        #   in Loop: Header=BB76_27 Depth=1
	jmp	.LBB76_33
.LBB76_33:                              # %for.inc105
                                        #   in Loop: Header=BB76_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_27
.LBB76_34:                              # %for.end107
	jmp	.LBB76_35
.LBB76_35:                              # %if.end
	jmp	.LBB76_180
.LBB76_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB76_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_39 Depth 2
                                        #       Child Loop BB76_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB76_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB76_37 Depth=1
	movl	$0, -12(%rbp)
.LBB76_39:                              # %for.cond113
                                        #   Parent Loop BB76_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB76_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB76_39 Depth=2
	movl	$0, -4(%rbp)
.LBB76_41:                              # %for.cond117
                                        #   Parent Loop BB76_37 Depth=1
                                        #     Parent Loop BB76_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB76_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB76_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB76_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_41
.LBB76_44:                              # %for.end141
                                        #   in Loop: Header=BB76_39 Depth=2
	jmp	.LBB76_45
.LBB76_45:                              # %for.inc142
                                        #   in Loop: Header=BB76_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_39
.LBB76_46:                              # %for.end144
                                        #   in Loop: Header=BB76_37 Depth=1
	jmp	.LBB76_47
.LBB76_47:                              # %for.inc145
                                        #   in Loop: Header=BB76_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_37
.LBB76_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB76_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB76_49 Depth=1
	movl	$0, -8(%rbp)
.LBB76_51:                              # %for.cond152
                                        #   Parent Loop BB76_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB76_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB76_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_51
.LBB76_54:                              # %for.end162
                                        #   in Loop: Header=BB76_49 Depth=1
	jmp	.LBB76_55
.LBB76_55:                              # %for.inc163
                                        #   in Loop: Header=BB76_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_49
.LBB76_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB76_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB76_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB76_59 Depth=1
	movl	$0, -4(%rbp)
.LBB76_61:                              # %for.cond175
                                        #   Parent Loop BB76_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB76_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB76_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_61
.LBB76_64:                              # %for.end195
                                        #   in Loop: Header=BB76_59 Depth=1
	jmp	.LBB76_65
.LBB76_65:                              # %for.inc196
                                        #   in Loop: Header=BB76_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_59
.LBB76_66:                              # %for.end198
	jmp	.LBB76_95
.LBB76_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB76_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB76_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_71 Depth 2
                                        #       Child Loop BB76_73 Depth 3
                                        #         Child Loop BB76_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB76_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB76_71:                              # %for.cond210
                                        #   Parent Loop BB76_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_73 Depth 3
                                        #         Child Loop BB76_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB76_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB76_73:                              # %for.cond236
                                        #   Parent Loop BB76_69 Depth=1
                                        #     Parent Loop BB76_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB76_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB76_73 Depth=3
	movl	$0, -4(%rbp)
.LBB76_75:                              # %for.cond240
                                        #   Parent Loop BB76_69 Depth=1
                                        #     Parent Loop BB76_71 Depth=2
                                        #       Parent Loop BB76_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB76_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB76_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB76_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_75
.LBB76_78:                              # %for.end259
                                        #   in Loop: Header=BB76_73 Depth=3
	jmp	.LBB76_79
.LBB76_79:                              # %for.inc260
                                        #   in Loop: Header=BB76_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_73
.LBB76_80:                              # %for.end262
                                        #   in Loop: Header=BB76_71 Depth=2
	jmp	.LBB76_81
.LBB76_81:                              # %for.inc263
                                        #   in Loop: Header=BB76_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_71
.LBB76_82:                              # %for.end265
                                        #   in Loop: Header=BB76_69 Depth=1
	jmp	.LBB76_83
.LBB76_83:                              # %for.inc266
                                        #   in Loop: Header=BB76_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_69
.LBB76_84:                              # %for.end268
	jmp	.LBB76_94
.LBB76_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB76_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB76_86 Depth=1
	movl	$0, -4(%rbp)
.LBB76_88:                              # %for.cond274
                                        #   Parent Loop BB76_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB76_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB76_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_88
.LBB76_91:                              # %for.end294
                                        #   in Loop: Header=BB76_86 Depth=1
	jmp	.LBB76_92
.LBB76_92:                              # %for.inc295
                                        #   in Loop: Header=BB76_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_86
.LBB76_93:                              # %for.end297
	jmp	.LBB76_94
.LBB76_94:                              # %if.end298
	jmp	.LBB76_95
.LBB76_95:                              # %if.end299
	jmp	.LBB76_105
.LBB76_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB76_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB76_97 Depth=1
	movl	$0, -4(%rbp)
.LBB76_99:                              # %for.cond305
                                        #   Parent Loop BB76_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB76_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB76_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_99
.LBB76_102:                             # %for.end317
                                        #   in Loop: Header=BB76_97 Depth=1
	jmp	.LBB76_103
.LBB76_103:                             # %for.inc318
                                        #   in Loop: Header=BB76_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_97
.LBB76_104:                             # %for.end320
	jmp	.LBB76_105
.LBB76_105:                             # %if.end321
	jmp	.LBB76_180
.LBB76_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB76_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_110 Depth 2
                                        #       Child Loop BB76_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB76_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB76_108 Depth=1
	movl	$0, -12(%rbp)
.LBB76_110:                             # %for.cond331
                                        #   Parent Loop BB76_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB76_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB76_110 Depth=2
	movl	$0, -4(%rbp)
.LBB76_112:                             # %for.cond335
                                        #   Parent Loop BB76_108 Depth=1
                                        #     Parent Loop BB76_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB76_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB76_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB76_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_112
.LBB76_115:                             # %for.end359
                                        #   in Loop: Header=BB76_110 Depth=2
	jmp	.LBB76_116
.LBB76_116:                             # %for.inc360
                                        #   in Loop: Header=BB76_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_110
.LBB76_117:                             # %for.end362
                                        #   in Loop: Header=BB76_108 Depth=1
	jmp	.LBB76_118
.LBB76_118:                             # %for.inc363
                                        #   in Loop: Header=BB76_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_108
.LBB76_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB76_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB76_120 Depth=1
	movl	$0, -8(%rbp)
.LBB76_122:                             # %for.cond370
                                        #   Parent Loop BB76_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB76_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB76_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_122
.LBB76_125:                             # %for.end380
                                        #   in Loop: Header=BB76_120 Depth=1
	jmp	.LBB76_126
.LBB76_126:                             # %for.inc381
                                        #   in Loop: Header=BB76_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_120
.LBB76_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB76_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB76_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB76_129 Depth=1
	movl	$0, -4(%rbp)
.LBB76_131:                             # %for.cond390
                                        #   Parent Loop BB76_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB76_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB76_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_131
.LBB76_134:                             # %for.end410
                                        #   in Loop: Header=BB76_129 Depth=1
	jmp	.LBB76_135
.LBB76_135:                             # %for.inc411
                                        #   in Loop: Header=BB76_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_129
.LBB76_136:                             # %for.end413
	jmp	.LBB76_156
.LBB76_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB76_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB76_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_141 Depth 2
                                        #       Child Loop BB76_143 Depth 3
                                        #         Child Loop BB76_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB76_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB76_141:                             # %for.cond425
                                        #   Parent Loop BB76_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_143 Depth 3
                                        #         Child Loop BB76_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB76_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB76_143:                             # %for.cond452
                                        #   Parent Loop BB76_139 Depth=1
                                        #     Parent Loop BB76_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB76_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB76_143 Depth=3
	movl	$0, -4(%rbp)
.LBB76_145:                             # %for.cond456
                                        #   Parent Loop BB76_139 Depth=1
                                        #     Parent Loop BB76_141 Depth=2
                                        #       Parent Loop BB76_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB76_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB76_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB76_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_145
.LBB76_148:                             # %for.end475
                                        #   in Loop: Header=BB76_143 Depth=3
	jmp	.LBB76_149
.LBB76_149:                             # %for.inc476
                                        #   in Loop: Header=BB76_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_143
.LBB76_150:                             # %for.end478
                                        #   in Loop: Header=BB76_141 Depth=2
	jmp	.LBB76_151
.LBB76_151:                             # %for.inc479
                                        #   in Loop: Header=BB76_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_141
.LBB76_152:                             # %for.end481
                                        #   in Loop: Header=BB76_139 Depth=1
	jmp	.LBB76_153
.LBB76_153:                             # %for.inc482
                                        #   in Loop: Header=BB76_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_139
.LBB76_154:                             # %for.end484
	jmp	.LBB76_155
.LBB76_155:                             # %if.end485
	jmp	.LBB76_156
.LBB76_156:                             # %if.end486
	jmp	.LBB76_157
.LBB76_157:                             # %if.end487
	jmp	.LBB76_180
.LBB76_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB76_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB76_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB76_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	$0, -4(%rbp)
.LBB76_163:                             # %for.cond499
                                        #   Parent Loop BB76_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB76_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB76_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_163
.LBB76_166:                             # %for.end519
                                        #   in Loop: Header=BB76_161 Depth=1
	jmp	.LBB76_167
.LBB76_167:                             # %for.inc520
                                        #   in Loop: Header=BB76_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_161
.LBB76_168:                             # %for.end522
	jmp	.LBB76_169
.LBB76_169:                             # %if.end523
	jmp	.LBB76_179
.LBB76_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB76_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB76_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB76_171 Depth=1
	movl	$0, -4(%rbp)
.LBB76_173:                             # %for.cond529
                                        #   Parent Loop BB76_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB76_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB76_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB76_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_173
.LBB76_176:                             # %for.end541
                                        #   in Loop: Header=BB76_171 Depth=1
	jmp	.LBB76_177
.LBB76_177:                             # %for.inc542
                                        #   in Loop: Header=BB76_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_171
.LBB76_178:                             # %for.end544
	jmp	.LBB76_179
.LBB76_179:                             # %if.end545
	jmp	.LBB76_180
.LBB76_180:                             # %sw.epilog
	cmpl	$1453511627, -68(%rbp)  # imm = 0x56A2D3CB
	jne	.LBB76_182
.LBB76_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_181
.Lfunc_end76:
	.size	Conceal_Error.66, .Lfunc_end76-Conceal_Error.66
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI76_0:
	.quad	.LBB76_16
	.quad	.LBB76_158
	.quad	.LBB76_106
	.quad	.LBB76_180
	.quad	.LBB76_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.67  # -- Begin function Get_Reference_Block.67
	.p2align	4, 0x90
	.type	Get_Reference_Block.67,@function
Get_Reference_Block.67:                 # @Get_Reference_Block.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1530211497, -32(%rbp)  # imm = 0x5B352CA9
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond5
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB77_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB77_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_6:                               # %for.end
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_7
.LBB77_7:                               # %for.inc14
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_1
.LBB77_8:                               # %for.end16
	cmpl	$1530211497, -32(%rbp)  # imm = 0x5B352CA9
	jne	.LBB77_10
.LBB77_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_9
.Lfunc_end77:
	.size	Get_Reference_Block.67, .Lfunc_end77-Get_Reference_Block.67
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.68  # -- Begin function Get_Reference_Block.68
	.p2align	4, 0x90
	.type	Get_Reference_Block.68,@function
Get_Reference_Block.68:                 # @Get_Reference_Block.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$299777753, -36(%rbp)   # imm = 0x11DE3ED9
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB78_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_3:                               # %for.cond5
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_3
.LBB78_6:                               # %for.end
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_7
.LBB78_7:                               # %for.inc14
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_1
.LBB78_8:                               # %for.end16
	cmpl	$299777753, -36(%rbp)   # imm = 0x11DE3ED9
	jne	.LBB78_10
.LBB78_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_9
.Lfunc_end78:
	.size	Get_Reference_Block.68, .Lfunc_end78-Get_Reference_Block.68
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.69   # -- Begin function decode_one_b8block.69
	.p2align	4, 0x90
	.type	decode_one_b8block.69,@function
decode_one_b8block.69:                  # @decode_one_b8block.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2071607017, -84(%rbp)  # imm = 0x7B7A36E9
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_4:                               # %for.cond9
                                        #   Parent Loop BB79_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB79_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB79_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_4
.LBB79_7:                               # %for.end
                                        #   in Loop: Header=BB79_2 Depth=1
	jmp	.LBB79_8
.LBB79_8:                               # %for.inc26
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_2
.LBB79_9:                               # %for.end28
	jmp	.LBB79_96
.LBB79_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB79_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB79_31
.LBB79_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB79_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_17:                              # %for.cond40
                                        #   Parent Loop BB79_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB79_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB79_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_17
.LBB79_20:                              # %for.end49
                                        #   in Loop: Header=BB79_15 Depth=1
	jmp	.LBB79_21
.LBB79_21:                              # %for.inc50
                                        #   in Loop: Header=BB79_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_15
.LBB79_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB79_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_25:                              # %for.cond56
                                        #   Parent Loop BB79_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB79_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB79_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_25
.LBB79_28:                              # %for.end71
                                        #   in Loop: Header=BB79_23 Depth=1
	jmp	.LBB79_29
.LBB79_29:                              # %for.inc72
                                        #   in Loop: Header=BB79_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_23
.LBB79_30:                              # %for.end74
	jmp	.LBB79_60
.LBB79_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB79_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB79_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB79_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_36:                              # %for.cond83
                                        #   Parent Loop BB79_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB79_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB79_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_36
.LBB79_39:                              # %for.end120
                                        #   in Loop: Header=BB79_34 Depth=1
	jmp	.LBB79_40
.LBB79_40:                              # %for.inc121
                                        #   in Loop: Header=BB79_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_34
.LBB79_41:                              # %for.end123
	jmp	.LBB79_51
.LBB79_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB79_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_45:                              # %for.cond129
                                        #   Parent Loop BB79_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB79_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB79_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_45
.LBB79_48:                              # %for.end145
                                        #   in Loop: Header=BB79_43 Depth=1
	jmp	.LBB79_49
.LBB79_49:                              # %for.inc146
                                        #   in Loop: Header=BB79_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_43
.LBB79_50:                              # %for.end148
	jmp	.LBB79_51
.LBB79_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB79_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_54:                              # %for.cond153
                                        #   Parent Loop BB79_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB79_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB79_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_54
.LBB79_57:                              # %for.end167
                                        #   in Loop: Header=BB79_52 Depth=1
	jmp	.LBB79_58
.LBB79_58:                              # %for.inc168
                                        #   in Loop: Header=BB79_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_52
.LBB79_59:                              # %for.end170
	jmp	.LBB79_60
.LBB79_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB79_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB79_66
.LBB79_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB79_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB79_86
.LBB79_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_69 Depth 2
                                        #       Child Loop BB79_74 Depth 3
                                        #         Child Loop BB79_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB79_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_69:                              # %for.cond197
                                        #   Parent Loop BB79_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_74 Depth 3
                                        #         Child Loop BB79_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB79_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB79_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB79_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB79_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB79_73:                              # %if.end218
                                        #   in Loop: Header=BB79_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB79_74:                              # %for.cond233
                                        #   Parent Loop BB79_67 Depth=1
                                        #     Parent Loop BB79_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB79_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB79_74 Depth=3
	movl	$0, -4(%rbp)
.LBB79_76:                              # %for.cond237
                                        #   Parent Loop BB79_67 Depth=1
                                        #     Parent Loop BB79_69 Depth=2
                                        #       Parent Loop BB79_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB79_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB79_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB79_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_76
.LBB79_79:                              # %for.end269
                                        #   in Loop: Header=BB79_74 Depth=3
	jmp	.LBB79_80
.LBB79_80:                              # %for.inc270
                                        #   in Loop: Header=BB79_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_74
.LBB79_81:                              # %for.end272
                                        #   in Loop: Header=BB79_69 Depth=2
	jmp	.LBB79_82
.LBB79_82:                              # %for.inc273
                                        #   in Loop: Header=BB79_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_69
.LBB79_83:                              # %for.end275
                                        #   in Loop: Header=BB79_67 Depth=1
	jmp	.LBB79_84
.LBB79_84:                              # %for.inc276
                                        #   in Loop: Header=BB79_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_67
.LBB79_85:                              # %for.end278
	jmp	.LBB79_95
.LBB79_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB79_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_89:                              # %for.cond284
                                        #   Parent Loop BB79_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB79_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB79_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_89
.LBB79_92:                              # %for.end310
                                        #   in Loop: Header=BB79_87 Depth=1
	jmp	.LBB79_93
.LBB79_93:                              # %for.inc311
                                        #   in Loop: Header=BB79_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_87
.LBB79_94:                              # %for.end313
	jmp	.LBB79_95
.LBB79_95:                              # %if.end314
	jmp	.LBB79_96
.LBB79_96:                              # %if.end315
	cmpl	$2071607017, -84(%rbp)  # imm = 0x7B7A36E9
	jne	.LBB79_98
.LBB79_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_97
.Lfunc_end79:
	.size	decode_one_b8block.69, .Lfunc_end79-decode_one_b8block.69
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.70        # -- Begin function Conceal_Error.70
	.p2align	4, 0x90
	.type	Conceal_Error.70,@function
Conceal_Error.70:                       # @Conceal_Error.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2075047574, -68(%rbp)  # imm = 0x7BAEB696
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB80_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB80_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB80_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB80_4:                               # %land.end
.LBB80_5:                               # %lor.end
.LBB80_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB80_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB80_9
.LBB80_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB80_14
.LBB80_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB80_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB80_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB80_12:                              # %land.end51
.LBB80_13:                              # %lor.end53
.LBB80_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB80_180
# %bb.15:                               # %land.end54
	movq	.LJTI80_0(,%rax,8), %rax
	jmpq	*%rax
.LBB80_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB80_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB80_18 Depth=1
	movl	$0, -4(%rbp)
.LBB80_20:                              # %for.cond68
                                        #   Parent Loop BB80_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB80_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB80_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_20
.LBB80_23:                              # %for.end
                                        #   in Loop: Header=BB80_18 Depth=1
	jmp	.LBB80_24
.LBB80_24:                              # %for.inc85
                                        #   in Loop: Header=BB80_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_18
.LBB80_25:                              # %for.end87
	jmp	.LBB80_35
.LBB80_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB80_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB80_27 Depth=1
	movl	$0, -4(%rbp)
.LBB80_29:                              # %for.cond92
                                        #   Parent Loop BB80_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB80_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB80_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_29
.LBB80_32:                              # %for.end104
                                        #   in Loop: Header=BB80_27 Depth=1
	jmp	.LBB80_33
.LBB80_33:                              # %for.inc105
                                        #   in Loop: Header=BB80_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_27
.LBB80_34:                              # %for.end107
	jmp	.LBB80_35
.LBB80_35:                              # %if.end
	jmp	.LBB80_180
.LBB80_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB80_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_39 Depth 2
                                        #       Child Loop BB80_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB80_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB80_37 Depth=1
	movl	$0, -12(%rbp)
.LBB80_39:                              # %for.cond113
                                        #   Parent Loop BB80_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB80_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB80_39 Depth=2
	movl	$0, -4(%rbp)
.LBB80_41:                              # %for.cond117
                                        #   Parent Loop BB80_37 Depth=1
                                        #     Parent Loop BB80_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB80_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB80_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB80_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_41
.LBB80_44:                              # %for.end141
                                        #   in Loop: Header=BB80_39 Depth=2
	jmp	.LBB80_45
.LBB80_45:                              # %for.inc142
                                        #   in Loop: Header=BB80_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_39
.LBB80_46:                              # %for.end144
                                        #   in Loop: Header=BB80_37 Depth=1
	jmp	.LBB80_47
.LBB80_47:                              # %for.inc145
                                        #   in Loop: Header=BB80_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_37
.LBB80_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB80_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB80_49 Depth=1
	movl	$0, -8(%rbp)
.LBB80_51:                              # %for.cond152
                                        #   Parent Loop BB80_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB80_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB80_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_51
.LBB80_54:                              # %for.end162
                                        #   in Loop: Header=BB80_49 Depth=1
	jmp	.LBB80_55
.LBB80_55:                              # %for.inc163
                                        #   in Loop: Header=BB80_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_49
.LBB80_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB80_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB80_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB80_59 Depth=1
	movl	$0, -4(%rbp)
.LBB80_61:                              # %for.cond175
                                        #   Parent Loop BB80_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB80_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB80_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_61
.LBB80_64:                              # %for.end195
                                        #   in Loop: Header=BB80_59 Depth=1
	jmp	.LBB80_65
.LBB80_65:                              # %for.inc196
                                        #   in Loop: Header=BB80_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_59
.LBB80_66:                              # %for.end198
	jmp	.LBB80_95
.LBB80_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB80_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB80_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_71 Depth 2
                                        #       Child Loop BB80_73 Depth 3
                                        #         Child Loop BB80_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB80_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB80_71:                              # %for.cond210
                                        #   Parent Loop BB80_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_73 Depth 3
                                        #         Child Loop BB80_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB80_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB80_73:                              # %for.cond236
                                        #   Parent Loop BB80_69 Depth=1
                                        #     Parent Loop BB80_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB80_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB80_73 Depth=3
	movl	$0, -4(%rbp)
.LBB80_75:                              # %for.cond240
                                        #   Parent Loop BB80_69 Depth=1
                                        #     Parent Loop BB80_71 Depth=2
                                        #       Parent Loop BB80_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB80_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB80_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB80_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_75
.LBB80_78:                              # %for.end259
                                        #   in Loop: Header=BB80_73 Depth=3
	jmp	.LBB80_79
.LBB80_79:                              # %for.inc260
                                        #   in Loop: Header=BB80_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_73
.LBB80_80:                              # %for.end262
                                        #   in Loop: Header=BB80_71 Depth=2
	jmp	.LBB80_81
.LBB80_81:                              # %for.inc263
                                        #   in Loop: Header=BB80_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_71
.LBB80_82:                              # %for.end265
                                        #   in Loop: Header=BB80_69 Depth=1
	jmp	.LBB80_83
.LBB80_83:                              # %for.inc266
                                        #   in Loop: Header=BB80_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_69
.LBB80_84:                              # %for.end268
	jmp	.LBB80_94
.LBB80_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB80_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	$0, -4(%rbp)
.LBB80_88:                              # %for.cond274
                                        #   Parent Loop BB80_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB80_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB80_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_88
.LBB80_91:                              # %for.end294
                                        #   in Loop: Header=BB80_86 Depth=1
	jmp	.LBB80_92
.LBB80_92:                              # %for.inc295
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_86
.LBB80_93:                              # %for.end297
	jmp	.LBB80_94
.LBB80_94:                              # %if.end298
	jmp	.LBB80_95
.LBB80_95:                              # %if.end299
	jmp	.LBB80_105
.LBB80_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB80_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB80_97 Depth=1
	movl	$0, -4(%rbp)
.LBB80_99:                              # %for.cond305
                                        #   Parent Loop BB80_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB80_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB80_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_99
.LBB80_102:                             # %for.end317
                                        #   in Loop: Header=BB80_97 Depth=1
	jmp	.LBB80_103
.LBB80_103:                             # %for.inc318
                                        #   in Loop: Header=BB80_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_97
.LBB80_104:                             # %for.end320
	jmp	.LBB80_105
.LBB80_105:                             # %if.end321
	jmp	.LBB80_180
.LBB80_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB80_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_110 Depth 2
                                        #       Child Loop BB80_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB80_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	$0, -12(%rbp)
.LBB80_110:                             # %for.cond331
                                        #   Parent Loop BB80_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB80_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB80_110 Depth=2
	movl	$0, -4(%rbp)
.LBB80_112:                             # %for.cond335
                                        #   Parent Loop BB80_108 Depth=1
                                        #     Parent Loop BB80_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB80_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB80_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB80_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_112
.LBB80_115:                             # %for.end359
                                        #   in Loop: Header=BB80_110 Depth=2
	jmp	.LBB80_116
.LBB80_116:                             # %for.inc360
                                        #   in Loop: Header=BB80_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_110
.LBB80_117:                             # %for.end362
                                        #   in Loop: Header=BB80_108 Depth=1
	jmp	.LBB80_118
.LBB80_118:                             # %for.inc363
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_108
.LBB80_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB80_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB80_120 Depth=1
	movl	$0, -8(%rbp)
.LBB80_122:                             # %for.cond370
                                        #   Parent Loop BB80_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB80_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB80_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_122
.LBB80_125:                             # %for.end380
                                        #   in Loop: Header=BB80_120 Depth=1
	jmp	.LBB80_126
.LBB80_126:                             # %for.inc381
                                        #   in Loop: Header=BB80_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_120
.LBB80_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB80_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB80_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB80_129 Depth=1
	movl	$0, -4(%rbp)
.LBB80_131:                             # %for.cond390
                                        #   Parent Loop BB80_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB80_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB80_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_131
.LBB80_134:                             # %for.end410
                                        #   in Loop: Header=BB80_129 Depth=1
	jmp	.LBB80_135
.LBB80_135:                             # %for.inc411
                                        #   in Loop: Header=BB80_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_129
.LBB80_136:                             # %for.end413
	jmp	.LBB80_156
.LBB80_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB80_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB80_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_141 Depth 2
                                        #       Child Loop BB80_143 Depth 3
                                        #         Child Loop BB80_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB80_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB80_141:                             # %for.cond425
                                        #   Parent Loop BB80_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_143 Depth 3
                                        #         Child Loop BB80_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB80_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB80_143:                             # %for.cond452
                                        #   Parent Loop BB80_139 Depth=1
                                        #     Parent Loop BB80_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB80_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB80_143 Depth=3
	movl	$0, -4(%rbp)
.LBB80_145:                             # %for.cond456
                                        #   Parent Loop BB80_139 Depth=1
                                        #     Parent Loop BB80_141 Depth=2
                                        #       Parent Loop BB80_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB80_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB80_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB80_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_145
.LBB80_148:                             # %for.end475
                                        #   in Loop: Header=BB80_143 Depth=3
	jmp	.LBB80_149
.LBB80_149:                             # %for.inc476
                                        #   in Loop: Header=BB80_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_143
.LBB80_150:                             # %for.end478
                                        #   in Loop: Header=BB80_141 Depth=2
	jmp	.LBB80_151
.LBB80_151:                             # %for.inc479
                                        #   in Loop: Header=BB80_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_141
.LBB80_152:                             # %for.end481
                                        #   in Loop: Header=BB80_139 Depth=1
	jmp	.LBB80_153
.LBB80_153:                             # %for.inc482
                                        #   in Loop: Header=BB80_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_139
.LBB80_154:                             # %for.end484
	jmp	.LBB80_155
.LBB80_155:                             # %if.end485
	jmp	.LBB80_156
.LBB80_156:                             # %if.end486
	jmp	.LBB80_157
.LBB80_157:                             # %if.end487
	jmp	.LBB80_180
.LBB80_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB80_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB80_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB80_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB80_161 Depth=1
	movl	$0, -4(%rbp)
.LBB80_163:                             # %for.cond499
                                        #   Parent Loop BB80_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB80_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB80_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_163
.LBB80_166:                             # %for.end519
                                        #   in Loop: Header=BB80_161 Depth=1
	jmp	.LBB80_167
.LBB80_167:                             # %for.inc520
                                        #   in Loop: Header=BB80_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_161
.LBB80_168:                             # %for.end522
	jmp	.LBB80_169
.LBB80_169:                             # %if.end523
	jmp	.LBB80_179
.LBB80_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB80_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB80_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB80_171 Depth=1
	movl	$0, -4(%rbp)
.LBB80_173:                             # %for.cond529
                                        #   Parent Loop BB80_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB80_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB80_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB80_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_173
.LBB80_176:                             # %for.end541
                                        #   in Loop: Header=BB80_171 Depth=1
	jmp	.LBB80_177
.LBB80_177:                             # %for.inc542
                                        #   in Loop: Header=BB80_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_171
.LBB80_178:                             # %for.end544
	jmp	.LBB80_179
.LBB80_179:                             # %if.end545
	jmp	.LBB80_180
.LBB80_180:                             # %sw.epilog
	cmpl	$2075047574, -68(%rbp)  # imm = 0x7BAEB696
	jne	.LBB80_182
.LBB80_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_181
.Lfunc_end80:
	.size	Conceal_Error.70, .Lfunc_end80-Conceal_Error.70
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI80_0:
	.quad	.LBB80_16
	.quad	.LBB80_158
	.quad	.LBB80_106
	.quad	.LBB80_180
	.quad	.LBB80_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.71
.LCPI81_0:
	.quad	4636737291354636288     # double 100
.LCPI81_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.71
	.p2align	4, 0x90
	.type	Build_Status_Map.71,@function
Build_Status_Map.71:                    # @Build_Status_Map.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1346432255, -36(%rbp)  # imm = 0x5040ECFF
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB81_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -12(%rbp)
.LBB81_3:                               # %for.cond2
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB81_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB81_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB81_13
.LBB81_6:                               # %if.then
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI81_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB81_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB81_8:                               # %if.end
                                        #   in Loop: Header=BB81_3 Depth=2
	callq	rand
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI81_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB81_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB81_10:                              # %if.end20
                                        #   in Loop: Header=BB81_3 Depth=2
	callq	rand
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI81_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB81_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	$1, -4(%rbp)
.LBB81_12:                              # %if.end29
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB81_13:                              # %if.end30
                                        #   in Loop: Header=BB81_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB81_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB81_18
.LBB81_15:                              # %if.else
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB81_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB81_17:                              # %if.end49
                                        #   in Loop: Header=BB81_3 Depth=2
	jmp	.LBB81_18
.LBB81_18:                              # %if.end50
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_3
.LBB81_20:                              # %for.end
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_21
.LBB81_21:                              # %for.inc53
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_1
.LBB81_22:                              # %for.end55
	cmpl	$1346432255, -36(%rbp)  # imm = 0x5040ECFF
	jne	.LBB81_24
.LBB81_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_23
.Lfunc_end81:
	.size	Build_Status_Map.71, .Lfunc_end81-Build_Status_Map.71
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.72  # -- Begin function Get_Reference_Block.72
	.p2align	4, 0x90
	.type	Get_Reference_Block.72,@function
Get_Reference_Block.72:                 # @Get_Reference_Block.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$724601745, -28(%rbp)   # imm = 0x2B308B91
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB82_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	$0, -4(%rbp)
.LBB82_3:                               # %for.cond5
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB82_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_3
.LBB82_6:                               # %for.end
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_7
.LBB82_7:                               # %for.inc14
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_1
.LBB82_8:                               # %for.end16
	cmpl	$724601745, -28(%rbp)   # imm = 0x2B308B91
	jne	.LBB82_10
.LBB82_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_9
.Lfunc_end82:
	.size	Get_Reference_Block.72, .Lfunc_end82-Get_Reference_Block.72
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.73  # -- Begin function Get_Reference_Block.73
	.p2align	4, 0x90
	.type	Get_Reference_Block.73,@function
Get_Reference_Block.73:                 # @Get_Reference_Block.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2086559963, -28(%rbp)  # imm = 0x7C5E60DB
	movq	%rdi, -56(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -8(%rbp)
.LBB83_3:                               # %for.cond5
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB83_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_3
.LBB83_6:                               # %for.end
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_7
.LBB83_7:                               # %for.inc14
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_1
.LBB83_8:                               # %for.end16
	cmpl	$2086559963, -28(%rbp)  # imm = 0x7C5E60DB
	jne	.LBB83_10
.LBB83_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_9
.Lfunc_end83:
	.size	Get_Reference_Block.73, .Lfunc_end83-Get_Reference_Block.73
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.74       # -- Begin function DecOneForthPix.74
	.p2align	4, 0x90
	.type	DecOneForthPix.74,@function
DecOneForthPix.74:                      # @DecOneForthPix.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$468834426, -12(%rbp)   # imm = 0x1BF1D87A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB84_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_1
.LBB84_4:                               # %for.end
	cmpl	$468834426, -12(%rbp)   # imm = 0x1BF1D87A
	jne	.LBB84_6
.LBB84_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_5
.Lfunc_end84:
	.size	DecOneForthPix.74, .Lfunc_end84-DecOneForthPix.74
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.75   # -- Begin function decode_one_b8block.75
	.p2align	4, 0x90
	.type	decode_one_b8block.75,@function
decode_one_b8block.75:                  # @decode_one_b8block.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1600947268, -84(%rbp)  # imm = 0x5F6C8444
	movl	%edi, -52(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_4:                               # %for.cond9
                                        #   Parent Loop BB85_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB85_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB85_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_4
.LBB85_7:                               # %for.end
                                        #   in Loop: Header=BB85_2 Depth=1
	jmp	.LBB85_8
.LBB85_8:                               # %for.inc26
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_2
.LBB85_9:                               # %for.end28
	jmp	.LBB85_96
.LBB85_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB85_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB85_31
.LBB85_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB85_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_17:                              # %for.cond40
                                        #   Parent Loop BB85_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB85_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB85_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_17
.LBB85_20:                              # %for.end49
                                        #   in Loop: Header=BB85_15 Depth=1
	jmp	.LBB85_21
.LBB85_21:                              # %for.inc50
                                        #   in Loop: Header=BB85_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_15
.LBB85_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB85_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_25:                              # %for.cond56
                                        #   Parent Loop BB85_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB85_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB85_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_25
.LBB85_28:                              # %for.end71
                                        #   in Loop: Header=BB85_23 Depth=1
	jmp	.LBB85_29
.LBB85_29:                              # %for.inc72
                                        #   in Loop: Header=BB85_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_23
.LBB85_30:                              # %for.end74
	jmp	.LBB85_60
.LBB85_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB85_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB85_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB85_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_36:                              # %for.cond83
                                        #   Parent Loop BB85_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB85_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB85_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_36
.LBB85_39:                              # %for.end120
                                        #   in Loop: Header=BB85_34 Depth=1
	jmp	.LBB85_40
.LBB85_40:                              # %for.inc121
                                        #   in Loop: Header=BB85_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_34
.LBB85_41:                              # %for.end123
	jmp	.LBB85_51
.LBB85_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB85_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_45:                              # %for.cond129
                                        #   Parent Loop BB85_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB85_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB85_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_45
.LBB85_48:                              # %for.end145
                                        #   in Loop: Header=BB85_43 Depth=1
	jmp	.LBB85_49
.LBB85_49:                              # %for.inc146
                                        #   in Loop: Header=BB85_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_43
.LBB85_50:                              # %for.end148
	jmp	.LBB85_51
.LBB85_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB85_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_54:                              # %for.cond153
                                        #   Parent Loop BB85_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB85_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB85_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_54
.LBB85_57:                              # %for.end167
                                        #   in Loop: Header=BB85_52 Depth=1
	jmp	.LBB85_58
.LBB85_58:                              # %for.inc168
                                        #   in Loop: Header=BB85_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_52
.LBB85_59:                              # %for.end170
	jmp	.LBB85_60
.LBB85_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB85_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB85_66
.LBB85_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB85_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB85_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB85_86
.LBB85_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB85_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_69 Depth 2
                                        #       Child Loop BB85_74 Depth 3
                                        #         Child Loop BB85_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB85_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB85_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB85_69:                              # %for.cond197
                                        #   Parent Loop BB85_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_74 Depth 3
                                        #         Child Loop BB85_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB85_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB85_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB85_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB85_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB85_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB85_73:                              # %if.end218
                                        #   in Loop: Header=BB85_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB85_74:                              # %for.cond233
                                        #   Parent Loop BB85_67 Depth=1
                                        #     Parent Loop BB85_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB85_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB85_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB85_74 Depth=3
	movl	$0, -4(%rbp)
.LBB85_76:                              # %for.cond237
                                        #   Parent Loop BB85_67 Depth=1
                                        #     Parent Loop BB85_69 Depth=2
                                        #       Parent Loop BB85_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB85_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB85_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB85_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_76
.LBB85_79:                              # %for.end269
                                        #   in Loop: Header=BB85_74 Depth=3
	jmp	.LBB85_80
.LBB85_80:                              # %for.inc270
                                        #   in Loop: Header=BB85_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_74
.LBB85_81:                              # %for.end272
                                        #   in Loop: Header=BB85_69 Depth=2
	jmp	.LBB85_82
.LBB85_82:                              # %for.inc273
                                        #   in Loop: Header=BB85_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_69
.LBB85_83:                              # %for.end275
                                        #   in Loop: Header=BB85_67 Depth=1
	jmp	.LBB85_84
.LBB85_84:                              # %for.inc276
                                        #   in Loop: Header=BB85_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_67
.LBB85_85:                              # %for.end278
	jmp	.LBB85_95
.LBB85_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB85_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB85_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB85_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB85_89:                              # %for.cond284
                                        #   Parent Loop BB85_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB85_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB85_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB85_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_89
.LBB85_92:                              # %for.end310
                                        #   in Loop: Header=BB85_87 Depth=1
	jmp	.LBB85_93
.LBB85_93:                              # %for.inc311
                                        #   in Loop: Header=BB85_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_87
.LBB85_94:                              # %for.end313
	jmp	.LBB85_95
.LBB85_95:                              # %if.end314
	jmp	.LBB85_96
.LBB85_96:                              # %if.end315
	cmpl	$1600947268, -84(%rbp)  # imm = 0x5F6C8444
	jne	.LBB85_98
.LBB85_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_97
.Lfunc_end85:
	.size	decode_one_b8block.75, .Lfunc_end85-decode_one_b8block.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.76
.LCPI86_0:
	.quad	4636737291354636288     # double 100
.LCPI86_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.76
	.p2align	4, 0x90
	.type	Build_Status_Map.76,@function
Build_Status_Map.76:                    # @Build_Status_Map.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$552774949, -44(%rbp)   # imm = 0x20F2AD25
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB86_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -12(%rbp)
.LBB86_3:                               # %for.cond2
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB86_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB86_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB86_13
.LBB86_6:                               # %if.then
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB86_8:                               # %if.end
                                        #   in Loop: Header=BB86_3 Depth=2
	callq	rand
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB86_10:                              # %if.end20
                                        #   in Loop: Header=BB86_3 Depth=2
	callq	rand
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI86_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB86_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	$1, -4(%rbp)
.LBB86_12:                              # %if.end29
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB86_13:                              # %if.end30
                                        #   in Loop: Header=BB86_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB86_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB86_18
.LBB86_15:                              # %if.else
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB86_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB86_17:                              # %if.end49
                                        #   in Loop: Header=BB86_3 Depth=2
	jmp	.LBB86_18
.LBB86_18:                              # %if.end50
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_3
.LBB86_20:                              # %for.end
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_21
.LBB86_21:                              # %for.inc53
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_1
.LBB86_22:                              # %for.end55
	cmpl	$552774949, -44(%rbp)   # imm = 0x20F2AD25
	jne	.LBB86_24
.LBB86_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_23
.Lfunc_end86:
	.size	Build_Status_Map.76, .Lfunc_end86-Build_Status_Map.76
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.77       # -- Begin function DecOneForthPix.77
	.p2align	4, 0x90
	.type	DecOneForthPix.77,@function
DecOneForthPix.77:                      # @DecOneForthPix.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2107593026, -12(%rbp)  # imm = 0x7D9F5142
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB87_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_1
.LBB87_4:                               # %for.end
	cmpl	$2107593026, -12(%rbp)  # imm = 0x7D9F5142
	jne	.LBB87_6
.LBB87_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_5
.Lfunc_end87:
	.size	DecOneForthPix.77, .Lfunc_end87-DecOneForthPix.77
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.78       # -- Begin function DecOneForthPix.78
	.p2align	4, 0x90
	.type	DecOneForthPix.78,@function
DecOneForthPix.78:                      # @DecOneForthPix.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$253248420, -12(%rbp)   # imm = 0xF1843A4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB88_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_1
.LBB88_4:                               # %for.end
	cmpl	$253248420, -12(%rbp)   # imm = 0xF1843A4
	jne	.LBB88_6
.LBB88_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_5
.Lfunc_end88:
	.size	DecOneForthPix.78, .Lfunc_end88-DecOneForthPix.78
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.79  # -- Begin function Get_Reference_Pixel.79
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.79,@function
Get_Reference_Pixel.79:                 # @Get_Reference_Pixel.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$172612946, -100(%rbp)  # imm = 0xA49DD52
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB89_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB89_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB89_5
.LBB89_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB89_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB89_11
.LBB89_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB89_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB89_10
.LBB89_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB89_10:                              # %cond.end14
.LBB89_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB89_14
.LBB89_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB89_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB89_20
.LBB89_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB89_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB89_19
.LBB89_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB89_19:                              # %cond.end29
.LBB89_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_332
.LBB89_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB89_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB89_25
.LBB89_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB89_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB89_31
.LBB89_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB89_30
.LBB89_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB89_30:                              # %cond.end52
.LBB89_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_36
.LBB89_35:                              # %cond.false61
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_36:                              # %cond.end63
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB89_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_42
.LBB89_38:                              # %cond.false68
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_41
.LBB89_40:                              # %cond.false73
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_41:                              # %cond.end75
                                        #   in Loop: Header=BB89_32 Depth=1
.LBB89_42:                              # %cond.end77
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB89_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_32
.LBB89_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_47
.LBB89_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB89_53
.LBB89_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_52
.LBB89_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_52:                              # %cond.end113
.LBB89_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB89_57
.LBB89_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB89_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB89_63
.LBB89_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB89_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB89_62
.LBB89_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB89_62:                              # %cond.end136
.LBB89_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_76
.LBB89_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB89_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB89_68
.LBB89_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB89_74
.LBB89_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB89_73
.LBB89_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB89_73:                              # %cond.end169
.LBB89_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_75:                              # %if.end
	jmp	.LBB89_76
.LBB89_76:                              # %if.end178
	jmp	.LBB89_331
.LBB89_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB89_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB89_81
.LBB89_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB89_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB89_87
.LBB89_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB89_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB89_86
.LBB89_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB89_86:                              # %cond.end197
.LBB89_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_92
.LBB89_91:                              # %cond.false209
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_92:                              # %cond.end211
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB89_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_98
.LBB89_94:                              # %cond.false216
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_97
.LBB89_96:                              # %cond.false221
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_97:                              # %cond.end223
                                        #   in Loop: Header=BB89_88 Depth=1
.LBB89_98:                              # %cond.end225
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB89_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_88
.LBB89_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_103
.LBB89_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB89_109
.LBB89_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_108
.LBB89_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_108:                             # %cond.end266
.LBB89_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB89_113
.LBB89_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB89_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB89_119
.LBB89_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB89_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB89_118
.LBB89_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB89_118:                             # %cond.end287
.LBB89_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_132
.LBB89_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB89_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB89_124
.LBB89_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB89_130
.LBB89_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB89_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB89_129
.LBB89_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB89_129:                             # %cond.end320
.LBB89_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_131:                             # %if.end331
	jmp	.LBB89_132
.LBB89_132:                             # %if.end332
	jmp	.LBB89_330
.LBB89_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB89_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB89_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_139
.LBB89_138:                             # %cond.false345
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_139:                             # %cond.end347
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB89_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_145
.LBB89_141:                             # %cond.false352
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_144
.LBB89_143:                             # %cond.false357
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_144:                             # %cond.end359
                                        #   in Loop: Header=BB89_135 Depth=1
.LBB89_145:                             # %cond.end361
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_146:                             # %for.cond363
                                        #   Parent Loop BB89_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_150
.LBB89_149:                             # %cond.false371
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_150:                             # %cond.end373
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB89_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_156
.LBB89_152:                             # %cond.false378
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB89_155
.LBB89_154:                             # %cond.false383
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_155:                             # %cond.end385
                                        #   in Loop: Header=BB89_146 Depth=2
.LBB89_156:                             # %cond.end387
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB89_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_146
.LBB89_158:                             # %for.end401
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB89_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_135
.LBB89_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB89_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_161
.LBB89_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_167
.LBB89_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB89_173
.LBB89_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_172
.LBB89_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_172:                             # %cond.end449
.LBB89_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_177
.LBB89_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB89_183
.LBB89_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_182
.LBB89_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_182:                             # %cond.end486
.LBB89_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_196
.LBB89_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB89_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_188
.LBB89_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB89_194
.LBB89_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_193
.LBB89_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_193:                             # %cond.end526
.LBB89_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_195:                             # %if.end532
	jmp	.LBB89_196
.LBB89_196:                             # %if.end533
	jmp	.LBB89_329
.LBB89_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB89_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB89_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB89_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_203
.LBB89_202:                             # %cond.false546
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_203:                             # %cond.end548
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB89_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_209
.LBB89_205:                             # %cond.false553
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_208
.LBB89_207:                             # %cond.false558
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_208:                             # %cond.end560
                                        #   in Loop: Header=BB89_199 Depth=1
.LBB89_209:                             # %cond.end562
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_210:                             # %for.cond564
                                        #   Parent Loop BB89_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB89_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_214
.LBB89_213:                             # %cond.false572
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_214:                             # %cond.end574
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB89_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_220
.LBB89_216:                             # %cond.false579
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB89_219
.LBB89_218:                             # %cond.false584
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_219:                             # %cond.end586
                                        #   in Loop: Header=BB89_210 Depth=2
.LBB89_220:                             # %cond.end588
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB89_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_210
.LBB89_222:                             # %for.end602
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB89_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_199
.LBB89_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB89_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_225
.LBB89_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_231
.LBB89_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB89_237
.LBB89_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_236
.LBB89_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_236:                             # %cond.end650
.LBB89_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_241
.LBB89_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB89_247
.LBB89_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_246
.LBB89_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_246:                             # %cond.end687
.LBB89_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB89_258
.LBB89_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_251
.LBB89_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB89_257
.LBB89_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB89_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_256
.LBB89_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB89_256:                             # %cond.end724
.LBB89_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_258:                             # %if.end730
	jmp	.LBB89_328
.LBB89_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB89_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB89_262
.LBB89_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB89_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB89_265
.LBB89_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB89_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB89_271
.LBB89_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB89_270
.LBB89_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB89_270:                             # %cond.end753
.LBB89_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB89_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB89_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_276
.LBB89_275:                             # %cond.false765
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_276:                             # %cond.end767
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB89_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_282
.LBB89_278:                             # %cond.false772
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB89_281
.LBB89_280:                             # %cond.false777
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB89_281:                             # %cond.end779
                                        #   in Loop: Header=BB89_272 Depth=1
.LBB89_282:                             # %cond.end781
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB89_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB89_272
.LBB89_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_287
.LBB89_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB89_293
.LBB89_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_292
.LBB89_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_292:                             # %cond.end822
.LBB89_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB89_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB89_296
.LBB89_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB89_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB89_299
.LBB89_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB89_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB89_305
.LBB89_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB89_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB89_304
.LBB89_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB89_304:                             # %cond.end847
.LBB89_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB89_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB89_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_310
.LBB89_309:                             # %cond.false859
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_310:                             # %cond.end861
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB89_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB89_316
.LBB89_312:                             # %cond.false866
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB89_315
.LBB89_314:                             # %cond.false871
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB89_315:                             # %cond.end873
                                        #   in Loop: Header=BB89_306 Depth=1
.LBB89_316:                             # %cond.end875
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB89_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB89_306
.LBB89_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_321
.LBB89_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB89_327
.LBB89_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_326
.LBB89_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB89_326:                             # %cond.end916
.LBB89_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB89_328:                             # %if.end922
	jmp	.LBB89_329
.LBB89_329:                             # %if.end923
	jmp	.LBB89_330
.LBB89_330:                             # %if.end924
	jmp	.LBB89_331
.LBB89_331:                             # %if.end925
	jmp	.LBB89_332
.LBB89_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$172612946, -100(%rbp)  # imm = 0xA49DD52
	jne	.LBB89_334
.LBB89_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_333
.Lfunc_end89:
	.size	Get_Reference_Pixel.79, .Lfunc_end89-Get_Reference_Pixel.79
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.80       # -- Begin function DecOneForthPix.80
	.p2align	4, 0x90
	.type	DecOneForthPix.80,@function
DecOneForthPix.80:                      # @DecOneForthPix.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1604837643, -12(%rbp)  # imm = 0x5FA7E10B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB90_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_1
.LBB90_4:                               # %for.end
	cmpl	$1604837643, -12(%rbp)  # imm = 0x5FA7E10B
	jne	.LBB90_6
.LBB90_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_5
.Lfunc_end90:
	.size	DecOneForthPix.80, .Lfunc_end90-DecOneForthPix.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.81
.LCPI91_0:
	.quad	4636737291354636288     # double 100
.LCPI91_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.81
	.p2align	4, 0x90
	.type	Build_Status_Map.81,@function
Build_Status_Map.81:                    # @Build_Status_Map.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1102652199, -40(%rbp)  # imm = 0x41B92327
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB91_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	$0, -8(%rbp)
.LBB91_3:                               # %for.cond2
                                        #   Parent Loop BB91_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB91_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB91_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB91_13
.LBB91_6:                               # %if.then
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB91_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB91_8:                               # %if.end
                                        #   in Loop: Header=BB91_3 Depth=2
	callq	rand
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB91_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB91_10:                              # %if.end20
                                        #   in Loop: Header=BB91_3 Depth=2
	callq	rand
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB91_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	$1, -4(%rbp)
.LBB91_12:                              # %if.end29
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB91_13:                              # %if.end30
                                        #   in Loop: Header=BB91_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB91_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB91_18
.LBB91_15:                              # %if.else
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB91_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB91_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB91_17:                              # %if.end49
                                        #   in Loop: Header=BB91_3 Depth=2
	jmp	.LBB91_18
.LBB91_18:                              # %if.end50
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB91_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_3
.LBB91_20:                              # %for.end
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_21
.LBB91_21:                              # %for.inc53
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_1
.LBB91_22:                              # %for.end55
	cmpl	$1102652199, -40(%rbp)  # imm = 0x41B92327
	jne	.LBB91_24
.LBB91_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_23
.Lfunc_end91:
	.size	Build_Status_Map.81, .Lfunc_end91-Build_Status_Map.81
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.82
.LCPI92_0:
	.quad	4636737291354636288     # double 100
.LCPI92_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.82
	.p2align	4, 0x90
	.type	Build_Status_Map.82,@function
Build_Status_Map.82:                    # @Build_Status_Map.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$59144535, -40(%rbp)    # imm = 0x3867957
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	$0, -12(%rbp)
.LBB92_3:                               # %for.cond2
                                        #   Parent Loop BB92_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB92_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB92_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB92_13
.LBB92_6:                               # %if.then
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI92_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB92_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB92_8:                               # %if.end
                                        #   in Loop: Header=BB92_3 Depth=2
	callq	rand
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI92_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB92_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB92_10:                              # %if.end20
                                        #   in Loop: Header=BB92_3 Depth=2
	callq	rand
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI92_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB92_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	$1, -4(%rbp)
.LBB92_12:                              # %if.end29
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB92_13:                              # %if.end30
                                        #   in Loop: Header=BB92_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB92_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB92_18
.LBB92_15:                              # %if.else
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB92_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB92_17:                              # %if.end49
                                        #   in Loop: Header=BB92_3 Depth=2
	jmp	.LBB92_18
.LBB92_18:                              # %if.end50
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_3
.LBB92_20:                              # %for.end
                                        #   in Loop: Header=BB92_1 Depth=1
	jmp	.LBB92_21
.LBB92_21:                              # %for.inc53
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_1
.LBB92_22:                              # %for.end55
	cmpl	$59144535, -40(%rbp)    # imm = 0x3867957
	jne	.LBB92_24
.LBB92_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_23
.Lfunc_end92:
	.size	Build_Status_Map.82, .Lfunc_end92-Build_Status_Map.82
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.83   # -- Begin function decode_one_b8block.83
	.p2align	4, 0x90
	.type	decode_one_b8block.83,@function
decode_one_b8block.83:                  # @decode_one_b8block.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$548802386, -84(%rbp)   # imm = 0x20B60F52
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB93_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_4:                               # %for.cond9
                                        #   Parent Loop BB93_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB93_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB93_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_4
.LBB93_7:                               # %for.end
                                        #   in Loop: Header=BB93_2 Depth=1
	jmp	.LBB93_8
.LBB93_8:                               # %for.inc26
                                        #   in Loop: Header=BB93_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_2
.LBB93_9:                               # %for.end28
	jmp	.LBB93_96
.LBB93_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB93_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_31
.LBB93_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_17:                              # %for.cond40
                                        #   Parent Loop BB93_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB93_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB93_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_17
.LBB93_20:                              # %for.end49
                                        #   in Loop: Header=BB93_15 Depth=1
	jmp	.LBB93_21
.LBB93_21:                              # %for.inc50
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_15
.LBB93_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_25:                              # %for.cond56
                                        #   Parent Loop BB93_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB93_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB93_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_25
.LBB93_28:                              # %for.end71
                                        #   in Loop: Header=BB93_23 Depth=1
	jmp	.LBB93_29
.LBB93_29:                              # %for.inc72
                                        #   in Loop: Header=BB93_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_23
.LBB93_30:                              # %for.end74
	jmp	.LBB93_60
.LBB93_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB93_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB93_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_36:                              # %for.cond83
                                        #   Parent Loop BB93_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB93_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB93_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_36
.LBB93_39:                              # %for.end120
                                        #   in Loop: Header=BB93_34 Depth=1
	jmp	.LBB93_40
.LBB93_40:                              # %for.inc121
                                        #   in Loop: Header=BB93_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_34
.LBB93_41:                              # %for.end123
	jmp	.LBB93_51
.LBB93_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_45:                              # %for.cond129
                                        #   Parent Loop BB93_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB93_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB93_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_45
.LBB93_48:                              # %for.end145
                                        #   in Loop: Header=BB93_43 Depth=1
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc146
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_43
.LBB93_50:                              # %for.end148
	jmp	.LBB93_51
.LBB93_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_54:                              # %for.cond153
                                        #   Parent Loop BB93_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB93_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB93_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_54
.LBB93_57:                              # %for.end167
                                        #   in Loop: Header=BB93_52 Depth=1
	jmp	.LBB93_58
.LBB93_58:                              # %for.inc168
                                        #   in Loop: Header=BB93_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_52
.LBB93_59:                              # %for.end170
	jmp	.LBB93_60
.LBB93_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB93_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB93_66
.LBB93_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB93_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB93_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB93_86
.LBB93_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB93_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_69 Depth 2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB93_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB93_69:                              # %for.cond197
                                        #   Parent Loop BB93_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_74 Depth 3
                                        #         Child Loop BB93_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB93_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB93_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB93_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB93_73:                              # %if.end218
                                        #   in Loop: Header=BB93_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB93_74:                              # %for.cond233
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB93_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB93_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	$0, -8(%rbp)
.LBB93_76:                              # %for.cond237
                                        #   Parent Loop BB93_67 Depth=1
                                        #     Parent Loop BB93_69 Depth=2
                                        #       Parent Loop BB93_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB93_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB93_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_76
.LBB93_79:                              # %for.end269
                                        #   in Loop: Header=BB93_74 Depth=3
	jmp	.LBB93_80
.LBB93_80:                              # %for.inc270
                                        #   in Loop: Header=BB93_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_74
.LBB93_81:                              # %for.end272
                                        #   in Loop: Header=BB93_69 Depth=2
	jmp	.LBB93_82
.LBB93_82:                              # %for.inc273
                                        #   in Loop: Header=BB93_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_69
.LBB93_83:                              # %for.end275
                                        #   in Loop: Header=BB93_67 Depth=1
	jmp	.LBB93_84
.LBB93_84:                              # %for.inc276
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_67
.LBB93_85:                              # %for.end278
	jmp	.LBB93_95
.LBB93_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB93_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_89:                              # %for.cond284
                                        #   Parent Loop BB93_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB93_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB93_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB93_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_89
.LBB93_92:                              # %for.end310
                                        #   in Loop: Header=BB93_87 Depth=1
	jmp	.LBB93_93
.LBB93_93:                              # %for.inc311
                                        #   in Loop: Header=BB93_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_87
.LBB93_94:                              # %for.end313
	jmp	.LBB93_95
.LBB93_95:                              # %if.end314
	jmp	.LBB93_96
.LBB93_96:                              # %if.end315
	cmpl	$548802386, -84(%rbp)   # imm = 0x20B60F52
	jne	.LBB93_98
.LBB93_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_97
.Lfunc_end93:
	.size	decode_one_b8block.83, .Lfunc_end93-decode_one_b8block.83
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.84  # -- Begin function Get_Reference_Pixel.84
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.84,@function
Get_Reference_Pixel.84:                 # @Get_Reference_Pixel.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1768859581, -104(%rbp) # imm = 0x696EA7BD
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB94_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB94_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB94_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB94_5
.LBB94_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB94_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB94_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB94_11
.LBB94_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB94_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB94_10
.LBB94_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB94_10:                              # %cond.end14
.LBB94_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB94_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB94_14
.LBB94_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB94_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB94_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB94_20
.LBB94_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB94_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB94_19
.LBB94_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB94_19:                              # %cond.end29
.LBB94_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_332
.LBB94_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB94_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB94_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB94_25
.LBB94_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB94_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB94_31
.LBB94_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB94_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB94_30
.LBB94_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB94_30:                              # %cond.end52
.LBB94_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB94_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_36
.LBB94_35:                              # %cond.false61
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_36:                              # %cond.end63
                                        #   in Loop: Header=BB94_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB94_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_42
.LBB94_38:                              # %cond.false68
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_41
.LBB94_40:                              # %cond.false73
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_41:                              # %cond.end75
                                        #   in Loop: Header=BB94_32 Depth=1
.LBB94_42:                              # %cond.end77
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB94_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_32
.LBB94_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_47
.LBB94_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB94_53
.LBB94_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_52
.LBB94_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_52:                              # %cond.end113
.LBB94_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB94_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB94_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB94_57
.LBB94_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB94_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB94_63
.LBB94_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB94_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB94_62
.LBB94_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB94_62:                              # %cond.end136
.LBB94_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_76
.LBB94_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB94_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB94_68
.LBB94_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB94_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB94_74
.LBB94_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB94_73
.LBB94_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB94_73:                              # %cond.end169
.LBB94_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_75:                              # %if.end
	jmp	.LBB94_76
.LBB94_76:                              # %if.end178
	jmp	.LBB94_331
.LBB94_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB94_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB94_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB94_81
.LBB94_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB94_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB94_87
.LBB94_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB94_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB94_86
.LBB94_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB94_86:                              # %cond.end197
.LBB94_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB94_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_92
.LBB94_91:                              # %cond.false209
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_92:                              # %cond.end211
                                        #   in Loop: Header=BB94_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB94_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_98
.LBB94_94:                              # %cond.false216
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_97
.LBB94_96:                              # %cond.false221
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_97:                              # %cond.end223
                                        #   in Loop: Header=BB94_88 Depth=1
.LBB94_98:                              # %cond.end225
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB94_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_88
.LBB94_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_103
.LBB94_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB94_109
.LBB94_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_108
.LBB94_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_108:                             # %cond.end266
.LBB94_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB94_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB94_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB94_113
.LBB94_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB94_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB94_119
.LBB94_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB94_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB94_118
.LBB94_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB94_118:                             # %cond.end287
.LBB94_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_132
.LBB94_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB94_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB94_124
.LBB94_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB94_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB94_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB94_130
.LBB94_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB94_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB94_129
.LBB94_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB94_129:                             # %cond.end320
.LBB94_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_131:                             # %if.end331
	jmp	.LBB94_132
.LBB94_132:                             # %if.end332
	jmp	.LBB94_330
.LBB94_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB94_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB94_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_139
.LBB94_138:                             # %cond.false345
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_139:                             # %cond.end347
                                        #   in Loop: Header=BB94_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB94_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_145
.LBB94_141:                             # %cond.false352
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_144
.LBB94_143:                             # %cond.false357
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_144:                             # %cond.end359
                                        #   in Loop: Header=BB94_135 Depth=1
.LBB94_145:                             # %cond.end361
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_146:                             # %for.cond363
                                        #   Parent Loop BB94_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB94_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB94_150
.LBB94_149:                             # %cond.false371
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_150:                             # %cond.end373
                                        #   in Loop: Header=BB94_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB94_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_156
.LBB94_152:                             # %cond.false378
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB94_155
.LBB94_154:                             # %cond.false383
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_155:                             # %cond.end385
                                        #   in Loop: Header=BB94_146 Depth=2
.LBB94_156:                             # %cond.end387
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB94_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_146
.LBB94_158:                             # %for.end401
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB94_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_135
.LBB94_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB94_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB94_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB94_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_161
.LBB94_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_167
.LBB94_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB94_173
.LBB94_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_172
.LBB94_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_172:                             # %cond.end449
.LBB94_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB94_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_177
.LBB94_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB94_183
.LBB94_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_182
.LBB94_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_182:                             # %cond.end486
.LBB94_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_196
.LBB94_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB94_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_188
.LBB94_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB94_194
.LBB94_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_193
.LBB94_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_193:                             # %cond.end526
.LBB94_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_195:                             # %if.end532
	jmp	.LBB94_196
.LBB94_196:                             # %if.end533
	jmp	.LBB94_329
.LBB94_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB94_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB94_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB94_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_203
.LBB94_202:                             # %cond.false546
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_203:                             # %cond.end548
                                        #   in Loop: Header=BB94_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB94_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_209
.LBB94_205:                             # %cond.false553
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_208
.LBB94_207:                             # %cond.false558
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_208:                             # %cond.end560
                                        #   in Loop: Header=BB94_199 Depth=1
.LBB94_209:                             # %cond.end562
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_210:                             # %for.cond564
                                        #   Parent Loop BB94_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB94_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB94_214
.LBB94_213:                             # %cond.false572
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_214:                             # %cond.end574
                                        #   in Loop: Header=BB94_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB94_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_220
.LBB94_216:                             # %cond.false579
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB94_219
.LBB94_218:                             # %cond.false584
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_219:                             # %cond.end586
                                        #   in Loop: Header=BB94_210 Depth=2
.LBB94_220:                             # %cond.end588
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB94_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_210
.LBB94_222:                             # %for.end602
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB94_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_199
.LBB94_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB94_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB94_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB94_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_225
.LBB94_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_231
.LBB94_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB94_237
.LBB94_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_236
.LBB94_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB94_236:                             # %cond.end650
.LBB94_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB94_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_241
.LBB94_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB94_247
.LBB94_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_246
.LBB94_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_246:                             # %cond.end687
.LBB94_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB94_258
.LBB94_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_251
.LBB94_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB94_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB94_257
.LBB94_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB94_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_256
.LBB94_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB94_256:                             # %cond.end724
.LBB94_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_258:                             # %if.end730
	jmp	.LBB94_328
.LBB94_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB94_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB94_262
.LBB94_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB94_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB94_265
.LBB94_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB94_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB94_271
.LBB94_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB94_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB94_270
.LBB94_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB94_270:                             # %cond.end753
.LBB94_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB94_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB94_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_276
.LBB94_275:                             # %cond.false765
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_276:                             # %cond.end767
                                        #   in Loop: Header=BB94_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB94_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_282
.LBB94_278:                             # %cond.false772
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB94_281
.LBB94_280:                             # %cond.false777
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB94_281:                             # %cond.end779
                                        #   in Loop: Header=BB94_272 Depth=1
.LBB94_282:                             # %cond.end781
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB94_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_272
.LBB94_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_287
.LBB94_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB94_293
.LBB94_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_292
.LBB94_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_292:                             # %cond.end822
.LBB94_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB94_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB94_296
.LBB94_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB94_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB94_299
.LBB94_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB94_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB94_305
.LBB94_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB94_304
.LBB94_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB94_304:                             # %cond.end847
.LBB94_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB94_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB94_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_310
.LBB94_309:                             # %cond.false859
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_310:                             # %cond.end861
                                        #   in Loop: Header=BB94_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB94_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB94_316
.LBB94_312:                             # %cond.false866
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB94_315
.LBB94_314:                             # %cond.false871
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB94_315:                             # %cond.end873
                                        #   in Loop: Header=BB94_306 Depth=1
.LBB94_316:                             # %cond.end875
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB94_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB94_306
.LBB94_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_321
.LBB94_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB94_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB94_327
.LBB94_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB94_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_326
.LBB94_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB94_326:                             # %cond.end916
.LBB94_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB94_328:                             # %if.end922
	jmp	.LBB94_329
.LBB94_329:                             # %if.end923
	jmp	.LBB94_330
.LBB94_330:                             # %if.end924
	jmp	.LBB94_331
.LBB94_331:                             # %if.end925
	jmp	.LBB94_332
.LBB94_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1768859581, -104(%rbp) # imm = 0x696EA7BD
	jne	.LBB94_334
.LBB94_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_333
.Lfunc_end94:
	.size	Get_Reference_Pixel.84, .Lfunc_end94-Get_Reference_Pixel.84
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.85        # -- Begin function Conceal_Error.85
	.p2align	4, 0x90
	.type	Conceal_Error.85,@function
Conceal_Error.85:                       # @Conceal_Error.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$447174579, -68(%rbp)   # imm = 0x1AA757B3
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB95_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB95_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB95_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB95_4:                               # %land.end
.LBB95_5:                               # %lor.end
.LBB95_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB95_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB95_9
.LBB95_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB95_14
.LBB95_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB95_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB95_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB95_12:                              # %land.end51
.LBB95_13:                              # %lor.end53
.LBB95_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB95_180
# %bb.15:                               # %land.end54
	movq	.LJTI95_0(,%rax,8), %rax
	jmpq	*%rax
.LBB95_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB95_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB95_18 Depth=1
	movl	$0, -4(%rbp)
.LBB95_20:                              # %for.cond68
                                        #   Parent Loop BB95_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB95_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB95_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_20
.LBB95_23:                              # %for.end
                                        #   in Loop: Header=BB95_18 Depth=1
	jmp	.LBB95_24
.LBB95_24:                              # %for.inc85
                                        #   in Loop: Header=BB95_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_18
.LBB95_25:                              # %for.end87
	jmp	.LBB95_35
.LBB95_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB95_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB95_27 Depth=1
	movl	$0, -4(%rbp)
.LBB95_29:                              # %for.cond92
                                        #   Parent Loop BB95_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB95_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB95_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_29
.LBB95_32:                              # %for.end104
                                        #   in Loop: Header=BB95_27 Depth=1
	jmp	.LBB95_33
.LBB95_33:                              # %for.inc105
                                        #   in Loop: Header=BB95_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_27
.LBB95_34:                              # %for.end107
	jmp	.LBB95_35
.LBB95_35:                              # %if.end
	jmp	.LBB95_180
.LBB95_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB95_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_39 Depth 2
                                        #       Child Loop BB95_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB95_37 Depth=1
	movl	$0, -16(%rbp)
.LBB95_39:                              # %for.cond113
                                        #   Parent Loop BB95_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB95_39 Depth=2
	movl	$0, -4(%rbp)
.LBB95_41:                              # %for.cond117
                                        #   Parent Loop BB95_37 Depth=1
                                        #     Parent Loop BB95_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB95_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB95_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB95_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_41
.LBB95_44:                              # %for.end141
                                        #   in Loop: Header=BB95_39 Depth=2
	jmp	.LBB95_45
.LBB95_45:                              # %for.inc142
                                        #   in Loop: Header=BB95_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_39
.LBB95_46:                              # %for.end144
                                        #   in Loop: Header=BB95_37 Depth=1
	jmp	.LBB95_47
.LBB95_47:                              # %for.inc145
                                        #   in Loop: Header=BB95_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_37
.LBB95_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB95_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB95_49 Depth=1
	movl	$0, -8(%rbp)
.LBB95_51:                              # %for.cond152
                                        #   Parent Loop BB95_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB95_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB95_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_51
.LBB95_54:                              # %for.end162
                                        #   in Loop: Header=BB95_49 Depth=1
	jmp	.LBB95_55
.LBB95_55:                              # %for.inc163
                                        #   in Loop: Header=BB95_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_49
.LBB95_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB95_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB95_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB95_59 Depth=1
	movl	$0, -4(%rbp)
.LBB95_61:                              # %for.cond175
                                        #   Parent Loop BB95_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB95_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB95_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_61
.LBB95_64:                              # %for.end195
                                        #   in Loop: Header=BB95_59 Depth=1
	jmp	.LBB95_65
.LBB95_65:                              # %for.inc196
                                        #   in Loop: Header=BB95_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_59
.LBB95_66:                              # %for.end198
	jmp	.LBB95_95
.LBB95_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB95_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB95_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_71 Depth 2
                                        #       Child Loop BB95_73 Depth 3
                                        #         Child Loop BB95_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB95_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB95_71:                              # %for.cond210
                                        #   Parent Loop BB95_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_73 Depth 3
                                        #         Child Loop BB95_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB95_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB95_73:                              # %for.cond236
                                        #   Parent Loop BB95_69 Depth=1
                                        #     Parent Loop BB95_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB95_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB95_73 Depth=3
	movl	$0, -4(%rbp)
.LBB95_75:                              # %for.cond240
                                        #   Parent Loop BB95_69 Depth=1
                                        #     Parent Loop BB95_71 Depth=2
                                        #       Parent Loop BB95_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB95_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB95_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB95_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_75
.LBB95_78:                              # %for.end259
                                        #   in Loop: Header=BB95_73 Depth=3
	jmp	.LBB95_79
.LBB95_79:                              # %for.inc260
                                        #   in Loop: Header=BB95_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_73
.LBB95_80:                              # %for.end262
                                        #   in Loop: Header=BB95_71 Depth=2
	jmp	.LBB95_81
.LBB95_81:                              # %for.inc263
                                        #   in Loop: Header=BB95_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_71
.LBB95_82:                              # %for.end265
                                        #   in Loop: Header=BB95_69 Depth=1
	jmp	.LBB95_83
.LBB95_83:                              # %for.inc266
                                        #   in Loop: Header=BB95_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_69
.LBB95_84:                              # %for.end268
	jmp	.LBB95_94
.LBB95_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB95_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB95_86 Depth=1
	movl	$0, -4(%rbp)
.LBB95_88:                              # %for.cond274
                                        #   Parent Loop BB95_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB95_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB95_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_88
.LBB95_91:                              # %for.end294
                                        #   in Loop: Header=BB95_86 Depth=1
	jmp	.LBB95_92
.LBB95_92:                              # %for.inc295
                                        #   in Loop: Header=BB95_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_86
.LBB95_93:                              # %for.end297
	jmp	.LBB95_94
.LBB95_94:                              # %if.end298
	jmp	.LBB95_95
.LBB95_95:                              # %if.end299
	jmp	.LBB95_105
.LBB95_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB95_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB95_97 Depth=1
	movl	$0, -4(%rbp)
.LBB95_99:                              # %for.cond305
                                        #   Parent Loop BB95_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB95_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB95_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_99
.LBB95_102:                             # %for.end317
                                        #   in Loop: Header=BB95_97 Depth=1
	jmp	.LBB95_103
.LBB95_103:                             # %for.inc318
                                        #   in Loop: Header=BB95_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_97
.LBB95_104:                             # %for.end320
	jmp	.LBB95_105
.LBB95_105:                             # %if.end321
	jmp	.LBB95_180
.LBB95_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB95_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_110 Depth 2
                                        #       Child Loop BB95_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB95_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB95_108 Depth=1
	movl	$0, -16(%rbp)
.LBB95_110:                             # %for.cond331
                                        #   Parent Loop BB95_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB95_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB95_110 Depth=2
	movl	$0, -4(%rbp)
.LBB95_112:                             # %for.cond335
                                        #   Parent Loop BB95_108 Depth=1
                                        #     Parent Loop BB95_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB95_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB95_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB95_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_112
.LBB95_115:                             # %for.end359
                                        #   in Loop: Header=BB95_110 Depth=2
	jmp	.LBB95_116
.LBB95_116:                             # %for.inc360
                                        #   in Loop: Header=BB95_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_110
.LBB95_117:                             # %for.end362
                                        #   in Loop: Header=BB95_108 Depth=1
	jmp	.LBB95_118
.LBB95_118:                             # %for.inc363
                                        #   in Loop: Header=BB95_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_108
.LBB95_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB95_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB95_120 Depth=1
	movl	$0, -8(%rbp)
.LBB95_122:                             # %for.cond370
                                        #   Parent Loop BB95_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB95_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB95_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_122
.LBB95_125:                             # %for.end380
                                        #   in Loop: Header=BB95_120 Depth=1
	jmp	.LBB95_126
.LBB95_126:                             # %for.inc381
                                        #   in Loop: Header=BB95_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_120
.LBB95_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB95_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB95_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB95_129 Depth=1
	movl	$0, -4(%rbp)
.LBB95_131:                             # %for.cond390
                                        #   Parent Loop BB95_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB95_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB95_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_131
.LBB95_134:                             # %for.end410
                                        #   in Loop: Header=BB95_129 Depth=1
	jmp	.LBB95_135
.LBB95_135:                             # %for.inc411
                                        #   in Loop: Header=BB95_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_129
.LBB95_136:                             # %for.end413
	jmp	.LBB95_156
.LBB95_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB95_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB95_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_141 Depth 2
                                        #       Child Loop BB95_143 Depth 3
                                        #         Child Loop BB95_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB95_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB95_141:                             # %for.cond425
                                        #   Parent Loop BB95_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_143 Depth 3
                                        #         Child Loop BB95_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB95_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB95_143:                             # %for.cond452
                                        #   Parent Loop BB95_139 Depth=1
                                        #     Parent Loop BB95_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB95_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB95_143 Depth=3
	movl	$0, -4(%rbp)
.LBB95_145:                             # %for.cond456
                                        #   Parent Loop BB95_139 Depth=1
                                        #     Parent Loop BB95_141 Depth=2
                                        #       Parent Loop BB95_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB95_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB95_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB95_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_145
.LBB95_148:                             # %for.end475
                                        #   in Loop: Header=BB95_143 Depth=3
	jmp	.LBB95_149
.LBB95_149:                             # %for.inc476
                                        #   in Loop: Header=BB95_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_143
.LBB95_150:                             # %for.end478
                                        #   in Loop: Header=BB95_141 Depth=2
	jmp	.LBB95_151
.LBB95_151:                             # %for.inc479
                                        #   in Loop: Header=BB95_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_141
.LBB95_152:                             # %for.end481
                                        #   in Loop: Header=BB95_139 Depth=1
	jmp	.LBB95_153
.LBB95_153:                             # %for.inc482
                                        #   in Loop: Header=BB95_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_139
.LBB95_154:                             # %for.end484
	jmp	.LBB95_155
.LBB95_155:                             # %if.end485
	jmp	.LBB95_156
.LBB95_156:                             # %if.end486
	jmp	.LBB95_157
.LBB95_157:                             # %if.end487
	jmp	.LBB95_180
.LBB95_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB95_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB95_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB95_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	$0, -4(%rbp)
.LBB95_163:                             # %for.cond499
                                        #   Parent Loop BB95_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB95_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB95_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_163
.LBB95_166:                             # %for.end519
                                        #   in Loop: Header=BB95_161 Depth=1
	jmp	.LBB95_167
.LBB95_167:                             # %for.inc520
                                        #   in Loop: Header=BB95_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_161
.LBB95_168:                             # %for.end522
	jmp	.LBB95_169
.LBB95_169:                             # %if.end523
	jmp	.LBB95_179
.LBB95_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB95_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB95_171 Depth=1
	movl	$0, -4(%rbp)
.LBB95_173:                             # %for.cond529
                                        #   Parent Loop BB95_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB95_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB95_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_173
.LBB95_176:                             # %for.end541
                                        #   in Loop: Header=BB95_171 Depth=1
	jmp	.LBB95_177
.LBB95_177:                             # %for.inc542
                                        #   in Loop: Header=BB95_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_171
.LBB95_178:                             # %for.end544
	jmp	.LBB95_179
.LBB95_179:                             # %if.end545
	jmp	.LBB95_180
.LBB95_180:                             # %sw.epilog
	cmpl	$447174579, -68(%rbp)   # imm = 0x1AA757B3
	jne	.LBB95_182
.LBB95_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_181
.Lfunc_end95:
	.size	Conceal_Error.85, .Lfunc_end95-Conceal_Error.85
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI95_0:
	.quad	.LBB95_16
	.quad	.LBB95_158
	.quad	.LBB95_106
	.quad	.LBB95_180
	.quad	.LBB95_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.86       # -- Begin function DecOneForthPix.86
	.p2align	4, 0x90
	.type	DecOneForthPix.86,@function
DecOneForthPix.86:                      # @DecOneForthPix.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$86276038, -12(%rbp)    # imm = 0x52477C6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB96_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_4:                               # %for.end
	cmpl	$86276038, -12(%rbp)    # imm = 0x52477C6
	jne	.LBB96_6
.LBB96_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_5
.Lfunc_end96:
	.size	DecOneForthPix.86, .Lfunc_end96-DecOneForthPix.86
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.87  # -- Begin function Get_Reference_Pixel.87
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.87,@function
Get_Reference_Pixel.87:                 # @Get_Reference_Pixel.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1323069209, -108(%rbp) # imm = 0x4EDC6F19
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB97_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB97_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB97_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB97_5
.LBB97_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB97_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB97_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB97_11
.LBB97_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB97_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB97_10
.LBB97_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB97_10:                              # %cond.end14
.LBB97_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB97_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB97_14
.LBB97_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB97_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB97_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB97_20
.LBB97_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB97_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB97_19
.LBB97_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB97_19:                              # %cond.end29
.LBB97_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_332
.LBB97_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB97_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB97_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB97_25
.LBB97_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB97_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB97_31
.LBB97_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB97_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB97_30
.LBB97_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB97_30:                              # %cond.end52
.LBB97_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB97_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_36
.LBB97_35:                              # %cond.false61
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_36:                              # %cond.end63
                                        #   in Loop: Header=BB97_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB97_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_42
.LBB97_38:                              # %cond.false68
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_41
.LBB97_40:                              # %cond.false73
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_41:                              # %cond.end75
                                        #   in Loop: Header=BB97_32 Depth=1
.LBB97_42:                              # %cond.end77
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB97_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_32
.LBB97_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_47
.LBB97_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB97_53
.LBB97_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_52
.LBB97_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_52:                              # %cond.end113
.LBB97_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB97_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB97_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB97_57
.LBB97_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB97_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB97_63
.LBB97_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB97_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB97_62
.LBB97_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB97_62:                              # %cond.end136
.LBB97_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_76
.LBB97_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB97_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB97_68
.LBB97_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB97_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB97_74
.LBB97_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB97_73
.LBB97_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB97_73:                              # %cond.end169
.LBB97_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_75:                              # %if.end
	jmp	.LBB97_76
.LBB97_76:                              # %if.end178
	jmp	.LBB97_331
.LBB97_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB97_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB97_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB97_81
.LBB97_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB97_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB97_87
.LBB97_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB97_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB97_86
.LBB97_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB97_86:                              # %cond.end197
.LBB97_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB97_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_92
.LBB97_91:                              # %cond.false209
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_92:                              # %cond.end211
                                        #   in Loop: Header=BB97_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB97_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_98
.LBB97_94:                              # %cond.false216
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_97
.LBB97_96:                              # %cond.false221
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_97:                              # %cond.end223
                                        #   in Loop: Header=BB97_88 Depth=1
.LBB97_98:                              # %cond.end225
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB97_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_88
.LBB97_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_103
.LBB97_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB97_109
.LBB97_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_108
.LBB97_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_108:                             # %cond.end266
.LBB97_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB97_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB97_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB97_113
.LBB97_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB97_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB97_119
.LBB97_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB97_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB97_118
.LBB97_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB97_118:                             # %cond.end287
.LBB97_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_132
.LBB97_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB97_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB97_124
.LBB97_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB97_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB97_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB97_130
.LBB97_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB97_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB97_129
.LBB97_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB97_129:                             # %cond.end320
.LBB97_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_131:                             # %if.end331
	jmp	.LBB97_132
.LBB97_132:                             # %if.end332
	jmp	.LBB97_330
.LBB97_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB97_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB97_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB97_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_139
.LBB97_138:                             # %cond.false345
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_139:                             # %cond.end347
                                        #   in Loop: Header=BB97_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB97_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_145
.LBB97_141:                             # %cond.false352
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_144
.LBB97_143:                             # %cond.false357
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_144:                             # %cond.end359
                                        #   in Loop: Header=BB97_135 Depth=1
.LBB97_145:                             # %cond.end361
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_146:                             # %for.cond363
                                        #   Parent Loop BB97_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB97_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB97_150
.LBB97_149:                             # %cond.false371
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_150:                             # %cond.end373
                                        #   in Loop: Header=BB97_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB97_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_156
.LBB97_152:                             # %cond.false378
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB97_155
.LBB97_154:                             # %cond.false383
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_155:                             # %cond.end385
                                        #   in Loop: Header=BB97_146 Depth=2
.LBB97_156:                             # %cond.end387
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB97_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_146
.LBB97_158:                             # %for.end401
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB97_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_135
.LBB97_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB97_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB97_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB97_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_161
.LBB97_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_167
.LBB97_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB97_173
.LBB97_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_172
.LBB97_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_172:                             # %cond.end449
.LBB97_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB97_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_177
.LBB97_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB97_183
.LBB97_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_182
.LBB97_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_182:                             # %cond.end486
.LBB97_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_196
.LBB97_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB97_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_188
.LBB97_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB97_194
.LBB97_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_193
.LBB97_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_193:                             # %cond.end526
.LBB97_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_195:                             # %if.end532
	jmp	.LBB97_196
.LBB97_196:                             # %if.end533
	jmp	.LBB97_329
.LBB97_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB97_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB97_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB97_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_203
.LBB97_202:                             # %cond.false546
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_203:                             # %cond.end548
                                        #   in Loop: Header=BB97_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB97_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_209
.LBB97_205:                             # %cond.false553
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_208
.LBB97_207:                             # %cond.false558
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_208:                             # %cond.end560
                                        #   in Loop: Header=BB97_199 Depth=1
.LBB97_209:                             # %cond.end562
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_210:                             # %for.cond564
                                        #   Parent Loop BB97_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB97_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB97_214
.LBB97_213:                             # %cond.false572
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_214:                             # %cond.end574
                                        #   in Loop: Header=BB97_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB97_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB97_220
.LBB97_216:                             # %cond.false579
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB97_219
.LBB97_218:                             # %cond.false584
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_219:                             # %cond.end586
                                        #   in Loop: Header=BB97_210 Depth=2
.LBB97_220:                             # %cond.end588
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB97_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_210
.LBB97_222:                             # %for.end602
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB97_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_199
.LBB97_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB97_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB97_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB97_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_225
.LBB97_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_231
.LBB97_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB97_237
.LBB97_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_236
.LBB97_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB97_236:                             # %cond.end650
.LBB97_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB97_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_241
.LBB97_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB97_247
.LBB97_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_246
.LBB97_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_246:                             # %cond.end687
.LBB97_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB97_258
.LBB97_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_251
.LBB97_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB97_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB97_257
.LBB97_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB97_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_256
.LBB97_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB97_256:                             # %cond.end724
.LBB97_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_258:                             # %if.end730
	jmp	.LBB97_328
.LBB97_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB97_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB97_262
.LBB97_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB97_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB97_265
.LBB97_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB97_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB97_271
.LBB97_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB97_270
.LBB97_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB97_270:                             # %cond.end753
.LBB97_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB97_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB97_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_276
.LBB97_275:                             # %cond.false765
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_276:                             # %cond.end767
                                        #   in Loop: Header=BB97_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB97_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_282
.LBB97_278:                             # %cond.false772
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB97_281
.LBB97_280:                             # %cond.false777
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB97_281:                             # %cond.end779
                                        #   in Loop: Header=BB97_272 Depth=1
.LBB97_282:                             # %cond.end781
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB97_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB97_272
.LBB97_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_287
.LBB97_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB97_293
.LBB97_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_292
.LBB97_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_292:                             # %cond.end822
.LBB97_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB97_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB97_296
.LBB97_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB97_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB97_299
.LBB97_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB97_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB97_305
.LBB97_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB97_304
.LBB97_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB97_304:                             # %cond.end847
.LBB97_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB97_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB97_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_310
.LBB97_309:                             # %cond.false859
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_310:                             # %cond.end861
                                        #   in Loop: Header=BB97_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB97_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_316
.LBB97_312:                             # %cond.false866
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB97_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB97_315
.LBB97_314:                             # %cond.false871
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB97_315:                             # %cond.end873
                                        #   in Loop: Header=BB97_306 Depth=1
.LBB97_316:                             # %cond.end875
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB97_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_306
.LBB97_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_321
.LBB97_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB97_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB97_327
.LBB97_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB97_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB97_326
.LBB97_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB97_326:                             # %cond.end916
.LBB97_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB97_328:                             # %if.end922
	jmp	.LBB97_329
.LBB97_329:                             # %if.end923
	jmp	.LBB97_330
.LBB97_330:                             # %if.end924
	jmp	.LBB97_331
.LBB97_331:                             # %if.end925
	jmp	.LBB97_332
.LBB97_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1323069209, -108(%rbp) # imm = 0x4EDC6F19
	jne	.LBB97_334
.LBB97_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_333
.Lfunc_end97:
	.size	Get_Reference_Pixel.87, .Lfunc_end97-Get_Reference_Pixel.87
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.88  # -- Begin function Get_Reference_Pixel.88
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.88,@function
Get_Reference_Pixel.88:                 # @Get_Reference_Pixel.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$819158988, -108(%rbp)  # imm = 0x30D35FCC
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB98_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB98_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB98_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB98_5
.LBB98_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB98_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB98_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB98_11
.LBB98_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB98_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB98_10
.LBB98_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB98_10:                              # %cond.end14
.LBB98_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB98_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB98_14
.LBB98_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB98_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB98_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB98_20
.LBB98_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB98_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB98_19
.LBB98_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB98_19:                              # %cond.end29
.LBB98_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_332
.LBB98_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB98_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB98_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB98_25
.LBB98_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB98_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB98_31
.LBB98_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB98_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB98_30
.LBB98_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB98_30:                              # %cond.end52
.LBB98_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB98_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB98_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB98_36
.LBB98_35:                              # %cond.false61
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_36:                              # %cond.end63
                                        #   in Loop: Header=BB98_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB98_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_42
.LBB98_38:                              # %cond.false68
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB98_41
.LBB98_40:                              # %cond.false73
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_41:                              # %cond.end75
                                        #   in Loop: Header=BB98_32 Depth=1
.LBB98_42:                              # %cond.end77
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB98_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_32
.LBB98_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_47
.LBB98_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB98_53
.LBB98_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_52
.LBB98_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_52:                              # %cond.end113
.LBB98_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB98_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB98_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB98_57
.LBB98_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB98_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB98_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB98_63
.LBB98_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB98_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB98_62
.LBB98_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB98_62:                              # %cond.end136
.LBB98_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB98_76
.LBB98_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB98_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB98_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB98_68
.LBB98_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB98_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB98_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB98_74
.LBB98_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB98_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB98_73
.LBB98_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB98_73:                              # %cond.end169
.LBB98_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB98_75:                              # %if.end
	jmp	.LBB98_76
.LBB98_76:                              # %if.end178
	jmp	.LBB98_331
.LBB98_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB98_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB98_81
.LBB98_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB98_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB98_87
.LBB98_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB98_86
.LBB98_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB98_86:                              # %cond.end197
.LBB98_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB98_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB98_92
.LBB98_91:                              # %cond.false209
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_92:                              # %cond.end211
                                        #   in Loop: Header=BB98_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB98_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_98
.LBB98_94:                              # %cond.false216
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB98_97
.LBB98_96:                              # %cond.false221
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_97:                              # %cond.end223
                                        #   in Loop: Header=BB98_88 Depth=1
.LBB98_98:                              # %cond.end225
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB98_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_88
.LBB98_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_103
.LBB98_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB98_109
.LBB98_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_108
.LBB98_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_108:                             # %cond.end266
.LBB98_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB98_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB98_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB98_113
.LBB98_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB98_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB98_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB98_119
.LBB98_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB98_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB98_118
.LBB98_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB98_118:                             # %cond.end287
.LBB98_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB98_132
.LBB98_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB98_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB98_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB98_124
.LBB98_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB98_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB98_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB98_130
.LBB98_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB98_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB98_129
.LBB98_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB98_129:                             # %cond.end320
.LBB98_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB98_131:                             # %if.end331
	jmp	.LBB98_132
.LBB98_132:                             # %if.end332
	jmp	.LBB98_330
.LBB98_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB98_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB98_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB98_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB98_139
.LBB98_138:                             # %cond.false345
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_139:                             # %cond.end347
                                        #   in Loop: Header=BB98_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB98_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_145
.LBB98_141:                             # %cond.false352
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB98_144
.LBB98_143:                             # %cond.false357
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_144:                             # %cond.end359
                                        #   in Loop: Header=BB98_135 Depth=1
.LBB98_145:                             # %cond.end361
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB98_146:                             # %for.cond363
                                        #   Parent Loop BB98_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB98_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB98_150
.LBB98_149:                             # %cond.false371
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_150:                             # %cond.end373
                                        #   in Loop: Header=BB98_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB98_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB98_156
.LBB98_152:                             # %cond.false378
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB98_155
.LBB98_154:                             # %cond.false383
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_155:                             # %cond.end385
                                        #   in Loop: Header=BB98_146 Depth=2
.LBB98_156:                             # %cond.end387
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB98_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_146
.LBB98_158:                             # %for.end401
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_135
.LBB98_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB98_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB98_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB98_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_161
.LBB98_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_167
.LBB98_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB98_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB98_173
.LBB98_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_172
.LBB98_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB98_172:                             # %cond.end449
.LBB98_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB98_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_177
.LBB98_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB98_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB98_183
.LBB98_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_182
.LBB98_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_182:                             # %cond.end486
.LBB98_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB98_196
.LBB98_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB98_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_188
.LBB98_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB98_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB98_194
.LBB98_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_193
.LBB98_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_193:                             # %cond.end526
.LBB98_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB98_195:                             # %if.end532
	jmp	.LBB98_196
.LBB98_196:                             # %if.end533
	jmp	.LBB98_329
.LBB98_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB98_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB98_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB98_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB98_203
.LBB98_202:                             # %cond.false546
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_203:                             # %cond.end548
                                        #   in Loop: Header=BB98_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB98_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_209
.LBB98_205:                             # %cond.false553
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB98_208
.LBB98_207:                             # %cond.false558
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_208:                             # %cond.end560
                                        #   in Loop: Header=BB98_199 Depth=1
.LBB98_209:                             # %cond.end562
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_210:                             # %for.cond564
                                        #   Parent Loop BB98_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB98_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB98_214
.LBB98_213:                             # %cond.false572
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_214:                             # %cond.end574
                                        #   in Loop: Header=BB98_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB98_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB98_220
.LBB98_216:                             # %cond.false579
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB98_219
.LBB98_218:                             # %cond.false584
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_219:                             # %cond.end586
                                        #   in Loop: Header=BB98_210 Depth=2
.LBB98_220:                             # %cond.end588
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB98_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_210
.LBB98_222:                             # %for.end602
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB98_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_199
.LBB98_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB98_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB98_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB98_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB98_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_225
.LBB98_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_231
.LBB98_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB98_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB98_237
.LBB98_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_236
.LBB98_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB98_236:                             # %cond.end650
.LBB98_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB98_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_241
.LBB98_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB98_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB98_247
.LBB98_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_246
.LBB98_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_246:                             # %cond.end687
.LBB98_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB98_258
.LBB98_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_251
.LBB98_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB98_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB98_257
.LBB98_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB98_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_256
.LBB98_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB98_256:                             # %cond.end724
.LBB98_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB98_258:                             # %if.end730
	jmp	.LBB98_328
.LBB98_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB98_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB98_262
.LBB98_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB98_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB98_265
.LBB98_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB98_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB98_271
.LBB98_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB98_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB98_270
.LBB98_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB98_270:                             # %cond.end753
.LBB98_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB98_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB98_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB98_276
.LBB98_275:                             # %cond.false765
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_276:                             # %cond.end767
                                        #   in Loop: Header=BB98_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB98_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_282
.LBB98_278:                             # %cond.false772
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB98_281
.LBB98_280:                             # %cond.false777
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB98_281:                             # %cond.end779
                                        #   in Loop: Header=BB98_272 Depth=1
.LBB98_282:                             # %cond.end781
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB98_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_272
.LBB98_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_287
.LBB98_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB98_293
.LBB98_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_292
.LBB98_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_292:                             # %cond.end822
.LBB98_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB98_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB98_296
.LBB98_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB98_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB98_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB98_299
.LBB98_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB98_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB98_305
.LBB98_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB98_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB98_304
.LBB98_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB98_304:                             # %cond.end847
.LBB98_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB98_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB98_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB98_310
.LBB98_309:                             # %cond.false859
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_310:                             # %cond.end861
                                        #   in Loop: Header=BB98_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB98_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB98_316
.LBB98_312:                             # %cond.false866
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB98_315
.LBB98_314:                             # %cond.false871
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB98_315:                             # %cond.end873
                                        #   in Loop: Header=BB98_306 Depth=1
.LBB98_316:                             # %cond.end875
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB98_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_306
.LBB98_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_321
.LBB98_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB98_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB98_327
.LBB98_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB98_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB98_326
.LBB98_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB98_326:                             # %cond.end916
.LBB98_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB98_328:                             # %if.end922
	jmp	.LBB98_329
.LBB98_329:                             # %if.end923
	jmp	.LBB98_330
.LBB98_330:                             # %if.end924
	jmp	.LBB98_331
.LBB98_331:                             # %if.end925
	jmp	.LBB98_332
.LBB98_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$819158988, -108(%rbp)  # imm = 0x30D35FCC
	jne	.LBB98_334
.LBB98_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_333
.Lfunc_end98:
	.size	Get_Reference_Pixel.88, .Lfunc_end98-Get_Reference_Pixel.88
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.89  # -- Begin function Get_Reference_Pixel.89
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.89,@function
Get_Reference_Pixel.89:                 # @Get_Reference_Pixel.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$694203532, -104(%rbp)  # imm = 0x2960B48C
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB99_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB99_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB99_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB99_5
.LBB99_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB99_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB99_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB99_11
.LBB99_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB99_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB99_10
.LBB99_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB99_10:                              # %cond.end14
.LBB99_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB99_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB99_14
.LBB99_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB99_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB99_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB99_20
.LBB99_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB99_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB99_19
.LBB99_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB99_19:                              # %cond.end29
.LBB99_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB99_332
.LBB99_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB99_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB99_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB99_25
.LBB99_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB99_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB99_31
.LBB99_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB99_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB99_30
.LBB99_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB99_30:                              # %cond.end52
.LBB99_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB99_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB99_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB99_36
.LBB99_35:                              # %cond.false61
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_36:                              # %cond.end63
                                        #   in Loop: Header=BB99_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB99_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB99_42
.LBB99_38:                              # %cond.false68
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB99_41
.LBB99_40:                              # %cond.false73
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_41:                              # %cond.end75
                                        #   in Loop: Header=BB99_32 Depth=1
.LBB99_42:                              # %cond.end77
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB99_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_32
.LBB99_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_47
.LBB99_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB99_53
.LBB99_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_52
.LBB99_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_52:                              # %cond.end113
.LBB99_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB99_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB99_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB99_57
.LBB99_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB99_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB99_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB99_63
.LBB99_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB99_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB99_62
.LBB99_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB99_62:                              # %cond.end136
.LBB99_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB99_76
.LBB99_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB99_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB99_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB99_68
.LBB99_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB99_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB99_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB99_74
.LBB99_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB99_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB99_73
.LBB99_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB99_73:                              # %cond.end169
.LBB99_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB99_75:                              # %if.end
	jmp	.LBB99_76
.LBB99_76:                              # %if.end178
	jmp	.LBB99_331
.LBB99_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB99_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB99_81
.LBB99_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB99_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB99_87
.LBB99_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB99_86
.LBB99_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB99_86:                              # %cond.end197
.LBB99_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB99_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB99_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB99_92
.LBB99_91:                              # %cond.false209
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_92:                              # %cond.end211
                                        #   in Loop: Header=BB99_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB99_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB99_98
.LBB99_94:                              # %cond.false216
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB99_97
.LBB99_96:                              # %cond.false221
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_97:                              # %cond.end223
                                        #   in Loop: Header=BB99_88 Depth=1
.LBB99_98:                              # %cond.end225
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB99_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_88
.LBB99_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_103
.LBB99_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB99_109
.LBB99_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_108
.LBB99_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_108:                             # %cond.end266
.LBB99_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB99_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB99_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB99_113
.LBB99_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB99_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB99_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB99_119
.LBB99_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB99_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB99_118
.LBB99_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB99_118:                             # %cond.end287
.LBB99_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB99_132
.LBB99_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB99_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB99_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB99_124
.LBB99_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB99_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB99_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB99_130
.LBB99_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB99_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB99_129
.LBB99_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB99_129:                             # %cond.end320
.LBB99_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB99_131:                             # %if.end331
	jmp	.LBB99_132
.LBB99_132:                             # %if.end332
	jmp	.LBB99_330
.LBB99_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB99_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB99_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB99_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB99_139
.LBB99_138:                             # %cond.false345
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_139:                             # %cond.end347
                                        #   in Loop: Header=BB99_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB99_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB99_145
.LBB99_141:                             # %cond.false352
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB99_144
.LBB99_143:                             # %cond.false357
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_144:                             # %cond.end359
                                        #   in Loop: Header=BB99_135 Depth=1
.LBB99_145:                             # %cond.end361
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB99_146:                             # %for.cond363
                                        #   Parent Loop BB99_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB99_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB99_150
.LBB99_149:                             # %cond.false371
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_150:                             # %cond.end373
                                        #   in Loop: Header=BB99_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB99_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_156
.LBB99_152:                             # %cond.false378
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB99_155
.LBB99_154:                             # %cond.false383
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_155:                             # %cond.end385
                                        #   in Loop: Header=BB99_146 Depth=2
.LBB99_156:                             # %cond.end387
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB99_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_146
.LBB99_158:                             # %for.end401
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB99_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_135
.LBB99_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB99_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB99_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB99_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB99_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_161
.LBB99_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_167
.LBB99_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB99_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB99_173
.LBB99_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_172
.LBB99_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB99_172:                             # %cond.end449
.LBB99_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB99_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_177
.LBB99_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB99_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB99_183
.LBB99_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_182
.LBB99_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_182:                             # %cond.end486
.LBB99_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB99_196
.LBB99_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB99_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_188
.LBB99_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB99_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB99_194
.LBB99_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_193
.LBB99_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_193:                             # %cond.end526
.LBB99_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB99_195:                             # %if.end532
	jmp	.LBB99_196
.LBB99_196:                             # %if.end533
	jmp	.LBB99_329
.LBB99_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB99_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB99_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB99_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB99_203
.LBB99_202:                             # %cond.false546
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_203:                             # %cond.end548
                                        #   in Loop: Header=BB99_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB99_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB99_209
.LBB99_205:                             # %cond.false553
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB99_208
.LBB99_207:                             # %cond.false558
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_208:                             # %cond.end560
                                        #   in Loop: Header=BB99_199 Depth=1
.LBB99_209:                             # %cond.end562
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB99_210:                             # %for.cond564
                                        #   Parent Loop BB99_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB99_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB99_214
.LBB99_213:                             # %cond.false572
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_214:                             # %cond.end574
                                        #   in Loop: Header=BB99_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB99_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_220
.LBB99_216:                             # %cond.false579
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB99_219
.LBB99_218:                             # %cond.false584
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_219:                             # %cond.end586
                                        #   in Loop: Header=BB99_210 Depth=2
.LBB99_220:                             # %cond.end588
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB99_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_210
.LBB99_222:                             # %for.end602
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB99_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_199
.LBB99_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB99_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB99_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB99_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB99_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_225
.LBB99_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_231
.LBB99_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB99_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB99_237
.LBB99_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_236
.LBB99_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB99_236:                             # %cond.end650
.LBB99_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB99_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_241
.LBB99_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB99_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB99_247
.LBB99_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_246
.LBB99_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_246:                             # %cond.end687
.LBB99_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB99_258
.LBB99_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_251
.LBB99_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB99_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB99_257
.LBB99_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB99_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_256
.LBB99_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB99_256:                             # %cond.end724
.LBB99_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB99_258:                             # %if.end730
	jmp	.LBB99_328
.LBB99_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB99_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB99_262
.LBB99_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB99_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB99_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB99_265
.LBB99_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB99_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB99_271
.LBB99_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB99_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB99_270
.LBB99_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB99_270:                             # %cond.end753
.LBB99_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB99_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB99_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB99_276
.LBB99_275:                             # %cond.false765
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_276:                             # %cond.end767
                                        #   in Loop: Header=BB99_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB99_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB99_282
.LBB99_278:                             # %cond.false772
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB99_281
.LBB99_280:                             # %cond.false777
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB99_281:                             # %cond.end779
                                        #   in Loop: Header=BB99_272 Depth=1
.LBB99_282:                             # %cond.end781
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB99_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_272
.LBB99_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_287
.LBB99_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB99_293
.LBB99_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_292
.LBB99_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_292:                             # %cond.end822
.LBB99_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB99_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB99_296
.LBB99_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB99_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB99_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB99_299
.LBB99_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB99_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB99_305
.LBB99_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB99_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB99_304
.LBB99_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB99_304:                             # %cond.end847
.LBB99_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB99_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB99_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB99_310
.LBB99_309:                             # %cond.false859
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_310:                             # %cond.end861
                                        #   in Loop: Header=BB99_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB99_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB99_316
.LBB99_312:                             # %cond.false866
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB99_315
.LBB99_314:                             # %cond.false871
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB99_315:                             # %cond.end873
                                        #   in Loop: Header=BB99_306 Depth=1
.LBB99_316:                             # %cond.end875
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB99_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_306
.LBB99_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_321
.LBB99_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB99_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB99_327
.LBB99_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB99_326
.LBB99_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB99_326:                             # %cond.end916
.LBB99_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB99_328:                             # %if.end922
	jmp	.LBB99_329
.LBB99_329:                             # %if.end923
	jmp	.LBB99_330
.LBB99_330:                             # %if.end924
	jmp	.LBB99_331
.LBB99_331:                             # %if.end925
	jmp	.LBB99_332
.LBB99_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$694203532, -104(%rbp)  # imm = 0x2960B48C
	jne	.LBB99_334
.LBB99_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_333
.Lfunc_end99:
	.size	Get_Reference_Pixel.89, .Lfunc_end99-Get_Reference_Pixel.89
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.90   # -- Begin function decode_one_b8block.90
	.p2align	4, 0x90
	.type	decode_one_b8block.90,@function
decode_one_b8block.90:                  # @decode_one_b8block.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$715461769, -84(%rbp)   # imm = 0x2AA51489
	movl	%edi, -40(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB100_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_4:                              # %for.cond9
                                        #   Parent Loop BB100_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB100_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB100_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_4
.LBB100_7:                              # %for.end
                                        #   in Loop: Header=BB100_2 Depth=1
	jmp	.LBB100_8
.LBB100_8:                              # %for.inc26
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_2
.LBB100_9:                              # %for.end28
	jmp	.LBB100_96
.LBB100_10:                             # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB100_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB100_31
.LBB100_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB100_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_17:                             # %for.cond40
                                        #   Parent Loop BB100_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB100_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB100_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_17
.LBB100_20:                             # %for.end49
                                        #   in Loop: Header=BB100_15 Depth=1
	jmp	.LBB100_21
.LBB100_21:                             # %for.inc50
                                        #   in Loop: Header=BB100_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_15
.LBB100_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB100_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_25:                             # %for.cond56
                                        #   Parent Loop BB100_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB100_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB100_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_25
.LBB100_28:                             # %for.end71
                                        #   in Loop: Header=BB100_23 Depth=1
	jmp	.LBB100_29
.LBB100_29:                             # %for.inc72
                                        #   in Loop: Header=BB100_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_23
.LBB100_30:                             # %for.end74
	jmp	.LBB100_60
.LBB100_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB100_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB100_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB100_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_36:                             # %for.cond83
                                        #   Parent Loop BB100_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB100_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB100_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_36
.LBB100_39:                             # %for.end120
                                        #   in Loop: Header=BB100_34 Depth=1
	jmp	.LBB100_40
.LBB100_40:                             # %for.inc121
                                        #   in Loop: Header=BB100_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_34
.LBB100_41:                             # %for.end123
	jmp	.LBB100_51
.LBB100_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB100_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_45:                             # %for.cond129
                                        #   Parent Loop BB100_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB100_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB100_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_45
.LBB100_48:                             # %for.end145
                                        #   in Loop: Header=BB100_43 Depth=1
	jmp	.LBB100_49
.LBB100_49:                             # %for.inc146
                                        #   in Loop: Header=BB100_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_43
.LBB100_50:                             # %for.end148
	jmp	.LBB100_51
.LBB100_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB100_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_54:                             # %for.cond153
                                        #   Parent Loop BB100_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB100_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB100_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_54
.LBB100_57:                             # %for.end167
                                        #   in Loop: Header=BB100_52 Depth=1
	jmp	.LBB100_58
.LBB100_58:                             # %for.inc168
                                        #   in Loop: Header=BB100_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_52
.LBB100_59:                             # %for.end170
	jmp	.LBB100_60
.LBB100_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB100_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB100_66
.LBB100_62:                             # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB100_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB100_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB100_86
.LBB100_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_69 Depth 2
                                        #       Child Loop BB100_74 Depth 3
                                        #         Child Loop BB100_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB100_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB100_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_69:                             # %for.cond197
                                        #   Parent Loop BB100_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_74 Depth 3
                                        #         Child Loop BB100_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB100_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB100_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB100_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB100_73:                             # %if.end218
                                        #   in Loop: Header=BB100_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB100_74:                             # %for.cond233
                                        #   Parent Loop BB100_67 Depth=1
                                        #     Parent Loop BB100_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB100_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB100_74 Depth=3
	movl	$0, -8(%rbp)
.LBB100_76:                             # %for.cond237
                                        #   Parent Loop BB100_67 Depth=1
                                        #     Parent Loop BB100_69 Depth=2
                                        #       Parent Loop BB100_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB100_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB100_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB100_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_76
.LBB100_79:                             # %for.end269
                                        #   in Loop: Header=BB100_74 Depth=3
	jmp	.LBB100_80
.LBB100_80:                             # %for.inc270
                                        #   in Loop: Header=BB100_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_74
.LBB100_81:                             # %for.end272
                                        #   in Loop: Header=BB100_69 Depth=2
	jmp	.LBB100_82
.LBB100_82:                             # %for.inc273
                                        #   in Loop: Header=BB100_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_69
.LBB100_83:                             # %for.end275
                                        #   in Loop: Header=BB100_67 Depth=1
	jmp	.LBB100_84
.LBB100_84:                             # %for.inc276
                                        #   in Loop: Header=BB100_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_67
.LBB100_85:                             # %for.end278
	jmp	.LBB100_95
.LBB100_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB100_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB100_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_89:                             # %for.cond284
                                        #   Parent Loop BB100_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB100_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB100_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB100_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_89
.LBB100_92:                             # %for.end310
                                        #   in Loop: Header=BB100_87 Depth=1
	jmp	.LBB100_93
.LBB100_93:                             # %for.inc311
                                        #   in Loop: Header=BB100_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_87
.LBB100_94:                             # %for.end313
	jmp	.LBB100_95
.LBB100_95:                             # %if.end314
	jmp	.LBB100_96
.LBB100_96:                             # %if.end315
	cmpl	$715461769, -84(%rbp)   # imm = 0x2AA51489
	jne	.LBB100_98
.LBB100_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_97
.Lfunc_end100:
	.size	decode_one_b8block.90, .Lfunc_end100-decode_one_b8block.90
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.91   # -- Begin function decode_one_b8block.91
	.p2align	4, 0x90
	.type	decode_one_b8block.91,@function
decode_one_b8block.91:                  # @decode_one_b8block.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2120970859, -84(%rbp)  # imm = 0x7E6B726B
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB101_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB101_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_4:                              # %for.cond9
                                        #   Parent Loop BB101_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB101_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB101_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_4
.LBB101_7:                              # %for.end
                                        #   in Loop: Header=BB101_2 Depth=1
	jmp	.LBB101_8
.LBB101_8:                              # %for.inc26
                                        #   in Loop: Header=BB101_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_2
.LBB101_9:                              # %for.end28
	jmp	.LBB101_96
.LBB101_10:                             # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB101_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB101_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB101_31
.LBB101_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB101_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_17:                             # %for.cond40
                                        #   Parent Loop BB101_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB101_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB101_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_17
.LBB101_20:                             # %for.end49
                                        #   in Loop: Header=BB101_15 Depth=1
	jmp	.LBB101_21
.LBB101_21:                             # %for.inc50
                                        #   in Loop: Header=BB101_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_15
.LBB101_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB101_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_25:                             # %for.cond56
                                        #   Parent Loop BB101_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB101_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB101_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_25
.LBB101_28:                             # %for.end71
                                        #   in Loop: Header=BB101_23 Depth=1
	jmp	.LBB101_29
.LBB101_29:                             # %for.inc72
                                        #   in Loop: Header=BB101_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_23
.LBB101_30:                             # %for.end74
	jmp	.LBB101_60
.LBB101_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB101_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB101_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_36:                             # %for.cond83
                                        #   Parent Loop BB101_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB101_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB101_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_36
.LBB101_39:                             # %for.end120
                                        #   in Loop: Header=BB101_34 Depth=1
	jmp	.LBB101_40
.LBB101_40:                             # %for.inc121
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_34
.LBB101_41:                             # %for.end123
	jmp	.LBB101_51
.LBB101_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB101_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_45:                             # %for.cond129
                                        #   Parent Loop BB101_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB101_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB101_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_45
.LBB101_48:                             # %for.end145
                                        #   in Loop: Header=BB101_43 Depth=1
	jmp	.LBB101_49
.LBB101_49:                             # %for.inc146
                                        #   in Loop: Header=BB101_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_43
.LBB101_50:                             # %for.end148
	jmp	.LBB101_51
.LBB101_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB101_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_54:                             # %for.cond153
                                        #   Parent Loop BB101_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB101_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB101_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_54
.LBB101_57:                             # %for.end167
                                        #   in Loop: Header=BB101_52 Depth=1
	jmp	.LBB101_58
.LBB101_58:                             # %for.inc168
                                        #   in Loop: Header=BB101_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_52
.LBB101_59:                             # %for.end170
	jmp	.LBB101_60
.LBB101_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB101_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB101_66
.LBB101_62:                             # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB101_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB101_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB101_86
.LBB101_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_69 Depth 2
                                        #       Child Loop BB101_74 Depth 3
                                        #         Child Loop BB101_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB101_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_69:                             # %for.cond197
                                        #   Parent Loop BB101_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_74 Depth 3
                                        #         Child Loop BB101_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB101_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB101_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB101_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB101_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB101_73:                             # %if.end218
                                        #   in Loop: Header=BB101_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB101_74:                             # %for.cond233
                                        #   Parent Loop BB101_67 Depth=1
                                        #     Parent Loop BB101_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB101_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB101_74 Depth=3
	movl	$0, -4(%rbp)
.LBB101_76:                             # %for.cond237
                                        #   Parent Loop BB101_67 Depth=1
                                        #     Parent Loop BB101_69 Depth=2
                                        #       Parent Loop BB101_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB101_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB101_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB101_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_76
.LBB101_79:                             # %for.end269
                                        #   in Loop: Header=BB101_74 Depth=3
	jmp	.LBB101_80
.LBB101_80:                             # %for.inc270
                                        #   in Loop: Header=BB101_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_74
.LBB101_81:                             # %for.end272
                                        #   in Loop: Header=BB101_69 Depth=2
	jmp	.LBB101_82
.LBB101_82:                             # %for.inc273
                                        #   in Loop: Header=BB101_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_69
.LBB101_83:                             # %for.end275
                                        #   in Loop: Header=BB101_67 Depth=1
	jmp	.LBB101_84
.LBB101_84:                             # %for.inc276
                                        #   in Loop: Header=BB101_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_67
.LBB101_85:                             # %for.end278
	jmp	.LBB101_95
.LBB101_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB101_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_89:                             # %for.cond284
                                        #   Parent Loop BB101_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB101_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB101_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_89
.LBB101_92:                             # %for.end310
                                        #   in Loop: Header=BB101_87 Depth=1
	jmp	.LBB101_93
.LBB101_93:                             # %for.inc311
                                        #   in Loop: Header=BB101_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_87
.LBB101_94:                             # %for.end313
	jmp	.LBB101_95
.LBB101_95:                             # %if.end314
	jmp	.LBB101_96
.LBB101_96:                             # %if.end315
	cmpl	$2120970859, -84(%rbp)  # imm = 0x7E6B726B
	jne	.LBB101_98
.LBB101_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_97
.Lfunc_end101:
	.size	decode_one_b8block.91, .Lfunc_end101-decode_one_b8block.91
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.92  # -- Begin function Get_Reference_Pixel.92
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.92,@function
Get_Reference_Pixel.92:                 # @Get_Reference_Pixel.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1973920984, -100(%rbp) # imm = 0x75A7A4D8
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB102_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB102_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB102_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB102_5
.LBB102_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB102_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB102_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB102_11
.LBB102_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB102_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB102_10
.LBB102_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB102_10:                             # %cond.end14
.LBB102_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB102_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB102_14
.LBB102_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB102_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB102_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB102_20
.LBB102_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB102_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB102_19
.LBB102_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB102_19:                             # %cond.end29
.LBB102_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_332
.LBB102_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB102_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB102_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB102_25
.LBB102_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB102_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB102_31
.LBB102_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB102_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB102_30
.LBB102_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB102_30:                             # %cond.end52
.LBB102_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB102_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB102_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB102_36
.LBB102_35:                             # %cond.false61
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_36:                             # %cond.end63
                                        #   in Loop: Header=BB102_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB102_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_42
.LBB102_38:                             # %cond.false68
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB102_41
.LBB102_40:                             # %cond.false73
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_41:                             # %cond.end75
                                        #   in Loop: Header=BB102_32 Depth=1
.LBB102_42:                             # %cond.end77
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB102_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_32
.LBB102_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_47
.LBB102_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB102_53
.LBB102_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_52
.LBB102_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_52:                             # %cond.end113
.LBB102_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB102_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB102_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB102_57
.LBB102_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB102_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB102_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB102_63
.LBB102_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB102_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB102_62
.LBB102_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB102_62:                             # %cond.end136
.LBB102_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB102_76
.LBB102_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB102_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB102_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB102_68
.LBB102_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB102_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB102_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB102_74
.LBB102_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB102_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB102_73
.LBB102_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB102_73:                             # %cond.end169
.LBB102_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB102_75:                             # %if.end
	jmp	.LBB102_76
.LBB102_76:                             # %if.end178
	jmp	.LBB102_331
.LBB102_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB102_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB102_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB102_81
.LBB102_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB102_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB102_87
.LBB102_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB102_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB102_86
.LBB102_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB102_86:                             # %cond.end197
.LBB102_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB102_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB102_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB102_92
.LBB102_91:                             # %cond.false209
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_92:                             # %cond.end211
                                        #   in Loop: Header=BB102_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB102_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_98
.LBB102_94:                             # %cond.false216
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB102_97
.LBB102_96:                             # %cond.false221
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_97:                             # %cond.end223
                                        #   in Loop: Header=BB102_88 Depth=1
.LBB102_98:                             # %cond.end225
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB102_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_88
.LBB102_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_103
.LBB102_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB102_109
.LBB102_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_108
.LBB102_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_108:                            # %cond.end266
.LBB102_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB102_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB102_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB102_113
.LBB102_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB102_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB102_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB102_119
.LBB102_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB102_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB102_118
.LBB102_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB102_118:                            # %cond.end287
.LBB102_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB102_132
.LBB102_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB102_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB102_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB102_124
.LBB102_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB102_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB102_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB102_130
.LBB102_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB102_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB102_129
.LBB102_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB102_129:                            # %cond.end320
.LBB102_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB102_131:                            # %if.end331
	jmp	.LBB102_132
.LBB102_132:                            # %if.end332
	jmp	.LBB102_330
.LBB102_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB102_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB102_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB102_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB102_139
.LBB102_138:                            # %cond.false345
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_139:                            # %cond.end347
                                        #   in Loop: Header=BB102_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB102_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_145
.LBB102_141:                            # %cond.false352
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB102_144
.LBB102_143:                            # %cond.false357
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_144:                            # %cond.end359
                                        #   in Loop: Header=BB102_135 Depth=1
.LBB102_145:                            # %cond.end361
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB102_146:                            # %for.cond363
                                        #   Parent Loop BB102_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB102_150
.LBB102_149:                            # %cond.false371
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_150:                            # %cond.end373
                                        #   in Loop: Header=BB102_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB102_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_156
.LBB102_152:                            # %cond.false378
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB102_155
.LBB102_154:                            # %cond.false383
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_155:                            # %cond.end385
                                        #   in Loop: Header=BB102_146 Depth=2
.LBB102_156:                            # %cond.end387
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB102_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_146
.LBB102_158:                            # %for.end401
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB102_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_135
.LBB102_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB102_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB102_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB102_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB102_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_161
.LBB102_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_167
.LBB102_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB102_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB102_173
.LBB102_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_172
.LBB102_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB102_172:                            # %cond.end449
.LBB102_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB102_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_177
.LBB102_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB102_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB102_183
.LBB102_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_182
.LBB102_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_182:                            # %cond.end486
.LBB102_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB102_196
.LBB102_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB102_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_188
.LBB102_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB102_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB102_194
.LBB102_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_193
.LBB102_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_193:                            # %cond.end526
.LBB102_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB102_195:                            # %if.end532
	jmp	.LBB102_196
.LBB102_196:                            # %if.end533
	jmp	.LBB102_329
.LBB102_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB102_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB102_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB102_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB102_203
.LBB102_202:                            # %cond.false546
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_203:                            # %cond.end548
                                        #   in Loop: Header=BB102_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB102_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_209
.LBB102_205:                            # %cond.false553
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB102_208
.LBB102_207:                            # %cond.false558
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_208:                            # %cond.end560
                                        #   in Loop: Header=BB102_199 Depth=1
.LBB102_209:                            # %cond.end562
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB102_210:                            # %for.cond564
                                        #   Parent Loop BB102_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB102_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB102_214
.LBB102_213:                            # %cond.false572
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_214:                            # %cond.end574
                                        #   in Loop: Header=BB102_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB102_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB102_220
.LBB102_216:                            # %cond.false579
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB102_219
.LBB102_218:                            # %cond.false584
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_219:                            # %cond.end586
                                        #   in Loop: Header=BB102_210 Depth=2
.LBB102_220:                            # %cond.end588
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB102_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_210
.LBB102_222:                            # %for.end602
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB102_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_199
.LBB102_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB102_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB102_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB102_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB102_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_225
.LBB102_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_231
.LBB102_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB102_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB102_237
.LBB102_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_236
.LBB102_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB102_236:                            # %cond.end650
.LBB102_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB102_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_241
.LBB102_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB102_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB102_247
.LBB102_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_246
.LBB102_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_246:                            # %cond.end687
.LBB102_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB102_258
.LBB102_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_251
.LBB102_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB102_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB102_257
.LBB102_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB102_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_256
.LBB102_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB102_256:                            # %cond.end724
.LBB102_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB102_258:                            # %if.end730
	jmp	.LBB102_328
.LBB102_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB102_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB102_262
.LBB102_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB102_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB102_265
.LBB102_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB102_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB102_271
.LBB102_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB102_270
.LBB102_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB102_270:                            # %cond.end753
.LBB102_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB102_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB102_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB102_276
.LBB102_275:                            # %cond.false765
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_276:                            # %cond.end767
                                        #   in Loop: Header=BB102_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB102_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_282
.LBB102_278:                            # %cond.false772
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB102_281
.LBB102_280:                            # %cond.false777
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB102_281:                            # %cond.end779
                                        #   in Loop: Header=BB102_272 Depth=1
.LBB102_282:                            # %cond.end781
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB102_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB102_272
.LBB102_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_287
.LBB102_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB102_293
.LBB102_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_292
.LBB102_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_292:                            # %cond.end822
.LBB102_293:                            # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB102_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB102_296
.LBB102_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB102_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB102_299
.LBB102_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB102_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB102_305
.LBB102_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB102_304
.LBB102_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB102_304:                            # %cond.end847
.LBB102_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB102_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB102_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB102_310
.LBB102_309:                            # %cond.false859
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_310:                            # %cond.end861
                                        #   in Loop: Header=BB102_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB102_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB102_316
.LBB102_312:                            # %cond.false866
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB102_315
.LBB102_314:                            # %cond.false871
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB102_315:                            # %cond.end873
                                        #   in Loop: Header=BB102_306 Depth=1
.LBB102_316:                            # %cond.end875
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB102_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_306
.LBB102_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_321
.LBB102_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB102_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB102_327
.LBB102_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB102_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB102_326
.LBB102_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB102_326:                            # %cond.end916
.LBB102_327:                            # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB102_328:                            # %if.end922
	jmp	.LBB102_329
.LBB102_329:                            # %if.end923
	jmp	.LBB102_330
.LBB102_330:                            # %if.end924
	jmp	.LBB102_331
.LBB102_331:                            # %if.end925
	jmp	.LBB102_332
.LBB102_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1973920984, -100(%rbp) # imm = 0x75A7A4D8
	jne	.LBB102_334
.LBB102_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_333
.Lfunc_end102:
	.size	Get_Reference_Pixel.92, .Lfunc_end102-Get_Reference_Pixel.92
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.93   # -- Begin function decode_one_b8block.93
	.p2align	4, 0x90
	.type	decode_one_b8block.93,@function
decode_one_b8block.93:                  # @decode_one_b8block.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2001608138, -84(%rbp)  # imm = 0x774E1DCA
	movl	%edi, -40(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB103_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_4:                              # %for.cond9
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc26
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end28
	jmp	.LBB103_96
.LBB103_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB103_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB103_31
.LBB103_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB103_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_17:                             # %for.cond40
                                        #   Parent Loop BB103_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB103_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB103_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_17
.LBB103_20:                             # %for.end49
                                        #   in Loop: Header=BB103_15 Depth=1
	jmp	.LBB103_21
.LBB103_21:                             # %for.inc50
                                        #   in Loop: Header=BB103_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_15
.LBB103_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_25:                             # %for.cond56
                                        #   Parent Loop BB103_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB103_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB103_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_25
.LBB103_28:                             # %for.end71
                                        #   in Loop: Header=BB103_23 Depth=1
	jmp	.LBB103_29
.LBB103_29:                             # %for.inc72
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_23
.LBB103_30:                             # %for.end74
	jmp	.LBB103_60
.LBB103_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB103_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB103_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB103_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_36:                             # %for.cond83
                                        #   Parent Loop BB103_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB103_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB103_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_36
.LBB103_39:                             # %for.end120
                                        #   in Loop: Header=BB103_34 Depth=1
	jmp	.LBB103_40
.LBB103_40:                             # %for.inc121
                                        #   in Loop: Header=BB103_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_34
.LBB103_41:                             # %for.end123
	jmp	.LBB103_51
.LBB103_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_45:                             # %for.cond129
                                        #   Parent Loop BB103_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB103_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB103_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_45
.LBB103_48:                             # %for.end145
                                        #   in Loop: Header=BB103_43 Depth=1
	jmp	.LBB103_49
.LBB103_49:                             # %for.inc146
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_43
.LBB103_50:                             # %for.end148
	jmp	.LBB103_51
.LBB103_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_54:                             # %for.cond153
                                        #   Parent Loop BB103_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB103_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB103_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_54
.LBB103_57:                             # %for.end167
                                        #   in Loop: Header=BB103_52 Depth=1
	jmp	.LBB103_58
.LBB103_58:                             # %for.inc168
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_52
.LBB103_59:                             # %for.end170
	jmp	.LBB103_60
.LBB103_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB103_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB103_66
.LBB103_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB103_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB103_86
.LBB103_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_69 Depth 2
                                        #       Child Loop BB103_74 Depth 3
                                        #         Child Loop BB103_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB103_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_69:                             # %for.cond197
                                        #   Parent Loop BB103_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_74 Depth 3
                                        #         Child Loop BB103_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB103_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB103_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB103_73:                             # %if.end218
                                        #   in Loop: Header=BB103_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB103_74:                             # %for.cond233
                                        #   Parent Loop BB103_67 Depth=1
                                        #     Parent Loop BB103_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB103_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB103_74 Depth=3
	movl	$0, -4(%rbp)
.LBB103_76:                             # %for.cond237
                                        #   Parent Loop BB103_67 Depth=1
                                        #     Parent Loop BB103_69 Depth=2
                                        #       Parent Loop BB103_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB103_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB103_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB103_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_76
.LBB103_79:                             # %for.end269
                                        #   in Loop: Header=BB103_74 Depth=3
	jmp	.LBB103_80
.LBB103_80:                             # %for.inc270
                                        #   in Loop: Header=BB103_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_74
.LBB103_81:                             # %for.end272
                                        #   in Loop: Header=BB103_69 Depth=2
	jmp	.LBB103_82
.LBB103_82:                             # %for.inc273
                                        #   in Loop: Header=BB103_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_69
.LBB103_83:                             # %for.end275
                                        #   in Loop: Header=BB103_67 Depth=1
	jmp	.LBB103_84
.LBB103_84:                             # %for.inc276
                                        #   in Loop: Header=BB103_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_67
.LBB103_85:                             # %for.end278
	jmp	.LBB103_95
.LBB103_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB103_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_89:                             # %for.cond284
                                        #   Parent Loop BB103_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB103_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB103_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_89
.LBB103_92:                             # %for.end310
                                        #   in Loop: Header=BB103_87 Depth=1
	jmp	.LBB103_93
.LBB103_93:                             # %for.inc311
                                        #   in Loop: Header=BB103_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_87
.LBB103_94:                             # %for.end313
	jmp	.LBB103_95
.LBB103_95:                             # %if.end314
	jmp	.LBB103_96
.LBB103_96:                             # %if.end315
	cmpl	$2001608138, -84(%rbp)  # imm = 0x774E1DCA
	jne	.LBB103_98
.LBB103_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_97
.Lfunc_end103:
	.size	decode_one_b8block.93, .Lfunc_end103-decode_one_b8block.93
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.94   # -- Begin function decode_one_b8block.94
	.p2align	4, 0x90
	.type	decode_one_b8block.94,@function
decode_one_b8block.94:                  # @decode_one_b8block.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1344553188, -84(%rbp)  # imm = 0x502440E4
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB104_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB104_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_4:                              # %for.cond9
                                        #   Parent Loop BB104_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB104_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB104_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB104_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_4
.LBB104_7:                              # %for.end
                                        #   in Loop: Header=BB104_2 Depth=1
	jmp	.LBB104_8
.LBB104_8:                              # %for.inc26
                                        #   in Loop: Header=BB104_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_2
.LBB104_9:                              # %for.end28
	jmp	.LBB104_96
.LBB104_10:                             # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB104_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB104_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB104_31
.LBB104_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB104_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB104_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_17:                             # %for.cond40
                                        #   Parent Loop BB104_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB104_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB104_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB104_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_17
.LBB104_20:                             # %for.end49
                                        #   in Loop: Header=BB104_15 Depth=1
	jmp	.LBB104_21
.LBB104_21:                             # %for.inc50
                                        #   in Loop: Header=BB104_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_15
.LBB104_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB104_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB104_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB104_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB104_25:                             # %for.cond56
                                        #   Parent Loop BB104_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB104_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB104_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_25
.LBB104_28:                             # %for.end71
                                        #   in Loop: Header=BB104_23 Depth=1
	jmp	.LBB104_29
.LBB104_29:                             # %for.inc72
                                        #   in Loop: Header=BB104_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_23
.LBB104_30:                             # %for.end74
	jmp	.LBB104_60
.LBB104_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB104_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB104_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB104_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB104_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB104_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB104_36:                             # %for.cond83
                                        #   Parent Loop BB104_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB104_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB104_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_36
.LBB104_39:                             # %for.end120
                                        #   in Loop: Header=BB104_34 Depth=1
	jmp	.LBB104_40
.LBB104_40:                             # %for.inc121
                                        #   in Loop: Header=BB104_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_34
.LBB104_41:                             # %for.end123
	jmp	.LBB104_51
.LBB104_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB104_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB104_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB104_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB104_45:                             # %for.cond129
                                        #   Parent Loop BB104_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB104_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB104_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_45
.LBB104_48:                             # %for.end145
                                        #   in Loop: Header=BB104_43 Depth=1
	jmp	.LBB104_49
.LBB104_49:                             # %for.inc146
                                        #   in Loop: Header=BB104_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_43
.LBB104_50:                             # %for.end148
	jmp	.LBB104_51
.LBB104_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB104_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB104_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_54:                             # %for.cond153
                                        #   Parent Loop BB104_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB104_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB104_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB104_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_54
.LBB104_57:                             # %for.end167
                                        #   in Loop: Header=BB104_52 Depth=1
	jmp	.LBB104_58
.LBB104_58:                             # %for.inc168
                                        #   in Loop: Header=BB104_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_52
.LBB104_59:                             # %for.end170
	jmp	.LBB104_60
.LBB104_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB104_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB104_66
.LBB104_62:                             # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB104_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB104_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB104_86
.LBB104_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB104_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_69 Depth 2
                                        #       Child Loop BB104_74 Depth 3
                                        #         Child Loop BB104_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB104_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB104_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB104_69:                             # %for.cond197
                                        #   Parent Loop BB104_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_74 Depth 3
                                        #         Child Loop BB104_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB104_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB104_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB104_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB104_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB104_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB104_73:                             # %if.end218
                                        #   in Loop: Header=BB104_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB104_74:                             # %for.cond233
                                        #   Parent Loop BB104_67 Depth=1
                                        #     Parent Loop BB104_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB104_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB104_74 Depth=3
	movl	$0, -8(%rbp)
.LBB104_76:                             # %for.cond237
                                        #   Parent Loop BB104_67 Depth=1
                                        #     Parent Loop BB104_69 Depth=2
                                        #       Parent Loop BB104_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB104_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB104_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB104_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_76
.LBB104_79:                             # %for.end269
                                        #   in Loop: Header=BB104_74 Depth=3
	jmp	.LBB104_80
.LBB104_80:                             # %for.inc270
                                        #   in Loop: Header=BB104_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_74
.LBB104_81:                             # %for.end272
                                        #   in Loop: Header=BB104_69 Depth=2
	jmp	.LBB104_82
.LBB104_82:                             # %for.inc273
                                        #   in Loop: Header=BB104_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_69
.LBB104_83:                             # %for.end275
                                        #   in Loop: Header=BB104_67 Depth=1
	jmp	.LBB104_84
.LBB104_84:                             # %for.inc276
                                        #   in Loop: Header=BB104_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_67
.LBB104_85:                             # %for.end278
	jmp	.LBB104_95
.LBB104_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB104_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB104_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB104_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB104_89:                             # %for.cond284
                                        #   Parent Loop BB104_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB104_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB104_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB104_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_89
.LBB104_92:                             # %for.end310
                                        #   in Loop: Header=BB104_87 Depth=1
	jmp	.LBB104_93
.LBB104_93:                             # %for.inc311
                                        #   in Loop: Header=BB104_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_87
.LBB104_94:                             # %for.end313
	jmp	.LBB104_95
.LBB104_95:                             # %if.end314
	jmp	.LBB104_96
.LBB104_96:                             # %if.end315
	cmpl	$1344553188, -84(%rbp)  # imm = 0x502440E4
	jne	.LBB104_98
.LBB104_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_97
.Lfunc_end104:
	.size	decode_one_b8block.94, .Lfunc_end104-decode_one_b8block.94
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.95
.LCPI105_0:
	.quad	4636737291354636288     # double 100
.LCPI105_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.95
	.p2align	4, 0x90
	.type	Build_Status_Map.95,@function
Build_Status_Map.95:                    # @Build_Status_Map.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$952629002, -44(%rbp)   # imm = 0x38C7F70A
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB105_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB105_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	$0, -8(%rbp)
.LBB105_3:                              # %for.cond2
                                        #   Parent Loop BB105_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB105_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB105_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB105_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB105_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB105_13
.LBB105_6:                              # %if.then
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB105_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB105_8:                              # %if.end
                                        #   in Loop: Header=BB105_3 Depth=2
	callq	rand
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB105_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB105_10:                             # %if.end20
                                        #   in Loop: Header=BB105_3 Depth=2
	callq	rand
	vmovsd	.LCPI105_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB105_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	$1, -4(%rbp)
.LBB105_12:                             # %if.end29
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB105_13:                             # %if.end30
                                        #   in Loop: Header=BB105_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB105_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB105_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB105_18
.LBB105_15:                             # %if.else
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB105_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB105_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB105_17:                             # %if.end49
                                        #   in Loop: Header=BB105_3 Depth=2
	jmp	.LBB105_18
.LBB105_18:                             # %if.end50
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB105_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_3
.LBB105_20:                             # %for.end
                                        #   in Loop: Header=BB105_1 Depth=1
	jmp	.LBB105_21
.LBB105_21:                             # %for.inc53
                                        #   in Loop: Header=BB105_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_1
.LBB105_22:                             # %for.end55
	cmpl	$952629002, -44(%rbp)   # imm = 0x38C7F70A
	jne	.LBB105_24
.LBB105_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_23
.Lfunc_end105:
	.size	Build_Status_Map.95, .Lfunc_end105-Build_Status_Map.95
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.96   # -- Begin function decode_one_b8block.96
	.p2align	4, 0x90
	.type	decode_one_b8block.96,@function
decode_one_b8block.96:                  # @decode_one_b8block.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$735056558, -84(%rbp)   # imm = 0x2BD012AE
	movl	%edi, -52(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB106_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB106_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_4:                              # %for.cond9
                                        #   Parent Loop BB106_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB106_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB106_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_4
.LBB106_7:                              # %for.end
                                        #   in Loop: Header=BB106_2 Depth=1
	jmp	.LBB106_8
.LBB106_8:                              # %for.inc26
                                        #   in Loop: Header=BB106_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_2
.LBB106_9:                              # %for.end28
	jmp	.LBB106_96
.LBB106_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB106_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB106_31
.LBB106_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB106_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_17:                             # %for.cond40
                                        #   Parent Loop BB106_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB106_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB106_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_17
.LBB106_20:                             # %for.end49
                                        #   in Loop: Header=BB106_15 Depth=1
	jmp	.LBB106_21
.LBB106_21:                             # %for.inc50
                                        #   in Loop: Header=BB106_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_15
.LBB106_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB106_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_25:                             # %for.cond56
                                        #   Parent Loop BB106_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB106_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB106_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_25
.LBB106_28:                             # %for.end71
                                        #   in Loop: Header=BB106_23 Depth=1
	jmp	.LBB106_29
.LBB106_29:                             # %for.inc72
                                        #   in Loop: Header=BB106_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_23
.LBB106_30:                             # %for.end74
	jmp	.LBB106_60
.LBB106_31:                             # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB106_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB106_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB106_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_36:                             # %for.cond83
                                        #   Parent Loop BB106_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB106_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB106_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_36
.LBB106_39:                             # %for.end120
                                        #   in Loop: Header=BB106_34 Depth=1
	jmp	.LBB106_40
.LBB106_40:                             # %for.inc121
                                        #   in Loop: Header=BB106_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_34
.LBB106_41:                             # %for.end123
	jmp	.LBB106_51
.LBB106_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB106_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_45:                             # %for.cond129
                                        #   Parent Loop BB106_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB106_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB106_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_45
.LBB106_48:                             # %for.end145
                                        #   in Loop: Header=BB106_43 Depth=1
	jmp	.LBB106_49
.LBB106_49:                             # %for.inc146
                                        #   in Loop: Header=BB106_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_43
.LBB106_50:                             # %for.end148
	jmp	.LBB106_51
.LBB106_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB106_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_54:                             # %for.cond153
                                        #   Parent Loop BB106_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB106_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB106_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_54
.LBB106_57:                             # %for.end167
                                        #   in Loop: Header=BB106_52 Depth=1
	jmp	.LBB106_58
.LBB106_58:                             # %for.inc168
                                        #   in Loop: Header=BB106_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_52
.LBB106_59:                             # %for.end170
	jmp	.LBB106_60
.LBB106_60:                             # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB106_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB106_66
.LBB106_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB106_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB106_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB106_86
.LBB106_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB106_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_69 Depth 2
                                        #       Child Loop BB106_74 Depth 3
                                        #         Child Loop BB106_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB106_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB106_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB106_69:                             # %for.cond197
                                        #   Parent Loop BB106_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB106_74 Depth 3
                                        #         Child Loop BB106_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB106_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB106_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB106_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB106_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB106_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB106_73:                             # %if.end218
                                        #   in Loop: Header=BB106_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB106_74:                             # %for.cond233
                                        #   Parent Loop BB106_67 Depth=1
                                        #     Parent Loop BB106_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB106_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB106_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB106_74 Depth=3
	movl	$0, -8(%rbp)
.LBB106_76:                             # %for.cond237
                                        #   Parent Loop BB106_67 Depth=1
                                        #     Parent Loop BB106_69 Depth=2
                                        #       Parent Loop BB106_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB106_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB106_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB106_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_76
.LBB106_79:                             # %for.end269
                                        #   in Loop: Header=BB106_74 Depth=3
	jmp	.LBB106_80
.LBB106_80:                             # %for.inc270
                                        #   in Loop: Header=BB106_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_74
.LBB106_81:                             # %for.end272
                                        #   in Loop: Header=BB106_69 Depth=2
	jmp	.LBB106_82
.LBB106_82:                             # %for.inc273
                                        #   in Loop: Header=BB106_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_69
.LBB106_83:                             # %for.end275
                                        #   in Loop: Header=BB106_67 Depth=1
	jmp	.LBB106_84
.LBB106_84:                             # %for.inc276
                                        #   in Loop: Header=BB106_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_67
.LBB106_85:                             # %for.end278
	jmp	.LBB106_95
.LBB106_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB106_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB106_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_89:                             # %for.cond284
                                        #   Parent Loop BB106_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB106_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB106_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB106_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_89
.LBB106_92:                             # %for.end310
                                        #   in Loop: Header=BB106_87 Depth=1
	jmp	.LBB106_93
.LBB106_93:                             # %for.inc311
                                        #   in Loop: Header=BB106_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_87
.LBB106_94:                             # %for.end313
	jmp	.LBB106_95
.LBB106_95:                             # %if.end314
	jmp	.LBB106_96
.LBB106_96:                             # %if.end315
	cmpl	$735056558, -84(%rbp)   # imm = 0x2BD012AE
	jne	.LBB106_98
.LBB106_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_97
.Lfunc_end106:
	.size	decode_one_b8block.96, .Lfunc_end106-decode_one_b8block.96
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.97  # -- Begin function Get_Reference_Block.97
	.p2align	4, 0x90
	.type	Get_Reference_Block.97,@function
Get_Reference_Block.97:                 # @Get_Reference_Block.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1471192167, -16(%rbp)  # imm = 0x57B09C67
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB107_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB107_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	$0, -4(%rbp)
.LBB107_3:                              # %for.cond5
                                        #   Parent Loop BB107_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB107_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB107_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB107_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_3
.LBB107_6:                              # %for.end
                                        #   in Loop: Header=BB107_1 Depth=1
	jmp	.LBB107_7
.LBB107_7:                              # %for.inc14
                                        #   in Loop: Header=BB107_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_1
.LBB107_8:                              # %for.end16
	cmpl	$1471192167, -16(%rbp)  # imm = 0x57B09C67
	jne	.LBB107_10
.LBB107_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_9
.Lfunc_end107:
	.size	Get_Reference_Block.97, .Lfunc_end107-Get_Reference_Block.97
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.98
.LCPI108_0:
	.quad	4636737291354636288     # double 100
.LCPI108_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.98
	.p2align	4, 0x90
	.type	Build_Status_Map.98,@function
Build_Status_Map.98:                    # @Build_Status_Map.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$129832980, -36(%rbp)   # imm = 0x7BD1814
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	$0, -8(%rbp)
.LBB108_3:                              # %for.cond2
                                        #   Parent Loop BB108_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB108_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB108_13
.LBB108_6:                              # %if.then
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI108_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB108_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB108_8:                              # %if.end
                                        #   in Loop: Header=BB108_3 Depth=2
	callq	rand
	vmovsd	.LCPI108_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB108_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB108_10:                             # %if.end20
                                        #   in Loop: Header=BB108_3 Depth=2
	callq	rand
	vmovsd	.LCPI108_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB108_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	$1, -4(%rbp)
.LBB108_12:                             # %if.end29
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB108_13:                             # %if.end30
                                        #   in Loop: Header=BB108_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB108_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB108_18
.LBB108_15:                             # %if.else
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB108_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB108_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB108_17:                             # %if.end49
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_18
.LBB108_18:                             # %if.end50
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_3
.LBB108_20:                             # %for.end
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_21
.LBB108_21:                             # %for.inc53
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_1
.LBB108_22:                             # %for.end55
	cmpl	$129832980, -36(%rbp)   # imm = 0x7BD1814
	jne	.LBB108_24
.LBB108_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_23
.Lfunc_end108:
	.size	Build_Status_Map.98, .Lfunc_end108-Build_Status_Map.98
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.99    # -- Begin function Error_Concealment.99
	.p2align	4, 0x90
	.type	Error_Concealment.99,@function
Error_Concealment.99:                   # @Error_Concealment.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1319224040, -16(%rbp)  # imm = 0x4EA1C2E8
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB109_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	$0, -4(%rbp)
.LBB109_3:                              # %for.cond2
                                        #   Parent Loop BB109_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB109_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB109_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB109_6:                              # %if.end
                                        #   in Loop: Header=BB109_3 Depth=2
	jmp	.LBB109_7
.LBB109_7:                              # %for.inc
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_3
.LBB109_8:                              # %for.end
                                        #   in Loop: Header=BB109_1 Depth=1
	jmp	.LBB109_9
.LBB109_9:                              # %for.inc7
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_1
.LBB109_10:                             # %for.end9
	cmpl	$1319224040, -16(%rbp)  # imm = 0x4EA1C2E8
	jne	.LBB109_12
.LBB109_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_11
.Lfunc_end109:
	.size	Error_Concealment.99, .Lfunc_end109-Error_Concealment.99
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.100
.LCPI110_0:
	.quad	4636737291354636288     # double 100
.LCPI110_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.100
	.p2align	4, 0x90
	.type	Build_Status_Map.100,@function
Build_Status_Map.100:                   # @Build_Status_Map.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$259751266, -44(%rbp)   # imm = 0xF7B7D62
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB110_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	$0, -8(%rbp)
.LBB110_3:                              # %for.cond2
                                        #   Parent Loop BB110_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB110_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB110_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB110_13
.LBB110_6:                              # %if.then
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB110_8:                              # %if.end
                                        #   in Loop: Header=BB110_3 Depth=2
	callq	rand
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB110_10:                             # %if.end20
                                        #   in Loop: Header=BB110_3 Depth=2
	callq	rand
	vmovsd	.LCPI110_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI110_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB110_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	$1, -4(%rbp)
.LBB110_12:                             # %if.end29
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB110_13:                             # %if.end30
                                        #   in Loop: Header=BB110_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB110_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB110_18
.LBB110_15:                             # %if.else
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB110_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB110_17:                             # %if.end49
                                        #   in Loop: Header=BB110_3 Depth=2
	jmp	.LBB110_18
.LBB110_18:                             # %if.end50
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_3
.LBB110_20:                             # %for.end
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_21
.LBB110_21:                             # %for.inc53
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_1
.LBB110_22:                             # %for.end55
	cmpl	$259751266, -44(%rbp)   # imm = 0xF7B7D62
	jne	.LBB110_24
.LBB110_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_23
.Lfunc_end110:
	.size	Build_Status_Map.100, .Lfunc_end110-Build_Status_Map.100
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.101      # -- Begin function DecOneForthPix.101
	.p2align	4, 0x90
	.type	DecOneForthPix.101,@function
DecOneForthPix.101:                     # @DecOneForthPix.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$316597345, -8(%rbp)    # imm = 0x12DEE461
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB111_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_1
.LBB111_4:                              # %for.end
	cmpl	$316597345, -8(%rbp)    # imm = 0x12DEE461
	jne	.LBB111_6
.LBB111_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_5
.Lfunc_end111:
	.size	DecOneForthPix.101, .Lfunc_end111-DecOneForthPix.101
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.102  # -- Begin function decode_one_b8block.102
	.p2align	4, 0x90
	.type	decode_one_b8block.102,@function
decode_one_b8block.102:                 # @decode_one_b8block.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1005275504, -84(%rbp)  # imm = 0x3BEB4970
	movl	%edi, -40(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB112_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB112_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB112_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_4:                              # %for.cond9
                                        #   Parent Loop BB112_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB112_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB112_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB112_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_4
.LBB112_7:                              # %for.end
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_8
.LBB112_8:                              # %for.inc26
                                        #   in Loop: Header=BB112_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_2
.LBB112_9:                              # %for.end28
	jmp	.LBB112_96
.LBB112_10:                             # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB112_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB112_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB112_31
.LBB112_14:                             # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB112_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB112_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_17:                             # %for.cond40
                                        #   Parent Loop BB112_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB112_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB112_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB112_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_17
.LBB112_20:                             # %for.end49
                                        #   in Loop: Header=BB112_15 Depth=1
	jmp	.LBB112_21
.LBB112_21:                             # %for.inc50
                                        #   in Loop: Header=BB112_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_15
.LBB112_22:                             # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB112_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB112_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB112_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB112_25:                             # %for.cond56
                                        #   Parent Loop BB112_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB112_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB112_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB112_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_25
.LBB112_28:                             # %for.end71
                                        #   in Loop: Header=BB112_23 Depth=1
	jmp	.LBB112_29
.LBB112_29:                             # %for.inc72
                                        #   in Loop: Header=BB112_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_23
.LBB112_30:                             # %for.end74
	jmp	.LBB112_60
.LBB112_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB112_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB112_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB112_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB112_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB112_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB112_36:                             # %for.cond83
                                        #   Parent Loop BB112_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB112_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB112_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB112_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_36
.LBB112_39:                             # %for.end120
                                        #   in Loop: Header=BB112_34 Depth=1
	jmp	.LBB112_40
.LBB112_40:                             # %for.inc121
                                        #   in Loop: Header=BB112_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_34
.LBB112_41:                             # %for.end123
	jmp	.LBB112_51
.LBB112_42:                             # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB112_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB112_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB112_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB112_45:                             # %for.cond129
                                        #   Parent Loop BB112_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB112_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB112_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB112_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_45
.LBB112_48:                             # %for.end145
                                        #   in Loop: Header=BB112_43 Depth=1
	jmp	.LBB112_49
.LBB112_49:                             # %for.inc146
                                        #   in Loop: Header=BB112_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_43
.LBB112_50:                             # %for.end148
	jmp	.LBB112_51
.LBB112_51:                             # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB112_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB112_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_54:                             # %for.cond153
                                        #   Parent Loop BB112_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB112_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB112_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB112_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_54
.LBB112_57:                             # %for.end167
                                        #   in Loop: Header=BB112_52 Depth=1
	jmp	.LBB112_58
.LBB112_58:                             # %for.inc168
                                        #   in Loop: Header=BB112_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_52
.LBB112_59:                             # %for.end170
	jmp	.LBB112_60
.LBB112_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB112_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB112_66
.LBB112_62:                             # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB112_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB112_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB112_86
.LBB112_66:                             # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB112_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_69 Depth 2
                                        #       Child Loop BB112_74 Depth 3
                                        #         Child Loop BB112_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB112_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB112_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB112_69:                             # %for.cond197
                                        #   Parent Loop BB112_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB112_74 Depth 3
                                        #         Child Loop BB112_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB112_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB112_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB112_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB112_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB112_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB112_73:                             # %if.end218
                                        #   in Loop: Header=BB112_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB112_74:                             # %for.cond233
                                        #   Parent Loop BB112_67 Depth=1
                                        #     Parent Loop BB112_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB112_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB112_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB112_74 Depth=3
	movl	$0, -4(%rbp)
.LBB112_76:                             # %for.cond237
                                        #   Parent Loop BB112_67 Depth=1
                                        #     Parent Loop BB112_69 Depth=2
                                        #       Parent Loop BB112_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB112_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB112_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB112_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_76
.LBB112_79:                             # %for.end269
                                        #   in Loop: Header=BB112_74 Depth=3
	jmp	.LBB112_80
.LBB112_80:                             # %for.inc270
                                        #   in Loop: Header=BB112_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_74
.LBB112_81:                             # %for.end272
                                        #   in Loop: Header=BB112_69 Depth=2
	jmp	.LBB112_82
.LBB112_82:                             # %for.inc273
                                        #   in Loop: Header=BB112_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_69
.LBB112_83:                             # %for.end275
                                        #   in Loop: Header=BB112_67 Depth=1
	jmp	.LBB112_84
.LBB112_84:                             # %for.inc276
                                        #   in Loop: Header=BB112_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_67
.LBB112_85:                             # %for.end278
	jmp	.LBB112_95
.LBB112_86:                             # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB112_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB112_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_89:                             # %for.cond284
                                        #   Parent Loop BB112_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB112_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB112_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB112_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_89
.LBB112_92:                             # %for.end310
                                        #   in Loop: Header=BB112_87 Depth=1
	jmp	.LBB112_93
.LBB112_93:                             # %for.inc311
                                        #   in Loop: Header=BB112_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_87
.LBB112_94:                             # %for.end313
	jmp	.LBB112_95
.LBB112_95:                             # %if.end314
	jmp	.LBB112_96
.LBB112_96:                             # %if.end315
	cmpl	$1005275504, -84(%rbp)  # imm = 0x3BEB4970
	jne	.LBB112_98
.LBB112_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_97
.Lfunc_end112:
	.size	decode_one_b8block.102, .Lfunc_end112-decode_one_b8block.102
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.103
.LCPI113_0:
	.quad	4636737291354636288     # double 100
.LCPI113_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.103
	.p2align	4, 0x90
	.type	Build_Status_Map.103,@function
Build_Status_Map.103:                   # @Build_Status_Map.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1794433634, -44(%rbp)  # imm = 0x6AF4E262
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB113_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB113_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	$0, -8(%rbp)
.LBB113_3:                              # %for.cond2
                                        #   Parent Loop BB113_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB113_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB113_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB113_13
.LBB113_6:                              # %if.then
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI113_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI113_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB113_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB113_8:                              # %if.end
                                        #   in Loop: Header=BB113_3 Depth=2
	callq	rand
	vmovsd	.LCPI113_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI113_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB113_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB113_10:                             # %if.end20
                                        #   in Loop: Header=BB113_3 Depth=2
	callq	rand
	vmovsd	.LCPI113_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI113_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB113_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	$1, -4(%rbp)
.LBB113_12:                             # %if.end29
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB113_13:                             # %if.end30
                                        #   in Loop: Header=BB113_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB113_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB113_18
.LBB113_15:                             # %if.else
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB113_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB113_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB113_17:                             # %if.end49
                                        #   in Loop: Header=BB113_3 Depth=2
	jmp	.LBB113_18
.LBB113_18:                             # %if.end50
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB113_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_3
.LBB113_20:                             # %for.end
                                        #   in Loop: Header=BB113_1 Depth=1
	jmp	.LBB113_21
.LBB113_21:                             # %for.inc53
                                        #   in Loop: Header=BB113_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_1
.LBB113_22:                             # %for.end55
	cmpl	$1794433634, -44(%rbp)  # imm = 0x6AF4E262
	jne	.LBB113_24
.LBB113_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_23
.Lfunc_end113:
	.size	Build_Status_Map.103, .Lfunc_end113-Build_Status_Map.103
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.104
.LCPI114_0:
	.quad	4636737291354636288     # double 100
.LCPI114_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.104
	.p2align	4, 0x90
	.type	Build_Status_Map.104,@function
Build_Status_Map.104:                   # @Build_Status_Map.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1684732087, -44(%rbp)  # imm = 0x646AF8B7
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB114_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	$0, -12(%rbp)
.LBB114_3:                              # %for.cond2
                                        #   Parent Loop BB114_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB114_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB114_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB114_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB114_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB114_13
.LBB114_6:                              # %if.then
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI114_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI114_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB114_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB114_8:                              # %if.end
                                        #   in Loop: Header=BB114_3 Depth=2
	callq	rand
	vmovsd	.LCPI114_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI114_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB114_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB114_10:                             # %if.end20
                                        #   in Loop: Header=BB114_3 Depth=2
	callq	rand
	vmovsd	.LCPI114_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI114_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB114_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	$1, -4(%rbp)
.LBB114_12:                             # %if.end29
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB114_13:                             # %if.end30
                                        #   in Loop: Header=BB114_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB114_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB114_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB114_18
.LBB114_15:                             # %if.else
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB114_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB114_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB114_17:                             # %if.end49
                                        #   in Loop: Header=BB114_3 Depth=2
	jmp	.LBB114_18
.LBB114_18:                             # %if.end50
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB114_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_3
.LBB114_20:                             # %for.end
                                        #   in Loop: Header=BB114_1 Depth=1
	jmp	.LBB114_21
.LBB114_21:                             # %for.inc53
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_1
.LBB114_22:                             # %for.end55
	cmpl	$1684732087, -44(%rbp)  # imm = 0x646AF8B7
	jne	.LBB114_24
.LBB114_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_23
.Lfunc_end114:
	.size	Build_Status_Map.104, .Lfunc_end114-Build_Status_Map.104
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.105 # -- Begin function Get_Reference_Pixel.105
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.105,@function
Get_Reference_Pixel.105:                # @Get_Reference_Pixel.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1991811016, -100(%rbp) # imm = 0x76B89FC8
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB115_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB115_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB115_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB115_5
.LBB115_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB115_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB115_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB115_11
.LBB115_7:                              # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB115_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB115_10
.LBB115_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB115_10:                             # %cond.end14
.LBB115_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB115_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB115_14
.LBB115_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB115_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB115_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB115_20
.LBB115_16:                             # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB115_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB115_19
.LBB115_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB115_19:                             # %cond.end29
.LBB115_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_332
.LBB115_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB115_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB115_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB115_25
.LBB115_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB115_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB115_31
.LBB115_27:                             # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB115_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB115_30
.LBB115_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB115_30:                             # %cond.end52
.LBB115_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB115_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_36
.LBB115_35:                             # %cond.false61
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_36:                             # %cond.end63
                                        #   in Loop: Header=BB115_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB115_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_42
.LBB115_38:                             # %cond.false68
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_41
.LBB115_40:                             # %cond.false73
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_41:                             # %cond.end75
                                        #   in Loop: Header=BB115_32 Depth=1
.LBB115_42:                             # %cond.end77
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB115_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_32
.LBB115_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_47
.LBB115_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB115_53
.LBB115_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_52
.LBB115_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_52:                             # %cond.end113
.LBB115_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB115_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB115_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB115_57
.LBB115_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB115_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB115_63
.LBB115_59:                             # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB115_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB115_62
.LBB115_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB115_62:                             # %cond.end136
.LBB115_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_76
.LBB115_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB115_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB115_68
.LBB115_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB115_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB115_74
.LBB115_70:                             # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB115_73
.LBB115_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB115_73:                             # %cond.end169
.LBB115_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_75:                             # %if.end
	jmp	.LBB115_76
.LBB115_76:                             # %if.end178
	jmp	.LBB115_331
.LBB115_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB115_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB115_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB115_81
.LBB115_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB115_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB115_87
.LBB115_83:                             # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB115_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB115_86
.LBB115_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB115_86:                             # %cond.end197
.LBB115_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB115_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_92
.LBB115_91:                             # %cond.false209
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_92:                             # %cond.end211
                                        #   in Loop: Header=BB115_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB115_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_98
.LBB115_94:                             # %cond.false216
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_97
.LBB115_96:                             # %cond.false221
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_97:                             # %cond.end223
                                        #   in Loop: Header=BB115_88 Depth=1
.LBB115_98:                             # %cond.end225
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_88
.LBB115_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_103
.LBB115_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB115_109
.LBB115_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_108
.LBB115_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_108:                            # %cond.end266
.LBB115_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB115_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB115_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB115_113
.LBB115_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB115_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB115_119
.LBB115_115:                            # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB115_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB115_118
.LBB115_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB115_118:                            # %cond.end287
.LBB115_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_132
.LBB115_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB115_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB115_124
.LBB115_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB115_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB115_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB115_130
.LBB115_126:                            # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB115_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB115_129
.LBB115_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB115_129:                            # %cond.end320
.LBB115_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_131:                            # %if.end331
	jmp	.LBB115_132
.LBB115_132:                            # %if.end332
	jmp	.LBB115_330
.LBB115_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB115_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB115_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB115_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_139
.LBB115_138:                            # %cond.false345
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_139:                            # %cond.end347
                                        #   in Loop: Header=BB115_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB115_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_145
.LBB115_141:                            # %cond.false352
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_144
.LBB115_143:                            # %cond.false357
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_144:                            # %cond.end359
                                        #   in Loop: Header=BB115_135 Depth=1
.LBB115_145:                            # %cond.end361
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_146:                            # %for.cond363
                                        #   Parent Loop BB115_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB115_150
.LBB115_149:                            # %cond.false371
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_150:                            # %cond.end373
                                        #   in Loop: Header=BB115_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB115_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_156
.LBB115_152:                            # %cond.false378
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB115_155
.LBB115_154:                            # %cond.false383
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_155:                            # %cond.end385
                                        #   in Loop: Header=BB115_146 Depth=2
.LBB115_156:                            # %cond.end387
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB115_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_146
.LBB115_158:                            # %for.end401
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB115_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_135
.LBB115_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB115_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB115_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB115_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_161
.LBB115_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_167
.LBB115_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB115_173
.LBB115_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_172
.LBB115_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_172:                            # %cond.end449
.LBB115_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB115_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_177
.LBB115_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB115_183
.LBB115_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_182
.LBB115_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_182:                            # %cond.end486
.LBB115_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_196
.LBB115_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB115_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_188
.LBB115_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB115_194
.LBB115_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_193
.LBB115_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_193:                            # %cond.end526
.LBB115_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_195:                            # %if.end532
	jmp	.LBB115_196
.LBB115_196:                            # %if.end533
	jmp	.LBB115_329
.LBB115_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB115_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB115_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB115_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_203
.LBB115_202:                            # %cond.false546
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_203:                            # %cond.end548
                                        #   in Loop: Header=BB115_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB115_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_209
.LBB115_205:                            # %cond.false553
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_208
.LBB115_207:                            # %cond.false558
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_208:                            # %cond.end560
                                        #   in Loop: Header=BB115_199 Depth=1
.LBB115_209:                            # %cond.end562
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_210:                            # %for.cond564
                                        #   Parent Loop BB115_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB115_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB115_214
.LBB115_213:                            # %cond.false572
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_214:                            # %cond.end574
                                        #   in Loop: Header=BB115_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB115_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB115_220
.LBB115_216:                            # %cond.false579
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB115_219
.LBB115_218:                            # %cond.false584
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_219:                            # %cond.end586
                                        #   in Loop: Header=BB115_210 Depth=2
.LBB115_220:                            # %cond.end588
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB115_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_210
.LBB115_222:                            # %for.end602
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB115_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_199
.LBB115_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB115_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB115_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB115_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_225
.LBB115_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_231
.LBB115_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB115_237
.LBB115_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_236
.LBB115_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB115_236:                            # %cond.end650
.LBB115_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB115_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_241
.LBB115_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB115_247
.LBB115_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_246
.LBB115_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_246:                            # %cond.end687
.LBB115_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB115_258
.LBB115_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_251
.LBB115_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB115_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB115_257
.LBB115_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB115_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_256
.LBB115_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB115_256:                            # %cond.end724
.LBB115_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_258:                            # %if.end730
	jmp	.LBB115_328
.LBB115_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB115_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB115_262
.LBB115_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB115_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB115_265
.LBB115_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB115_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB115_271
.LBB115_267:                            # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB115_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB115_270
.LBB115_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB115_270:                            # %cond.end753
.LBB115_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB115_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB115_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_276
.LBB115_275:                            # %cond.false765
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_276:                            # %cond.end767
                                        #   in Loop: Header=BB115_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB115_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_282
.LBB115_278:                            # %cond.false772
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB115_281
.LBB115_280:                            # %cond.false777
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB115_281:                            # %cond.end779
                                        #   in Loop: Header=BB115_272 Depth=1
.LBB115_282:                            # %cond.end781
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB115_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_272
.LBB115_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_287
.LBB115_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB115_293
.LBB115_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_292
.LBB115_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_292:                            # %cond.end822
.LBB115_293:                            # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB115_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB115_296
.LBB115_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB115_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB115_299
.LBB115_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB115_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB115_305
.LBB115_301:                            # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB115_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB115_304
.LBB115_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB115_304:                            # %cond.end847
.LBB115_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB115_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB115_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_310
.LBB115_309:                            # %cond.false859
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_310:                            # %cond.end861
                                        #   in Loop: Header=BB115_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB115_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_316
.LBB115_312:                            # %cond.false866
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB115_315
.LBB115_314:                            # %cond.false871
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB115_315:                            # %cond.end873
                                        #   in Loop: Header=BB115_306 Depth=1
.LBB115_316:                            # %cond.end875
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB115_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_306
.LBB115_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_321
.LBB115_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB115_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB115_327
.LBB115_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB115_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB115_326
.LBB115_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB115_326:                            # %cond.end916
.LBB115_327:                            # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB115_328:                            # %if.end922
	jmp	.LBB115_329
.LBB115_329:                            # %if.end923
	jmp	.LBB115_330
.LBB115_330:                            # %if.end924
	jmp	.LBB115_331
.LBB115_331:                            # %if.end925
	jmp	.LBB115_332
.LBB115_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1991811016, -100(%rbp) # imm = 0x76B89FC8
	jne	.LBB115_334
.LBB115_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_333
.Lfunc_end115:
	.size	Get_Reference_Pixel.105, .Lfunc_end115-Get_Reference_Pixel.105
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.106      # -- Begin function DecOneForthPix.106
	.p2align	4, 0x90
	.type	DecOneForthPix.106,@function
DecOneForthPix.106:                     # @DecOneForthPix.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$962618073, -12(%rbp)   # imm = 0x396062D9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB116_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_1
.LBB116_4:                              # %for.end
	cmpl	$962618073, -12(%rbp)   # imm = 0x396062D9
	jne	.LBB116_6
.LBB116_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_5
.Lfunc_end116:
	.size	DecOneForthPix.106, .Lfunc_end116-DecOneForthPix.106
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.107   # -- Begin function Error_Concealment.107
	.p2align	4, 0x90
	.type	Error_Concealment.107,@function
Error_Concealment.107:                  # @Error_Concealment.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1742411473, -16(%rbp)  # imm = 0x67DB16D1
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB117_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB117_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	$0, -4(%rbp)
.LBB117_3:                              # %for.cond2
                                        #   Parent Loop BB117_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB117_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB117_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB117_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB117_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB117_6:                              # %if.end
                                        #   in Loop: Header=BB117_3 Depth=2
	jmp	.LBB117_7
.LBB117_7:                              # %for.inc
                                        #   in Loop: Header=BB117_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_3
.LBB117_8:                              # %for.end
                                        #   in Loop: Header=BB117_1 Depth=1
	jmp	.LBB117_9
.LBB117_9:                              # %for.inc7
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_1
.LBB117_10:                             # %for.end9
	cmpl	$1742411473, -16(%rbp)  # imm = 0x67DB16D1
	jne	.LBB117_12
.LBB117_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_11
.Lfunc_end117:
	.size	Error_Concealment.107, .Lfunc_end117-Error_Concealment.107
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.108   # -- Begin function Error_Concealment.108
	.p2align	4, 0x90
	.type	Error_Concealment.108,@function
Error_Concealment.108:                  # @Error_Concealment.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$368664665, -16(%rbp)   # imm = 0x15F96059
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB118_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	$0, -8(%rbp)
.LBB118_3:                              # %for.cond2
                                        #   Parent Loop BB118_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB118_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB118_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB118_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB118_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB118_6:                              # %if.end
                                        #   in Loop: Header=BB118_3 Depth=2
	jmp	.LBB118_7
.LBB118_7:                              # %for.inc
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_3
.LBB118_8:                              # %for.end
                                        #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_9
.LBB118_9:                              # %for.inc7
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_1
.LBB118_10:                             # %for.end9
	cmpl	$368664665, -16(%rbp)   # imm = 0x15F96059
	jne	.LBB118_12
.LBB118_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_11
.Lfunc_end118:
	.size	Error_Concealment.108, .Lfunc_end118-Error_Concealment.108
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.109 # -- Begin function Get_Reference_Pixel.109
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.109,@function
Get_Reference_Pixel.109:                # @Get_Reference_Pixel.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1214614961, -104(%rbp) # imm = 0x48658DB1
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB119_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB119_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB119_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB119_5
.LBB119_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB119_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB119_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB119_11
.LBB119_7:                              # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB119_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB119_10
.LBB119_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB119_10:                             # %cond.end14
.LBB119_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB119_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB119_14
.LBB119_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB119_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB119_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB119_20
.LBB119_16:                             # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB119_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB119_19
.LBB119_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB119_19:                             # %cond.end29
.LBB119_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB119_332
.LBB119_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB119_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB119_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB119_25
.LBB119_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB119_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB119_31
.LBB119_27:                             # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB119_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB119_30
.LBB119_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB119_30:                             # %cond.end52
.LBB119_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB119_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB119_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB119_36
.LBB119_35:                             # %cond.false61
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_36:                             # %cond.end63
                                        #   in Loop: Header=BB119_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB119_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_42
.LBB119_38:                             # %cond.false68
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB119_41
.LBB119_40:                             # %cond.false73
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_41:                             # %cond.end75
                                        #   in Loop: Header=BB119_32 Depth=1
.LBB119_42:                             # %cond.end77
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB119_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_32
.LBB119_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_47
.LBB119_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB119_53
.LBB119_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_52
.LBB119_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_52:                             # %cond.end113
.LBB119_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB119_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB119_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB119_57
.LBB119_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB119_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB119_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB119_63
.LBB119_59:                             # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB119_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB119_62
.LBB119_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB119_62:                             # %cond.end136
.LBB119_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB119_76
.LBB119_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB119_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB119_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB119_68
.LBB119_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB119_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB119_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB119_74
.LBB119_70:                             # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB119_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB119_73
.LBB119_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB119_73:                             # %cond.end169
.LBB119_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB119_75:                             # %if.end
	jmp	.LBB119_76
.LBB119_76:                             # %if.end178
	jmp	.LBB119_331
.LBB119_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB119_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB119_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB119_81
.LBB119_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB119_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB119_87
.LBB119_83:                             # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB119_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB119_86
.LBB119_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB119_86:                             # %cond.end197
.LBB119_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB119_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB119_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB119_92
.LBB119_91:                             # %cond.false209
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_92:                             # %cond.end211
                                        #   in Loop: Header=BB119_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB119_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_98
.LBB119_94:                             # %cond.false216
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB119_97
.LBB119_96:                             # %cond.false221
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_97:                             # %cond.end223
                                        #   in Loop: Header=BB119_88 Depth=1
.LBB119_98:                             # %cond.end225
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB119_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_88
.LBB119_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_103
.LBB119_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB119_109
.LBB119_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_108
.LBB119_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_108:                            # %cond.end266
.LBB119_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB119_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB119_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB119_113
.LBB119_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB119_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB119_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB119_119
.LBB119_115:                            # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB119_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB119_118
.LBB119_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB119_118:                            # %cond.end287
.LBB119_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB119_132
.LBB119_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB119_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB119_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB119_124
.LBB119_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB119_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB119_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB119_130
.LBB119_126:                            # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB119_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB119_129
.LBB119_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB119_129:                            # %cond.end320
.LBB119_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB119_131:                            # %if.end331
	jmp	.LBB119_132
.LBB119_132:                            # %if.end332
	jmp	.LBB119_330
.LBB119_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB119_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB119_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB119_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB119_139
.LBB119_138:                            # %cond.false345
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_139:                            # %cond.end347
                                        #   in Loop: Header=BB119_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB119_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_145
.LBB119_141:                            # %cond.false352
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB119_144
.LBB119_143:                            # %cond.false357
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_144:                            # %cond.end359
                                        #   in Loop: Header=BB119_135 Depth=1
.LBB119_145:                            # %cond.end361
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB119_146:                            # %for.cond363
                                        #   Parent Loop BB119_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB119_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB119_150
.LBB119_149:                            # %cond.false371
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_150:                            # %cond.end373
                                        #   in Loop: Header=BB119_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB119_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_156
.LBB119_152:                            # %cond.false378
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB119_155
.LBB119_154:                            # %cond.false383
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_155:                            # %cond.end385
                                        #   in Loop: Header=BB119_146 Depth=2
.LBB119_156:                            # %cond.end387
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB119_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_146
.LBB119_158:                            # %for.end401
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB119_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_135
.LBB119_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB119_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB119_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB119_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB119_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_161
.LBB119_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_167
.LBB119_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB119_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB119_173
.LBB119_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_172
.LBB119_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB119_172:                            # %cond.end449
.LBB119_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB119_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_177
.LBB119_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB119_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB119_183
.LBB119_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_182
.LBB119_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_182:                            # %cond.end486
.LBB119_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB119_196
.LBB119_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB119_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_188
.LBB119_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB119_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB119_194
.LBB119_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_193
.LBB119_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_193:                            # %cond.end526
.LBB119_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB119_195:                            # %if.end532
	jmp	.LBB119_196
.LBB119_196:                            # %if.end533
	jmp	.LBB119_329
.LBB119_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB119_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB119_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB119_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB119_203
.LBB119_202:                            # %cond.false546
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_203:                            # %cond.end548
                                        #   in Loop: Header=BB119_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB119_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_209
.LBB119_205:                            # %cond.false553
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB119_208
.LBB119_207:                            # %cond.false558
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_208:                            # %cond.end560
                                        #   in Loop: Header=BB119_199 Depth=1
.LBB119_209:                            # %cond.end562
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB119_210:                            # %for.cond564
                                        #   Parent Loop BB119_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB119_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB119_214
.LBB119_213:                            # %cond.false572
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_214:                            # %cond.end574
                                        #   in Loop: Header=BB119_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB119_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB119_220
.LBB119_216:                            # %cond.false579
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB119_219
.LBB119_218:                            # %cond.false584
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_219:                            # %cond.end586
                                        #   in Loop: Header=BB119_210 Depth=2
.LBB119_220:                            # %cond.end588
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB119_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_210
.LBB119_222:                            # %for.end602
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB119_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_199
.LBB119_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB119_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB119_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB119_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB119_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_225
.LBB119_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_231
.LBB119_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB119_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB119_237
.LBB119_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_236
.LBB119_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB119_236:                            # %cond.end650
.LBB119_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB119_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_241
.LBB119_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB119_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB119_247
.LBB119_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_246
.LBB119_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_246:                            # %cond.end687
.LBB119_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB119_258
.LBB119_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_251
.LBB119_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB119_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB119_257
.LBB119_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB119_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_256
.LBB119_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB119_256:                            # %cond.end724
.LBB119_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB119_258:                            # %if.end730
	jmp	.LBB119_328
.LBB119_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB119_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB119_262
.LBB119_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB119_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB119_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB119_265
.LBB119_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB119_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB119_271
.LBB119_267:                            # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB119_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB119_270
.LBB119_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB119_270:                            # %cond.end753
.LBB119_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB119_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB119_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB119_276
.LBB119_275:                            # %cond.false765
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_276:                            # %cond.end767
                                        #   in Loop: Header=BB119_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB119_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_282
.LBB119_278:                            # %cond.false772
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB119_281
.LBB119_280:                            # %cond.false777
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB119_281:                            # %cond.end779
                                        #   in Loop: Header=BB119_272 Depth=1
.LBB119_282:                            # %cond.end781
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB119_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB119_272
.LBB119_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_287
.LBB119_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB119_293
.LBB119_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_292
.LBB119_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_292:                            # %cond.end822
.LBB119_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB119_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB119_296
.LBB119_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB119_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB119_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB119_299
.LBB119_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB119_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB119_305
.LBB119_301:                            # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB119_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB119_304
.LBB119_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB119_304:                            # %cond.end847
.LBB119_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB119_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB119_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB119_310
.LBB119_309:                            # %cond.false859
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_310:                            # %cond.end861
                                        #   in Loop: Header=BB119_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB119_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB119_316
.LBB119_312:                            # %cond.false866
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB119_315
.LBB119_314:                            # %cond.false871
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB119_315:                            # %cond.end873
                                        #   in Loop: Header=BB119_306 Depth=1
.LBB119_316:                            # %cond.end875
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB119_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_306
.LBB119_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_321
.LBB119_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB119_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB119_327
.LBB119_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB119_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB119_326
.LBB119_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB119_326:                            # %cond.end916
.LBB119_327:                            # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB119_328:                            # %if.end922
	jmp	.LBB119_329
.LBB119_329:                            # %if.end923
	jmp	.LBB119_330
.LBB119_330:                            # %if.end924
	jmp	.LBB119_331
.LBB119_331:                            # %if.end925
	jmp	.LBB119_332
.LBB119_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1214614961, -104(%rbp) # imm = 0x48658DB1
	jne	.LBB119_334
.LBB119_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_333
.Lfunc_end119:
	.size	Get_Reference_Pixel.109, .Lfunc_end119-Get_Reference_Pixel.109
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.110 # -- Begin function Get_Reference_Pixel.110
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.110,@function
Get_Reference_Pixel.110:                # @Get_Reference_Pixel.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1612078854, -104(%rbp) # imm = 0x60165F06
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB120_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB120_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB120_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB120_5
.LBB120_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB120_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB120_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB120_11
.LBB120_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB120_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB120_10
.LBB120_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB120_10:                             # %cond.end14
.LBB120_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB120_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB120_14
.LBB120_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB120_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB120_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB120_20
.LBB120_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB120_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB120_19
.LBB120_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB120_19:                             # %cond.end29
.LBB120_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB120_332
.LBB120_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB120_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB120_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB120_25
.LBB120_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB120_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB120_31
.LBB120_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB120_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB120_30
.LBB120_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB120_30:                             # %cond.end52
.LBB120_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB120_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_36
.LBB120_35:                             # %cond.false61
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_36:                             # %cond.end63
                                        #   in Loop: Header=BB120_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB120_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_42
.LBB120_38:                             # %cond.false68
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_41
.LBB120_40:                             # %cond.false73
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_41:                             # %cond.end75
                                        #   in Loop: Header=BB120_32 Depth=1
.LBB120_42:                             # %cond.end77
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB120_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_32
.LBB120_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_47
.LBB120_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB120_53
.LBB120_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_52
.LBB120_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_52:                             # %cond.end113
.LBB120_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB120_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB120_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB120_57
.LBB120_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB120_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB120_63
.LBB120_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB120_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB120_62
.LBB120_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB120_62:                             # %cond.end136
.LBB120_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_76
.LBB120_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB120_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB120_68
.LBB120_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB120_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB120_74
.LBB120_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB120_73
.LBB120_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB120_73:                             # %cond.end169
.LBB120_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_75:                             # %if.end
	jmp	.LBB120_76
.LBB120_76:                             # %if.end178
	jmp	.LBB120_331
.LBB120_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB120_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB120_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB120_81
.LBB120_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB120_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB120_87
.LBB120_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB120_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB120_86
.LBB120_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB120_86:                             # %cond.end197
.LBB120_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB120_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_92
.LBB120_91:                             # %cond.false209
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_92:                             # %cond.end211
                                        #   in Loop: Header=BB120_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB120_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_98
.LBB120_94:                             # %cond.false216
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_97
.LBB120_96:                             # %cond.false221
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_97:                             # %cond.end223
                                        #   in Loop: Header=BB120_88 Depth=1
.LBB120_98:                             # %cond.end225
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB120_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_88
.LBB120_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_103
.LBB120_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB120_109
.LBB120_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_108
.LBB120_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_108:                            # %cond.end266
.LBB120_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB120_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB120_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB120_113
.LBB120_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB120_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB120_119
.LBB120_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB120_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB120_118
.LBB120_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB120_118:                            # %cond.end287
.LBB120_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_132
.LBB120_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB120_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB120_124
.LBB120_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB120_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB120_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB120_130
.LBB120_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB120_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB120_129
.LBB120_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB120_129:                            # %cond.end320
.LBB120_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_131:                            # %if.end331
	jmp	.LBB120_132
.LBB120_132:                            # %if.end332
	jmp	.LBB120_330
.LBB120_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB120_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB120_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB120_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_139
.LBB120_138:                            # %cond.false345
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_139:                            # %cond.end347
                                        #   in Loop: Header=BB120_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB120_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_145
.LBB120_141:                            # %cond.false352
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_144
.LBB120_143:                            # %cond.false357
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_144:                            # %cond.end359
                                        #   in Loop: Header=BB120_135 Depth=1
.LBB120_145:                            # %cond.end361
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_146:                            # %for.cond363
                                        #   Parent Loop BB120_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB120_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB120_150
.LBB120_149:                            # %cond.false371
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_150:                            # %cond.end373
                                        #   in Loop: Header=BB120_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB120_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB120_156
.LBB120_152:                            # %cond.false378
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB120_155
.LBB120_154:                            # %cond.false383
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_155:                            # %cond.end385
                                        #   in Loop: Header=BB120_146 Depth=2
.LBB120_156:                            # %cond.end387
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB120_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_146
.LBB120_158:                            # %for.end401
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB120_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_135
.LBB120_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB120_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB120_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_161
.LBB120_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_167
.LBB120_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB120_173
.LBB120_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_172
.LBB120_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_172:                            # %cond.end449
.LBB120_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB120_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_177
.LBB120_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB120_183
.LBB120_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_182
.LBB120_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_182:                            # %cond.end486
.LBB120_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_196
.LBB120_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB120_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_188
.LBB120_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB120_194
.LBB120_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_193
.LBB120_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_193:                            # %cond.end526
.LBB120_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_195:                            # %if.end532
	jmp	.LBB120_196
.LBB120_196:                            # %if.end533
	jmp	.LBB120_329
.LBB120_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB120_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB120_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB120_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_203
.LBB120_202:                            # %cond.false546
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_203:                            # %cond.end548
                                        #   in Loop: Header=BB120_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB120_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_209
.LBB120_205:                            # %cond.false553
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_208
.LBB120_207:                            # %cond.false558
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_208:                            # %cond.end560
                                        #   in Loop: Header=BB120_199 Depth=1
.LBB120_209:                            # %cond.end562
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_210:                            # %for.cond564
                                        #   Parent Loop BB120_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB120_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB120_214
.LBB120_213:                            # %cond.false572
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_214:                            # %cond.end574
                                        #   in Loop: Header=BB120_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB120_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB120_220
.LBB120_216:                            # %cond.false579
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB120_219
.LBB120_218:                            # %cond.false584
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_219:                            # %cond.end586
                                        #   in Loop: Header=BB120_210 Depth=2
.LBB120_220:                            # %cond.end588
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB120_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_210
.LBB120_222:                            # %for.end602
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB120_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_199
.LBB120_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB120_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB120_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB120_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_225
.LBB120_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_231
.LBB120_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB120_237
.LBB120_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_236
.LBB120_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB120_236:                            # %cond.end650
.LBB120_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB120_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_241
.LBB120_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB120_247
.LBB120_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_246
.LBB120_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_246:                            # %cond.end687
.LBB120_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB120_258
.LBB120_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_251
.LBB120_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB120_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB120_257
.LBB120_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB120_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_256
.LBB120_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB120_256:                            # %cond.end724
.LBB120_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_258:                            # %if.end730
	jmp	.LBB120_328
.LBB120_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB120_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB120_262
.LBB120_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB120_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB120_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB120_265
.LBB120_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB120_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB120_271
.LBB120_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB120_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB120_270
.LBB120_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB120_270:                            # %cond.end753
.LBB120_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB120_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB120_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_276
.LBB120_275:                            # %cond.false765
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_276:                            # %cond.end767
                                        #   in Loop: Header=BB120_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB120_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_282
.LBB120_278:                            # %cond.false772
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB120_281
.LBB120_280:                            # %cond.false777
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB120_281:                            # %cond.end779
                                        #   in Loop: Header=BB120_272 Depth=1
.LBB120_282:                            # %cond.end781
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB120_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_272
.LBB120_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_287
.LBB120_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB120_293
.LBB120_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_292
.LBB120_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_292:                            # %cond.end822
.LBB120_293:                            # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB120_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB120_296
.LBB120_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB120_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB120_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB120_299
.LBB120_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB120_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB120_305
.LBB120_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB120_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB120_304
.LBB120_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB120_304:                            # %cond.end847
.LBB120_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB120_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB120_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_310
.LBB120_309:                            # %cond.false859
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_310:                            # %cond.end861
                                        #   in Loop: Header=BB120_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB120_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_316
.LBB120_312:                            # %cond.false866
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB120_315
.LBB120_314:                            # %cond.false871
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB120_315:                            # %cond.end873
                                        #   in Loop: Header=BB120_306 Depth=1
.LBB120_316:                            # %cond.end875
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB120_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB120_306
.LBB120_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_321
.LBB120_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB120_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB120_327
.LBB120_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB120_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB120_326
.LBB120_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB120_326:                            # %cond.end916
.LBB120_327:                            # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB120_328:                            # %if.end922
	jmp	.LBB120_329
.LBB120_329:                            # %if.end923
	jmp	.LBB120_330
.LBB120_330:                            # %if.end924
	jmp	.LBB120_331
.LBB120_331:                            # %if.end925
	jmp	.LBB120_332
.LBB120_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1612078854, -104(%rbp) # imm = 0x60165F06
	jne	.LBB120_334
.LBB120_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_333
.Lfunc_end120:
	.size	Get_Reference_Pixel.110, .Lfunc_end120-Get_Reference_Pixel.110
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.111   # -- Begin function Error_Concealment.111
	.p2align	4, 0x90
	.type	Error_Concealment.111,@function
Error_Concealment.111:                  # @Error_Concealment.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$66512062, -20(%rbp)    # imm = 0x3F6E4BE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB121_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$0, -4(%rbp)
.LBB121_3:                              # %for.cond2
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB121_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB121_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB121_6:                              # %if.end
                                        #   in Loop: Header=BB121_3 Depth=2
	jmp	.LBB121_7
.LBB121_7:                              # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_3
.LBB121_8:                              # %for.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_9
.LBB121_9:                              # %for.inc7
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_1
.LBB121_10:                             # %for.end9
	cmpl	$66512062, -20(%rbp)    # imm = 0x3F6E4BE
	jne	.LBB121_12
.LBB121_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_11
.Lfunc_end121:
	.size	Error_Concealment.111, .Lfunc_end121-Error_Concealment.111
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.112   # -- Begin function Error_Concealment.112
	.p2align	4, 0x90
	.type	Error_Concealment.112,@function
Error_Concealment.112:                  # @Error_Concealment.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1451651260, -12(%rbp)  # imm = 0x568670BC
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB122_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	$0, -4(%rbp)
.LBB122_3:                              # %for.cond2
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB122_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB122_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB122_6:                              # %if.end
                                        #   in Loop: Header=BB122_3 Depth=2
	jmp	.LBB122_7
.LBB122_7:                              # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_3
.LBB122_8:                              # %for.end
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_9
.LBB122_9:                              # %for.inc7
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_1
.LBB122_10:                             # %for.end9
	cmpl	$1451651260, -12(%rbp)  # imm = 0x568670BC
	jne	.LBB122_12
.LBB122_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_11
.Lfunc_end122:
	.size	Error_Concealment.112, .Lfunc_end122-Error_Concealment.112
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.113      # -- Begin function DecOneForthPix.113
	.p2align	4, 0x90
	.type	DecOneForthPix.113,@function
DecOneForthPix.113:                     # @DecOneForthPix.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1875025893, -12(%rbp)  # imm = 0x6FC29FE5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB123_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_1
.LBB123_4:                              # %for.end
	cmpl	$1875025893, -12(%rbp)  # imm = 0x6FC29FE5
	jne	.LBB123_6
.LBB123_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_5
.Lfunc_end123:
	.size	DecOneForthPix.113, .Lfunc_end123-DecOneForthPix.113
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.114 # -- Begin function compute_residue_b8block.114
	.p2align	4, 0x90
	.type	compute_residue_b8block.114,@function
compute_residue_b8block.114:            # @compute_residue_b8block.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$737992417, -36(%rbp)   # imm = 0x2BFCDEE1
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB124_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB124_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_4:                              # %for.cond4
                                        #   Parent Loop BB124_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB124_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB124_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_4
.LBB124_7:                              # %for.end
                                        #   in Loop: Header=BB124_2 Depth=1
	jmp	.LBB124_8
.LBB124_8:                              # %for.inc22
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_2
.LBB124_9:                              # %for.end24
	jmp	.LBB124_19
.LBB124_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB124_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB124_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB124_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB124_13:                             # %for.cond29
                                        #   Parent Loop BB124_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB124_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB124_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB124_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_13
.LBB124_16:                             # %for.end56
                                        #   in Loop: Header=BB124_11 Depth=1
	jmp	.LBB124_17
.LBB124_17:                             # %for.inc57
                                        #   in Loop: Header=BB124_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_11
.LBB124_18:                             # %for.end59
	jmp	.LBB124_19
.LBB124_19:                             # %if.end
	cmpl	$737992417, -36(%rbp)   # imm = 0x2BFCDEE1
	jne	.LBB124_21
.LBB124_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_20
.Lfunc_end124:
	.size	compute_residue_b8block.114, .Lfunc_end124-compute_residue_b8block.114
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.115   # -- Begin function Error_Concealment.115
	.p2align	4, 0x90
	.type	Error_Concealment.115,@function
Error_Concealment.115:                  # @Error_Concealment.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1313508379, -20(%rbp)  # imm = 0x4E4A8C1B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB125_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	$0, -8(%rbp)
.LBB125_3:                              # %for.cond2
                                        #   Parent Loop BB125_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB125_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB125_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB125_6:                              # %if.end
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_7
.LBB125_7:                              # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_3
.LBB125_8:                              # %for.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_9
.LBB125_9:                              # %for.inc7
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_1
.LBB125_10:                             # %for.end9
	cmpl	$1313508379, -20(%rbp)  # imm = 0x4E4A8C1B
	jne	.LBB125_12
.LBB125_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_11
.Lfunc_end125:
	.size	Error_Concealment.115, .Lfunc_end125-Error_Concealment.115
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.116 # -- Begin function compute_residue_b8block.116
	.p2align	4, 0x90
	.type	compute_residue_b8block.116,@function
compute_residue_b8block.116:            # @compute_residue_b8block.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$88942380, -36(%rbp)    # imm = 0x54D272C
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB126_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB126_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB126_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB126_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB126_4:                              # %for.cond4
                                        #   Parent Loop BB126_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB126_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB126_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB126_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_4
.LBB126_7:                              # %for.end
                                        #   in Loop: Header=BB126_2 Depth=1
	jmp	.LBB126_8
.LBB126_8:                              # %for.inc22
                                        #   in Loop: Header=BB126_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_2
.LBB126_9:                              # %for.end24
	jmp	.LBB126_19
.LBB126_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB126_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB126_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB126_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB126_13:                             # %for.cond29
                                        #   Parent Loop BB126_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB126_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB126_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB126_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_13
.LBB126_16:                             # %for.end56
                                        #   in Loop: Header=BB126_11 Depth=1
	jmp	.LBB126_17
.LBB126_17:                             # %for.inc57
                                        #   in Loop: Header=BB126_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_11
.LBB126_18:                             # %for.end59
	jmp	.LBB126_19
.LBB126_19:                             # %if.end
	cmpl	$88942380, -36(%rbp)    # imm = 0x54D272C
	jne	.LBB126_21
.LBB126_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_20
.Lfunc_end126:
	.size	compute_residue_b8block.116, .Lfunc_end126-compute_residue_b8block.116
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.117   # -- Begin function Error_Concealment.117
	.p2align	4, 0x90
	.type	Error_Concealment.117,@function
Error_Concealment.117:                  # @Error_Concealment.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1551292683, -12(%rbp)  # imm = 0x5C76D90B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB127_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB127_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	$0, -8(%rbp)
.LBB127_3:                              # %for.cond2
                                        #   Parent Loop BB127_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB127_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB127_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB127_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB127_6:                              # %if.end
                                        #   in Loop: Header=BB127_3 Depth=2
	jmp	.LBB127_7
.LBB127_7:                              # %for.inc
                                        #   in Loop: Header=BB127_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_3
.LBB127_8:                              # %for.end
                                        #   in Loop: Header=BB127_1 Depth=1
	jmp	.LBB127_9
.LBB127_9:                              # %for.inc7
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_1
.LBB127_10:                             # %for.end9
	cmpl	$1551292683, -12(%rbp)  # imm = 0x5C76D90B
	jne	.LBB127_12
.LBB127_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_11
.Lfunc_end127:
	.size	Error_Concealment.117, .Lfunc_end127-Error_Concealment.117
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.118   # -- Begin function Error_Concealment.118
	.p2align	4, 0x90
	.type	Error_Concealment.118,@function
Error_Concealment.118:                  # @Error_Concealment.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$331819816, -12(%rbp)   # imm = 0x13C72B28
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB128_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	$0, -4(%rbp)
.LBB128_3:                              # %for.cond2
                                        #   Parent Loop BB128_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB128_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB128_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB128_6:                              # %if.end
                                        #   in Loop: Header=BB128_3 Depth=2
	jmp	.LBB128_7
.LBB128_7:                              # %for.inc
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_3
.LBB128_8:                              # %for.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_9
.LBB128_9:                              # %for.inc7
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_1
.LBB128_10:                             # %for.end9
	cmpl	$331819816, -12(%rbp)   # imm = 0x13C72B28
	jne	.LBB128_12
.LBB128_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_11
.Lfunc_end128:
	.size	Error_Concealment.118, .Lfunc_end128-Error_Concealment.118
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.119   # -- Begin function Error_Concealment.119
	.p2align	4, 0x90
	.type	Error_Concealment.119,@function
Error_Concealment.119:                  # @Error_Concealment.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1765498029, -12(%rbp)  # imm = 0x693B5CAD
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB129_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	$0, -4(%rbp)
.LBB129_3:                              # %for.cond2
                                        #   Parent Loop BB129_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB129_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB129_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB129_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB129_6:                              # %if.end
                                        #   in Loop: Header=BB129_3 Depth=2
	jmp	.LBB129_7
.LBB129_7:                              # %for.inc
                                        #   in Loop: Header=BB129_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_3
.LBB129_8:                              # %for.end
                                        #   in Loop: Header=BB129_1 Depth=1
	jmp	.LBB129_9
.LBB129_9:                              # %for.inc7
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_1
.LBB129_10:                             # %for.end9
	cmpl	$1765498029, -12(%rbp)  # imm = 0x693B5CAD
	jne	.LBB129_12
.LBB129_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_11
.Lfunc_end129:
	.size	Error_Concealment.119, .Lfunc_end129-Error_Concealment.119
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.120
.LCPI130_0:
	.quad	4636737291354636288     # double 100
.LCPI130_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.120
	.p2align	4, 0x90
	.type	Build_Status_Map.120,@function
Build_Status_Map.120:                   # @Build_Status_Map.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2077247739, -44(%rbp)  # imm = 0x7BD048FB
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB130_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB130_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	$0, -8(%rbp)
.LBB130_3:                              # %for.cond2
                                        #   Parent Loop BB130_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB130_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB130_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB130_13
.LBB130_6:                              # %if.then
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI130_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI130_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB130_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB130_8:                              # %if.end
                                        #   in Loop: Header=BB130_3 Depth=2
	callq	rand
	vmovsd	.LCPI130_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI130_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB130_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB130_10:                             # %if.end20
                                        #   in Loop: Header=BB130_3 Depth=2
	callq	rand
	vmovsd	.LCPI130_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI130_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB130_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	$1, -4(%rbp)
.LBB130_12:                             # %if.end29
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB130_13:                             # %if.end30
                                        #   in Loop: Header=BB130_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB130_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB130_18
.LBB130_15:                             # %if.else
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB130_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB130_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB130_17:                             # %if.end49
                                        #   in Loop: Header=BB130_3 Depth=2
	jmp	.LBB130_18
.LBB130_18:                             # %if.end50
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB130_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB130_3
.LBB130_20:                             # %for.end
                                        #   in Loop: Header=BB130_1 Depth=1
	jmp	.LBB130_21
.LBB130_21:                             # %for.inc53
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_1
.LBB130_22:                             # %for.end55
	cmpl	$2077247739, -44(%rbp)  # imm = 0x7BD048FB
	jne	.LBB130_24
.LBB130_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_23
.Lfunc_end130:
	.size	Build_Status_Map.120, .Lfunc_end130-Build_Status_Map.120
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.121 # -- Begin function compute_residue_b8block.121
	.p2align	4, 0x90
	.type	compute_residue_b8block.121,@function
compute_residue_b8block.121:            # @compute_residue_b8block.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$137010181, -36(%rbp)   # imm = 0x82A9C05
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB131_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB131_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB131_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_4:                              # %for.cond4
                                        #   Parent Loop BB131_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB131_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB131_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_4
.LBB131_7:                              # %for.end
                                        #   in Loop: Header=BB131_2 Depth=1
	jmp	.LBB131_8
.LBB131_8:                              # %for.inc22
                                        #   in Loop: Header=BB131_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_2
.LBB131_9:                              # %for.end24
	jmp	.LBB131_19
.LBB131_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB131_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB131_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB131_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB131_13:                             # %for.cond29
                                        #   Parent Loop BB131_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB131_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB131_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB131_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_13
.LBB131_16:                             # %for.end56
                                        #   in Loop: Header=BB131_11 Depth=1
	jmp	.LBB131_17
.LBB131_17:                             # %for.inc57
                                        #   in Loop: Header=BB131_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_11
.LBB131_18:                             # %for.end59
	jmp	.LBB131_19
.LBB131_19:                             # %if.end
	cmpl	$137010181, -36(%rbp)   # imm = 0x82A9C05
	jne	.LBB131_21
.LBB131_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_20
.Lfunc_end131:
	.size	compute_residue_b8block.121, .Lfunc_end131-compute_residue_b8block.121
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.122 # -- Begin function compute_residue_b8block.122
	.p2align	4, 0x90
	.type	compute_residue_b8block.122,@function
compute_residue_b8block.122:            # @compute_residue_b8block.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1212849736, -36(%rbp)  # imm = 0x484A9E48
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB132_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB132_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB132_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB132_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB132_4:                              # %for.cond4
                                        #   Parent Loop BB132_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB132_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB132_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB132_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_4
.LBB132_7:                              # %for.end
                                        #   in Loop: Header=BB132_2 Depth=1
	jmp	.LBB132_8
.LBB132_8:                              # %for.inc22
                                        #   in Loop: Header=BB132_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_2
.LBB132_9:                              # %for.end24
	jmp	.LBB132_19
.LBB132_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB132_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB132_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB132_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB132_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB132_13:                             # %for.cond29
                                        #   Parent Loop BB132_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB132_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB132_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB132_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_13
.LBB132_16:                             # %for.end56
                                        #   in Loop: Header=BB132_11 Depth=1
	jmp	.LBB132_17
.LBB132_17:                             # %for.inc57
                                        #   in Loop: Header=BB132_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB132_11
.LBB132_18:                             # %for.end59
	jmp	.LBB132_19
.LBB132_19:                             # %if.end
	cmpl	$1212849736, -36(%rbp)  # imm = 0x484A9E48
	jne	.LBB132_21
.LBB132_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_20
.Lfunc_end132:
	.size	compute_residue_b8block.122, .Lfunc_end132-compute_residue_b8block.122
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.123   # -- Begin function Error_Concealment.123
	.p2align	4, 0x90
	.type	Error_Concealment.123,@function
Error_Concealment.123:                  # @Error_Concealment.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1078578688, -20(%rbp)  # imm = 0x4049CE00
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB133_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	$0, -8(%rbp)
.LBB133_3:                              # %for.cond2
                                        #   Parent Loop BB133_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB133_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB133_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB133_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB133_6:                              # %if.end
                                        #   in Loop: Header=BB133_3 Depth=2
	jmp	.LBB133_7
.LBB133_7:                              # %for.inc
                                        #   in Loop: Header=BB133_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB133_3
.LBB133_8:                              # %for.end
                                        #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_9
.LBB133_9:                              # %for.inc7
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_1
.LBB133_10:                             # %for.end9
	cmpl	$1078578688, -20(%rbp)  # imm = 0x4049CE00
	jne	.LBB133_12
.LBB133_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_11
.Lfunc_end133:
	.size	Error_Concealment.123, .Lfunc_end133-Error_Concealment.123
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.124 # -- Begin function compute_residue_b8block.124
	.p2align	4, 0x90
	.type	compute_residue_b8block.124,@function
compute_residue_b8block.124:            # @compute_residue_b8block.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$451309288, -36(%rbp)   # imm = 0x1AE66EE8
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB134_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB134_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB134_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB134_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB134_4:                              # %for.cond4
                                        #   Parent Loop BB134_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB134_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB134_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB134_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_4
.LBB134_7:                              # %for.end
                                        #   in Loop: Header=BB134_2 Depth=1
	jmp	.LBB134_8
.LBB134_8:                              # %for.inc22
                                        #   in Loop: Header=BB134_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_2
.LBB134_9:                              # %for.end24
	jmp	.LBB134_19
.LBB134_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB134_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB134_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB134_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB134_13:                             # %for.cond29
                                        #   Parent Loop BB134_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB134_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB134_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB134_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_13
.LBB134_16:                             # %for.end56
                                        #   in Loop: Header=BB134_11 Depth=1
	jmp	.LBB134_17
.LBB134_17:                             # %for.inc57
                                        #   in Loop: Header=BB134_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_11
.LBB134_18:                             # %for.end59
	jmp	.LBB134_19
.LBB134_19:                             # %if.end
	cmpl	$451309288, -36(%rbp)   # imm = 0x1AE66EE8
	jne	.LBB134_21
.LBB134_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_20
.Lfunc_end134:
	.size	compute_residue_b8block.124, .Lfunc_end134-compute_residue_b8block.124
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.125   # -- Begin function Error_Concealment.125
	.p2align	4, 0x90
	.type	Error_Concealment.125,@function
Error_Concealment.125:                  # @Error_Concealment.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$94392594, -12(%rbp)    # imm = 0x5A05112
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB135_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	$0, -8(%rbp)
.LBB135_3:                              # %for.cond2
                                        #   Parent Loop BB135_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB135_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB135_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB135_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB135_6:                              # %if.end
                                        #   in Loop: Header=BB135_3 Depth=2
	jmp	.LBB135_7
.LBB135_7:                              # %for.inc
                                        #   in Loop: Header=BB135_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB135_3
.LBB135_8:                              # %for.end
                                        #   in Loop: Header=BB135_1 Depth=1
	jmp	.LBB135_9
.LBB135_9:                              # %for.inc7
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_1
.LBB135_10:                             # %for.end9
	cmpl	$94392594, -12(%rbp)    # imm = 0x5A05112
	jne	.LBB135_12
.LBB135_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_11
.Lfunc_end135:
	.size	Error_Concealment.125, .Lfunc_end135-Error_Concealment.125
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.126 # -- Begin function compute_residue_b8block.126
	.p2align	4, 0x90
	.type	compute_residue_b8block.126,@function
compute_residue_b8block.126:            # @compute_residue_b8block.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$227567563, -36(%rbp)   # imm = 0xD9067CB
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB136_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB136_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_4:                              # %for.cond4
                                        #   Parent Loop BB136_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB136_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB136_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB136_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_4
.LBB136_7:                              # %for.end
                                        #   in Loop: Header=BB136_2 Depth=1
	jmp	.LBB136_8
.LBB136_8:                              # %for.inc22
                                        #   in Loop: Header=BB136_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_2
.LBB136_9:                              # %for.end24
	jmp	.LBB136_19
.LBB136_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB136_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB136_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB136_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB136_13:                             # %for.cond29
                                        #   Parent Loop BB136_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB136_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB136_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB136_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB136_13
.LBB136_16:                             # %for.end56
                                        #   in Loop: Header=BB136_11 Depth=1
	jmp	.LBB136_17
.LBB136_17:                             # %for.inc57
                                        #   in Loop: Header=BB136_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_11
.LBB136_18:                             # %for.end59
	jmp	.LBB136_19
.LBB136_19:                             # %if.end
	cmpl	$227567563, -36(%rbp)   # imm = 0xD9067CB
	jne	.LBB136_21
.LBB136_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_20
.Lfunc_end136:
	.size	compute_residue_b8block.126, .Lfunc_end136-compute_residue_b8block.126
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.127   # -- Begin function Error_Concealment.127
	.p2align	4, 0x90
	.type	Error_Concealment.127,@function
Error_Concealment.127:                  # @Error_Concealment.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1111132500, -16(%rbp)  # imm = 0x423A8954
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB137_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	$0, -8(%rbp)
.LBB137_3:                              # %for.cond2
                                        #   Parent Loop BB137_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB137_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB137_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB137_6:                              # %if.end
                                        #   in Loop: Header=BB137_3 Depth=2
	jmp	.LBB137_7
.LBB137_7:                              # %for.inc
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_3
.LBB137_8:                              # %for.end
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_9
.LBB137_9:                              # %for.inc7
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_1
.LBB137_10:                             # %for.end9
	cmpl	$1111132500, -16(%rbp)  # imm = 0x423A8954
	jne	.LBB137_12
.LBB137_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_11
.Lfunc_end137:
	.size	Error_Concealment.127, .Lfunc_end137-Error_Concealment.127
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.128 # -- Begin function compute_residue_b8block.128
	.p2align	4, 0x90
	.type	compute_residue_b8block.128,@function
compute_residue_b8block.128:            # @compute_residue_b8block.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2039341740, -36(%rbp)  # imm = 0x798DE2AC
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB138_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB138_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB138_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_4:                              # %for.cond4
                                        #   Parent Loop BB138_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB138_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB138_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_4
.LBB138_7:                              # %for.end
                                        #   in Loop: Header=BB138_2 Depth=1
	jmp	.LBB138_8
.LBB138_8:                              # %for.inc22
                                        #   in Loop: Header=BB138_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_2
.LBB138_9:                              # %for.end24
	jmp	.LBB138_19
.LBB138_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB138_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB138_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_13:                             # %for.cond29
                                        #   Parent Loop BB138_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB138_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB138_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_13
.LBB138_16:                             # %for.end56
                                        #   in Loop: Header=BB138_11 Depth=1
	jmp	.LBB138_17
.LBB138_17:                             # %for.inc57
                                        #   in Loop: Header=BB138_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_11
.LBB138_18:                             # %for.end59
	jmp	.LBB138_19
.LBB138_19:                             # %if.end
	cmpl	$2039341740, -36(%rbp)  # imm = 0x798DE2AC
	jne	.LBB138_21
.LBB138_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_20
.Lfunc_end138:
	.size	compute_residue_b8block.128, .Lfunc_end138-compute_residue_b8block.128
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.129 # -- Begin function compute_residue_b8block.129
	.p2align	4, 0x90
	.type	compute_residue_b8block.129,@function
compute_residue_b8block.129:            # @compute_residue_b8block.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1308305029, -36(%rbp)  # imm = 0x4DFB2685
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB139_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB139_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_4:                              # %for.cond4
                                        #   Parent Loop BB139_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB139_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB139_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_4
.LBB139_7:                              # %for.end
                                        #   in Loop: Header=BB139_2 Depth=1
	jmp	.LBB139_8
.LBB139_8:                              # %for.inc22
                                        #   in Loop: Header=BB139_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_2
.LBB139_9:                              # %for.end24
	jmp	.LBB139_19
.LBB139_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB139_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB139_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB139_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB139_13:                             # %for.cond29
                                        #   Parent Loop BB139_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB139_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB139_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB139_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_13
.LBB139_16:                             # %for.end56
                                        #   in Loop: Header=BB139_11 Depth=1
	jmp	.LBB139_17
.LBB139_17:                             # %for.inc57
                                        #   in Loop: Header=BB139_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_11
.LBB139_18:                             # %for.end59
	jmp	.LBB139_19
.LBB139_19:                             # %if.end
	cmpl	$1308305029, -36(%rbp)  # imm = 0x4DFB2685
	jne	.LBB139_21
.LBB139_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_20
.Lfunc_end139:
	.size	compute_residue_b8block.129, .Lfunc_end139-compute_residue_b8block.129
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.130 # -- Begin function compute_residue_b8block.130
	.p2align	4, 0x90
	.type	compute_residue_b8block.130,@function
compute_residue_b8block.130:            # @compute_residue_b8block.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2059774269, -36(%rbp)  # imm = 0x7AC5A93D
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB140_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB140_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB140_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB140_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB140_4:                              # %for.cond4
                                        #   Parent Loop BB140_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB140_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB140_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB140_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_4
.LBB140_7:                              # %for.end
                                        #   in Loop: Header=BB140_2 Depth=1
	jmp	.LBB140_8
.LBB140_8:                              # %for.inc22
                                        #   in Loop: Header=BB140_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_2
.LBB140_9:                              # %for.end24
	jmp	.LBB140_19
.LBB140_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB140_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB140_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB140_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB140_13:                             # %for.cond29
                                        #   Parent Loop BB140_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB140_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB140_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB140_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_13
.LBB140_16:                             # %for.end56
                                        #   in Loop: Header=BB140_11 Depth=1
	jmp	.LBB140_17
.LBB140_17:                             # %for.inc57
                                        #   in Loop: Header=BB140_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_11
.LBB140_18:                             # %for.end59
	jmp	.LBB140_19
.LBB140_19:                             # %if.end
	cmpl	$2059774269, -36(%rbp)  # imm = 0x7AC5A93D
	jne	.LBB140_21
.LBB140_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_20
.Lfunc_end140:
	.size	compute_residue_b8block.130, .Lfunc_end140-compute_residue_b8block.130
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
