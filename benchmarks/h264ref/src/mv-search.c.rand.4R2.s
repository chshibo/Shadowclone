	.text
	.file	"mv-search.c"
	.globl	InitializeFastFullIntegerSearch # -- Begin function InitializeFastFullIntegerSearch
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch,@function
InitializeFastFullIntegerSearch:        # @InitializeFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_InitializeFastFullIntegerSearch.1
	callq	InitializeFastFullIntegerSearch.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_InitializeFastFullIntegerSearch.52
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_InitializeFastFullIntegerSearch.56
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_InitializeFastFullIntegerSearch.69
	.cfi_def_cfa %rbp, 16
	callq	InitializeFastFullIntegerSearch.69
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	InitializeFastFullIntegerSearch, .Lfunc_end0-InitializeFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch # -- Begin function ClearFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch,@function
ClearFastFullIntegerSearch:             # @ClearFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_ClearFastFullIntegerSearch.22
	callq	ClearFastFullIntegerSearch.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_ClearFastFullIntegerSearch.32
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_ClearFastFullIntegerSearch.50
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_ClearFastFullIntegerSearch.59
	.cfi_def_cfa %rbp, 16
	callq	ClearFastFullIntegerSearch.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	ClearFastFullIntegerSearch, .Lfunc_end1-ClearFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch # -- Begin function ResetFastFullIntegerSearch
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch,@function
ResetFastFullIntegerSearch:             # @ResetFastFullIntegerSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_ResetFastFullIntegerSearch.13
	callq	ResetFastFullIntegerSearch.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_ResetFastFullIntegerSearch.21
	.cfi_def_cfa %rbp, 16
	callq	ResetFastFullIntegerSearch.21
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	ResetFastFullIntegerSearch, .Lfunc_end2-ResetFastFullIntegerSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks       # -- Begin function SetupLargerBlocks
	.p2align	4, 0x90
	.type	SetupLargerBlocks,@function
SetupLargerBlocks:                      # @SetupLargerBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_SetupLargerBlocks.6
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_SetupLargerBlocks.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_SetupLargerBlocks.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_SetupLargerBlocks.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	SetupLargerBlocks.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	SetupLargerBlocks, .Lfunc_end3-SetupLargerBlocks
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch  # -- Begin function SetupFastFullPelSearch
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch,@function
SetupFastFullPelSearch:                 # @SetupFastFullPelSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_SetupFastFullPelSearch.33
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_SetupFastFullPelSearch.44
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_SetupFastFullPelSearch.57
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.57
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_SetupFastFullPelSearch.64
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	movl	%r14d, %esi
	callq	SetupFastFullPelSearch.64
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	SetupFastFullPelSearch, .Lfunc_end4-SetupFastFullPelSearch
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor # -- Begin function SetMotionVectorPredictor
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor,@function
SetMotionVectorPredictor:               # @SetMotionVectorPredictor
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_SetMotionVectorPredictor.72
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	callq	SetMotionVectorPredictor.72
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_SetMotionVectorPredictor.81
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.81
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_SetMotionVectorPredictor.87
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.87
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_SetMotionVectorPredictor.90
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %ecx
	movl	%eax, (%rsp)
	movl	%r11d, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor.90
	addq	$40, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	24(%rbp), %r11d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	32(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	16(%rbp), %eax
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	SetMotionVectorPredictor, .Lfunc_end5-SetMotionVectorPredictor
	.cfi_endproc
                                        # -- End function
	.globl	Init_Motion_Search_Module # -- Begin function Init_Motion_Search_Module
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module,@function
Init_Motion_Search_Module:              # @Init_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Init_Motion_Search_Module.45
	callq	Init_Motion_Search_Module.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Init_Motion_Search_Module.65
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.65
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Init_Motion_Search_Module.70
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Init_Motion_Search_Module.75
	.cfi_def_cfa %rbp, 16
	callq	Init_Motion_Search_Module.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Init_Motion_Search_Module, .Lfunc_end6-Init_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	Clear_Motion_Search_Module # -- Begin function Clear_Motion_Search_Module
	.p2align	4, 0x90
	.type	Clear_Motion_Search_Module,@function
Clear_Motion_Search_Module:             # @Clear_Motion_Search_Module
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movl	max_mvd, %ecx
	movq	mvbits, %rdx
	movslq	%ecx, %rcx
	subq	%rcx, %rax
	shlq	$2, %rax
	addq	%rax, %rdx
	movq	%rdx, mvbits
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB7_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	jmp	.LBB7_3
.LBB7_2:                                # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
.LBB7_3:                                # %cond.end
	xorl	%ecx, %ecx
	movq	byte_abs, %rdx
	cltq
	subq	%rax, %rcx
	shlq	$2, %rcx
	addq	%rcx, %rdx
	movq	%rdx, byte_abs
	movq	spiral_search_x, %rdi
	callq	free
	movq	spiral_search_y, %rdi
	callq	free
	movq	mvbits, %rdi
	callq	free
	movq	refbits, %rdi
	callq	free
	movq	byte_abs, %rdi
	callq	free
	movq	motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	callq	free_mem4Dint
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB7_5
# %bb.4:                                # %if.then
	callq	ClearFastFullIntegerSearch
.LBB7_5:                                # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	Clear_Motion_Search_Module, .Lfunc_end7-Clear_Motion_Search_Module
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionSearch # -- Begin function FullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch,@function
FullPelBlockMotionSearch:               # @FullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_FullPelBlockMotionSearch.18
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionSearch.18
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_FullPelBlockMotionSearch.20
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.20
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_FullPelBlockMotionSearch.68
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.68
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_FullPelBlockMotionSearch.92
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FullPelBlockMotionSearch.92
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	FullPelBlockMotionSearch, .Lfunc_end8-FullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FastFullPelBlockMotionSearch # -- Begin function FastFullPelBlockMotionSearch
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch,@function
FastFullPelBlockMotionSearch:           # @FastFullPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_FastFullPelBlockMotionSearch.7
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FastFullPelBlockMotionSearch.7
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_FastFullPelBlockMotionSearch.53
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.53
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_FastFullPelBlockMotionSearch.66
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.66
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_FastFullPelBlockMotionSearch.77
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r15d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch.77
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	48(%rbp), %r11d
	movl	56(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	FastFullPelBlockMotionSearch, .Lfunc_end9-FastFullPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	SATD                    # -- Begin function SATD
	.p2align	4, 0x90
	.type	SATD,@function
SATD:                                   # @SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_SATD.12
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.12
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_SATD.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_SATD.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.73
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_SATD.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD.89
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	SATD, .Lfunc_end10-SATD
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8                 # -- Begin function SATD8X8
	.p2align	4, 0x90
	.type	SATD8X8,@function
SATD8X8:                                # @SATD8X8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SATD8X8.2
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SATD8X8.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SATD8X8.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SATD8X8.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SATD8X8.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SATD8X8, .Lfunc_end11-SATD8X8
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD               # -- Begin function find_SATD
	.p2align	4, 0x90
	.type	find_SATD,@function
find_SATD:                              # @find_SATD
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_find_SATD.30
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_find_SATD.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_find_SATD.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_find_SATD.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	find_SATD.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	find_SATD, .Lfunc_end12-find_SATD
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockMotionSearch # -- Begin function SubPelBlockMotionSearch
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch,@function
SubPelBlockMotionSearch:                # @SubPelBlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SubPelBlockMotionSearch.27
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	56(%rbp), %eax
	movl	%eax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockMotionSearch.27
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SubPelBlockMotionSearch.79
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%r15d, 48(%rsp)
	callq	SubPelBlockMotionSearch.79
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SubPelBlockMotionSearch.80
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.80
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SubPelBlockMotionSearch.84
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movl	%r12d, 40(%rsp)
	movl	%ebx, 48(%rsp)
	callq	SubPelBlockMotionSearch.84
	addq	$72, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%ebx, %edx
	movw	16(%rbp), %r11w
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	56(%rbp), %r12d
	movl	64(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %ebx
	movl	%r13d, %ecx
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SubPelBlockMotionSearch, .Lfunc_end13-SubPelBlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	FullPelBlockMotionBiPred # -- Begin function FullPelBlockMotionBiPred
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred,@function
FullPelBlockMotionBiPred:               # @FullPelBlockMotionBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_FullPelBlockMotionBiPred.17
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	88(%rbp), %eax
	movl	%eax, 72(%rsp)
	movl	96(%rbp), %eax
	movl	%eax, 80(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	FullPelBlockMotionBiPred.17
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_FullPelBlockMotionBiPred.47
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.47
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_FullPelBlockMotionBiPred.51
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.51
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_FullPelBlockMotionBiPred.63
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r11d, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movswl	32(%rbp), %eax
	movl	%eax, 16(%rsp)
	movswl	40(%rbp), %eax
	movl	%eax, 24(%rsp)
	movswl	48(%rbp), %eax
	movl	%eax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movq	64(%rbp), %rax
	movq	%rax, 48(%rsp)
	movq	72(%rbp), %rax
	movq	%rax, 56(%rsp)
	movq	80(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r15d, 80(%rsp)
	callq	FullPelBlockMotionBiPred.63
	addq	$104, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	16(%rbp), %r11d
	movl	%ebx, %edx
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	88(%rbp), %ebx
	movl	96(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	FullPelBlockMotionBiPred, .Lfunc_end14-FullPelBlockMotionBiPred
	.cfi_endproc
                                        # -- End function
	.globl	SubPelBlockSearchBiPred # -- Begin function SubPelBlockSearchBiPred
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred,@function
SubPelBlockSearchBiPred:                # @SubPelBlockSearchBiPred
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_SubPelBlockSearchBiPred.15
	movq	%r15, %rdi
	movswl	%r14w, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	72(%rbp), %eax
	movl	%eax, 56(%rsp)
	movl	80(%rbp), %eax
	movl	%eax, 64(%rsp)
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	SubPelBlockSearchBiPred.15
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_SubPelBlockSearchBiPred.78
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movl	%r13d, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r15d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.78
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_SubPelBlockSearchBiPred.95
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.95
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_SubPelBlockSearchBiPred.96
	.cfi_def_cfa %rbp, 16
	movswl	%r14w, %esi
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	movq	32(%rbp), %rax
	movq	%rax, 16(%rsp)
	movq	40(%rbp), %rax
	movq	%rax, 24(%rsp)
	movq	48(%rbp), %rax
	movq	%rax, 32(%rsp)
	movq	56(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	64(%rbp), %eax
	movl	%eax, 48(%rsp)
	movl	%ebx, 56(%rsp)
	movl	%r12d, 64(%rsp)
	callq	SubPelBlockSearchBiPred.96
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movw	16(%rbp), %r11w
	movl	%ebx, %edx
	movl	%r12d, %r8d
	movw	24(%rbp), %r10w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	72(%rbp), %ebx
	movl	80(%rbp), %r15d
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r15d, %r12d
	movl	%r13d, %ecx
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	SubPelBlockSearchBiPred, .Lfunc_end15-SubPelBlockSearchBiPred
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost      # -- Begin function BPredPartitionCost
	.p2align	4, 0x90
	.type	BPredPartitionCost,@function
BPredPartitionCost:                     # @BPredPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_BPredPartitionCost.5
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	BPredPartitionCost.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_BPredPartitionCost.19
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	movl	%r12d, %r8d
	callq	BPredPartitionCost.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_BPredPartitionCost.42
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.42
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_BPredPartitionCost.46
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edx
	movswl	%r13w, %ecx
	callq	BPredPartitionCost.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	BPredPartitionCost, .Lfunc_end16-BPredPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	BlockMotionSearch       # -- Begin function BlockMotionSearch
	.p2align	4, 0x90
	.type	BlockMotionSearch,@function
BlockMotionSearch:                      # @BlockMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_BlockMotionSearch.3
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	BlockMotionSearch.3
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_BlockMotionSearch.29
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	BlockMotionSearch.29
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_BlockMotionSearch.34
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.34
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_BlockMotionSearch.54
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %edi
	callq	BlockMotionSearch.54
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	BlockMotionSearch, .Lfunc_end17-BlockMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB           # -- Begin function GetSkipCostMB
	.p2align	4, 0x90
	.type	GetSkipCostMB,@function
GetSkipCostMB:                          # @GetSkipCostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_GetSkipCostMB.4
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	GetSkipCostMB.4
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_GetSkipCostMB.35
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.35
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_GetSkipCostMB.38
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.38
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_GetSkipCostMB.40
	.cfi_def_cfa %rbp, 16
	callq	GetSkipCostMB.40
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	GetSkipCostMB, .Lfunc_end18-GetSkipCostMB
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost        # -- Begin function BIDPartitionCost
	.p2align	4, 0x90
	.type	BIDPartitionCost,@function
BIDPartitionCost:                       # @BIDPartitionCost
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_BIDPartitionCost.9
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_BIDPartitionCost.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.10
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_BIDPartitionCost.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.26
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_BIDPartitionCost.41
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movswl	%r12w, %edx
	movswl	%r15w, %ecx
	movl	%r14d, %r8d
	callq	BIDPartitionCost.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	BIDPartitionCost, .Lfunc_end19-BIDPartitionCost
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector # -- Begin function FindSkipModeMotionVector
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector,@function
FindSkipModeMotionVector:               # @FindSkipModeMotionVector
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_FindSkipModeMotionVector.43
	callq	FindSkipModeMotionVector.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_FindSkipModeMotionVector.58
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_FindSkipModeMotionVector.82
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_FindSkipModeMotionVector.91
	.cfi_def_cfa %rbp, 16
	callq	FindSkipModeMotionVector.91
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	FindSkipModeMotionVector, .Lfunc_end20-FindSkipModeMotionVector
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8      # -- Begin function Get_Direct_Cost8x8
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8,@function
Get_Direct_Cost8x8:                     # @Get_Direct_Cost8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_Get_Direct_Cost8x8.28
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_Get_Direct_Cost8x8.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.61
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_Get_Direct_Cost8x8.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_Get_Direct_Cost8x8.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Get_Direct_Cost8x8.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	Get_Direct_Cost8x8, .Lfunc_end21-Get_Direct_Cost8x8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB       # -- Begin function Get_Direct_CostMB
	.p2align	4, 0x90
	.type	Get_Direct_CostMB,@function
Get_Direct_CostMB:                      # @Get_Direct_CostMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	vmovsd	%xmm0, -8(%rbp)         # 8-byte Spill
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_Get_Direct_CostMB.24
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB.24
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_Get_Direct_CostMB.48
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.48
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_Get_Direct_CostMB.76
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.76
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_Get_Direct_CostMB.85
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_CostMB.85
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-8(%rbp), %xmm0         # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	Get_Direct_CostMB, .Lfunc_end22-Get_Direct_CostMB
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch   # -- Begin function PartitionMotionSearch
	.p2align	4, 0x90
	.type	PartitionMotionSearch,@function
PartitionMotionSearch:                  # @PartitionMotionSearch
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_PartitionMotionSearch.31
	movl	%ebx, %edi
	movl	%r14d, %esi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	callq	PartitionMotionSearch.31
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_PartitionMotionSearch.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.55
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_PartitionMotionSearch.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.88
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_PartitionMotionSearch.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	PartitionMotionSearch.98
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	PartitionMotionSearch, .Lfunc_end23-PartitionMotionSearch
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors # -- Begin function Get_Direct_Motion_Vectors
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors,@function
Get_Direct_Motion_Vectors:              # @Get_Direct_Motion_Vectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_Get_Direct_Motion_Vectors.8
	callq	Get_Direct_Motion_Vectors.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_Get_Direct_Motion_Vectors.11
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_Get_Direct_Motion_Vectors.93
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.93
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_Get_Direct_Motion_Vectors.94
	.cfi_def_cfa %rbp, 16
	callq	Get_Direct_Motion_Vectors.94
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	Get_Direct_Motion_Vectors, .Lfunc_end24-Get_Direct_Motion_Vectors
	.cfi_endproc
                                        # -- End function
	.globl	sign                    # -- Begin function sign
	.p2align	4, 0x90
	.type	sign,@function
sign:                                   # @sign
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_sign.23
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_sign.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_sign.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_sign.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	sign.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	sign, .Lfunc_end25-sign
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.1 # -- Begin function InitializeFastFullIntegerSearch.1
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.1,@function
InitializeFastFullIntegerSearch.1:      # @InitializeFastFullIntegerSearch.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$182441383, -24(%rbp)   # imm = 0xADFD5A7
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -28(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB26_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB26_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB26_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_7 Depth 2
                                        #       Child Loop BB26_11 Depth 3
                                        #         Child Loop BB26_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB26_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB26_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB26_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB26_6:                               # %if.end12
                                        #   in Loop: Header=BB26_3 Depth=1
	movl	$0, -8(%rbp)
.LBB26_7:                               # %for.cond13
                                        #   Parent Loop BB26_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB26_11 Depth 3
                                        #         Child Loop BB26_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB26_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB26_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB26_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB26_10:                              # %if.end26
                                        #   in Loop: Header=BB26_7 Depth=2
	movl	$1, -16(%rbp)
.LBB26_11:                              # %for.cond27
                                        #   Parent Loop BB26_3 Depth=1
                                        #     Parent Loop BB26_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB26_15 Depth 4
	cmpl	$8, -16(%rbp)
	jge	.LBB26_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB26_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB26_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB26_14:                              # %if.end41
                                        #   in Loop: Header=BB26_11 Depth=3
	movl	$0, -20(%rbp)
.LBB26_15:                              # %for.cond42
                                        #   Parent Loop BB26_3 Depth=1
                                        #     Parent Loop BB26_7 Depth=2
                                        #       Parent Loop BB26_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB26_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB26_15 Depth=4
	movslq	-28(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB26_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB26_18:                              # %if.end60
                                        #   in Loop: Header=BB26_15 Depth=4
	jmp	.LBB26_19
.LBB26_19:                              # %for.inc
                                        #   in Loop: Header=BB26_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB26_15
.LBB26_20:                              # %for.end
                                        #   in Loop: Header=BB26_11 Depth=3
	jmp	.LBB26_21
.LBB26_21:                              # %for.inc61
                                        #   in Loop: Header=BB26_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB26_11
.LBB26_22:                              # %for.end63
                                        #   in Loop: Header=BB26_7 Depth=2
	jmp	.LBB26_23
.LBB26_23:                              # %for.inc64
                                        #   in Loop: Header=BB26_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_7
.LBB26_24:                              # %for.end66
                                        #   in Loop: Header=BB26_3 Depth=1
	jmp	.LBB26_25
.LBB26_25:                              # %for.inc67
                                        #   in Loop: Header=BB26_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_3
.LBB26_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB26_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB26_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB26_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB26_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB26_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB26_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB26_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB26_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB26_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB26_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB26_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB26_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB26_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB26_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB26_40:                              # %if.end109
                                        #   in Loop: Header=BB26_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB26_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB26_42:                              # %if.end120
                                        #   in Loop: Header=BB26_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB26_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB26_44:                              # %if.end131
                                        #   in Loop: Header=BB26_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB26_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB26_46:                              # %if.end142
                                        #   in Loop: Header=BB26_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB26_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB26_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB26_48:                              # %if.end153
                                        #   in Loop: Header=BB26_37 Depth=1
	jmp	.LBB26_49
.LBB26_49:                              # %for.inc154
                                        #   in Loop: Header=BB26_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_37
.LBB26_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB26_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB26_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB26_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB26_52 Depth=1
	movl	$0, -8(%rbp)
.LBB26_54:                              # %for.cond164
                                        #   Parent Loop BB26_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB26_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB26_54 Depth=2
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB26_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_54
.LBB26_57:                              # %for.end175
                                        #   in Loop: Header=BB26_52 Depth=1
	jmp	.LBB26_58
.LBB26_58:                              # %for.inc176
                                        #   in Loop: Header=BB26_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_52
.LBB26_59:                              # %for.end178
	jmp	.LBB26_69
.LBB26_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB26_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB26_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB26_61 Depth=1
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB26_63:                              # %for.cond191
                                        #   Parent Loop BB26_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB26_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB26_63 Depth=2
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB26_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_63
.LBB26_66:                              # %for.end202
                                        #   in Loop: Header=BB26_61 Depth=1
	jmp	.LBB26_67
.LBB26_67:                              # %for.inc203
                                        #   in Loop: Header=BB26_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_61
.LBB26_68:                              # %for.end205
	jmp	.LBB26_69
.LBB26_69:                              # %if.end206
	cmpl	$182441383, -24(%rbp)   # imm = 0xADFD5A7
	jne	.LBB26_71
.LBB26_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_70
.Lfunc_end26:
	.size	InitializeFastFullIntegerSearch.1, .Lfunc_end26-InitializeFastFullIntegerSearch.1
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.2               # -- Begin function SATD8X8.2
	.p2align	4, 0x90
	.type	SATD8X8.2,@function
SATD8X8.2:                              # @SATD8X8.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1439598141, -36(%rbp)  # imm = 0x55CE863D
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB27_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB27_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_2
.LBB27_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB27_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB27_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB27_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB27_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_6
.LBB27_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB27_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB27_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB27_10 Depth=1
	movl	$0, -12(%rbp)
.LBB27_12:                              # %for.cond499
                                        #   Parent Loop BB27_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB27_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB27_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB27_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB27_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB27_16
.LBB27_15:                              # %cond.false
                                        #   in Loop: Header=BB27_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB27_16:                              # %cond.end
                                        #   in Loop: Header=BB27_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB27_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_12
.LBB27_18:                              # %for.end519
                                        #   in Loop: Header=BB27_10 Depth=1
	jmp	.LBB27_19
.LBB27_19:                              # %for.inc520
                                        #   in Loop: Header=BB27_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB27_10
.LBB27_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB27_26
.LBB27_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB27_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB27_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB27_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB27_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB27_22
.LBB27_25:                              # %for.end534
	jmp	.LBB27_26
.LBB27_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1439598141, -36(%rbp)  # imm = 0x55CE863D
	jne	.LBB27_28
.LBB27_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_27
.Lfunc_end27:
	.size	SATD8X8.2, .Lfunc_end27-SATD8X8.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.3
.LCPI28_0:
	.quad	4611686018427387904     # double 2
.LCPI28_1:
	.quad	4607182418800017408     # double 1
.LCPI28_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI28_4:
	.quad	4620693217682128896     # double 8
.LCPI28_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI28_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.3
	.p2align	4, 0x90
	.type	BlockMotionSearch.3,@function
BlockMotionSearch.3:                    # @BlockMotionSearch.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1367321572, -212(%rbp) # imm = 0x517FABE4
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -196(%rbp)
	movl	%ecx, -180(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -92(%rbp)
	leaq	-256(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB28_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB28_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	addl	$1, %edx
	jmp	.LBB28_4
.LBB28_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB28_4
.LBB28_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB28_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB28_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB28_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB28_6 Depth=1
	movl	$0, -64(%rbp)
.LBB28_8:                               # %for.cond24
                                        #   Parent Loop BB28_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB28_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB28_8 Depth=2
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB28_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB28_8
.LBB28_11:                              # %for.end
                                        #   in Loop: Header=BB28_6 Depth=1
	jmp	.LBB28_12
.LBB28_12:                              # %for.inc37
                                        #   in Loop: Header=BB28_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB28_6
.LBB28_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB28_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB28_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_18
.LBB28_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB28_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB28_37
.LBB28_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB28_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_23
.LBB28_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB28_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB28_36
.LBB28_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB28_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_28
.LBB28_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB28_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB28_35
.LBB28_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB28_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_33
.LBB28_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB28_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB28_34:                              # %if.end276
	jmp	.LBB28_35
.LBB28_35:                              # %if.end277
	jmp	.LBB28_36
.LBB28_36:                              # %if.end278
	jmp	.LBB28_37
.LBB28_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB28_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB28_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_43
.LBB28_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB28_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB28_62
.LBB28_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB28_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_48
.LBB28_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB28_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB28_61
.LBB28_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB28_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_53
.LBB28_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB28_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB28_60
.LBB28_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB28_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB28_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB28_58
.LBB28_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB28_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB28_59:                              # %if.end524
	jmp	.LBB28_60
.LBB28_60:                              # %if.end525
	jmp	.LBB28_61
.LBB28_61:                              # %if.end526
	jmp	.LBB28_62
.LBB28_62:                              # %if.end527
	jmp	.LBB28_63
.LBB28_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB28_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB28_66
.LBB28_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB28_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB28_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB28_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB28_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-104(%rbp)
	cmpl	$1, %edx
	jle	.LBB28_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB28_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB28_73
.LBB28_72:                              # %cond.false626
	vmovsd	.LCPI28_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI28_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB28_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB28_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-104(%rbp), %xmm0, %xmm1
	jmp	.LBB28_76
.LBB28_75:                              # %cond.false655
	vmovsd	.LCPI28_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI28_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB28_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB28_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB28_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB28_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB28_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB28_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB28_83
.LBB28_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB28_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB28_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB28_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB28_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB28_92
.LBB28_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB28_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB28_91
.LBB28_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB28_91:                              # %cond.end787
	vmovss	.LCPI28_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB28_92:                              # %if.end835
	jmp	.LBB28_106
.LBB28_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB28_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB28_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB28_97
.LBB28_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB28_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB28_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB28_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB28_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB28_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB28_104
.LBB28_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB28_104:                             # %cond.end940
	vmovss	.LCPI28_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-104(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB28_105:                             # %if.end988
	jmp	.LBB28_106
.LBB28_106:                             # %if.end989
	jmp	.LBB28_107
.LBB28_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB28_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB28_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	-140(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB28_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB28_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB28_113
# %bb.112:                              # %cond.true1013
	movl	-100(%rbp), %ecx
	jmp	.LBB28_114
.LBB28_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB28_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB28_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-100(%rbp), %ecx
	jmp	.LBB28_120
.LBB28_116:                             # %cond.false1022
	movl	-100(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_118
# %bb.117:                              # %cond.true1026
	movl	-100(%rbp), %ecx
	jmp	.LBB28_119
.LBB28_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB28_119:                             # %cond.end1029
.LBB28_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-100(%rbp), %eax
	movl	-100(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB28_122
# %bb.121:                              # %cond.true1038
	movl	-100(%rbp), %ecx
	jmp	.LBB28_123
.LBB28_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB28_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB28_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB28_129
.LBB28_125:                             # %cond.false1047
	movl	-100(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_127
# %bb.126:                              # %cond.true1051
	movl	-100(%rbp), %eax
	jmp	.LBB28_128
.LBB28_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB28_128:                             # %cond.end1054
.LBB28_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB28_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB28_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB28_131 Depth=1
	movl	$0, -72(%rbp)
.LBB28_133:                             # %for.cond1066
                                        #   Parent Loop BB28_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB28_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB28_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB28_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB28_137
.LBB28_136:                             # %if.else1091
                                        #   in Loop: Header=BB28_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB28_137:                             # %if.end1109
                                        #   in Loop: Header=BB28_133 Depth=2
	jmp	.LBB28_138
.LBB28_138:                             # %for.inc1110
                                        #   in Loop: Header=BB28_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB28_133
.LBB28_139:                             # %for.end1112
                                        #   in Loop: Header=BB28_131 Depth=1
	jmp	.LBB28_140
.LBB28_140:                             # %for.inc1113
                                        #   in Loop: Header=BB28_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB28_131
.LBB28_141:                             # %for.end1115
	jmp	.LBB28_143
.LBB28_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-100(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB28_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB28_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB28_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB28_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB28_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB28_150
.LBB28_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB28_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB28_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB28_151 Depth=1
	movl	$0, -72(%rbp)
.LBB28_153:                             # %for.cond1139
                                        #   Parent Loop BB28_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB28_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB28_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB28_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB28_157
.LBB28_156:                             # %if.else1183
                                        #   in Loop: Header=BB28_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB28_157:                             # %if.end1220
                                        #   in Loop: Header=BB28_153 Depth=2
	jmp	.LBB28_158
.LBB28_158:                             # %for.inc1221
                                        #   in Loop: Header=BB28_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB28_153
.LBB28_159:                             # %for.end1223
                                        #   in Loop: Header=BB28_151 Depth=1
	jmp	.LBB28_160
.LBB28_160:                             # %for.inc1224
                                        #   in Loop: Header=BB28_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB28_151
.LBB28_161:                             # %for.end1226
	jmp	.LBB28_166
.LBB28_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB28_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB28_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB28_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB28_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB28_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB28_173
.LBB28_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI28_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI28_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB28_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB28_172:                             # %if.end1273
	jmp	.LBB28_173
.LBB28_173:                             # %if.end1274
	jmp	.LBB28_174
.LBB28_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB28_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -192(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -64(%rbp)
.LBB28_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB28_176 Depth=1
	movl	$0, -72(%rbp)
.LBB28_178:                             # %for.cond1290
                                        #   Parent Loop BB28_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB28_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB28_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB28_178
.LBB28_181:                             # %for.end1337
                                        #   in Loop: Header=BB28_176 Depth=1
	jmp	.LBB28_182
.LBB28_182:                             # %for.inc1338
                                        #   in Loop: Header=BB28_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB28_176
.LBB28_183:                             # %for.end1340
	jmp	.LBB28_193
.LBB28_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB28_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB28_185 Depth=1
	movl	$0, -72(%rbp)
.LBB28_187:                             # %for.cond1347
                                        #   Parent Loop BB28_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB28_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB28_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB28_187
.LBB28_190:                             # %for.end1380
                                        #   in Loop: Header=BB28_185 Depth=1
	jmp	.LBB28_191
.LBB28_191:                             # %for.inc1381
                                        #   in Loop: Header=BB28_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB28_185
.LBB28_192:                             # %for.end1383
	jmp	.LBB28_193
.LBB28_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB28_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB28_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB28_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB28_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB28_200
.LBB28_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB28_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %eax
	movl	-132(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB28_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB28_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB28_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB28_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB28_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB28_208
.LBB28_204:                             # %if.else1433
                                        #   in Loop: Header=BB28_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -148(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -146(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB28_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB28_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB28_207
.LBB28_206:                             # %if.else1441
                                        #   in Loop: Header=BB28_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB28_207:                             # %if.end1450
                                        #   in Loop: Header=BB28_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB28_208:                             # %if.end1452
                                        #   in Loop: Header=BB28_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %eax
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-148(%rbp), %r11w
	movw	-146(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB28_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB28_201
.LBB28_210:                             # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB28_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB28_213:                             # %if.end1469
	vmovsd	.LCPI28_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB28_215
.LBB28_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB28_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB28_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB28_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI28_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB28_220
.LBB28_219:                             # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB28_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB28_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB28_221 Depth=1
	movl	$0, -72(%rbp)
.LBB28_223:                             # %for.cond1502
                                        #   Parent Loop BB28_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB28_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-48(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB28_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB28_223
.LBB28_226:                             # %for.end1565
                                        #   in Loop: Header=BB28_221 Depth=1
	jmp	.LBB28_227
.LBB28_227:                             # %for.inc1566
                                        #   in Loop: Header=BB28_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB28_221
.LBB28_228:                             # %for.end1568
	jmp	.LBB28_229
.LBB28_229:                             # %if.end1569
	leaq	-240(%rbp), %rdi
	callq	ftime
	imulq	$1000, -240(%rbp), %rax # imm = 0x3E8
	movzwl	-232(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -256(%rbp), %rcx # imm = 0x3E8
	movzwl	-248(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -184(%rbp)
	movl	-184(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-184(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$1367321572, -212(%rbp) # imm = 0x517FABE4
	jne	.LBB28_231
.LBB28_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_230
.Lfunc_end28:
	.size	BlockMotionSearch.3, .Lfunc_end28-BlockMotionSearch.3
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.4         # -- Begin function GetSkipCostMB.4
	.p2align	4, 0x90
	.type	GetSkipCostMB.4,@function
GetSkipCostMB.4:                        # @GetSkipCostMB.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1091722093, -48(%rbp)  # imm = 0x41125B6D
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
                                        #       Child Loop BB29_5 Depth 3
                                        #         Child Loop BB29_7 Depth 4
                                        #           Child Loop BB29_9 Depth 5
                                        #     Child Loop BB29_24 Depth 2
                                        #       Child Loop BB29_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB29_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB29_3:                               # %for.cond2
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_5 Depth 3
                                        #         Child Loop BB29_7 Depth 4
                                        #           Child Loop BB29_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB29_5:                               # %for.cond6
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB29_7 Depth 4
                                        #           Child Loop BB29_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB29_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB29_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %edi
	movl	-20(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB29_7:                               # %for.cond11
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_3 Depth=2
                                        #       Parent Loop BB29_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB29_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB29_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB29_7 Depth=4
	movl	$0, -12(%rbp)
.LBB29_9:                               # %for.cond14
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_3 Depth=2
                                        #       Parent Loop BB29_5 Depth=3
                                        #         Parent Loop BB29_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB29_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB29_9 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-20(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB29_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_9
.LBB29_12:                              # %for.end
                                        #   in Loop: Header=BB29_7 Depth=4
	jmp	.LBB29_13
.LBB29_13:                              # %for.inc39
                                        #   in Loop: Header=BB29_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_7
.LBB29_14:                              # %for.end41
                                        #   in Loop: Header=BB29_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB29_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB29_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB29_17
.LBB29_16:                              # %if.then
                                        #   in Loop: Header=BB29_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB29_17:                              # %if.end
                                        #   in Loop: Header=BB29_5 Depth=3
	jmp	.LBB29_18
.LBB29_18:                              # %for.inc45
                                        #   in Loop: Header=BB29_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB29_5
.LBB29_19:                              # %for.end47
                                        #   in Loop: Header=BB29_3 Depth=2
	jmp	.LBB29_20
.LBB29_20:                              # %for.inc48
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB29_3
.LBB29_21:                              # %for.end50
                                        #   in Loop: Header=BB29_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB29_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB29_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB29_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB29_24:                              # %for.cond58
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB29_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB29_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB29_24 Depth=2
	movl	$0, -12(%rbp)
.LBB29_26:                              # %for.cond62
                                        #   Parent Loop BB29_1 Depth=1
                                        #     Parent Loop BB29_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB29_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB29_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB29_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB29_26
.LBB29_29:                              # %for.end75
                                        #   in Loop: Header=BB29_24 Depth=2
	jmp	.LBB29_30
.LBB29_30:                              # %for.inc76
                                        #   in Loop: Header=BB29_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB29_24
.LBB29_31:                              # %for.end78
                                        #   in Loop: Header=BB29_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB29_32:                              # %if.end83
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_33
.LBB29_33:                              # %for.inc84
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB29_1
.LBB29_34:                              # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$1091722093, -48(%rbp)  # imm = 0x41125B6D
	jne	.LBB29_36
.LBB29_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_35
.Lfunc_end29:
	.size	GetSkipCostMB.4, .Lfunc_end29-GetSkipCostMB.4
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.5    # -- Begin function BPredPartitionCost.5
	.p2align	4, 0x90
	.type	BPredPartitionCost.5,@function
BPredPartitionCost.5:                   # @BPredPartitionCost.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$2058305663, -104(%rbp) # imm = 0x7AAF407F
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -116(%rbp)
	movl	%r9d, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB30_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB30_3
.LBB30_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB30_3
.LBB30_3:                               # %cond.end
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB30_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB30_6
.LBB30_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB30_6
.LBB30_6:                               # %cond.end17
	movl	%eax, -112(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB30_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB30_9
.LBB30_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB30_9
.LBB30_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -80(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB30_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB30_12
.LBB30_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB30_12:                              # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB30_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB30_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB30_15:                              # %for.cond56
                                        #   Parent Loop BB30_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB30_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB30_15 Depth=2
	movl	-100(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_15
.LBB30_18:                              # %for.end
                                        #   in Loop: Header=BB30_13 Depth=1
	jmp	.LBB30_19
.LBB30_19:                              # %for.inc167
                                        #   in Loop: Header=BB30_13 Depth=1
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_13
.LBB30_20:                              # %for.end169
	movl	-116(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB30_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_23 Depth 2
                                        #       Child Loop BB30_25 Depth 3
                                        #         Child Loop BB30_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB30_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB30_23:                              # %for.cond188
                                        #   Parent Loop BB30_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_25 Depth 3
                                        #         Child Loop BB30_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB30_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	-76(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-72(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB30_25:                              # %for.cond199
                                        #   Parent Loop BB30_21 Depth=1
                                        #     Parent Loop BB30_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB30_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB30_25 Depth=3
	movl	$0, -28(%rbp)
.LBB30_27:                              # %for.cond203
                                        #   Parent Loop BB30_21 Depth=1
                                        #     Parent Loop BB30_23 Depth=2
                                        #       Parent Loop BB30_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB30_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB30_27 Depth=4
	movq	imgY_org, %rax
	movl	-124(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB30_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB30_27
.LBB30_30:                              # %for.end232
                                        #   in Loop: Header=BB30_25 Depth=3
	jmp	.LBB30_31
.LBB30_31:                              # %for.inc233
                                        #   in Loop: Header=BB30_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_25
.LBB30_32:                              # %for.end235
                                        #   in Loop: Header=BB30_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB30_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB30_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB30_35
.LBB30_34:                              # %if.then
                                        #   in Loop: Header=BB30_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB30_35:                              # %if.end
                                        #   in Loop: Header=BB30_23 Depth=2
	jmp	.LBB30_36
.LBB30_36:                              # %for.inc240
                                        #   in Loop: Header=BB30_23 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_23
.LBB30_37:                              # %for.end243
                                        #   in Loop: Header=BB30_21 Depth=1
	jmp	.LBB30_38
.LBB30_38:                              # %for.inc244
                                        #   in Loop: Header=BB30_21 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_21
.LBB30_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB30_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB30_58
# %bb.41:                               # %if.then252
	movl	$0, -48(%rbp)
.LBB30_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_44 Depth 2
                                        #       Child Loop BB30_46 Depth 3
                                        #         Child Loop BB30_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB30_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB30_42 Depth=1
	movl	$0, -44(%rbp)
.LBB30_44:                              # %for.cond261
                                        #   Parent Loop BB30_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB30_46 Depth 3
                                        #         Child Loop BB30_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB30_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB30_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB30_46:                              # %for.cond269
                                        #   Parent Loop BB30_42 Depth=1
                                        #     Parent Loop BB30_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB30_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB30_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB30_46 Depth=3
	movl	$0, -32(%rbp)
.LBB30_48:                              # %for.cond273
                                        #   Parent Loop BB30_42 Depth=1
                                        #     Parent Loop BB30_44 Depth=2
                                        #       Parent Loop BB30_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB30_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB30_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB30_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB30_48
.LBB30_51:                              # %for.end288
                                        #   in Loop: Header=BB30_46 Depth=3
	jmp	.LBB30_52
.LBB30_52:                              # %for.inc289
                                        #   in Loop: Header=BB30_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB30_46
.LBB30_53:                              # %for.end291
                                        #   in Loop: Header=BB30_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB30_44 Depth=2
	movl	-128(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB30_44
.LBB30_55:                              # %for.end298
                                        #   in Loop: Header=BB30_42 Depth=1
	jmp	.LBB30_56
.LBB30_56:                              # %for.inc299
                                        #   in Loop: Header=BB30_42 Depth=1
	movl	-112(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB30_42
.LBB30_57:                              # %for.end301
	jmp	.LBB30_58
.LBB30_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$2058305663, -104(%rbp) # imm = 0x7AAF407F
	jne	.LBB30_60
.LBB30_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_59
.Lfunc_end30:
	.size	BPredPartitionCost.5, .Lfunc_end30-BPredPartitionCost.5
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.6     # -- Begin function SetupLargerBlocks.6
	.p2align	4, 0x90
	.type	SetupLargerBlocks.6,@function
SetupLargerBlocks.6:                    # @SetupLargerBlocks.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$854930579, -76(%rbp)   # imm = 0x32F53493
	movl	%edi, -68(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_4:                               # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB31_5 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB31_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_5
.LBB31_8:                               # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB31_9 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB31_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_9
.LBB31_12:                              # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB31_13 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB31_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_13
.LBB31_16:                              # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB31_17 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB31_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_17
.LBB31_20:                              # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB31_21 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB31_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_21
.LBB31_24:                              # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB31_25 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB31_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_25
.LBB31_28:                              # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB31_29 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB31_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_29
.LBB31_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB31_33 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB31_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_33
.LBB31_36:                              # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB31_37 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB31_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_37
.LBB31_40:                              # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB31_41 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB31_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_41
.LBB31_44:                              # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB31_45 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB31_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_45
.LBB31_48:                              # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB31_49 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB31_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_49
.LBB31_52:                              # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB31_53 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB31_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_53
.LBB31_56:                              # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB31_57 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB31_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_57
.LBB31_60:                              # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB31_61 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB31_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_61
.LBB31_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB31_65 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB31_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_65
.LBB31_68:                              # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB31_69 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB31_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_69
.LBB31_72:                              # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB31_73 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB31_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_73
.LBB31_76:                              # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB31_77 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB31_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_77
.LBB31_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB31_81 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB31_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_81
.LBB31_84:                              # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB31_85 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB31_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_85
.LBB31_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB31_89 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB31_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_89
.LBB31_92:                              # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB31_93 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB31_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_93
.LBB31_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB31_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB31_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB31_97 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB31_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_97
.LBB31_100:                             # %for.end438
	cmpl	$854930579, -76(%rbp)   # imm = 0x32F53493
	jne	.LBB31_102
.LBB31_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_101
.Lfunc_end31:
	.size	SetupLargerBlocks.6, .Lfunc_end31-SetupLargerBlocks.6
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.7
.LCPI32_0:
	.quad	4602678819172646912     # double 0.5
.LCPI32_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.7
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.7,@function
FastFullPelBlockMotionSearch.7:         # @FastFullPelBlockMotionSearch.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI32_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$105412419, -60(%rbp)   # imm = 0x6487743
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -64(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -80(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -56(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-84(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-64(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB32_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB32_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB32_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-52(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB32_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB32_5:                               # %if.end56
	jmp	.LBB32_6
.LBB32_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB32_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB32_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB32_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB32_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB32_7 Depth=1
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-52(%rbp), %eax
	movq	mvbits, %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-68(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB32_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB32_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB32_11:                              # %if.end85
                                        #   in Loop: Header=BB32_7 Depth=1
	jmp	.LBB32_12
.LBB32_12:                              # %if.end86
                                        #   in Loop: Header=BB32_7 Depth=1
	jmp	.LBB32_13
.LBB32_13:                              # %for.inc
                                        #   in Loop: Header=BB32_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB32_7
.LBB32_14:                              # %for.end
	movl	-48(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-44(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$105412419, -60(%rbp)   # imm = 0x6487743
	jne	.LBB32_16
.LBB32_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_15
.Lfunc_end32:
	.size	FastFullPelBlockMotionSearch.7, .Lfunc_end32-FastFullPelBlockMotionSearch.7
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.8 # -- Begin function Get_Direct_Motion_Vectors.8
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.8,@function
Get_Direct_Motion_Vectors.8:            # @Get_Direct_Motion_Vectors.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$29500330, -232(%rbp)   # imm = 0x1C223AA
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB33_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB33_5
.LBB33_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB33_5:                               # %if.end
	jmp	.LBB33_7
.LBB33_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB33_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB33_226
# %bb.8:                                # %if.then9
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB33_34
# %bb.9:                                # %if.then16
	cmpl	$0, -112(%rbp)
	je	.LBB33_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_12
.LBB33_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_12
.LBB33_12:                              # %cond.end
	movw	%ax, -30(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB33_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_15
.LBB33_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_15
.LBB33_15:                              # %cond.end38
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB33_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_18
.LBB33_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_18
.LBB33_18:                              # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB33_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_21
.LBB33_20:                              # %cond.false69
	movswl	-50(%rbp), %eax
.LBB33_21:                              # %cond.end71
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB33_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_24
.LBB33_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_24
.LBB33_24:                              # %cond.end87
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB33_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_27
.LBB33_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_27
.LBB33_27:                              # %cond.end103
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB33_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_30
.LBB33_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_30
.LBB33_30:                              # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB33_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_33
.LBB33_32:                              # %cond.false134
	movswl	-52(%rbp), %eax
.LBB33_33:                              # %cond.end136
	movw	%ax, -28(%rbp)
	jmp	.LBB33_150
.LBB33_34:                              # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_92
# %bb.35:                               # %if.then142
	cmpl	$0, -112(%rbp)
	je	.LBB33_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_39
.LBB33_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_40
.LBB33_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_40:                              # %cond.end181
	jmp	.LBB33_42
.LBB33_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_42
.LBB33_42:                              # %cond.end184
	movw	%ax, -30(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB33_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_46
.LBB33_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_47
.LBB33_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_47:                              # %cond.end229
	jmp	.LBB33_49
.LBB33_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_49
.LBB33_49:                              # %cond.end232
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB33_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_53
.LBB33_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_54
.LBB33_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_54:                              # %cond.end277
	jmp	.LBB33_56
.LBB33_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_56
.LBB33_56:                              # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB33_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_60
.LBB33_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_61
.LBB33_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_61:                              # %cond.end325
	jmp	.LBB33_63
.LBB33_62:                              # %cond.false327
	movswl	-50(%rbp), %eax
.LBB33_63:                              # %cond.end329
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB33_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_67
.LBB33_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_68
.LBB33_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_68:                              # %cond.end374
	jmp	.LBB33_70
.LBB33_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_70
.LBB33_70:                              # %cond.end377
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB33_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_74
.LBB33_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_75
.LBB33_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_75:                              # %cond.end422
	jmp	.LBB33_77
.LBB33_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_77
.LBB33_77:                              # %cond.end425
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB33_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_81
.LBB33_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_82
.LBB33_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_82:                              # %cond.end470
	jmp	.LBB33_84
.LBB33_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_84
.LBB33_84:                              # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB33_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_88
.LBB33_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB33_89
.LBB33_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB33_89:                              # %cond.end518
	jmp	.LBB33_91
.LBB33_90:                              # %cond.false520
	movswl	-52(%rbp), %eax
.LBB33_91:                              # %cond.end522
	movw	%ax, -28(%rbp)
	jmp	.LBB33_149
.LBB33_92:                              # %if.else525
	cmpl	$0, -112(%rbp)
	je	.LBB33_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_96
.LBB33_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_97
.LBB33_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_97:                              # %cond.end567
	jmp	.LBB33_99
.LBB33_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_99
.LBB33_99:                              # %cond.end570
	movw	%ax, -30(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB33_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_103
.LBB33_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_104
.LBB33_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_104:                             # %cond.end615
	jmp	.LBB33_106
.LBB33_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_106
.LBB33_106:                             # %cond.end618
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB33_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_110
.LBB33_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_111
.LBB33_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_111:                             # %cond.end663
	jmp	.LBB33_113
.LBB33_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_113
.LBB33_113:                             # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB33_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_117
.LBB33_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_118
.LBB33_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_118:                             # %cond.end711
	jmp	.LBB33_120
.LBB33_119:                             # %cond.false713
	movswl	-50(%rbp), %eax
.LBB33_120:                             # %cond.end715
	movw	%ax, -22(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB33_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_124
.LBB33_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_125
.LBB33_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_125:                             # %cond.end760
	jmp	.LBB33_127
.LBB33_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_127
.LBB33_127:                             # %cond.end763
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB33_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_131
.LBB33_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_132
.LBB33_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_132:                             # %cond.end808
	jmp	.LBB33_134
.LBB33_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_134
.LBB33_134:                             # %cond.end811
	movw	%ax, -26(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB33_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_138
.LBB33_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_139
.LBB33_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_139:                             # %cond.end856
	jmp	.LBB33_141
.LBB33_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB33_141
.LBB33_141:                             # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB33_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB33_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB33_145
.LBB33_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB33_146
.LBB33_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB33_146:                             # %cond.end904
	jmp	.LBB33_148
.LBB33_147:                             # %cond.false906
	movswl	-52(%rbp), %eax
.LBB33_148:                             # %cond.end908
	movw	%ax, -28(%rbp)
.LBB33_149:                             # %if.end911
	jmp	.LBB33_150
.LBB33_150:                             # %if.end912
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_156
# %bb.151:                              # %land.lhs.true916
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_156
# %bb.152:                              # %cond.true920
	movswl	-30(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_154
# %bb.153:                              # %cond.true925
	movswl	-30(%rbp), %eax
	jmp	.LBB33_155
.LBB33_154:                             # %cond.false927
	movswl	-24(%rbp), %eax
.LBB33_155:                             # %cond.end929
	jmp	.LBB33_160
.LBB33_156:                             # %cond.false931
	movswl	-30(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB33_158
# %bb.157:                              # %cond.true936
	movswl	-30(%rbp), %eax
	jmp	.LBB33_159
.LBB33_158:                             # %cond.false938
	movswl	-24(%rbp), %eax
.LBB33_159:                             # %cond.end940
.LBB33_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_166
# %bb.161:                              # %land.lhs.true948
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB33_165
.LBB33_164:                             # %cond.false959
	movswl	-22(%rbp), %eax
.LBB33_165:                             # %cond.end961
	jmp	.LBB33_170
.LBB33_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB33_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB33_169
.LBB33_168:                             # %cond.false970
	movswl	-22(%rbp), %eax
.LBB33_169:                             # %cond.end972
.LBB33_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_176
# %bb.171:                              # %land.lhs.true980
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_176
# %bb.172:                              # %cond.true984
	movswl	-32(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_174
# %bb.173:                              # %cond.true989
	movswl	-32(%rbp), %eax
	jmp	.LBB33_175
.LBB33_174:                             # %cond.false991
	movswl	-26(%rbp), %eax
.LBB33_175:                             # %cond.end993
	jmp	.LBB33_180
.LBB33_176:                             # %cond.false995
	movswl	-32(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB33_178
# %bb.177:                              # %cond.true1000
	movswl	-32(%rbp), %eax
	jmp	.LBB33_179
.LBB33_178:                             # %cond.false1002
	movswl	-26(%rbp), %eax
.LBB33_179:                             # %cond.end1004
.LBB33_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB33_185
.LBB33_184:                             # %cond.false1023
	movswl	-28(%rbp), %eax
.LBB33_185:                             # %cond.end1025
	jmp	.LBB33_190
.LBB33_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB33_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB33_189
.LBB33_188:                             # %cond.false1034
	movswl	-28(%rbp), %eax
.LBB33_189:                             # %cond.end1036
.LBB33_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_192
# %bb.191:                              # %if.then1044
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB33_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_194
# %bb.193:                              # %if.then1051
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB33_194:                             # %if.end1055
	movl	$0, -4(%rbp)
.LBB33_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB33_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB33_197:                             # %for.cond1061
                                        #   Parent Loop BB33_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB33_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB33_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB33_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB33_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB33_203
.LBB33_202:                             # %if.else1102
                                        #   in Loop: Header=BB33_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB33_203:                             # %if.end1128
                                        #   in Loop: Header=BB33_197 Depth=2
	jmp	.LBB33_205
.LBB33_204:                             # %if.else1129
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB33_205:                             # %if.end1151
                                        #   in Loop: Header=BB33_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB33_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB33_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB33_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB33_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB33_210
.LBB33_209:                             # %if.else1187
                                        #   in Loop: Header=BB33_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB33_210:                             # %if.end1213
                                        #   in Loop: Header=BB33_197 Depth=2
	jmp	.LBB33_212
.LBB33_211:                             # %if.else1214
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB33_212:                             # %if.end1236
                                        #   in Loop: Header=BB33_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB33_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB33_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB33_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB33_215:                             # %if.end1255
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB33_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB33_221
.LBB33_217:                             # %if.else1269
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB33_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB33_220
.LBB33_219:                             # %if.else1283
                                        #   in Loop: Header=BB33_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB33_220:                             # %if.end1288
                                        #   in Loop: Header=BB33_197 Depth=2
	jmp	.LBB33_221
.LBB33_221:                             # %if.end1289
                                        #   in Loop: Header=BB33_197 Depth=2
	jmp	.LBB33_222
.LBB33_222:                             # %for.inc
                                        #   in Loop: Header=BB33_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_197
.LBB33_223:                             # %for.end
                                        #   in Loop: Header=BB33_195 Depth=1
	jmp	.LBB33_224
.LBB33_224:                             # %for.inc1290
                                        #   in Loop: Header=BB33_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_195
.LBB33_225:                             # %for.end1292
	jmp	.LBB33_259
.LBB33_226:                             # %if.else1293
	movl	$0, -4(%rbp)
.LBB33_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_229 Depth 2
                                        #       Child Loop BB33_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB33_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB33_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB33_229:                             # %for.cond1304
                                        #   Parent Loop BB33_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB33_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB33_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB33_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB33_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB33_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB33_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB33_234
.LBB33_233:                             # %cond.false1319
                                        #   in Loop: Header=BB33_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB33_234
.LBB33_234:                             # %cond.end1320
                                        #   in Loop: Header=BB33_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-200(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-200(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -228(%rbp)
	cmpl	$-1, -228(%rbp)
	jne	.LBB33_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB33_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB33_254
.LBB33_236:                             # %if.else1393
                                        #   in Loop: Header=BB33_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB33_237:                             # %for.cond1394
                                        #   Parent Loop BB33_227 Depth=1
                                        #     Parent Loop BB33_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB33_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB33_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB33_240
.LBB33_239:                             # %cond.false1402
                                        #   in Loop: Header=BB33_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB33_240:                             # %cond.end1406
                                        #   in Loop: Header=BB33_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB33_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB33_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB33_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB33_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB33_247
.LBB33_243:                             # %if.else1425
                                        #   in Loop: Header=BB33_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB33_237 Depth=3
	jmp	.LBB33_245
.LBB33_245:                             # %for.inc1427
                                        #   in Loop: Header=BB33_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB33_237
.LBB33_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB33_229 Depth=2
	jmp	.LBB33_247
.LBB33_247:                             # %for.end1429
                                        #   in Loop: Header=BB33_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB33_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB33_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB33_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB33_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB33_251
.LBB33_250:                             # %if.else1487
                                        #   in Loop: Header=BB33_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB33_251:                             # %if.end1571
                                        #   in Loop: Header=BB33_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB33_253
.LBB33_252:                             # %if.else1587
                                        #   in Loop: Header=BB33_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB33_253:                             # %if.end1602
                                        #   in Loop: Header=BB33_229 Depth=2
	jmp	.LBB33_254
.LBB33_254:                             # %if.end1603
                                        #   in Loop: Header=BB33_229 Depth=2
	jmp	.LBB33_255
.LBB33_255:                             # %for.inc1604
                                        #   in Loop: Header=BB33_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_229
.LBB33_256:                             # %for.end1606
                                        #   in Loop: Header=BB33_227 Depth=1
	jmp	.LBB33_257
.LBB33_257:                             # %for.inc1607
                                        #   in Loop: Header=BB33_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_227
.LBB33_258:                             # %for.end1609
	jmp	.LBB33_259
.LBB33_259:                             # %if.end1610
	cmpl	$29500330, -232(%rbp)   # imm = 0x1C223AA
	jne	.LBB33_261
.LBB33_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_260
.Lfunc_end33:
	.size	Get_Direct_Motion_Vectors.8, .Lfunc_end33-Get_Direct_Motion_Vectors.8
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.9      # -- Begin function BIDPartitionCost.9
	.p2align	4, 0x90
	.type	BIDPartitionCost.9,@function
BIDPartitionCost.9:                     # @BIDPartitionCost.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1504686746, -128(%rbp) # imm = 0x59AFB29A
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB34_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB34_3
.LBB34_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB34_3
.LBB34_3:                               # %cond.end
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB34_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB34_6
.LBB34_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB34_6
.LBB34_6:                               # %cond.end17
	movl	%eax, -120(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB34_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB34_9
.LBB34_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB34_9
.LBB34_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB34_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB34_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB34_12:                              # %for.cond53
                                        #   Parent Loop BB34_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB34_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB34_12 Depth=2
	movl	-100(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_12
.LBB34_15:                              # %for.end
                                        #   in Loop: Header=BB34_10 Depth=1
	jmp	.LBB34_16
.LBB34_16:                              # %for.inc164
                                        #   in Loop: Header=BB34_10 Depth=1
	movl	-124(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_10
.LBB34_17:                              # %for.end166
	movl	-104(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB34_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_20 Depth 2
                                        #       Child Loop BB34_22 Depth 3
                                        #         Child Loop BB34_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB34_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB34_20:                              # %for.cond185
                                        #   Parent Loop BB34_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_22 Depth 3
                                        #         Child Loop BB34_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB34_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	-68(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB34_22:                              # %for.cond196
                                        #   Parent Loop BB34_18 Depth=1
                                        #     Parent Loop BB34_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB34_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB34_22 Depth=3
	movl	$0, -32(%rbp)
.LBB34_24:                              # %for.cond200
                                        #   Parent Loop BB34_18 Depth=1
                                        #     Parent Loop BB34_20 Depth=2
                                        #       Parent Loop BB34_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB34_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB34_24 Depth=4
	movq	imgY_org, %rax
	movl	-116(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-112(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB34_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB34_24
.LBB34_27:                              # %for.end229
                                        #   in Loop: Header=BB34_22 Depth=3
	jmp	.LBB34_28
.LBB34_28:                              # %for.inc230
                                        #   in Loop: Header=BB34_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_22
.LBB34_29:                              # %for.end232
                                        #   in Loop: Header=BB34_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB34_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB34_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB34_32
.LBB34_31:                              # %if.then
                                        #   in Loop: Header=BB34_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB34_32:                              # %if.end
                                        #   in Loop: Header=BB34_20 Depth=2
	jmp	.LBB34_33
.LBB34_33:                              # %for.inc236
                                        #   in Loop: Header=BB34_20 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB34_20
.LBB34_34:                              # %for.end239
                                        #   in Loop: Header=BB34_18 Depth=1
	jmp	.LBB34_35
.LBB34_35:                              # %for.inc240
                                        #   in Loop: Header=BB34_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_18
.LBB34_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB34_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB34_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB34_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_41 Depth 2
                                        #       Child Loop BB34_43 Depth 3
                                        #         Child Loop BB34_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB34_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB34_39 Depth=1
	movl	$0, -52(%rbp)
.LBB34_41:                              # %for.cond257
                                        #   Parent Loop BB34_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_43 Depth 3
                                        #         Child Loop BB34_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB34_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB34_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB34_43:                              # %for.cond265
                                        #   Parent Loop BB34_39 Depth=1
                                        #     Parent Loop BB34_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB34_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB34_43 Depth=3
	movl	$0, -28(%rbp)
.LBB34_45:                              # %for.cond269
                                        #   Parent Loop BB34_39 Depth=1
                                        #     Parent Loop BB34_41 Depth=2
                                        #       Parent Loop BB34_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB34_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB34_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB34_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB34_45
.LBB34_48:                              # %for.end284
                                        #   in Loop: Header=BB34_43 Depth=3
	jmp	.LBB34_49
.LBB34_49:                              # %for.inc285
                                        #   in Loop: Header=BB34_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB34_43
.LBB34_50:                              # %for.end287
                                        #   in Loop: Header=BB34_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB34_41 Depth=2
	movl	-108(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB34_41
.LBB34_52:                              # %for.end294
                                        #   in Loop: Header=BB34_39 Depth=1
	jmp	.LBB34_53
.LBB34_53:                              # %for.inc295
                                        #   in Loop: Header=BB34_39 Depth=1
	movl	-120(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB34_39
.LBB34_54:                              # %for.end297
	jmp	.LBB34_55
.LBB34_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1504686746, -128(%rbp) # imm = 0x59AFB29A
	jne	.LBB34_57
.LBB34_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_56
.Lfunc_end34:
	.size	BIDPartitionCost.9, .Lfunc_end34-BIDPartitionCost.9
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.10     # -- Begin function BIDPartitionCost.10
	.p2align	4, 0x90
	.type	BIDPartitionCost.10,@function
BIDPartitionCost.10:                    # @BIDPartitionCost.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$940725212, -120(%rbp)  # imm = 0x381253DC
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB35_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB35_3
.LBB35_3:                               # %cond.end
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB35_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB35_6
.LBB35_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB35_6
.LBB35_6:                               # %cond.end17
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB35_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB35_9
.LBB35_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB35_9
.LBB35_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB35_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_12 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB35_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB35_12:                              # %for.cond53
                                        #   Parent Loop BB35_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB35_12 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB35_12 Depth=2
	movl	-116(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_12
.LBB35_15:                              # %for.end
                                        #   in Loop: Header=BB35_10 Depth=1
	jmp	.LBB35_16
.LBB35_16:                              # %for.inc164
                                        #   in Loop: Header=BB35_10 Depth=1
	movl	-100(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_10
.LBB35_17:                              # %for.end166
	movl	-124(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB35_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_20 Depth 2
                                        #       Child Loop BB35_22 Depth 3
                                        #         Child Loop BB35_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB35_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB35_20:                              # %for.cond185
                                        #   Parent Loop BB35_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_22 Depth 3
                                        #         Child Loop BB35_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB35_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB35_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-68(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-36(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB35_22:                              # %for.cond196
                                        #   Parent Loop BB35_18 Depth=1
                                        #     Parent Loop BB35_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_24 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB35_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB35_22 Depth=3
	movl	$0, -28(%rbp)
.LBB35_24:                              # %for.cond200
                                        #   Parent Loop BB35_18 Depth=1
                                        #     Parent Loop BB35_20 Depth=2
                                        #       Parent Loop BB35_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB35_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB35_24 Depth=4
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-108(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB35_24 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB35_24
.LBB35_27:                              # %for.end229
                                        #   in Loop: Header=BB35_22 Depth=3
	jmp	.LBB35_28
.LBB35_28:                              # %for.inc230
                                        #   in Loop: Header=BB35_22 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB35_22
.LBB35_29:                              # %for.end232
                                        #   in Loop: Header=BB35_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB35_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB35_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB35_32
.LBB35_31:                              # %if.then
                                        #   in Loop: Header=BB35_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB35_32:                              # %if.end
                                        #   in Loop: Header=BB35_20 Depth=2
	jmp	.LBB35_33
.LBB35_33:                              # %for.inc236
                                        #   in Loop: Header=BB35_20 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB35_20
.LBB35_34:                              # %for.end239
                                        #   in Loop: Header=BB35_18 Depth=1
	jmp	.LBB35_35
.LBB35_35:                              # %for.inc240
                                        #   in Loop: Header=BB35_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB35_18
.LBB35_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB35_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB35_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB35_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_41 Depth 2
                                        #       Child Loop BB35_43 Depth 3
                                        #         Child Loop BB35_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB35_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB35_39 Depth=1
	movl	$0, -44(%rbp)
.LBB35_41:                              # %for.cond257
                                        #   Parent Loop BB35_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_43 Depth 3
                                        #         Child Loop BB35_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB35_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB35_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB35_43:                              # %for.cond265
                                        #   Parent Loop BB35_39 Depth=1
                                        #     Parent Loop BB35_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB35_45 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB35_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB35_43 Depth=3
	movl	$0, -32(%rbp)
.LBB35_45:                              # %for.cond269
                                        #   Parent Loop BB35_39 Depth=1
                                        #     Parent Loop BB35_41 Depth=2
                                        #       Parent Loop BB35_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB35_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB35_45 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB35_45 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB35_45
.LBB35_48:                              # %for.end284
                                        #   in Loop: Header=BB35_43 Depth=3
	jmp	.LBB35_49
.LBB35_49:                              # %for.inc285
                                        #   in Loop: Header=BB35_43 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB35_43
.LBB35_50:                              # %for.end287
                                        #   in Loop: Header=BB35_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB35_41 Depth=2
	movl	-112(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB35_41
.LBB35_52:                              # %for.end294
                                        #   in Loop: Header=BB35_39 Depth=1
	jmp	.LBB35_53
.LBB35_53:                              # %for.inc295
                                        #   in Loop: Header=BB35_39 Depth=1
	movl	-104(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB35_39
.LBB35_54:                              # %for.end297
	jmp	.LBB35_55
.LBB35_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$940725212, -120(%rbp)  # imm = 0x381253DC
	jne	.LBB35_57
.LBB35_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_56
.Lfunc_end35:
	.size	BIDPartitionCost.10, .Lfunc_end35-BIDPartitionCost.10
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.11 # -- Begin function Get_Direct_Motion_Vectors.11
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.11,@function
Get_Direct_Motion_Vectors.11:           # @Get_Direct_Motion_Vectors.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$1625217076, -228(%rbp) # imm = 0x60DED834
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_6
# %bb.1:                                # %land.lhs.true
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB36_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -216(%rbp)
	jmp	.LBB36_5
.LBB36_4:                               # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB36_5:                               # %if.end
	jmp	.LBB36_7
.LBB36_6:                               # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -216(%rbp)
.LBB36_7:                               # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB36_226
# %bb.8:                                # %if.then9
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB36_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB36_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_12
.LBB36_11:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_12
.LBB36_12:                              # %cond.end
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB36_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_15
.LBB36_14:                              # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_15
.LBB36_15:                              # %cond.end38
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB36_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_18
.LBB36_17:                              # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_18
.LBB36_18:                              # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB36_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_21
.LBB36_20:                              # %cond.false69
	movswl	-50(%rbp), %eax
.LBB36_21:                              # %cond.end71
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB36_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_24
.LBB36_23:                              # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_24
.LBB36_24:                              # %cond.end87
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB36_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_27
.LBB36_26:                              # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_27
.LBB36_27:                              # %cond.end103
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB36_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_30
.LBB36_29:                              # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_30
.LBB36_30:                              # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB36_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_33
.LBB36_32:                              # %cond.false134
	movswl	-52(%rbp), %eax
.LBB36_33:                              # %cond.end136
	movw	%ax, -22(%rbp)
	jmp	.LBB36_150
.LBB36_34:                              # %if.else139
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB36_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_39
.LBB36_38:                              # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_40
.LBB36_39:                              # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_40:                              # %cond.end181
	jmp	.LBB36_42
.LBB36_41:                              # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_42
.LBB36_42:                              # %cond.end184
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB36_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_46
.LBB36_45:                              # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_47
.LBB36_46:                              # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_47:                              # %cond.end229
	jmp	.LBB36_49
.LBB36_48:                              # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_49
.LBB36_49:                              # %cond.end232
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB36_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_53
.LBB36_52:                              # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_54
.LBB36_53:                              # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_54:                              # %cond.end277
	jmp	.LBB36_56
.LBB36_55:                              # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_56
.LBB36_56:                              # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB36_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_60
.LBB36_59:                              # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_61
.LBB36_60:                              # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_61:                              # %cond.end325
	jmp	.LBB36_63
.LBB36_62:                              # %cond.false327
	movswl	-50(%rbp), %eax
.LBB36_63:                              # %cond.end329
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB36_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_67
.LBB36_66:                              # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_68
.LBB36_67:                              # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_68:                              # %cond.end374
	jmp	.LBB36_70
.LBB36_69:                              # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_70
.LBB36_70:                              # %cond.end377
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB36_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_74
.LBB36_73:                              # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_75
.LBB36_74:                              # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_75:                              # %cond.end422
	jmp	.LBB36_77
.LBB36_76:                              # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_77
.LBB36_77:                              # %cond.end425
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB36_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_81
.LBB36_80:                              # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_82
.LBB36_81:                              # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_82:                              # %cond.end470
	jmp	.LBB36_84
.LBB36_83:                              # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_84
.LBB36_84:                              # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB36_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_88
.LBB36_87:                              # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB36_89
.LBB36_88:                              # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB36_89:                              # %cond.end518
	jmp	.LBB36_91
.LBB36_90:                              # %cond.false520
	movswl	-52(%rbp), %eax
.LBB36_91:                              # %cond.end522
	movw	%ax, -22(%rbp)
	jmp	.LBB36_149
.LBB36_92:                              # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB36_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_96
.LBB36_95:                              # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_97
.LBB36_96:                              # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_97:                              # %cond.end567
	jmp	.LBB36_99
.LBB36_98:                              # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_99
.LBB36_99:                              # %cond.end570
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB36_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_103
.LBB36_102:                             # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_104
.LBB36_103:                             # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_104:                             # %cond.end615
	jmp	.LBB36_106
.LBB36_105:                             # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_106
.LBB36_106:                             # %cond.end618
	movw	%ax, -26(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB36_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_110
.LBB36_109:                             # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_111
.LBB36_110:                             # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_111:                             # %cond.end663
	jmp	.LBB36_113
.LBB36_112:                             # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_113
.LBB36_113:                             # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB36_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_117
.LBB36_116:                             # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_118
.LBB36_117:                             # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_118:                             # %cond.end711
	jmp	.LBB36_120
.LBB36_119:                             # %cond.false713
	movswl	-50(%rbp), %eax
.LBB36_120:                             # %cond.end715
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB36_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_124
.LBB36_123:                             # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_125
.LBB36_124:                             # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_125:                             # %cond.end760
	jmp	.LBB36_127
.LBB36_126:                             # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_127
.LBB36_127:                             # %cond.end763
	movw	%ax, -28(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB36_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_131
.LBB36_130:                             # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_132
.LBB36_131:                             # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_132:                             # %cond.end808
	jmp	.LBB36_134
.LBB36_133:                             # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_134
.LBB36_134:                             # %cond.end811
	movw	%ax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB36_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_138
.LBB36_137:                             # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_139
.LBB36_138:                             # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_139:                             # %cond.end856
	jmp	.LBB36_141
.LBB36_140:                             # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB36_141
.LBB36_141:                             # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB36_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB36_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB36_145
.LBB36_144:                             # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB36_146
.LBB36_145:                             # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB36_146:                             # %cond.end904
	jmp	.LBB36_148
.LBB36_147:                             # %cond.false906
	movswl	-52(%rbp), %eax
.LBB36_148:                             # %cond.end908
	movw	%ax, -22(%rbp)
.LBB36_149:                             # %if.end911
	jmp	.LBB36_150
.LBB36_150:                             # %if.end912
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_156
# %bb.151:                              # %land.lhs.true916
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_156
# %bb.152:                              # %cond.true920
	movswl	-32(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_154
# %bb.153:                              # %cond.true925
	movswl	-32(%rbp), %eax
	jmp	.LBB36_155
.LBB36_154:                             # %cond.false927
	movswl	-26(%rbp), %eax
.LBB36_155:                             # %cond.end929
	jmp	.LBB36_160
.LBB36_156:                             # %cond.false931
	movswl	-32(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_158
# %bb.157:                              # %cond.true936
	movswl	-32(%rbp), %eax
	jmp	.LBB36_159
.LBB36_158:                             # %cond.false938
	movswl	-26(%rbp), %eax
.LBB36_159:                             # %cond.end940
.LBB36_160:                             # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_166
# %bb.161:                              # %land.lhs.true948
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB36_165
.LBB36_164:                             # %cond.false959
	movswl	-30(%rbp), %eax
.LBB36_165:                             # %cond.end961
	jmp	.LBB36_170
.LBB36_166:                             # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB36_169
.LBB36_168:                             # %cond.false970
	movswl	-30(%rbp), %eax
.LBB36_169:                             # %cond.end972
.LBB36_170:                             # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_176
# %bb.171:                              # %land.lhs.true980
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_176
# %bb.172:                              # %cond.true984
	movswl	-28(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_174
# %bb.173:                              # %cond.true989
	movswl	-28(%rbp), %eax
	jmp	.LBB36_175
.LBB36_174:                             # %cond.false991
	movswl	-24(%rbp), %eax
.LBB36_175:                             # %cond.end993
	jmp	.LBB36_180
.LBB36_176:                             # %cond.false995
	movswl	-28(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_178
# %bb.177:                              # %cond.true1000
	movswl	-28(%rbp), %eax
	jmp	.LBB36_179
.LBB36_178:                             # %cond.false1002
	movswl	-24(%rbp), %eax
.LBB36_179:                             # %cond.end1004
.LBB36_180:                             # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB36_185
.LBB36_184:                             # %cond.false1023
	movswl	-22(%rbp), %eax
.LBB36_185:                             # %cond.end1025
	jmp	.LBB36_190
.LBB36_186:                             # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB36_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB36_189
.LBB36_188:                             # %cond.false1034
	movswl	-22(%rbp), %eax
.LBB36_189:                             # %cond.end1036
.LBB36_190:                             # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_192
# %bb.191:                              # %if.then1044
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB36_192:                             # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_194
# %bb.193:                              # %if.then1051
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB36_194:                             # %if.end1055
	movl	$0, -4(%rbp)
.LBB36_195:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_197 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB36_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB36_197:                             # %for.cond1061
                                        #   Parent Loop BB36_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB36_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB36_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB36_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB36_203
.LBB36_202:                             # %if.else1102
                                        #   in Loop: Header=BB36_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB36_203:                             # %if.end1128
                                        #   in Loop: Header=BB36_197 Depth=2
	jmp	.LBB36_205
.LBB36_204:                             # %if.else1129
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB36_205:                             # %if.end1151
                                        #   in Loop: Header=BB36_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB36_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB36_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB36_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB36_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB36_210
.LBB36_209:                             # %if.else1187
                                        #   in Loop: Header=BB36_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB36_210:                             # %if.end1213
                                        #   in Loop: Header=BB36_197 Depth=2
	jmp	.LBB36_212
.LBB36_211:                             # %if.else1214
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB36_212:                             # %if.end1236
                                        #   in Loop: Header=BB36_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB36_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB36_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB36_215:                             # %if.end1255
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB36_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB36_221
.LBB36_217:                             # %if.else1269
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB36_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB36_220
.LBB36_219:                             # %if.else1283
                                        #   in Loop: Header=BB36_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB36_220:                             # %if.end1288
                                        #   in Loop: Header=BB36_197 Depth=2
	jmp	.LBB36_221
.LBB36_221:                             # %if.end1289
                                        #   in Loop: Header=BB36_197 Depth=2
	jmp	.LBB36_222
.LBB36_222:                             # %for.inc
                                        #   in Loop: Header=BB36_197 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_197
.LBB36_223:                             # %for.end
                                        #   in Loop: Header=BB36_195 Depth=1
	jmp	.LBB36_224
.LBB36_224:                             # %for.inc1290
                                        #   in Loop: Header=BB36_195 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_195
.LBB36_225:                             # %for.end1292
	jmp	.LBB36_259
.LBB36_226:                             # %if.else1293
	movl	$0, -4(%rbp)
.LBB36_227:                             # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_229 Depth 2
                                        #       Child Loop BB36_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB36_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB36_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB36_229:                             # %for.cond1304
                                        #   Parent Loop BB36_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB36_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB36_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB36_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB36_229 Depth=2
	movq	-224(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB36_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB36_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB36_234
.LBB36_233:                             # %cond.false1319
                                        #   in Loop: Header=BB36_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB36_234
.LBB36_234:                             # %cond.end1320
                                        #   in Loop: Header=BB36_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-8(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB36_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB36_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB36_254
.LBB36_236:                             # %if.else1393
                                        #   in Loop: Header=BB36_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -164(%rbp)
.LBB36_237:                             # %for.cond1394
                                        #   Parent Loop BB36_227 Depth=1
                                        #     Parent Loop BB36_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-164(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB36_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB36_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB36_240
.LBB36_239:                             # %cond.false1402
                                        #   in Loop: Header=BB36_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB36_240:                             # %cond.end1406
                                        #   in Loop: Header=BB36_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB36_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB36_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-164(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-216(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB36_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB36_229 Depth=2
	movl	-164(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB36_247
.LBB36_243:                             # %if.else1425
                                        #   in Loop: Header=BB36_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB36_237 Depth=3
	jmp	.LBB36_245
.LBB36_245:                             # %for.inc1427
                                        #   in Loop: Header=BB36_237 Depth=3
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB36_237
.LBB36_246:                             # %for.end1429.loopexit
                                        #   in Loop: Header=BB36_229 Depth=2
	jmp	.LBB36_247
.LBB36_247:                             # %for.end1429
                                        #   in Loop: Header=BB36_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB36_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB36_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -168(%rbp)
	cmpl	$9999, -168(%rbp)       # imm = 0x270F
	jne	.LBB36_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB36_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB36_251
.LBB36_250:                             # %if.else1487
                                        #   in Loop: Header=BB36_229 Depth=2
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-168(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB36_251:                             # %if.end1571
                                        #   in Loop: Header=BB36_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB36_253
.LBB36_252:                             # %if.else1587
                                        #   in Loop: Header=BB36_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB36_253:                             # %if.end1602
                                        #   in Loop: Header=BB36_229 Depth=2
	jmp	.LBB36_254
.LBB36_254:                             # %if.end1603
                                        #   in Loop: Header=BB36_229 Depth=2
	jmp	.LBB36_255
.LBB36_255:                             # %for.inc1604
                                        #   in Loop: Header=BB36_229 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_229
.LBB36_256:                             # %for.end1606
                                        #   in Loop: Header=BB36_227 Depth=1
	jmp	.LBB36_257
.LBB36_257:                             # %for.inc1607
                                        #   in Loop: Header=BB36_227 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_227
.LBB36_258:                             # %for.end1609
	jmp	.LBB36_259
.LBB36_259:                             # %if.end1610
	cmpl	$1625217076, -228(%rbp) # imm = 0x60DED834
	jne	.LBB36_261
.LBB36_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_261:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_260
.Lfunc_end36:
	.size	Get_Direct_Motion_Vectors.11, .Lfunc_end36-Get_Direct_Motion_Vectors.11
	.cfi_endproc
                                        # -- End function
	.globl	SATD.12                 # -- Begin function SATD.12
	.p2align	4, 0x90
	.type	SATD.12,@function
SATD.12:                                # @SATD.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$530168256, -180(%rbp)  # imm = 0x1F99B9C0
	movq	%rdi, -16(%rbp)
	movl	%esi, -184(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB37_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB37_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB37_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB37_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB37_6
.LBB37_5:                               # %cond.false
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-100(%rbp), %eax
.LBB37_6:                               # %cond.end
                                        #   in Loop: Header=BB37_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB37_2
.LBB37_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB37_14
.LBB37_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB37_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB37_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB37_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB37_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB37_10
.LBB37_13:                              # %for.end270
	jmp	.LBB37_14
.LBB37_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$530168256, -180(%rbp)  # imm = 0x1F99B9C0
	jne	.LBB37_16
.LBB37_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_15
.Lfunc_end37:
	.size	SATD.12, .Lfunc_end37-SATD.12
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.13 # -- Begin function ResetFastFullIntegerSearch.13
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.13,@function
ResetFastFullIntegerSearch.13:          # @ResetFastFullIntegerSearch.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$221065837, -12(%rbp)   # imm = 0xD2D326D
	movl	$0, -8(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_3 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB38_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	$0, -4(%rbp)
.LBB38_3:                               # %for.cond1
                                        #   Parent Loop BB38_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB38_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB38_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB38_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_3
.LBB38_6:                               # %for.end
                                        #   in Loop: Header=BB38_1 Depth=1
	jmp	.LBB38_7
.LBB38_7:                               # %for.inc6
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_1
.LBB38_8:                               # %for.end8
	cmpl	$221065837, -12(%rbp)   # imm = 0xD2D326D
	jne	.LBB38_10
.LBB38_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_9
.Lfunc_end38:
	.size	ResetFastFullIntegerSearch.13, .Lfunc_end38-ResetFastFullIntegerSearch.13
	.cfi_endproc
                                        # -- End function
	.globl	SATD.14                 # -- Begin function SATD.14
	.p2align	4, 0x90
	.type	SATD.14,@function
SATD.14:                                # @SATD.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$1816999010, -184(%rbp) # imm = 0x6C4D3462
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB39_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB39_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB39_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB39_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB39_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB39_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB39_6
.LBB39_5:                               # %cond.false
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-100(%rbp), %eax
.LBB39_6:                               # %cond.end
                                        #   in Loop: Header=BB39_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB39_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB39_2
.LBB39_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB39_14
.LBB39_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB39_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB39_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB39_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB39_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB39_10
.LBB39_13:                              # %for.end270
	jmp	.LBB39_14
.LBB39_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$1816999010, -184(%rbp) # imm = 0x6C4D3462
	jne	.LBB39_16
.LBB39_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_15
.Lfunc_end39:
	.size	SATD.14, .Lfunc_end39-SATD.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.15
.LCPI40_0:
	.quad	4602678819172646912     # double 0.5
.LCPI40_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.15
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.15,@function
SubPelBlockSearchBiPred.15:             # @SubPelBlockSearchBiPred.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI40_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI40_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1224719543, -200(%rbp) # imm = 0x48FFBCB7
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -154(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -174(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB40_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB40_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB40_4
.LBB40_3:                               # %cond.false
	movl	64(%rbp), %eax
.LBB40_4:                               # %cond.end
	jmp	.LBB40_6
.LBB40_5:                               # %cond.false17
	movl	64(%rbp), %eax
.LBB40_6:                               # %cond.end18
	movw	%ax, -170(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB40_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB40_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB40_10
.LBB40_9:                               # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB40_10
.LBB40_10:                              # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -116(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB40_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB40_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_14
.LBB40_13:                              # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB40_14:                              # %cond.end55
	jmp	.LBB40_16
.LBB40_15:                              # %cond.false57
	movl	$1, %eax
	jmp	.LBB40_16
.LBB40_16:                              # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB40_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB40_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB40_20
.LBB40_19:                              # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB40_20:                              # %cond.end82
	jmp	.LBB40_22
.LBB40_21:                              # %cond.false84
	movl	$1, %eax
	jmp	.LBB40_22
.LBB40_22:                              # %cond.end85
	movw	%ax, -36(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB40_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB40_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB40_26
.LBB40_25:                              # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB40_26:                              # %cond.end106
	jmp	.LBB40_28
.LBB40_27:                              # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB40_28
.LBB40_28:                              # %cond.end109
	movw	%ax, -172(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB40_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB40_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB40_32
.LBB40_31:                              # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB40_32:                              # %cond.end130
	jmp	.LBB40_34
.LBB40_33:                              # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB40_34
.LBB40_34:                              # %cond.end133
	movw	%ax, -176(%rbp)
	movswl	-176(%rbp), %eax
	movswl	-172(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -38(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB40_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB40_37
.LBB40_36:                              # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB40_37:                              # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB40_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB40_40
.LBB40_39:                              # %cond.false161
	movswl	-90(%rbp), %eax
.LBB40_40:                              # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-154(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB40_45
# %bb.41:                               # %land.lhs.true197
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB40_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB40_46
.LBB40_45:                              # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB40_46:                              # %if.end
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB40_51
# %bb.47:                               # %land.lhs.true224
	movswl	-114(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB40_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB40_52
.LBB40_51:                              # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB40_52:                              # %if.end248
	movw	$0, -102(%rbp)
	movw	-174(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB40_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_55 Depth 2
                                        #       Child Loop BB40_60 Depth 3
                                        #         Child Loop BB40_162 Depth 4
                                        #           Child Loop BB40_164 Depth 5
                                        #       Child Loop BB40_175 Depth 3
                                        #         Child Loop BB40_181 Depth 4
                                        #           Child Loop BB40_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-170(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB40_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB40_55:                              # %for.cond283
                                        #   Parent Loop BB40_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_60 Depth 3
                                        #         Child Loop BB40_162 Depth 4
                                        #           Child Loop BB40_164 Depth 5
                                        #       Child Loop BB40_175 Depth 3
                                        #         Child Loop BB40_181 Depth 4
                                        #           Child Loop BB40_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB40_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB40_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB40_57:                              # %land.end
                                        #   in Loop: Header=BB40_55 Depth=2
	testb	$1, %al
	jne	.LBB40_58
	jmp	.LBB40_195
.LBB40_58:                              # %for.body289
                                        #   in Loop: Header=BB40_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB40_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB40_55 Depth=2
	movw	$0, -40(%rbp)
.LBB40_60:                              # %for.cond304
                                        #   Parent Loop BB40_53 Depth=1
                                        #     Parent Loop BB40_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_162 Depth 4
                                        #           Child Loop BB40_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB40_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_67
.LBB40_63:                              # %cond.false345
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_66
.LBB40_65:                              # %cond.false369
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_66:                              # %cond.end389
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_67:                              # %cond.end391
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_73
.LBB40_69:                              # %cond.false421
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_72
.LBB40_71:                              # %cond.false448
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_72:                              # %cond.end470
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_73:                              # %cond.end472
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_79
.LBB40_75:                              # %cond.false505
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_78
.LBB40_77:                              # %cond.false532
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_78:                              # %cond.end554
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_79:                              # %cond.end556
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_85
.LBB40_81:                              # %cond.false589
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_84
.LBB40_83:                              # %cond.false616
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_84:                              # %cond.end638
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_85:                              # %cond.end640
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_91
.LBB40_87:                              # %cond.false681
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_90
.LBB40_89:                              # %cond.false706
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_90:                              # %cond.end726
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_91:                              # %cond.end728
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_97
.LBB40_93:                              # %cond.false759
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_96
.LBB40_95:                              # %cond.false786
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_96:                              # %cond.end808
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_97:                              # %cond.end810
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_103
.LBB40_99:                              # %cond.false843
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_102
.LBB40_101:                             # %cond.false870
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_102:                             # %cond.end892
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_103:                             # %cond.end894
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_109
.LBB40_105:                             # %cond.false927
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_108
.LBB40_107:                             # %cond.false954
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_108:                             # %cond.end976
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_109:                             # %cond.end978
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_115
.LBB40_111:                             # %cond.false1019
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_114
.LBB40_113:                             # %cond.false1044
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_114:                             # %cond.end1064
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_115:                             # %cond.end1066
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_121
.LBB40_117:                             # %cond.false1097
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_120
.LBB40_119:                             # %cond.false1124
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_120:                             # %cond.end1146
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_121:                             # %cond.end1148
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_127
.LBB40_123:                             # %cond.false1181
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_126
.LBB40_125:                             # %cond.false1208
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_126:                             # %cond.end1230
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_127:                             # %cond.end1232
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_133
.LBB40_129:                             # %cond.false1265
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_132
.LBB40_131:                             # %cond.false1292
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_132:                             # %cond.end1314
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_133:                             # %cond.end1316
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_139
.LBB40_135:                             # %cond.false1357
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_138
.LBB40_137:                             # %cond.false1382
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_138:                             # %cond.end1402
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_139:                             # %cond.end1404
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_145
.LBB40_141:                             # %cond.false1435
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_144
.LBB40_143:                             # %cond.false1462
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_144:                             # %cond.end1484
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_145:                             # %cond.end1486
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_151
.LBB40_147:                             # %cond.false1519
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_150
.LBB40_149:                             # %cond.false1546
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_150:                             # %cond.end1568
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_151:                             # %cond.end1570
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB40_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_157
.LBB40_153:                             # %cond.false1603
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB40_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_156
.LBB40_155:                             # %cond.false1630
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_156:                             # %cond.end1652
                                        #   in Loop: Header=BB40_60 Depth=3
.LBB40_157:                             # %cond.end1654
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB40_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB40_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB40_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB40_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB40_173
.LBB40_160:                             # %if.end1673
                                        #   in Loop: Header=BB40_60 Depth=3
	jmp	.LBB40_170
.LBB40_161:                             # %if.else1674
                                        #   in Loop: Header=BB40_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB40_162:                             # %for.cond1675
                                        #   Parent Loop BB40_53 Depth=1
                                        #     Parent Loop BB40_55 Depth=2
                                        #       Parent Loop BB40_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB40_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB40_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB40_162 Depth=4
	movl	$0, -100(%rbp)
.LBB40_164:                             # %for.cond1679
                                        #   Parent Loop BB40_53 Depth=1
                                        #     Parent Loop BB40_55 Depth=2
                                        #       Parent Loop BB40_60 Depth=3
                                        #         Parent Loop BB40_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB40_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB40_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB40_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB40_164
.LBB40_167:                             # %for.end
                                        #   in Loop: Header=BB40_162 Depth=4
	jmp	.LBB40_168
.LBB40_168:                             # %for.inc1694
                                        #   in Loop: Header=BB40_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB40_162
.LBB40_169:                             # %for.end1696
                                        #   in Loop: Header=BB40_60 Depth=3
	jmp	.LBB40_170
.LBB40_170:                             # %if.end1697
                                        #   in Loop: Header=BB40_60 Depth=3
	jmp	.LBB40_171
.LBB40_171:                             # %for.inc1698
                                        #   in Loop: Header=BB40_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB40_60
.LBB40_172:                             # %for.end1702.loopexit
                                        #   in Loop: Header=BB40_55 Depth=2
	jmp	.LBB40_173
.LBB40_173:                             # %for.end1702
                                        #   in Loop: Header=BB40_55 Depth=2
	jmp	.LBB40_193
.LBB40_174:                             # %if.else1703
                                        #   in Loop: Header=BB40_55 Depth=2
	movw	$0, -40(%rbp)
.LBB40_175:                             # %for.cond1704
                                        #   Parent Loop BB40_53 Depth=1
                                        #     Parent Loop BB40_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_181 Depth 4
                                        #           Child Loop BB40_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB40_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB40_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB40_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB40_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB40_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB40_192
.LBB40_179:                             # %if.end2054
                                        #   in Loop: Header=BB40_175 Depth=3
	jmp	.LBB40_189
.LBB40_180:                             # %if.else2055
                                        #   in Loop: Header=BB40_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB40_181:                             # %for.cond2056
                                        #   Parent Loop BB40_53 Depth=1
                                        #     Parent Loop BB40_55 Depth=2
                                        #       Parent Loop BB40_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB40_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB40_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB40_181 Depth=4
	movl	$0, -100(%rbp)
.LBB40_183:                             # %for.cond2060
                                        #   Parent Loop BB40_53 Depth=1
                                        #     Parent Loop BB40_55 Depth=2
                                        #       Parent Loop BB40_175 Depth=3
                                        #         Parent Loop BB40_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB40_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB40_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB40_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB40_183
.LBB40_186:                             # %for.end2077
                                        #   in Loop: Header=BB40_181 Depth=4
	jmp	.LBB40_187
.LBB40_187:                             # %for.inc2078
                                        #   in Loop: Header=BB40_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB40_181
.LBB40_188:                             # %for.end2080
                                        #   in Loop: Header=BB40_175 Depth=3
	jmp	.LBB40_189
.LBB40_189:                             # %if.end2081
                                        #   in Loop: Header=BB40_175 Depth=3
	jmp	.LBB40_190
.LBB40_190:                             # %for.inc2082
                                        #   in Loop: Header=BB40_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB40_175
.LBB40_191:                             # %for.end2086.loopexit
                                        #   in Loop: Header=BB40_55 Depth=2
	jmp	.LBB40_192
.LBB40_192:                             # %for.end2086
                                        #   in Loop: Header=BB40_55 Depth=2
	jmp	.LBB40_193
.LBB40_193:                             # %if.end2087
                                        #   in Loop: Header=BB40_55 Depth=2
	jmp	.LBB40_194
.LBB40_194:                             # %for.inc2088
                                        #   in Loop: Header=BB40_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB40_55
.LBB40_195:                             # %for.end2092
                                        #   in Loop: Header=BB40_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB40_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB40_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB40_197:                             # %if.end2101
                                        #   in Loop: Header=BB40_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB40_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB40_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB40_199:                             # %if.end2107
                                        #   in Loop: Header=BB40_53 Depth=1
	jmp	.LBB40_200
.LBB40_200:                             # %for.inc2108
                                        #   in Loop: Header=BB40_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB40_53
.LBB40_201:                             # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB40_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB40_203:                             # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB40_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB40_205:                             # %if.end2129
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB40_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-114(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB40_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB40_211
.LBB40_210:                             # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB40_211:                             # %if.end2159
	movw	$0, -102(%rbp)
	movl	-196(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB40_212:                             # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_214 Depth 2
                                        #       Child Loop BB40_219 Depth 3
                                        #         Child Loop BB40_321 Depth 4
                                        #           Child Loop BB40_323 Depth 5
                                        #       Child Loop BB40_334 Depth 3
                                        #         Child Loop BB40_340 Depth 4
                                        #           Child Loop BB40_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB40_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB40_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB40_214:                             # %for.cond2194
                                        #   Parent Loop BB40_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_219 Depth 3
                                        #         Child Loop BB40_321 Depth 4
                                        #           Child Loop BB40_323 Depth 5
                                        #       Child Loop BB40_334 Depth 3
                                        #         Child Loop BB40_340 Depth 4
                                        #           Child Loop BB40_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-154(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB40_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB40_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB40_216:                             # %land.end2202
                                        #   in Loop: Header=BB40_214 Depth=2
	testb	$1, %al
	jne	.LBB40_217
	jmp	.LBB40_354
.LBB40_217:                             # %for.body2203
                                        #   in Loop: Header=BB40_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB40_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB40_214 Depth=2
	movw	$0, -40(%rbp)
.LBB40_219:                             # %for.cond2218
                                        #   Parent Loop BB40_212 Depth=1
                                        #     Parent Loop BB40_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_321 Depth 4
                                        #           Child Loop BB40_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB40_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_226
.LBB40_222:                             # %cond.false2261
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_225
.LBB40_224:                             # %cond.false2286
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_225:                             # %cond.end2306
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_226:                             # %cond.end2308
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_232
.LBB40_228:                             # %cond.false2339
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_231
.LBB40_230:                             # %cond.false2366
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_231:                             # %cond.end2388
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_232:                             # %cond.end2390
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_238
.LBB40_234:                             # %cond.false2423
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_237
.LBB40_236:                             # %cond.false2450
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_237:                             # %cond.end2472
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_238:                             # %cond.end2474
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_244
.LBB40_240:                             # %cond.false2507
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_243
.LBB40_242:                             # %cond.false2534
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_243:                             # %cond.end2556
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_244:                             # %cond.end2558
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_250
.LBB40_246:                             # %cond.false2599
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_249
.LBB40_248:                             # %cond.false2624
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_249:                             # %cond.end2644
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_250:                             # %cond.end2646
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_256
.LBB40_252:                             # %cond.false2677
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_255
.LBB40_254:                             # %cond.false2704
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_255:                             # %cond.end2726
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_256:                             # %cond.end2728
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_262
.LBB40_258:                             # %cond.false2761
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_261
.LBB40_260:                             # %cond.false2788
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_261:                             # %cond.end2810
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_262:                             # %cond.end2812
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_268
.LBB40_264:                             # %cond.false2845
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_267
.LBB40_266:                             # %cond.false2872
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_267:                             # %cond.end2894
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_268:                             # %cond.end2896
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_274
.LBB40_270:                             # %cond.false2937
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_273
.LBB40_272:                             # %cond.false2962
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_273:                             # %cond.end2982
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_274:                             # %cond.end2984
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_280
.LBB40_276:                             # %cond.false3015
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_279
.LBB40_278:                             # %cond.false3042
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_279:                             # %cond.end3064
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_280:                             # %cond.end3066
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_286
.LBB40_282:                             # %cond.false3099
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_285
.LBB40_284:                             # %cond.false3126
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_285:                             # %cond.end3148
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_286:                             # %cond.end3150
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_292
.LBB40_288:                             # %cond.false3183
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_291
.LBB40_290:                             # %cond.false3210
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_291:                             # %cond.end3232
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_292:                             # %cond.end3234
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_298
.LBB40_294:                             # %cond.false3275
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_297
.LBB40_296:                             # %cond.false3300
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_297:                             # %cond.end3320
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_298:                             # %cond.end3322
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_304
.LBB40_300:                             # %cond.false3353
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_303
.LBB40_302:                             # %cond.false3380
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_303:                             # %cond.end3402
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_304:                             # %cond.end3404
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_310
.LBB40_306:                             # %cond.false3437
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_309
.LBB40_308:                             # %cond.false3464
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_309:                             # %cond.end3486
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_310:                             # %cond.end3488
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB40_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB40_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB40_316
.LBB40_312:                             # %cond.false3521
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB40_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB40_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB40_315
.LBB40_314:                             # %cond.false3548
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-36(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-38(%rbp), %eax
	addl	%eax, %ebx
.LBB40_315:                             # %cond.end3570
                                        #   in Loop: Header=BB40_219 Depth=3
.LBB40_316:                             # %cond.end3572
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB40_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB40_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB40_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB40_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB40_332
.LBB40_319:                             # %if.end3593
                                        #   in Loop: Header=BB40_219 Depth=3
	jmp	.LBB40_329
.LBB40_320:                             # %if.else3594
                                        #   in Loop: Header=BB40_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB40_321:                             # %for.cond3595
                                        #   Parent Loop BB40_212 Depth=1
                                        #     Parent Loop BB40_214 Depth=2
                                        #       Parent Loop BB40_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB40_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB40_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB40_321 Depth=4
	movl	$0, -100(%rbp)
.LBB40_323:                             # %for.cond3599
                                        #   Parent Loop BB40_212 Depth=1
                                        #     Parent Loop BB40_214 Depth=2
                                        #       Parent Loop BB40_219 Depth=3
                                        #         Parent Loop BB40_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB40_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB40_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB40_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB40_323
.LBB40_326:                             # %for.end3616
                                        #   in Loop: Header=BB40_321 Depth=4
	jmp	.LBB40_327
.LBB40_327:                             # %for.inc3617
                                        #   in Loop: Header=BB40_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB40_321
.LBB40_328:                             # %for.end3619
                                        #   in Loop: Header=BB40_219 Depth=3
	jmp	.LBB40_329
.LBB40_329:                             # %if.end3620
                                        #   in Loop: Header=BB40_219 Depth=3
	jmp	.LBB40_330
.LBB40_330:                             # %for.inc3621
                                        #   in Loop: Header=BB40_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB40_219
.LBB40_331:                             # %for.end3625.loopexit
                                        #   in Loop: Header=BB40_214 Depth=2
	jmp	.LBB40_332
.LBB40_332:                             # %for.end3625
                                        #   in Loop: Header=BB40_214 Depth=2
	jmp	.LBB40_352
.LBB40_333:                             # %if.else3626
                                        #   in Loop: Header=BB40_214 Depth=2
	movw	$0, -40(%rbp)
.LBB40_334:                             # %for.cond3627
                                        #   Parent Loop BB40_212 Depth=1
                                        #     Parent Loop BB40_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_340 Depth 4
                                        #           Child Loop BB40_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB40_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB40_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB40_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB40_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB40_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB40_351
.LBB40_338:                             # %if.end3978
                                        #   in Loop: Header=BB40_334 Depth=3
	jmp	.LBB40_348
.LBB40_339:                             # %if.else3979
                                        #   in Loop: Header=BB40_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB40_340:                             # %for.cond3980
                                        #   Parent Loop BB40_212 Depth=1
                                        #     Parent Loop BB40_214 Depth=2
                                        #       Parent Loop BB40_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB40_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB40_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB40_340 Depth=4
	movl	$0, -100(%rbp)
.LBB40_342:                             # %for.cond3984
                                        #   Parent Loop BB40_212 Depth=1
                                        #     Parent Loop BB40_214 Depth=2
                                        #       Parent Loop BB40_334 Depth=3
                                        #         Parent Loop BB40_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB40_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB40_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB40_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB40_342
.LBB40_345:                             # %for.end4001
                                        #   in Loop: Header=BB40_340 Depth=4
	jmp	.LBB40_346
.LBB40_346:                             # %for.inc4002
                                        #   in Loop: Header=BB40_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB40_340
.LBB40_347:                             # %for.end4004
                                        #   in Loop: Header=BB40_334 Depth=3
	jmp	.LBB40_348
.LBB40_348:                             # %if.end4005
                                        #   in Loop: Header=BB40_334 Depth=3
	jmp	.LBB40_349
.LBB40_349:                             # %for.inc4006
                                        #   in Loop: Header=BB40_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB40_334
.LBB40_350:                             # %for.end4010.loopexit
                                        #   in Loop: Header=BB40_214 Depth=2
	jmp	.LBB40_351
.LBB40_351:                             # %for.end4010
                                        #   in Loop: Header=BB40_214 Depth=2
	jmp	.LBB40_352
.LBB40_352:                             # %if.end4011
                                        #   in Loop: Header=BB40_214 Depth=2
	jmp	.LBB40_353
.LBB40_353:                             # %for.inc4012
                                        #   in Loop: Header=BB40_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB40_214
.LBB40_354:                             # %for.end4016
                                        #   in Loop: Header=BB40_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB40_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB40_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB40_356:                             # %if.end4026
                                        #   in Loop: Header=BB40_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB40_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB40_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB40_358:                             # %if.end4032
                                        #   in Loop: Header=BB40_212 Depth=1
	jmp	.LBB40_359
.LBB40_359:                             # %for.inc4033
                                        #   in Loop: Header=BB40_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB40_212
.LBB40_360:                             # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB40_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB40_362:                             # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1224719543, -200(%rbp) # imm = 0x48FFBCB7
	jne	.LBB40_364
.LBB40_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_364:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_363
.Lfunc_end40:
	.size	SubPelBlockSearchBiPred.15, .Lfunc_end40-SubPelBlockSearchBiPred.15
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.16              # -- Begin function SATD8X8.16
	.p2align	4, 0x90
	.type	SATD8X8.16,@function
SATD8X8.16:                             # @SATD8X8.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$533489855, -36(%rbp)   # imm = 0x1FCC68BF
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB41_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB41_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB41_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB41_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB41_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_2
.LBB41_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB41_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB41_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB41_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB41_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_6
.LBB41_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB41_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB41_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB41_10 Depth=1
	movl	$0, -12(%rbp)
.LBB41_12:                              # %for.cond499
                                        #   Parent Loop BB41_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB41_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB41_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB41_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB41_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB41_16
.LBB41_15:                              # %cond.false
                                        #   in Loop: Header=BB41_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB41_16:                              # %cond.end
                                        #   in Loop: Header=BB41_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB41_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_12
.LBB41_18:                              # %for.end519
                                        #   in Loop: Header=BB41_10 Depth=1
	jmp	.LBB41_19
.LBB41_19:                              # %for.inc520
                                        #   in Loop: Header=BB41_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_10
.LBB41_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB41_26
.LBB41_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB41_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB41_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_22
.LBB41_25:                              # %for.end534
	jmp	.LBB41_26
.LBB41_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$533489855, -36(%rbp)   # imm = 0x1FCC68BF
	jne	.LBB41_28
.LBB41_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_27
.Lfunc_end41:
	.size	SATD8X8.16, .Lfunc_end41-SATD8X8.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.17
.LCPI42_0:
	.quad	4602678819172646912     # double 0.5
.LCPI42_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.17
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.17,@function
FullPelBlockMotionBiPred.17:            # @FullPelBlockMotionBiPred.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$1727840764, -172(%rbp) # imm = 0x66FCC1FC
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -108(%rbp)
	movl	%r8d, -124(%rbp)
	movl	%r9d, -140(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB42_4
.LBB42_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB42_4
.LBB42_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB42_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB42_7
.LBB42_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB42_7:                               # %cond.end12
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI42_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -112(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -192(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-140(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -148(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-108(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-108(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-124(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-108(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movl	-124(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -42(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB42_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB42_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB42_11
.LBB42_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB42_11:                              # %cond.end87
	jmp	.LBB42_13
.LBB42_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB42_13:                              # %cond.end91
	movw	%ax, -50(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB42_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB42_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB42_17
.LBB42_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB42_17:                              # %cond.end114
	jmp	.LBB42_19
.LBB42_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB42_19:                              # %cond.end118
	movw	%ax, -48(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB42_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB42_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB42_23
.LBB42_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB42_23:                              # %cond.end138
	jmp	.LBB42_25
.LBB42_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB42_25
.LBB42_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB42_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB42_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB42_29
.LBB42_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB42_29:                              # %cond.end161
	jmp	.LBB42_31
.LBB42_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB42_31
.LBB42_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB42_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB42_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB42_37
.LBB42_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB42_37:                              # %if.end
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB42_42
# %bb.38:                               # %land.lhs.true196
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_42
# %bb.39:                               # %land.lhs.true204
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB42_42
# %bb.40:                               # %land.lhs.true208
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-116(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB42_43
.LBB42_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB42_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB42_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_49 Depth 2
                                        #       Child Loop BB42_51 Depth 3
                                        #     Child Loop BB42_85 Depth 2
                                        #       Child Loop BB42_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-192(%rbp), %eax
	jge	.LBB42_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB42_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-46(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-44(%rbp), %esi
	shll	$2, %esi
	subl	-176(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-180(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-184(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB42_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_99
.LBB42_47:                              # %if.end257
                                        #   in Loop: Header=BB42_44 Depth=1
	cmpw	$0, -42(%rbp)
	je	.LBB42_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB42_44 Depth=1
	movl	$0, -36(%rbp)
.LBB42_49:                              # %for.cond260
                                        #   Parent Loop BB42_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB42_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB42_49 Depth=2
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB42_51:                              # %for.cond271
                                        #   Parent Loop BB42_44 Depth=1
                                        #     Parent Loop BB42_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB42_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB42_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB42_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB42_58
.LBB42_54:                              # %cond.false296
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB42_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_57
.LBB42_56:                              # %cond.false310
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB42_57:                              # %cond.end320
                                        #   in Loop: Header=BB42_51 Depth=3
.LBB42_58:                              # %cond.end322
                                        #   in Loop: Header=BB42_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB42_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB42_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB42_64
.LBB42_60:                              # %cond.false354
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB42_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_63
.LBB42_62:                              # %cond.false369
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB42_63:                              # %cond.end379
                                        #   in Loop: Header=BB42_51 Depth=3
.LBB42_64:                              # %cond.end381
                                        #   in Loop: Header=BB42_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB42_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB42_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB42_70
.LBB42_66:                              # %cond.false413
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB42_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_69
.LBB42_68:                              # %cond.false428
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB42_69:                              # %cond.end438
                                        #   in Loop: Header=BB42_51 Depth=3
.LBB42_70:                              # %cond.end440
                                        #   in Loop: Header=BB42_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB42_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB42_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB42_76
.LBB42_72:                              # %cond.false472
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB42_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB42_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB42_75
.LBB42_74:                              # %cond.false487
                                        #   in Loop: Header=BB42_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB42_75:                              # %cond.end497
                                        #   in Loop: Header=BB42_51 Depth=3
.LBB42_76:                              # %cond.end499
                                        #   in Loop: Header=BB42_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB42_51 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB42_51
.LBB42_78:                              # %for.end
                                        #   in Loop: Header=BB42_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB42_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_83
.LBB42_80:                              # %if.end512
                                        #   in Loop: Header=BB42_49 Depth=2
	jmp	.LBB42_81
.LBB42_81:                              # %for.inc513
                                        #   in Loop: Header=BB42_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_49
.LBB42_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_83
.LBB42_83:                              # %for.end515
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_96
.LBB42_84:                              # %if.else516
                                        #   in Loop: Header=BB42_44 Depth=1
	movl	$0, -36(%rbp)
.LBB42_85:                              # %for.cond517
                                        #   Parent Loop BB42_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB42_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB42_85 Depth=2
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB42_87:                              # %for.cond529
                                        #   Parent Loop BB42_44 Depth=1
                                        #     Parent Loop BB42_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB42_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB42_87 Depth=3
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB42_87 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB42_87
.LBB42_90:                              # %for.end583
                                        #   in Loop: Header=BB42_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB42_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_95
.LBB42_92:                              # %if.end587
                                        #   in Loop: Header=BB42_85 Depth=2
	jmp	.LBB42_93
.LBB42_93:                              # %for.inc588
                                        #   in Loop: Header=BB42_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB42_85
.LBB42_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_95
.LBB42_95:                              # %for.end590
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_96
.LBB42_96:                              # %if.end591
                                        #   in Loop: Header=BB42_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB42_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB42_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB42_98:                              # %if.end595
                                        #   in Loop: Header=BB42_44 Depth=1
	jmp	.LBB42_99
.LBB42_99:                              # %for.inc596
                                        #   in Loop: Header=BB42_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB42_44
.LBB42_100:                             # %for.end598
	cmpl	$0, -104(%rbp)
	je	.LBB42_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-104(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-104(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB42_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$1727840764, -172(%rbp) # imm = 0x66FCC1FC
	jne	.LBB42_104
.LBB42_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_103
.Lfunc_end42:
	.size	FullPelBlockMotionBiPred.17, .Lfunc_end42-FullPelBlockMotionBiPred.17
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.18
.LCPI43_0:
	.quad	4602678819172646912     # double 0.5
.LCPI43_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.18
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.18,@function
FullPelBlockMotionSearch.18:            # @FullPelBlockMotionSearch.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1556507496, -124(%rbp) # imm = 0x5CC66B68
	movq	%rdi, -176(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -88(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -92(%rbp)
	vmovsd	%xmm0, -168(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -28(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -136(%rbp)
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-92(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-92(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -116(%rbp)
	movl	-88(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -132(%rbp)
	movl	-68(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -148(%rbp)
	movl	-88(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movl	-68(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	cmpl	$1, -92(%rbp)
	jne	.LBB43_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB43_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB43_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB43_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB43_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB43_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB43_14
.LBB43_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB43_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB43_13:                              # %land.end63
.LBB43_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB43_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB43_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB43_18
.LBB43_17:                              # %if.else
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB43_18:                              # %if.end
	movl	-72(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB43_23
# %bb.19:                               # %land.lhs.true81
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-84(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_23
# %bb.20:                               # %land.lhs.true86
	movl	-80(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB43_23
# %bb.21:                               # %land.lhs.true89
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB43_24
.LBB43_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB43_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB43_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_33 Depth 2
                                        #       Child Loop BB43_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB43_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-72(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -76(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	subl	-132(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-76(%rbp), %esi
	shll	$2, %esi
	subl	-148(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB43_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-64(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jne	.LBB43_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jne	.LBB43_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB43_30:                              # %if.end128
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB43_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB43_25 Depth=1
	jmp	.LBB43_46
.LBB43_32:                              # %if.end132
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	$0, -32(%rbp)
.LBB43_33:                              # %for.cond133
                                        #   Parent Loop BB43_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_35 Depth 3
	movl	-32(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB43_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB43_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-84(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-76(%rbp), %edx
	addl	-32(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-176(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -60(%rbp)
.LBB43_35:                              # %for.cond140
                                        #   Parent Loop BB43_25 Depth=1
                                        #     Parent Loop BB43_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-60(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB43_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB43_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB43_35 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB43_35
.LBB43_38:                              # %for.end
                                        #   in Loop: Header=BB43_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB43_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB43_25 Depth=1
	jmp	.LBB43_43
.LBB43_40:                              # %if.end178
                                        #   in Loop: Header=BB43_33 Depth=2
	jmp	.LBB43_41
.LBB43_41:                              # %for.inc179
                                        #   in Loop: Header=BB43_33 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB43_33
.LBB43_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB43_25 Depth=1
	jmp	.LBB43_43
.LBB43_43:                              # %for.end181
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB43_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB43_45:                              # %if.end185
                                        #   in Loop: Header=BB43_25 Depth=1
	jmp	.LBB43_46
.LBB43_46:                              # %for.inc186
                                        #   in Loop: Header=BB43_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_25
.LBB43_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB43_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB43_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1556507496, -124(%rbp) # imm = 0x5CC66B68
	jne	.LBB43_51
.LBB43_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_50
.Lfunc_end43:
	.size	FullPelBlockMotionSearch.18, .Lfunc_end43-FullPelBlockMotionSearch.18
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.19   # -- Begin function BPredPartitionCost.19
	.p2align	4, 0x90
	.type	BPredPartitionCost.19,@function
BPredPartitionCost.19:                  # @BPredPartitionCost.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1080318133, -104(%rbp) # imm = 0x406458B5
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB44_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB44_3
.LBB44_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB44_3
.LBB44_3:                               # %cond.end
	movl	%eax, -124(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB44_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB44_6
.LBB44_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB44_6
.LBB44_6:                               # %cond.end17
	movl	%eax, -112(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB44_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB44_9
.LBB44_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB44_9
.LBB44_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB44_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB44_12
.LBB44_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB44_12:                              # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB44_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB44_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB44_15:                              # %for.cond56
                                        #   Parent Loop BB44_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB44_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB44_15 Depth=2
	movl	-128(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_15
.LBB44_18:                              # %for.end
                                        #   in Loop: Header=BB44_13 Depth=1
	jmp	.LBB44_19
.LBB44_19:                              # %for.inc167
                                        #   in Loop: Header=BB44_13 Depth=1
	movl	-116(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_13
.LBB44_20:                              # %for.end169
	movl	-100(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB44_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_23 Depth 2
                                        #       Child Loop BB44_25 Depth 3
                                        #         Child Loop BB44_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB44_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB44_23:                              # %for.cond188
                                        #   Parent Loop BB44_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_25 Depth 3
                                        #         Child Loop BB44_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB44_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	-80(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movw	-34(%rbp), %bx
	movl	-64(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB44_25:                              # %for.cond199
                                        #   Parent Loop BB44_21 Depth=1
                                        #     Parent Loop BB44_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB44_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB44_25 Depth=3
	movl	$0, -32(%rbp)
.LBB44_27:                              # %for.cond203
                                        #   Parent Loop BB44_21 Depth=1
                                        #     Parent Loop BB44_23 Depth=2
                                        #       Parent Loop BB44_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB44_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB44_27 Depth=4
	movq	imgY_org, %rax
	movl	-108(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB44_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB44_27
.LBB44_30:                              # %for.end232
                                        #   in Loop: Header=BB44_25 Depth=3
	jmp	.LBB44_31
.LBB44_31:                              # %for.inc233
                                        #   in Loop: Header=BB44_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_25
.LBB44_32:                              # %for.end235
                                        #   in Loop: Header=BB44_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB44_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB44_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB44_35
.LBB44_34:                              # %if.then
                                        #   in Loop: Header=BB44_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB44_35:                              # %if.end
                                        #   in Loop: Header=BB44_23 Depth=2
	jmp	.LBB44_36
.LBB44_36:                              # %for.inc240
                                        #   in Loop: Header=BB44_23 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_23
.LBB44_37:                              # %for.end243
                                        #   in Loop: Header=BB44_21 Depth=1
	jmp	.LBB44_38
.LBB44_38:                              # %for.inc244
                                        #   in Loop: Header=BB44_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_21
.LBB44_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB44_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB44_58
# %bb.41:                               # %if.then252
	movl	$0, -52(%rbp)
.LBB44_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_44 Depth 2
                                        #       Child Loop BB44_46 Depth 3
                                        #         Child Loop BB44_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB44_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB44_42 Depth=1
	movl	$0, -48(%rbp)
.LBB44_44:                              # %for.cond261
                                        #   Parent Loop BB44_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_46 Depth 3
                                        #         Child Loop BB44_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB44_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB44_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB44_46:                              # %for.cond269
                                        #   Parent Loop BB44_42 Depth=1
                                        #     Parent Loop BB44_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB44_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB44_46 Depth=3
	movl	$0, -28(%rbp)
.LBB44_48:                              # %for.cond273
                                        #   Parent Loop BB44_42 Depth=1
                                        #     Parent Loop BB44_44 Depth=2
                                        #       Parent Loop BB44_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB44_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB44_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB44_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB44_48
.LBB44_51:                              # %for.end288
                                        #   in Loop: Header=BB44_46 Depth=3
	jmp	.LBB44_52
.LBB44_52:                              # %for.inc289
                                        #   in Loop: Header=BB44_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB44_46
.LBB44_53:                              # %for.end291
                                        #   in Loop: Header=BB44_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB44_44 Depth=2
	movl	-124(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB44_44
.LBB44_55:                              # %for.end298
                                        #   in Loop: Header=BB44_42 Depth=1
	jmp	.LBB44_56
.LBB44_56:                              # %for.inc299
                                        #   in Loop: Header=BB44_42 Depth=1
	movl	-112(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB44_42
.LBB44_57:                              # %for.end301
	jmp	.LBB44_58
.LBB44_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$1080318133, -104(%rbp) # imm = 0x406458B5
	jne	.LBB44_60
.LBB44_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_59
.Lfunc_end44:
	.size	BPredPartitionCost.19, .Lfunc_end44-BPredPartitionCost.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.20
.LCPI45_0:
	.quad	4602678819172646912     # double 0.5
.LCPI45_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.20
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.20,@function
FullPelBlockMotionSearch.20:            # @FullPelBlockMotionSearch.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$299117587, -144(%rbp)  # imm = 0x11D42C13
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -76(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB45_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB45_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB45_4
.LBB45_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB45_4
.LBB45_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -28(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -124(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -120(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-76(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-76(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -88(%rbp)
	movl	-88(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -132(%rbp)
	movl	-68(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movl	-64(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -148(%rbp)
	movl	-68(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -84(%rbp)
	movl	-64(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	cmpl	$1, -76(%rbp)
	jne	.LBB45_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB45_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB45_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB45_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB45_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB45_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB45_14
.LBB45_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB45_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB45_13:                              # %land.end63
.LBB45_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB45_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB45_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB45_18
.LBB45_17:                              # %if.else
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB45_18:                              # %if.end
	movl	-84(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB45_23
# %bb.19:                               # %land.lhs.true81
	movl	-84(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_23
# %bb.20:                               # %land.lhs.true86
	movl	-92(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB45_23
# %bb.21:                               # %land.lhs.true89
	movl	-92(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB45_24
.LBB45_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB45_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB45_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_33 Depth 2
                                        #       Child Loop BB45_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB45_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-84(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-92(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-60(%rbp), %edx
	shll	$2, %edx
	subl	-128(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-80(%rbp), %esi
	shll	$2, %esi
	subl	-148(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB45_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jne	.LBB45_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-80(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jne	.LBB45_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB45_30:                              # %if.end128
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB45_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB45_25 Depth=1
	jmp	.LBB45_46
.LBB45_32:                              # %if.end132
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	$0, -32(%rbp)
.LBB45_33:                              # %for.cond133
                                        #   Parent Loop BB45_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_35 Depth 3
	movl	-32(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB45_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB45_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-80(%rbp), %edx
	addl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-136(%rbp), %r9d
	callq	*%rax
	movq	%rax, -56(%rbp)
	movq	-168(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -72(%rbp)
.LBB45_35:                              # %for.cond140
                                        #   Parent Loop BB45_25 Depth=1
                                        #     Parent Loop BB45_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-72(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB45_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB45_35 Depth=3
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB45_35 Depth=3
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB45_35
.LBB45_38:                              # %for.end
                                        #   in Loop: Header=BB45_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB45_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB45_25 Depth=1
	jmp	.LBB45_43
.LBB45_40:                              # %if.end178
                                        #   in Loop: Header=BB45_33 Depth=2
	jmp	.LBB45_41
.LBB45_41:                              # %for.inc179
                                        #   in Loop: Header=BB45_33 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_33
.LBB45_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB45_25 Depth=1
	jmp	.LBB45_43
.LBB45_43:                              # %for.end181
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB45_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB45_45:                              # %if.end185
                                        #   in Loop: Header=BB45_25 Depth=1
	jmp	.LBB45_46
.LBB45_46:                              # %for.inc186
                                        #   in Loop: Header=BB45_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_25
.LBB45_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB45_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB45_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$299117587, -144(%rbp)  # imm = 0x11D42C13
	jne	.LBB45_51
.LBB45_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_50
.Lfunc_end45:
	.size	FullPelBlockMotionSearch.20, .Lfunc_end45-FullPelBlockMotionSearch.20
	.cfi_endproc
                                        # -- End function
	.globl	ResetFastFullIntegerSearch.21 # -- Begin function ResetFastFullIntegerSearch.21
	.p2align	4, 0x90
	.type	ResetFastFullIntegerSearch.21,@function
ResetFastFullIntegerSearch.21:          # @ResetFastFullIntegerSearch.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$321241724, -12(%rbp)   # imm = 0x1325C27C
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB46_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -8(%rbp)
.LBB46_3:                               # %for.cond1
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB46_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_6:                               # %for.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_7
.LBB46_7:                               # %for.inc6
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_8:                               # %for.end8
	cmpl	$321241724, -12(%rbp)   # imm = 0x1325C27C
	jne	.LBB46_10
.LBB46_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_9
.Lfunc_end46:
	.size	ResetFastFullIntegerSearch.21, .Lfunc_end46-ResetFastFullIntegerSearch.21
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.22 # -- Begin function ClearFastFullIntegerSearch.22
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.22,@function
ClearFastFullIntegerSearch.22:          # @ClearFastFullIntegerSearch.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1185133090, -20(%rbp)  # imm = 0x46A3B222
	movl	$0, -4(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
                                        #       Child Loop BB47_5 Depth 3
                                        #         Child Loop BB47_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB47_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -8(%rbp)
.LBB47_3:                               # %for.cond1
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB47_5 Depth 3
                                        #         Child Loop BB47_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB47_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	$1, -12(%rbp)
.LBB47_5:                               # %for.cond4
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB47_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB47_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB47_5 Depth=3
	movl	$0, -16(%rbp)
.LBB47_7:                               # %for.cond7
                                        #   Parent Loop BB47_1 Depth=1
                                        #     Parent Loop BB47_3 Depth=2
                                        #       Parent Loop BB47_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB47_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB47_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB47_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_7
.LBB47_10:                              # %for.end
                                        #   in Loop: Header=BB47_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB47_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_5
.LBB47_12:                              # %for.end24
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_3
.LBB47_14:                              # %for.end31
                                        #   in Loop: Header=BB47_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_1
.LBB47_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB47_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB47_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB47_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB47_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_17
.LBB47_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$1185133090, -20(%rbp)  # imm = 0x46A3B222
	jne	.LBB47_22
.LBB47_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_21
.Lfunc_end47:
	.size	ClearFastFullIntegerSearch.22, .Lfunc_end47-ClearFastFullIntegerSearch.22
	.cfi_endproc
                                        # -- End function
	.globl	sign.23                 # -- Begin function sign.23
	.p2align	4, 0x90
	.type	sign.23,@function
sign.23:                                # @sign.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1521680588, -28(%rbp)  # imm = 0x5AB300CC
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB48_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB48_3
.LBB48_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB48_3:                               # %cond.end
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB48_5
# %bb.4:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_6
.LBB48_5:                               # %if.else
	xorl	%eax, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_6:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1521680588, -28(%rbp)  # imm = 0x5AB300CC
	jne	.LBB48_8
.LBB48_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_7
.Lfunc_end48:
	.size	sign.23, .Lfunc_end48-sign.23
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.24    # -- Begin function Get_Direct_CostMB.24
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.24,@function
Get_Direct_CostMB.24:                   # @Get_Direct_CostMB.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1895639543, -28(%rbp)  # imm = 0x70FD29F7
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB49_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB49_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB49_5
.LBB49_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB49_18
.LBB49_5:                               # %if.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_6
.LBB49_6:                               # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB49_1
.LBB49_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB49_9
	jmp	.LBB49_8
.LBB49_8:                               # %for.end
	subl	$2, %eax
	je	.LBB49_15
	jmp	.LBB49_16
.LBB49_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB49_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB49_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB49_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB49_14
.LBB49_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB49_14:                              # %if.end9
	jmp	.LBB49_17
.LBB49_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_17
.LBB49_16:                              # %sw.default
	jmp	.LBB49_17
.LBB49_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB49_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$1895639543, -28(%rbp)  # imm = 0x70FD29F7
	jne	.LBB49_20
.LBB49_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_19
.Lfunc_end49:
	.size	Get_Direct_CostMB.24, .Lfunc_end49-Get_Direct_CostMB.24
	.cfi_endproc
                                        # -- End function
	.globl	sign.25                 # -- Begin function sign.25
	.p2align	4, 0x90
	.type	sign.25,@function
sign.25:                                # @sign.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1896237559, -28(%rbp)  # imm = 0x710649F7
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB50_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB50_3
.LBB50_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB50_3:                               # %cond.end
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB50_5
# %bb.4:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_6
.LBB50_5:                               # %if.else
	xorl	%eax, %eax
	subl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB50_6:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1896237559, -28(%rbp)  # imm = 0x710649F7
	jne	.LBB50_8
.LBB50_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_7
.Lfunc_end50:
	.size	sign.25, .Lfunc_end50-sign.25
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.26     # -- Begin function BIDPartitionCost.26
	.p2align	4, 0x90
	.type	BIDPartitionCost.26,@function
BIDPartitionCost.26:                    # @BIDPartitionCost.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1093723752, -124(%rbp) # imm = 0x4130E668
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -100(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB51_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB51_3
.LBB51_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB51_3
.LBB51_3:                               # %cond.end
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB51_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB51_6
.LBB51_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB51_6
.LBB51_6:                               # %cond.end17
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB51_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB51_9
.LBB51_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB51_9
.LBB51_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB51_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB51_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB51_12:                              # %for.cond53
                                        #   Parent Loop BB51_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB51_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB51_12 Depth=2
	movl	-112(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_12
.LBB51_15:                              # %for.end
                                        #   in Loop: Header=BB51_10 Depth=1
	jmp	.LBB51_16
.LBB51_16:                              # %for.inc164
                                        #   in Loop: Header=BB51_10 Depth=1
	movl	-128(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_10
.LBB51_17:                              # %for.end166
	movl	-100(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB51_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_20 Depth 2
                                        #       Child Loop BB51_22 Depth 3
                                        #         Child Loop BB51_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB51_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB51_20:                              # %for.cond185
                                        #   Parent Loop BB51_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_22 Depth 3
                                        #         Child Loop BB51_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB51_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -68(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-68(%rbp), %edi
	movl	-64(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-36(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB51_22:                              # %for.cond196
                                        #   Parent Loop BB51_18 Depth=1
                                        #     Parent Loop BB51_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_24 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB51_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB51_22 Depth=3
	movl	$0, -28(%rbp)
.LBB51_24:                              # %for.cond200
                                        #   Parent Loop BB51_18 Depth=1
                                        #     Parent Loop BB51_20 Depth=2
                                        #       Parent Loop BB51_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB51_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB51_24 Depth=4
	movq	imgY_org, %rax
	movl	-120(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-108(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB51_24 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB51_24
.LBB51_27:                              # %for.end229
                                        #   in Loop: Header=BB51_22 Depth=3
	jmp	.LBB51_28
.LBB51_28:                              # %for.inc230
                                        #   in Loop: Header=BB51_22 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB51_22
.LBB51_29:                              # %for.end232
                                        #   in Loop: Header=BB51_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB51_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB51_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB51_32
.LBB51_31:                              # %if.then
                                        #   in Loop: Header=BB51_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB51_32:                              # %if.end
                                        #   in Loop: Header=BB51_20 Depth=2
	jmp	.LBB51_33
.LBB51_33:                              # %for.inc236
                                        #   in Loop: Header=BB51_20 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_20
.LBB51_34:                              # %for.end239
                                        #   in Loop: Header=BB51_18 Depth=1
	jmp	.LBB51_35
.LBB51_35:                              # %for.inc240
                                        #   in Loop: Header=BB51_18 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_18
.LBB51_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB51_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB51_55
# %bb.38:                               # %if.then248
	movl	$0, -48(%rbp)
.LBB51_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_41 Depth 2
                                        #       Child Loop BB51_43 Depth 3
                                        #         Child Loop BB51_45 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB51_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB51_39 Depth=1
	movl	$0, -52(%rbp)
.LBB51_41:                              # %for.cond257
                                        #   Parent Loop BB51_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_43 Depth 3
                                        #         Child Loop BB51_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB51_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB51_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB51_43:                              # %for.cond265
                                        #   Parent Loop BB51_39 Depth=1
                                        #     Parent Loop BB51_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_45 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB51_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB51_43 Depth=3
	movl	$0, -32(%rbp)
.LBB51_45:                              # %for.cond269
                                        #   Parent Loop BB51_39 Depth=1
                                        #     Parent Loop BB51_41 Depth=2
                                        #       Parent Loop BB51_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB51_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB51_45 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB51_45 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB51_45
.LBB51_48:                              # %for.end284
                                        #   in Loop: Header=BB51_43 Depth=3
	jmp	.LBB51_49
.LBB51_49:                              # %for.inc285
                                        #   in Loop: Header=BB51_43 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB51_43
.LBB51_50:                              # %for.end287
                                        #   in Loop: Header=BB51_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB51_41 Depth=2
	movl	-116(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB51_41
.LBB51_52:                              # %for.end294
                                        #   in Loop: Header=BB51_39 Depth=1
	jmp	.LBB51_53
.LBB51_53:                              # %for.inc295
                                        #   in Loop: Header=BB51_39 Depth=1
	movl	-104(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB51_39
.LBB51_54:                              # %for.end297
	jmp	.LBB51_55
.LBB51_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1093723752, -124(%rbp) # imm = 0x4130E668
	jne	.LBB51_57
.LBB51_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_56
.Lfunc_end51:
	.size	BIDPartitionCost.26, .Lfunc_end51-BIDPartitionCost.26
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.27
.LCPI52_0:
	.quad	4602678819172646912     # double 0.5
.LCPI52_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.27
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.27,@function
SubPelBlockMotionSearch.27:             # @SubPelBlockMotionSearch.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI52_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1759609922, -200(%rbp) # imm = 0x68E18442
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -152(%rbp)
	movl	%ecx, -140(%rbp)
	movl	%r8d, -136(%rbp)
	movl	%r9d, -100(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -156(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$1, -100(%rbp)
	jne	.LBB52_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB52_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB52_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB52_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB52_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB52_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB52_7:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	movslq	-100(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	movslq	-100(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -144(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -120(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB52_10
.LBB52_9:                               # %cond.false
	movl	$1, %eax
	jmp	.LBB52_10
.LBB52_10:                              # %cond.end
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB52_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB52_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB52_14
.LBB52_13:                              # %cond.false34
	movl	48(%rbp), %eax
.LBB52_14:                              # %cond.end35
	jmp	.LBB52_16
.LBB52_15:                              # %cond.false37
	movl	48(%rbp), %eax
.LBB52_16:                              # %cond.end38
	movl	%eax, -192(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB52_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB52_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB52_20
.LBB52_19:                              # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB52_20
.LBB52_20:                              # %cond.end50
	movl	%ecx, -132(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB52_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB52_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB52_26
.LBB52_23:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB52_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB52_25:                              # %land.end65
.LBB52_26:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB52_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB52_29
.LBB52_28:                              # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB52_29:                              # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -160(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-152(%rbp), %eax
	addl	-132(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -184(%rbp)
	je	.LBB52_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB52_32
# %bb.31:                               # %if.then
	movl	-152(%rbp), %eax
	addl	-132(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB52_33
.LBB52_32:                              # %if.else
	movl	-152(%rbp), %eax
	addl	-132(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB52_33:                              # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-148(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-144(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB52_38
# %bb.34:                               # %land.lhs.true112
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_38
# %bb.35:                               # %land.lhs.true118
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB52_38
# %bb.36:                               # %land.lhs.true123
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB52_39
.LBB52_38:                              # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB52_39:                              # %if.end131
	movl	$0, -80(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB52_40:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_47 Depth 2
                                        #       Child Loop BB52_51 Depth 3
                                        #         Child Loop BB52_57 Depth 4
                                        #           Child Loop BB52_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-192(%rbp), %eax
	jge	.LBB52_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB52_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-156(%rbp), %eax
	movq	mvbits, %rdx
	movl	-104(%rbp), %esi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB52_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB52_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB52_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB52_40 Depth=1
	movl	-156(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB52_44:                              # %if.end164
                                        #   in Loop: Header=BB52_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB52_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB52_40 Depth=1
	jmp	.LBB52_75
.LBB52_46:                              # %if.end168
                                        #   in Loop: Header=BB52_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -96(%rbp)
.LBB52_47:                              # %for.cond169
                                        #   Parent Loop BB52_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_51 Depth 3
                                        #         Child Loop BB52_57 Depth 4
                                        #           Child Loop BB52_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-144(%rbp), %ecx
	jge	.LBB52_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB52_47 Depth=2
	cmpl	$0, -96(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_49:                              # %land.end174
                                        #   in Loop: Header=BB52_47 Depth=2
	testb	$1, %al
	jne	.LBB52_50
	jmp	.LBB52_70
.LBB52_50:                              # %for.body176
                                        #   in Loop: Header=BB52_47 Depth=2
	movl	-136(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB52_51:                              # %for.cond180
                                        #   Parent Loop BB52_40 Depth=1
                                        #     Parent Loop BB52_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_57 Depth 4
                                        #           Child Loop BB52_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB52_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB52_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-140(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-104(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB52_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB52_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB52_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB52_47 Depth=2
	movl	$1, -96(%rbp)
	jmp	.LBB52_68
.LBB52_55:                              # %if.end342
                                        #   in Loop: Header=BB52_51 Depth=3
	jmp	.LBB52_65
.LBB52_56:                              # %if.else343
                                        #   in Loop: Header=BB52_51 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB52_57:                              # %for.cond344
                                        #   Parent Loop BB52_40 Depth=1
                                        #     Parent Loop BB52_47 Depth=2
                                        #       Parent Loop BB52_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB52_59 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB52_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB52_57 Depth=4
	movl	$0, -84(%rbp)
.LBB52_59:                              # %for.cond348
                                        #   Parent Loop BB52_40 Depth=1
                                        #     Parent Loop BB52_47 Depth=2
                                        #       Parent Loop BB52_51 Depth=3
                                        #         Parent Loop BB52_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -84(%rbp)
	jge	.LBB52_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB52_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB52_59 Depth=5
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB52_59
.LBB52_62:                              # %for.end
                                        #   in Loop: Header=BB52_57 Depth=4
	jmp	.LBB52_63
.LBB52_63:                              # %for.inc361
                                        #   in Loop: Header=BB52_57 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB52_57
.LBB52_64:                              # %for.end363
                                        #   in Loop: Header=BB52_51 Depth=3
	jmp	.LBB52_65
.LBB52_65:                              # %if.end364
                                        #   in Loop: Header=BB52_51 Depth=3
	jmp	.LBB52_66
.LBB52_66:                              # %for.inc365
                                        #   in Loop: Header=BB52_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_51
.LBB52_67:                              # %for.end367.loopexit
                                        #   in Loop: Header=BB52_47 Depth=2
	jmp	.LBB52_68
.LBB52_68:                              # %for.end367
                                        #   in Loop: Header=BB52_47 Depth=2
	jmp	.LBB52_69
.LBB52_69:                              # %for.inc368
                                        #   in Loop: Header=BB52_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB52_47
.LBB52_70:                              # %for.end370
                                        #   in Loop: Header=BB52_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB52_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB52_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-160(%rbp), %esi
	movl	-100(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB52_72:                              # %if.end377
                                        #   in Loop: Header=BB52_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB52_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB52_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB52_74:                              # %if.end381
                                        #   in Loop: Header=BB52_40 Depth=1
	jmp	.LBB52_75
.LBB52_75:                              # %for.inc382
                                        #   in Loop: Header=BB52_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB52_40
.LBB52_76:                              # %for.end384
	cmpl	$0, -80(%rbp)
	je	.LBB52_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB52_78:                              # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB52_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB52_80:                              # %if.end403
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB52_85
# %bb.81:                               # %land.lhs.true408
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_85
# %bb.82:                               # %land.lhs.true414
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB52_85
# %bb.83:                               # %land.lhs.true419
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB52_86
.LBB52_85:                              # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB52_86:                              # %if.end427
	movl	$0, -80(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB52_87:                              # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_91 Depth 2
                                        #       Child Loop BB52_95 Depth 3
                                        #         Child Loop BB52_101 Depth 4
                                        #           Child Loop BB52_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB52_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB52_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -104(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movl	-156(%rbp), %eax
	movq	mvbits, %rdx
	movl	-104(%rbp), %esi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-116(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB52_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB52_87 Depth=1
	jmp	.LBB52_119
.LBB52_90:                              # %if.end456
                                        #   in Loop: Header=BB52_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -96(%rbp)
.LBB52_91:                              # %for.cond457
                                        #   Parent Loop BB52_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB52_95 Depth 3
                                        #         Child Loop BB52_101 Depth 4
                                        #           Child Loop BB52_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-144(%rbp), %ecx
	jge	.LBB52_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB52_91 Depth=2
	cmpl	$0, -96(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB52_93:                              # %land.end463
                                        #   in Loop: Header=BB52_91 Depth=2
	testb	$1, %al
	jne	.LBB52_94
	jmp	.LBB52_114
.LBB52_94:                              # %for.body465
                                        #   in Loop: Header=BB52_91 Depth=2
	movl	-136(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB52_95:                              # %for.cond469
                                        #   Parent Loop BB52_87 Depth=1
                                        #     Parent Loop BB52_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB52_101 Depth 4
                                        #           Child Loop BB52_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB52_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB52_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-140(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-104(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-72(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB52_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB52_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB52_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB52_91 Depth=2
	movl	$1, -96(%rbp)
	jmp	.LBB52_112
.LBB52_99:                              # %if.end636
                                        #   in Loop: Header=BB52_95 Depth=3
	jmp	.LBB52_109
.LBB52_100:                             # %if.else637
                                        #   in Loop: Header=BB52_95 Depth=3
	movl	$0, -76(%rbp)
	movl	$0, -92(%rbp)
.LBB52_101:                             # %for.cond638
                                        #   Parent Loop BB52_87 Depth=1
                                        #     Parent Loop BB52_91 Depth=2
                                        #       Parent Loop BB52_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB52_103 Depth 5
	cmpl	$4, -76(%rbp)
	jge	.LBB52_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB52_101 Depth=4
	movl	$0, -84(%rbp)
.LBB52_103:                             # %for.cond642
                                        #   Parent Loop BB52_87 Depth=1
                                        #     Parent Loop BB52_91 Depth=2
                                        #       Parent Loop BB52_95 Depth=3
                                        #         Parent Loop BB52_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -84(%rbp)
	jge	.LBB52_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB52_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB52_103 Depth=5
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB52_103
.LBB52_106:                             # %for.end657
                                        #   in Loop: Header=BB52_101 Depth=4
	jmp	.LBB52_107
.LBB52_107:                             # %for.inc658
                                        #   in Loop: Header=BB52_101 Depth=4
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB52_101
.LBB52_108:                             # %for.end660
                                        #   in Loop: Header=BB52_95 Depth=3
	jmp	.LBB52_109
.LBB52_109:                             # %if.end661
                                        #   in Loop: Header=BB52_95 Depth=3
	jmp	.LBB52_110
.LBB52_110:                             # %for.inc662
                                        #   in Loop: Header=BB52_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_95
.LBB52_111:                             # %for.end664.loopexit
                                        #   in Loop: Header=BB52_91 Depth=2
	jmp	.LBB52_112
.LBB52_112:                             # %for.end664
                                        #   in Loop: Header=BB52_91 Depth=2
	jmp	.LBB52_113
.LBB52_113:                             # %for.inc665
                                        #   in Loop: Header=BB52_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB52_91
.LBB52_114:                             # %for.end667
                                        #   in Loop: Header=BB52_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB52_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB52_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-100(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB52_116:                             # %if.end675
                                        #   in Loop: Header=BB52_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB52_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB52_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB52_118:                             # %if.end679
                                        #   in Loop: Header=BB52_87 Depth=1
	jmp	.LBB52_119
.LBB52_119:                             # %for.inc680
                                        #   in Loop: Header=BB52_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB52_87
.LBB52_120:                             # %for.end682
	cmpl	$0, -80(%rbp)
	je	.LBB52_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-80(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB52_122:                             # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$1759609922, -200(%rbp) # imm = 0x68E18442
	jne	.LBB52_124
.LBB52_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_123
.Lfunc_end52:
	.size	SubPelBlockMotionSearch.27, .Lfunc_end52-SubPelBlockMotionSearch.27
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.28   # -- Begin function Get_Direct_Cost8x8.28
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.28,@function
Get_Direct_Cost8x8.28:                  # @Get_Direct_Cost8x8.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$633105452, -60(%rbp)   # imm = 0x25BC6C2C
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -44(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
                                        #       Child Loop BB53_7 Depth 3
                                        #         Child Loop BB53_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB53_3:                               # %for.cond3
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_7 Depth 3
                                        #         Child Loop BB53_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB53_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB53_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB53_30
.LBB53_6:                               # %if.end
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-24(%rbp), %edi
	movl	-28(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB53_7:                               # %for.cond34
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB53_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB53_7 Depth=3
	movl	$0, -16(%rbp)
.LBB53_9:                               # %for.cond38
                                        #   Parent Loop BB53_1 Depth=1
                                        #     Parent Loop BB53_3 Depth=2
                                        #       Parent Loop BB53_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB53_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB53_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-24(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB53_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_9
.LBB53_12:                              # %for.end
                                        #   in Loop: Header=BB53_7 Depth=3
	jmp	.LBB53_13
.LBB53_13:                              # %for.inc67
                                        #   in Loop: Header=BB53_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_7
.LBB53_14:                              # %for.end69
                                        #   in Loop: Header=BB53_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_3
.LBB53_16:                              # %for.end73
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_17
.LBB53_17:                              # %for.inc74
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_1
.LBB53_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB53_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB53_29
# %bb.20:                               # %if.then79
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB53_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB53_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB53_21 Depth=1
	movl	$0, -16(%rbp)
.LBB53_23:                              # %for.cond84
                                        #   Parent Loop BB53_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB53_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB53_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB53_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_23
.LBB53_26:                              # %for.end97
                                        #   in Loop: Header=BB53_21 Depth=1
	jmp	.LBB53_27
.LBB53_27:                              # %for.inc98
                                        #   in Loop: Header=BB53_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_21
.LBB53_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB53_29:                              # %if.end105
	movl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB53_30:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$633105452, -60(%rbp)   # imm = 0x25BC6C2C
	jne	.LBB53_32
.LBB53_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_31
.Lfunc_end53:
	.size	Get_Direct_Cost8x8.28, .Lfunc_end53-Get_Direct_Cost8x8.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.29
.LCPI54_0:
	.quad	4611686018427387904     # double 2
.LCPI54_1:
	.quad	4607182418800017408     # double 1
.LCPI54_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI54_4:
	.quad	4620693217682128896     # double 8
.LCPI54_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI54_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.29
	.p2align	4, 0x90
	.type	BlockMotionSearch.29,@function
BlockMotionSearch.29:                   # @BlockMotionSearch.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$827867487, -212(%rbp)  # imm = 0x3158415F
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -184(%rbp)
	movl	%ecx, -196(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-184(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-184(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB54_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB54_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB54_4
.LBB54_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB54_4
.LBB54_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB54_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB54_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB54_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB54_6 Depth=1
	movl	$0, -64(%rbp)
.LBB54_8:                               # %for.cond24
                                        #   Parent Loop BB54_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB54_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB54_8 Depth=2
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB54_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_8
.LBB54_11:                              # %for.end
                                        #   in Loop: Header=BB54_6 Depth=1
	jmp	.LBB54_12
.LBB54_12:                              # %for.inc37
                                        #   in Loop: Header=BB54_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB54_6
.LBB54_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB54_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB54_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_18
.LBB54_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB54_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB54_37
.LBB54_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB54_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_23
.LBB54_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB54_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB54_36
.LBB54_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB54_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_28
.LBB54_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB54_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB54_35
.LBB54_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB54_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_33
.LBB54_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB54_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB54_34:                              # %if.end276
	jmp	.LBB54_35
.LBB54_35:                              # %if.end277
	jmp	.LBB54_36
.LBB54_36:                              # %if.end278
	jmp	.LBB54_37
.LBB54_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB54_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB54_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_43
.LBB54_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB54_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB54_62
.LBB54_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB54_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_48
.LBB54_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB54_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB54_61
.LBB54_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB54_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_53
.LBB54_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB54_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB54_60
.LBB54_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB54_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB54_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB54_58
.LBB54_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB54_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB54_59:                              # %if.end524
	jmp	.LBB54_60
.LBB54_60:                              # %if.end525
	jmp	.LBB54_61
.LBB54_61:                              # %if.end526
	jmp	.LBB54_62
.LBB54_62:                              # %if.end527
	jmp	.LBB54_63
.LBB54_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB54_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB54_66
.LBB54_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB54_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB54_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB54_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB54_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB54_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB54_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB54_73
.LBB54_72:                              # %cond.false626
	vmovsd	.LCPI54_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB54_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB54_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB54_76
.LBB54_75:                              # %cond.false655
	vmovsd	.LCPI54_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB54_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB54_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB54_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB54_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB54_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB54_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB54_83
.LBB54_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB54_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB54_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB54_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB54_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB54_92
.LBB54_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB54_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB54_91
.LBB54_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB54_91:                              # %cond.end787
	vmovss	.LCPI54_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB54_92:                              # %if.end835
	jmp	.LBB54_106
.LBB54_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB54_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB54_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB54_97
.LBB54_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB54_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-52(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-48(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB54_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB54_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB54_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB54_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB54_104
.LBB54_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB54_104:                             # %cond.end940
	vmovss	.LCPI54_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB54_105:                             # %if.end988
	jmp	.LBB54_106
.LBB54_106:                             # %if.end989
	jmp	.LBB54_107
.LBB54_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB54_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB54_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	-132(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB54_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB54_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB54_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB54_114
.LBB54_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB54_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB54_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB54_120
.LBB54_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB54_119
.LBB54_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB54_119:                             # %cond.end1029
.LBB54_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB54_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB54_123
.LBB54_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB54_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB54_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB54_129
.LBB54_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB54_128
.LBB54_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB54_128:                             # %cond.end1054
.LBB54_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB54_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB54_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB54_131 Depth=1
	movl	$0, -72(%rbp)
.LBB54_133:                             # %for.cond1066
                                        #   Parent Loop BB54_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB54_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB54_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB54_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB54_137
.LBB54_136:                             # %if.else1091
                                        #   in Loop: Header=BB54_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB54_137:                             # %if.end1109
                                        #   in Loop: Header=BB54_133 Depth=2
	jmp	.LBB54_138
.LBB54_138:                             # %for.inc1110
                                        #   in Loop: Header=BB54_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB54_133
.LBB54_139:                             # %for.end1112
                                        #   in Loop: Header=BB54_131 Depth=1
	jmp	.LBB54_140
.LBB54_140:                             # %for.inc1113
                                        #   in Loop: Header=BB54_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_131
.LBB54_141:                             # %for.end1115
	jmp	.LBB54_143
.LBB54_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB54_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB54_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB54_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB54_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB54_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB54_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB54_150
.LBB54_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB54_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB54_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB54_151 Depth=1
	movl	$0, -72(%rbp)
.LBB54_153:                             # %for.cond1139
                                        #   Parent Loop BB54_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB54_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB54_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB54_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB54_157
.LBB54_156:                             # %if.else1183
                                        #   in Loop: Header=BB54_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB54_157:                             # %if.end1220
                                        #   in Loop: Header=BB54_153 Depth=2
	jmp	.LBB54_158
.LBB54_158:                             # %for.inc1221
                                        #   in Loop: Header=BB54_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB54_153
.LBB54_159:                             # %for.end1223
                                        #   in Loop: Header=BB54_151 Depth=1
	jmp	.LBB54_160
.LBB54_160:                             # %for.inc1224
                                        #   in Loop: Header=BB54_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_151
.LBB54_161:                             # %for.end1226
	jmp	.LBB54_166
.LBB54_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB54_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB54_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB54_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB54_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB54_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB54_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB54_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB54_173
.LBB54_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI54_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB54_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB54_172:                             # %if.end1273
	jmp	.LBB54_173
.LBB54_173:                             # %if.end1274
	jmp	.LBB54_174
.LBB54_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB54_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -64(%rbp)
.LBB54_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB54_176 Depth=1
	movl	$0, -72(%rbp)
.LBB54_178:                             # %for.cond1290
                                        #   Parent Loop BB54_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB54_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-180(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-180(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB54_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB54_178
.LBB54_181:                             # %for.end1337
                                        #   in Loop: Header=BB54_176 Depth=1
	jmp	.LBB54_182
.LBB54_182:                             # %for.inc1338
                                        #   in Loop: Header=BB54_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_176
.LBB54_183:                             # %for.end1340
	jmp	.LBB54_193
.LBB54_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB54_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB54_185 Depth=1
	movl	$0, -72(%rbp)
.LBB54_187:                             # %for.cond1347
                                        #   Parent Loop BB54_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB54_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-52(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB54_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB54_187
.LBB54_190:                             # %for.end1380
                                        #   in Loop: Header=BB54_185 Depth=1
	jmp	.LBB54_191
.LBB54_191:                             # %for.inc1381
                                        #   in Loop: Header=BB54_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_185
.LBB54_192:                             # %for.end1383
	jmp	.LBB54_193
.LBB54_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB54_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB54_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB54_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB54_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB54_200
.LBB54_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB54_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-52(%rbp), %r9d
	movl	-48(%rbp), %eax
	movl	-140(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB54_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB54_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB54_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB54_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB54_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -74(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -76(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB54_208
.LBB54_204:                             # %if.else1433
                                        #   in Loop: Header=BB54_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB54_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB54_201 Depth=1
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -74(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -76(%rbp)
	jmp	.LBB54_207
.LBB54_206:                             # %if.else1441
                                        #   in Loop: Header=BB54_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -88(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
.LBB54_207:                             # %if.end1450
                                        #   in Loop: Header=BB54_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB54_208:                             # %if.end1452
                                        #   in Loop: Header=BB54_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %eax
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB54_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_201
.LBB54_210:                             # %for.end1458
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB54_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB54_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB54_213:                             # %if.end1469
	vmovsd	.LCPI54_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB54_215
.LBB54_214:                             # %if.else1473
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
.LBB54_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB54_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB54_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB54_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI54_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB54_220
.LBB54_219:                             # %if.else1495
	movw	-86(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB54_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB54_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB54_221 Depth=1
	movl	$0, -72(%rbp)
.LBB54_223:                             # %for.cond1502
                                        #   Parent Loop BB54_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB54_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-48(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-52(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-48(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB54_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB54_223
.LBB54_226:                             # %for.end1565
                                        #   in Loop: Header=BB54_221 Depth=1
	jmp	.LBB54_227
.LBB54_227:                             # %for.inc1566
                                        #   in Loop: Header=BB54_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB54_221
.LBB54_228:                             # %for.end1568
	jmp	.LBB54_229
.LBB54_229:                             # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -192(%rbp)
	movl	-192(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-192(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$827867487, -212(%rbp)  # imm = 0x3158415F
	jne	.LBB54_231
.LBB54_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_230
.Lfunc_end54:
	.size	BlockMotionSearch.29, .Lfunc_end54-BlockMotionSearch.29
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.30            # -- Begin function find_SATD.30
	.p2align	4, 0x90
	.type	find_SATD.30,@function
find_SATD.30:                           # @find_SATD.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$821735050, -56(%rbp)   # imm = 0x30FAAE8A
	movq	%rdi, -64(%rbp)
	movl	%esi, -52(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -32(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
                                        #       Child Loop BB55_5 Depth 3
                                        #         Child Loop BB55_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -24(%rbp)
.LBB55_3:                               # %for.cond7
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_5 Depth 3
                                        #         Child Loop BB55_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB55_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB55_5:                               # %for.cond10
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_7 Depth 4
	movl	-28(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB55_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB55_7:                               # %for.cond13
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_3 Depth=2
                                        #       Parent Loop BB55_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB55_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-28(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB55_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB55_7
.LBB55_10:                              # %for.end
                                        #   in Loop: Header=BB55_5 Depth=3
	jmp	.LBB55_11
.LBB55_11:                              # %for.inc24
                                        #   in Loop: Header=BB55_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB55_5
.LBB55_12:                              # %for.end26
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_13
.LBB55_13:                              # %for.inc27
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-32(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_3
.LBB55_14:                              # %for.end29
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_15
.LBB55_15:                              # %for.inc30
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-32(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_1
.LBB55_16:                              # %for.end32
	cmpl	$0, -52(%rbp)
	je	.LBB55_26
# %bb.17:                               # %if.then
	movl	-36(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB55_24
# %bb.18:                               # %if.then
	movq	.LJTI55_0(,%rax,8), %rax
	jmpq	*%rax
.LBB55_19:                              # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_25
.LBB55_20:                              # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_25
.LBB55_21:                              # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB55_25
.LBB55_22:                              # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_25
.LBB55_23:                              # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB55_25
.LBB55_24:                              # %sw.default
	movl	$-1, -12(%rbp)
.LBB55_25:                              # %sw.epilog
	jmp	.LBB55_31
.LBB55_26:                              # %if.else
	movl	$0, -16(%rbp)
.LBB55_27:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB55_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB55_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_27
.LBB55_30:                              # %for.end79
	jmp	.LBB55_31
.LBB55_31:                              # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$821735050, -56(%rbp)   # imm = 0x30FAAE8A
	jne	.LBB55_33
.LBB55_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_32
.Lfunc_end55:
	.size	find_SATD.30, .Lfunc_end55-find_SATD.30
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI55_0:
	.quad	.LBB55_19
	.quad	.LBB55_20
	.quad	.LBB55_20
	.quad	.LBB55_21
	.quad	.LBB55_22
	.quad	.LBB55_22
	.quad	.LBB55_23
                                        # -- End function
	.text
	.globl	PartitionMotionSearch.31 # -- Begin function PartitionMotionSearch.31
	.p2align	4, 0x90
	.type	PartitionMotionSearch.31,@function
PartitionMotionSearch.31:               # @PartitionMotionSearch.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1339975362, -64(%rbp)  # imm = 0x4FDE66C2
	movl	%edi, -8(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -104(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB56_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB56_3
.LBB56_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB56_3
.LBB56_3:                               # %cond.end
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -80(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB56_6
# %bb.5:                                # %if.then20
	movl	$4, -48(%rbp)
	jmp	.LBB56_7
.LBB56_6:                               # %if.else
	movl	$2, -48(%rbp)
.LBB56_7:                               # %if.end
	jmp	.LBB56_9
.LBB56_8:                               # %if.else21
	movl	$0, -48(%rbp)
.LBB56_9:                               # %if.end22
	movl	-72(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB56_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_12 Depth 2
                                        #       Child Loop BB56_29 Depth 3
                                        #         Child Loop BB56_31 Depth 4
                                        #           Child Loop BB56_33 Depth 5
                                        #             Child Loop BB56_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB56_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB56_10 Depth=1
	movw	$0, -2(%rbp)
.LBB56_12:                              # %for.cond27
                                        #   Parent Loop BB56_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB56_29 Depth 3
                                        #         Child Loop BB56_31 Depth 4
                                        #           Child Loop BB56_33 Depth 5
                                        #             Child Loop BB56_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB56_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB56_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB56_28
.LBB56_15:                              # %if.else38
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB56_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB56_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB56_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB56_19
.LBB56_18:                              # %cond.false49
                                        #   in Loop: Header=BB56_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB56_19
.LBB56_19:                              # %cond.end50
                                        #   in Loop: Header=BB56_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
	jmp	.LBB56_27
.LBB56_20:                              # %if.else53
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB56_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB56_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB56_23
.LBB56_22:                              # %cond.false60
                                        #   in Loop: Header=BB56_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB56_23
.LBB56_23:                              # %cond.end61
                                        #   in Loop: Header=BB56_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB56_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB56_12 Depth=2
	movl	$2, %edx
	jmp	.LBB56_26
.LBB56_25:                              # %cond.false67
                                        #   in Loop: Header=BB56_12 Depth=2
	movl	-8(%rbp), %edx
.LBB56_26:                              # %cond.end68
                                        #   in Loop: Header=BB56_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
.LBB56_27:                              # %if.end71
                                        #   in Loop: Header=BB56_12 Depth=2
	jmp	.LBB56_28
.LBB56_28:                              # %if.end72
                                        #   in Loop: Header=BB56_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -112(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB56_29:                              # %for.cond89
                                        #   Parent Loop BB56_10 Depth=1
                                        #     Parent Loop BB56_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB56_31 Depth 4
                                        #           Child Loop BB56_33 Depth 5
                                        #             Child Loop BB56_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB56_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB56_31:                              # %for.cond103
                                        #   Parent Loop BB56_10 Depth=1
                                        #     Parent Loop BB56_12 Depth=2
                                        #       Parent Loop BB56_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB56_33 Depth 5
                                        #             Child Loop BB56_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB56_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-20(%rbp), %edx
	shll	$2, %edx
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-52(%rbp), %r9d
	vmovsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -28(%rbp)
.LBB56_33:                              # %for.cond123
                                        #   Parent Loop BB56_10 Depth=1
                                        #     Parent Loop BB56_12 Depth=2
                                        #       Parent Loop BB56_29 Depth=3
                                        #         Parent Loop BB56_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB56_35 Depth 6
	movl	-28(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB56_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB56_33 Depth=5
	movl	$0, -36(%rbp)
.LBB56_35:                              # %for.cond127
                                        #   Parent Loop BB56_10 Depth=1
                                        #     Parent Loop BB56_12 Depth=2
                                        #       Parent Loop BB56_29 Depth=3
                                        #         Parent Loop BB56_31 Depth=4
                                        #           Parent Loop BB56_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB56_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB56_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-40(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-40(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-112(%rbp), %rcx
	movl	-40(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB56_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB56_35
.LBB56_38:                              # %for.end
                                        #   in Loop: Header=BB56_33 Depth=5
	jmp	.LBB56_39
.LBB56_39:                              # %for.inc174
                                        #   in Loop: Header=BB56_33 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB56_33
.LBB56_40:                              # %for.end176
                                        #   in Loop: Header=BB56_31 Depth=4
	jmp	.LBB56_41
.LBB56_41:                              # %for.inc177
                                        #   in Loop: Header=BB56_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_31
.LBB56_42:                              # %for.end179
                                        #   in Loop: Header=BB56_29 Depth=3
	jmp	.LBB56_43
.LBB56_43:                              # %for.inc180
                                        #   in Loop: Header=BB56_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_29
.LBB56_44:                              # %for.end182
                                        #   in Loop: Header=BB56_12 Depth=2
	jmp	.LBB56_45
.LBB56_45:                              # %for.inc183
                                        #   in Loop: Header=BB56_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB56_12
.LBB56_46:                              # %for.end185
                                        #   in Loop: Header=BB56_10 Depth=1
	jmp	.LBB56_47
.LBB56_47:                              # %for.inc186
                                        #   in Loop: Header=BB56_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_10
.LBB56_48:                              # %for.end188
	cmpl	$1339975362, -64(%rbp)  # imm = 0x4FDE66C2
	jne	.LBB56_50
.LBB56_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_49
.Lfunc_end56:
	.size	PartitionMotionSearch.31, .Lfunc_end56-PartitionMotionSearch.31
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.32 # -- Begin function ClearFastFullIntegerSearch.32
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.32,@function
ClearFastFullIntegerSearch.32:          # @ClearFastFullIntegerSearch.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$977662506, -20(%rbp)   # imm = 0x3A45F22A
	movl	$0, -4(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
                                        #       Child Loop BB57_5 Depth 3
                                        #         Child Loop BB57_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB57_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -8(%rbp)
.LBB57_3:                               # %for.cond1
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_5 Depth 3
                                        #         Child Loop BB57_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB57_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	$1, -12(%rbp)
.LBB57_5:                               # %for.cond4
                                        #   Parent Loop BB57_1 Depth=1
                                        #     Parent Loop BB57_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB57_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB57_5 Depth=3
	movl	$0, -16(%rbp)
.LBB57_7:                               # %for.cond7
                                        #   Parent Loop BB57_1 Depth=1
                                        #     Parent Loop BB57_3 Depth=2
                                        #       Parent Loop BB57_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB57_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB57_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB57_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_7
.LBB57_10:                              # %for.end
                                        #   in Loop: Header=BB57_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB57_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_5
.LBB57_12:                              # %for.end24
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_3
.LBB57_14:                              # %for.end31
                                        #   in Loop: Header=BB57_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_1
.LBB57_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB57_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB57_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB57_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB57_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_17
.LBB57_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$977662506, -20(%rbp)   # imm = 0x3A45F22A
	jne	.LBB57_22
.LBB57_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_21
.Lfunc_end57:
	.size	ClearFastFullIntegerSearch.32, .Lfunc_end57-ClearFastFullIntegerSearch.32
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.33 # -- Begin function SetupFastFullPelSearch.33
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.33,@function
SetupFastFullPelSearch.33:              # @SetupFastFullPelSearch.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$59208406, -152(%rbp)   # imm = 0x38772D6
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB58_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB58_4
.LBB58_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_4
.LBB58_4:                               # %cond.end
	movl	%ecx, -132(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB58_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB58_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB58_10
.LBB58_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB58_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB58_9:                               # %land.end
.LBB58_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movl	-8(%rbp), %eax
	addl	-132(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB58_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB58_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB58_14
.LBB58_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB58_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB58_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB58_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB58_18
.LBB58_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB58_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB58_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB58_24
.LBB58_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB58_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB58_23
.LBB58_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB58_23:                              # %cond.end82
.LBB58_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB58_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB58_27
.LBB58_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB58_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB58_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB58_33
.LBB58_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB58_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB58_32
.LBB58_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB58_32:                              # %cond.end122
.LBB58_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB58_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB58_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_37 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB58_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -76(%rbp)
.LBB58_37:                              # %for.cond155
                                        #   Parent Loop BB58_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB58_37 Depth=2
	movq	imgY_org, %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB58_37 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB58_37
.LBB58_40:                              # %for.end
                                        #   in Loop: Header=BB58_35 Depth=1
	jmp	.LBB58_41
.LBB58_41:                              # %for.inc165
                                        #   in Loop: Header=BB58_35 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB58_35
.LBB58_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB58_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB58_47
# %bb.44:                               # %land.lhs.true174
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB58_47
# %bb.45:                               # %land.lhs.true177
	movl	-68(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB58_47
# %bb.46:                               # %if.then181
	movl	$0, -108(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB58_48
.LBB58_47:                              # %if.else182
	movl	$1, -108(%rbp)
.LBB58_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB58_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB58_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB58_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB58_50 Depth=1
	movl	-148(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB58_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB58_50 Depth=1
	movl	-144(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB58_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB58_57
.LBB58_54:                              # %if.end209
                                        #   in Loop: Header=BB58_50 Depth=1
	jmp	.LBB58_55
.LBB58_55:                              # %for.inc210
                                        #   in Loop: Header=BB58_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_50
.LBB58_56:                              # %for.end212.loopexit
	jmp	.LBB58_57
.LBB58_57:                              # %for.end212
	jmp	.LBB58_58
.LBB58_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB58_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_69 Depth 2
                                        #       Child Loop BB58_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB58_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB58_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB58_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB58_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB58_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB58_59 Depth=1
	cmpl	$0, -84(%rbp)
	jl	.LBB58_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-84(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB58_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB58_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB58_67
.LBB58_66:                              # %if.else238
                                        #   in Loop: Header=BB58_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB58_67:                              # %if.end239
                                        #   in Loop: Header=BB58_59 Depth=1
	jmp	.LBB58_68
.LBB58_68:                              # %if.end240
                                        #   in Loop: Header=BB58_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
.LBB58_69:                              # %for.cond242
                                        #   Parent Loop BB58_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB58_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB58_69 Depth=2
	movl	$0, -52(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -64(%rbp)
.LBB58_71:                              # %for.cond246
                                        #   Parent Loop BB58_59 Depth=1
                                        #     Parent Loop BB58_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -64(%rbp)
	jge	.LBB58_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB58_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-84(%rbp), %edx
	movl	-140(%rbp), %ecx
	movl	-136(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB58_71 Depth=3
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB58_71
.LBB58_74:                              # %for.end381
                                        #   in Loop: Header=BB58_69 Depth=2
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB58_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB58_69
.LBB58_76:                              # %for.end404
                                        #   in Loop: Header=BB58_59 Depth=1
	jmp	.LBB58_77
.LBB58_77:                              # %for.inc405
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_59
.LBB58_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-88(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$59208406, -152(%rbp)   # imm = 0x38772D6
	jne	.LBB58_80
.LBB58_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_79
.Lfunc_end58:
	.size	SetupFastFullPelSearch.33, .Lfunc_end58-SetupFastFullPelSearch.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.34
.LCPI59_0:
	.quad	4611686018427387904     # double 2
.LCPI59_1:
	.quad	4607182418800017408     # double 1
.LCPI59_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI59_4:
	.quad	4620693217682128896     # double 8
.LCPI59_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI59_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.34
	.p2align	4, 0x90
	.type	BlockMotionSearch.34,@function
BlockMotionSearch.34:                   # @BlockMotionSearch.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$858664938, -212(%rbp)  # imm = 0x332E2FEA
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -196(%rbp)
	movl	%ecx, -192(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-196(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-192(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-196(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-192(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-256(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB59_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB59_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB59_4
.LBB59_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB59_4
.LBB59_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB59_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB59_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB59_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB59_6 Depth=1
	movl	$0, -64(%rbp)
.LBB59_8:                               # %for.cond24
                                        #   Parent Loop BB59_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB59_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB59_8 Depth=2
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB59_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB59_8
.LBB59_11:                              # %for.end
                                        #   in Loop: Header=BB59_6 Depth=1
	jmp	.LBB59_12
.LBB59_12:                              # %for.inc37
                                        #   in Loop: Header=BB59_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB59_6
.LBB59_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB59_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB59_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_18
.LBB59_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB59_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB59_37
.LBB59_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB59_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_23
.LBB59_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB59_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB59_36
.LBB59_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB59_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_28
.LBB59_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB59_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB59_35
.LBB59_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB59_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_33
.LBB59_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB59_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB59_34:                              # %if.end276
	jmp	.LBB59_35
.LBB59_35:                              # %if.end277
	jmp	.LBB59_36
.LBB59_36:                              # %if.end278
	jmp	.LBB59_37
.LBB59_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB59_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB59_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_43
.LBB59_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB59_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB59_62
.LBB59_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB59_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_48
.LBB59_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB59_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB59_61
.LBB59_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB59_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_53
.LBB59_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB59_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB59_60
.LBB59_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB59_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB59_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB59_58
.LBB59_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB59_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB59_59:                              # %if.end524
	jmp	.LBB59_60
.LBB59_60:                              # %if.end525
	jmp	.LBB59_61
.LBB59_61:                              # %if.end526
	jmp	.LBB59_62
.LBB59_62:                              # %if.end527
	jmp	.LBB59_63
.LBB59_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB59_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB59_66
.LBB59_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB59_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB59_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB59_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB59_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB59_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB59_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB59_73
.LBB59_72:                              # %cond.false626
	vmovsd	.LCPI59_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI59_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB59_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB59_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB59_76
.LBB59_75:                              # %cond.false655
	vmovsd	.LCPI59_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI59_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB59_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB59_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB59_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB59_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB59_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB59_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB59_83
.LBB59_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB59_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB59_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB59_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB59_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB59_92
.LBB59_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB59_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB59_91
.LBB59_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB59_91:                              # %cond.end787
	vmovss	.LCPI59_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB59_92:                              # %if.end835
	jmp	.LBB59_106
.LBB59_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB59_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB59_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB59_97
.LBB59_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB59_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB59_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB59_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB59_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB59_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB59_104
.LBB59_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB59_104:                             # %cond.end940
	vmovss	.LCPI59_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB59_105:                             # %if.end988
	jmp	.LBB59_106
.LBB59_106:                             # %if.end989
	jmp	.LBB59_107
.LBB59_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB59_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB59_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	-136(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB59_142
# %bb.110:                              # %if.then1000
	movswl	-96(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-94(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB59_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB59_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB59_114
.LBB59_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB59_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB59_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB59_120
.LBB59_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB59_119
.LBB59_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB59_119:                             # %cond.end1029
.LBB59_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB59_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB59_123
.LBB59_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB59_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB59_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB59_129
.LBB59_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB59_128
.LBB59_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB59_128:                             # %cond.end1054
.LBB59_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB59_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB59_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB59_131 Depth=1
	movl	$0, -72(%rbp)
.LBB59_133:                             # %for.cond1066
                                        #   Parent Loop BB59_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB59_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB59_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB59_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB59_137
.LBB59_136:                             # %if.else1091
                                        #   in Loop: Header=BB59_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB59_137:                             # %if.end1109
                                        #   in Loop: Header=BB59_133 Depth=2
	jmp	.LBB59_138
.LBB59_138:                             # %for.inc1110
                                        #   in Loop: Header=BB59_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB59_133
.LBB59_139:                             # %for.end1112
                                        #   in Loop: Header=BB59_131 Depth=1
	jmp	.LBB59_140
.LBB59_140:                             # %for.inc1113
                                        #   in Loop: Header=BB59_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB59_131
.LBB59_141:                             # %for.end1115
	jmp	.LBB59_143
.LBB59_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB59_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB59_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB59_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB59_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB59_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB59_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB59_150
.LBB59_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB59_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB59_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB59_151 Depth=1
	movl	$0, -72(%rbp)
.LBB59_153:                             # %for.cond1139
                                        #   Parent Loop BB59_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB59_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB59_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB59_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB59_157
.LBB59_156:                             # %if.else1183
                                        #   in Loop: Header=BB59_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB59_157:                             # %if.end1220
                                        #   in Loop: Header=BB59_153 Depth=2
	jmp	.LBB59_158
.LBB59_158:                             # %for.inc1221
                                        #   in Loop: Header=BB59_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB59_153
.LBB59_159:                             # %for.end1223
                                        #   in Loop: Header=BB59_151 Depth=1
	jmp	.LBB59_160
.LBB59_160:                             # %for.inc1224
                                        #   in Loop: Header=BB59_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB59_151
.LBB59_161:                             # %for.end1226
	jmp	.LBB59_166
.LBB59_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB59_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB59_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB59_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %bx
	movw	-94(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB59_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB59_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB59_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB59_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB59_173
.LBB59_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI59_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI59_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB59_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB59_172:                             # %if.end1273
	jmp	.LBB59_173
.LBB59_173:                             # %if.end1274
	jmp	.LBB59_174
.LBB59_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB59_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -184(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -64(%rbp)
.LBB59_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB59_176 Depth=1
	movl	$0, -72(%rbp)
.LBB59_178:                             # %for.cond1290
                                        #   Parent Loop BB59_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB59_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-184(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-188(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB59_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB59_178
.LBB59_181:                             # %for.end1337
                                        #   in Loop: Header=BB59_176 Depth=1
	jmp	.LBB59_182
.LBB59_182:                             # %for.inc1338
                                        #   in Loop: Header=BB59_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB59_176
.LBB59_183:                             # %for.end1340
	jmp	.LBB59_193
.LBB59_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB59_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB59_185 Depth=1
	movl	$0, -72(%rbp)
.LBB59_187:                             # %for.cond1347
                                        #   Parent Loop BB59_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB59_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB59_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB59_187
.LBB59_190:                             # %for.end1380
                                        #   in Loop: Header=BB59_185 Depth=1
	jmp	.LBB59_191
.LBB59_191:                             # %for.inc1381
                                        #   in Loop: Header=BB59_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB59_185
.LBB59_192:                             # %for.end1383
	jmp	.LBB59_193
.LBB59_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB59_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB59_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB59_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB59_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB59_200
.LBB59_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB59_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
	movw	$0, -108(%rbp)
	movw	$0, -106(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-140(%rbp), %ebx
	movl	-136(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB59_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB59_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB59_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB59_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB59_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -108(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -106(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB59_208
.LBB59_204:                             # %if.else1433
                                        #   in Loop: Header=BB59_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -108(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -106(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB59_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB59_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB59_207
.LBB59_206:                             # %if.else1441
                                        #   in Loop: Header=BB59_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB59_207:                             # %if.end1450
                                        #   in Loop: Header=BB59_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB59_208:                             # %if.end1452
                                        #   in Loop: Header=BB59_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %eax
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-108(%rbp), %r15w
	movw	-106(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-132(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -132(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB59_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB59_201
.LBB59_210:                             # %for.end1458
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB59_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB59_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB59_213:                             # %if.end1469
	vmovsd	.LCPI59_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-108(%rbp), %ax
	movw	-106(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB59_215
.LBB59_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB59_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB59_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB59_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB59_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI59_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-96(%rbp), %ax
	movw	-94(%rbp), %bx
	movl	-132(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -132(%rbp)
	jmp	.LBB59_220
.LBB59_219:                             # %if.else1495
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB59_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB59_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB59_221 Depth=1
	movl	$0, -72(%rbp)
.LBB59_223:                             # %for.cond1502
                                        #   Parent Loop BB59_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-136(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB59_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB59_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB59_223
.LBB59_226:                             # %for.end1565
                                        #   in Loop: Header=BB59_221 Depth=1
	jmp	.LBB59_227
.LBB59_227:                             # %for.inc1566
                                        #   in Loop: Header=BB59_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB59_221
.LBB59_228:                             # %for.end1568
	jmp	.LBB59_229
.LBB59_229:                             # %if.end1569
	leaq	-240(%rbp), %rdi
	callq	ftime
	imulq	$1000, -240(%rbp), %rax # imm = 0x3E8
	movzwl	-232(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -256(%rbp), %rcx # imm = 0x3E8
	movzwl	-248(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -180(%rbp)
	movl	-180(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-180(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$858664938, -212(%rbp)  # imm = 0x332E2FEA
	jne	.LBB59_231
.LBB59_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_230
.Lfunc_end59:
	.size	BlockMotionSearch.34, .Lfunc_end59-BlockMotionSearch.34
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.35        # -- Begin function GetSkipCostMB.35
	.p2align	4, 0x90
	.type	GetSkipCostMB.35,@function
GetSkipCostMB.35:                       # @GetSkipCostMB.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1568325517, -48(%rbp)  # imm = 0x5D7ABF8D
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
                                        #       Child Loop BB60_5 Depth 3
                                        #         Child Loop BB60_7 Depth 4
                                        #           Child Loop BB60_9 Depth 5
                                        #     Child Loop BB60_24 Depth 2
                                        #       Child Loop BB60_26 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB60_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_5 Depth 3
                                        #         Child Loop BB60_7 Depth 4
                                        #           Child Loop BB60_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB60_5:                               # %for.cond6
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_7 Depth 4
                                        #           Child Loop BB60_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB60_7:                               # %for.cond11
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        #       Parent Loop BB60_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB60_9 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB60_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB60_7 Depth=4
	movl	$0, -16(%rbp)
.LBB60_9:                               # %for.cond14
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        #       Parent Loop BB60_5 Depth=3
                                        #         Parent Loop BB60_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB60_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB60_9 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB60_9 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_9
.LBB60_12:                              # %for.end
                                        #   in Loop: Header=BB60_7 Depth=4
	jmp	.LBB60_13
.LBB60_13:                              # %for.inc39
                                        #   in Loop: Header=BB60_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_7
.LBB60_14:                              # %for.end41
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB60_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB60_17
.LBB60_16:                              # %if.then
                                        #   in Loop: Header=BB60_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB60_17:                              # %if.end
                                        #   in Loop: Header=BB60_5 Depth=3
	jmp	.LBB60_18
.LBB60_18:                              # %for.inc45
                                        #   in Loop: Header=BB60_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB60_5
.LBB60_19:                              # %for.end47
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_20
.LBB60_20:                              # %for.inc48
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_3
.LBB60_21:                              # %for.end50
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB60_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB60_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB60_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB60_24:                              # %for.cond58
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_26 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB60_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB60_24 Depth=2
	movl	$0, -16(%rbp)
.LBB60_26:                              # %for.cond62
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -16(%rbp)
	jge	.LBB60_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB60_26 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB60_26 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_26
.LBB60_29:                              # %for.end75
                                        #   in Loop: Header=BB60_24 Depth=2
	jmp	.LBB60_30
.LBB60_30:                              # %for.inc76
                                        #   in Loop: Header=BB60_24 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_24
.LBB60_31:                              # %for.end78
                                        #   in Loop: Header=BB60_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB60_32:                              # %if.end83
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_33
.LBB60_33:                              # %for.inc84
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB60_1
.LBB60_34:                              # %for.end86
	movl	-36(%rbp), %ebx
	cmpl	$1568325517, -48(%rbp)  # imm = 0x5D7ABF8D
	jne	.LBB60_36
.LBB60_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_35
.Lfunc_end60:
	.size	GetSkipCostMB.35, .Lfunc_end60-GetSkipCostMB.35
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.36              # -- Begin function SATD8X8.36
	.p2align	4, 0x90
	.type	SATD8X8.36,@function
SATD8X8.36:                             # @SATD8X8.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1129785082, -32(%rbp)  # imm = 0x435726FA
	movq	%rdi, -24(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB61_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB61_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB61_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB61_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB61_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_2
.LBB61_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB61_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB61_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB61_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB61_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_6
.LBB61_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB61_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB61_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB61_10 Depth=1
	movl	$0, -12(%rbp)
.LBB61_12:                              # %for.cond499
                                        #   Parent Loop BB61_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB61_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB61_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB61_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB61_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB61_16
.LBB61_15:                              # %cond.false
                                        #   in Loop: Header=BB61_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB61_16:                              # %cond.end
                                        #   in Loop: Header=BB61_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB61_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_12
.LBB61_18:                              # %for.end519
                                        #   in Loop: Header=BB61_10 Depth=1
	jmp	.LBB61_19
.LBB61_19:                              # %for.inc520
                                        #   in Loop: Header=BB61_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_10
.LBB61_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_26
.LBB61_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB61_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB61_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB61_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB61_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_22
.LBB61_25:                              # %for.end534
	jmp	.LBB61_26
.LBB61_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1129785082, -32(%rbp)  # imm = 0x435726FA
	jne	.LBB61_28
.LBB61_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_27
.Lfunc_end61:
	.size	SATD8X8.36, .Lfunc_end61-SATD8X8.36
	.cfi_endproc
                                        # -- End function
	.globl	sign.37                 # -- Begin function sign.37
	.p2align	4, 0x90
	.type	sign.37,@function
sign.37:                                # @sign.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2100443942, -28(%rbp)  # imm = 0x7D323B26
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB62_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB62_3
.LBB62_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB62_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB62_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB62_6
.LBB62_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB62_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$2100443942, -28(%rbp)  # imm = 0x7D323B26
	jne	.LBB62_8
.LBB62_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_7
.Lfunc_end62:
	.size	sign.37, .Lfunc_end62-sign.37
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.38        # -- Begin function GetSkipCostMB.38
	.p2align	4, 0x90
	.type	GetSkipCostMB.38,@function
GetSkipCostMB.38:                       # @GetSkipCostMB.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$2110731002, -52(%rbp)  # imm = 0x7DCF32FA
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
                                        #       Child Loop BB63_5 Depth 3
                                        #         Child Loop BB63_7 Depth 4
                                        #           Child Loop BB63_9 Depth 5
                                        #     Child Loop BB63_24 Depth 2
                                        #       Child Loop BB63_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB63_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB63_3:                               # %for.cond2
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_5 Depth 3
                                        #         Child Loop BB63_7 Depth 4
                                        #           Child Loop BB63_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB63_5:                               # %for.cond6
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_7 Depth 4
                                        #           Child Loop BB63_9 Depth 5
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB63_7:                               # %for.cond11
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        #       Parent Loop BB63_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB63_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB63_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB63_7 Depth=4
	movl	$0, -12(%rbp)
.LBB63_9:                               # %for.cond14
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        #       Parent Loop BB63_5 Depth=3
                                        #         Parent Loop BB63_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB63_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB63_9 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-384(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-24(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB63_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_9
.LBB63_12:                              # %for.end
                                        #   in Loop: Header=BB63_7 Depth=4
	jmp	.LBB63_13
.LBB63_13:                              # %for.inc39
                                        #   in Loop: Header=BB63_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_7
.LBB63_14:                              # %for.end41
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB63_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB63_17
.LBB63_16:                              # %if.then
                                        #   in Loop: Header=BB63_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB63_17:                              # %if.end
                                        #   in Loop: Header=BB63_5 Depth=3
	jmp	.LBB63_18
.LBB63_18:                              # %for.inc45
                                        #   in Loop: Header=BB63_5 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_5
.LBB63_19:                              # %for.end47
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_20
.LBB63_20:                              # %for.inc48
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_3
.LBB63_21:                              # %for.end50
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB63_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB63_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB63_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB63_24:                              # %for.cond58
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB63_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB63_24 Depth=2
	movl	$0, -12(%rbp)
.LBB63_26:                              # %for.cond62
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB63_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB63_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-384(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-24(%rbp), %rcx
	movl	%eax, -640(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB63_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_26
.LBB63_29:                              # %for.end75
                                        #   in Loop: Header=BB63_24 Depth=2
	jmp	.LBB63_30
.LBB63_30:                              # %for.inc76
                                        #   in Loop: Header=BB63_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_24
.LBB63_31:                              # %for.end78
                                        #   in Loop: Header=BB63_1 Depth=1
	leaq	-640(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB63_32:                              # %if.end83
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_33
.LBB63_33:                              # %for.inc84
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB63_1
.LBB63_34:                              # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$2110731002, -52(%rbp)  # imm = 0x7DCF32FA
	jne	.LBB63_36
.LBB63_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_35
.Lfunc_end63:
	.size	GetSkipCostMB.38, .Lfunc_end63-GetSkipCostMB.38
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.39    # -- Begin function SetupLargerBlocks.39
	.p2align	4, 0x90
	.type	SetupLargerBlocks.39,@function
SetupLargerBlocks.39:                   # @SetupLargerBlocks.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2039057438, -76(%rbp)  # imm = 0x79898C1E
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_5
.LBB64_8:                               # %for.end30
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB64_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB64_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_9
.LBB64_12:                              # %for.end46
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB64_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB64_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_13
.LBB64_16:                              # %for.end62
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB64_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB64_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_17
.LBB64_20:                              # %for.end78
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB64_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB64_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_21
.LBB64_24:                              # %for.end94
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB64_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB64_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_25
.LBB64_28:                              # %for.end110
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB64_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB64_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_29
.LBB64_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB64_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB64_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_33
.LBB64_36:                              # %for.end150
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB64_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB64_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_37
.LBB64_40:                              # %for.end166
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB64_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB64_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_41
.LBB64_44:                              # %for.end182
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB64_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB64_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_45
.LBB64_48:                              # %for.end198
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB64_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB64_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_49
.LBB64_52:                              # %for.end214
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB64_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB64_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_53
.LBB64_56:                              # %for.end230
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB64_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB64_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_57
.LBB64_60:                              # %for.end246
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB64_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB64_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_61
.LBB64_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB64_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB64_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_65
.LBB64_68:                              # %for.end286
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB64_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB64_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_69
.LBB64_72:                              # %for.end302
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB64_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB64_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_73
.LBB64_76:                              # %for.end318
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB64_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB64_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_77
.LBB64_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB64_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB64_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_81
.LBB64_84:                              # %for.end358
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB64_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB64_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_85
.LBB64_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB64_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB64_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_89
.LBB64_92:                              # %for.end398
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB64_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB64_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_93
.LBB64_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -4(%rbp)
.LBB64_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB64_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB64_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB64_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_97
.LBB64_100:                             # %for.end438
	cmpl	$2039057438, -76(%rbp)  # imm = 0x79898C1E
	jne	.LBB64_102
.LBB64_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_101
.Lfunc_end64:
	.size	SetupLargerBlocks.39, .Lfunc_end64-SetupLargerBlocks.39
	.cfi_endproc
                                        # -- End function
	.globl	GetSkipCostMB.40        # -- Begin function GetSkipCostMB.40
	.p2align	4, 0x90
	.type	GetSkipCostMB.40,@function
GetSkipCostMB.40:                       # @GetSkipCostMB.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$648, %rsp              # imm = 0x288
	.cfi_offset %rbx, -24
	movl	$1929042818, -52(%rbp)  # imm = 0x72FADB82
	vmovsd	%xmm0, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
                                        #       Child Loop BB65_5 Depth 3
                                        #         Child Loop BB65_7 Depth 4
                                        #           Child Loop BB65_9 Depth 5
                                        #     Child Loop BB65_24 Depth 2
                                        #       Child Loop BB65_26 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB65_34
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_5 Depth 3
                                        #         Child Loop BB65_7 Depth 4
                                        #           Child Loop BB65_9 Depth 5
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_21
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB65_5:                               # %for.cond6
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_7 Depth 4
                                        #           Child Loop BB65_9 Depth 5
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_19
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r8d, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB65_7:                               # %for.cond11
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        #       Parent Loop BB65_5 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB65_9 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB65_14
# %bb.8:                                # %for.body13
                                        #   in Loop: Header=BB65_7 Depth=4
	movl	$0, -12(%rbp)
.LBB65_9:                               # %for.cond14
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        #       Parent Loop BB65_5 Depth=3
                                        #         Parent Loop BB65_7 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB65_12
# %bb.10:                               # %for.body16
                                        #   in Loop: Header=BB65_9 Depth=5
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-640(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB65_9 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_9
.LBB65_12:                              # %for.end
                                        #   in Loop: Header=BB65_7 Depth=4
	jmp	.LBB65_13
.LBB65_13:                              # %for.inc39
                                        #   in Loop: Header=BB65_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_7
.LBB65_14:                              # %for.end41
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB65_16
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB65_17
.LBB65_16:                              # %if.then
                                        #   in Loop: Header=BB65_5 Depth=3
	leaq	-128(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB65_17:                              # %if.end
                                        #   in Loop: Header=BB65_5 Depth=3
	jmp	.LBB65_18
.LBB65_18:                              # %for.inc45
                                        #   in Loop: Header=BB65_5 Depth=3
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB65_5
.LBB65_19:                              # %for.end47
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_20
.LBB65_20:                              # %for.inc48
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_3
.LBB65_21:                              # %for.end50
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB65_32
# %bb.22:                               # %land.lhs.true54
                                        #   in Loop: Header=BB65_1 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB65_32
# %bb.23:                               # %if.then57
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
.LBB65_24:                              # %for.cond58
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_26 Depth 3
	cmpl	$8, -16(%rbp)
	jge	.LBB65_31
# %bb.25:                               # %for.body61
                                        #   in Loop: Header=BB65_24 Depth=2
	movl	$0, -12(%rbp)
.LBB65_26:                              # %for.cond62
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_24 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB65_29
# %bb.27:                               # %for.body65
                                        #   in Loop: Header=BB65_26 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-640(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.28:                               # %for.inc72
                                        #   in Loop: Header=BB65_26 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_26
.LBB65_29:                              # %for.end75
                                        #   in Loop: Header=BB65_24 Depth=2
	jmp	.LBB65_30
.LBB65_30:                              # %for.inc76
                                        #   in Loop: Header=BB65_24 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_24
.LBB65_31:                              # %for.end78
                                        #   in Loop: Header=BB65_1 Depth=1
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB65_32:                              # %if.end83
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_33
.LBB65_33:                              # %for.inc84
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB65_1
.LBB65_34:                              # %for.end86
	movl	-32(%rbp), %ebx
	cmpl	$1929042818, -52(%rbp)  # imm = 0x72FADB82
	jne	.LBB65_36
.LBB65_35:
	movl	%ebx, %eax
	addq	$648, %rsp              # imm = 0x288
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_35
.Lfunc_end65:
	.size	GetSkipCostMB.40, .Lfunc_end65-GetSkipCostMB.40
	.cfi_endproc
                                        # -- End function
	.globl	BIDPartitionCost.41     # -- Begin function BIDPartitionCost.41
	.p2align	4, 0x90
	.type	BIDPartitionCost.41,@function
BIDPartitionCost.41:                    # @BIDPartitionCost.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1412712471, -112(%rbp) # imm = 0x54344817
	movl	%edi, -12(%rbp)
	movl	%esi, -48(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB66_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB66_3
.LBB66_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB66_3
.LBB66_3:                               # %cond.end
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB66_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB66_6
.LBB66_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB66_6
.LBB66_6:                               # %cond.end17
	movl	%eax, -100(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB66_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB66_9
.LBB66_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB66_9
.LBB66_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -120(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB66_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_12 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_17
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB66_10 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB66_12:                              # %for.cond53
                                        #   Parent Loop BB66_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_15
# %bb.13:                               # %for.body60
                                        #   in Loop: Header=BB66_12 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB66_12 Depth=2
	movl	-120(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_12
.LBB66_15:                              # %for.end
                                        #   in Loop: Header=BB66_10 Depth=1
	jmp	.LBB66_16
.LBB66_16:                              # %for.inc164
                                        #   in Loop: Header=BB66_10 Depth=1
	movl	-124(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_10
.LBB66_17:                              # %for.end166
	movl	-116(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB66_18:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_20 Depth 2
                                        #       Child Loop BB66_22 Depth 3
                                        #         Child Loop BB66_24 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_36
# %bb.19:                               # %for.body179
                                        #   in Loop: Header=BB66_18 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -72(%rbp)
	addl	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BIDPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-48(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB66_20:                              # %for.cond185
                                        #   Parent Loop BB66_18 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_22 Depth 3
                                        #         Child Loop BB66_24 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BIDPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-48(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_34
# %bb.21:                               # %for.body193
                                        #   in Loop: Header=BB66_20 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-64(%rbp), %edi
	movl	-72(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	-34(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB66_22:                              # %for.cond196
                                        #   Parent Loop BB66_18 Depth=1
                                        #     Parent Loop BB66_20 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_24 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB66_29
# %bb.23:                               # %for.body199
                                        #   in Loop: Header=BB66_22 Depth=3
	movl	$0, -32(%rbp)
.LBB66_24:                              # %for.cond200
                                        #   Parent Loop BB66_18 Depth=1
                                        #     Parent Loop BB66_20 Depth=2
                                        #       Parent Loop BB66_22 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB66_27
# %bb.25:                               # %for.body203
                                        #   in Loop: Header=BB66_24 Depth=4
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-108(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.26:                               # %for.inc227
                                        #   in Loop: Header=BB66_24 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB66_24
.LBB66_27:                              # %for.end229
                                        #   in Loop: Header=BB66_22 Depth=3
	jmp	.LBB66_28
.LBB66_28:                              # %for.inc230
                                        #   in Loop: Header=BB66_22 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_22
.LBB66_29:                              # %for.end232
                                        #   in Loop: Header=BB66_20 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB66_31
# %bb.30:                               # %lor.lhs.false
                                        #   in Loop: Header=BB66_20 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB66_32
.LBB66_31:                              # %if.then
                                        #   in Loop: Header=BB66_20 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_32:                              # %if.end
                                        #   in Loop: Header=BB66_20 Depth=2
	jmp	.LBB66_33
.LBB66_33:                              # %for.inc236
                                        #   in Loop: Header=BB66_20 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_20
.LBB66_34:                              # %for.end239
                                        #   in Loop: Header=BB66_18 Depth=1
	jmp	.LBB66_35
.LBB66_35:                              # %for.inc240
                                        #   in Loop: Header=BB66_18 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_18
.LBB66_36:                              # %for.end243
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB66_55
# %bb.37:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB66_55
# %bb.38:                               # %if.then248
	movl	$0, -52(%rbp)
.LBB66_39:                              # %for.cond249
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_41 Depth 2
                                        #       Child Loop BB66_43 Depth 3
                                        #         Child Loop BB66_45 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB66_54
# %bb.40:                               # %for.body256
                                        #   in Loop: Header=BB66_39 Depth=1
	movl	$0, -44(%rbp)
.LBB66_41:                              # %for.cond257
                                        #   Parent Loop BB66_39 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_43 Depth 3
                                        #         Child Loop BB66_45 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB66_52
# %bb.42:                               # %for.body264
                                        #   in Loop: Header=BB66_41 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB66_43:                              # %for.cond265
                                        #   Parent Loop BB66_39 Depth=1
                                        #     Parent Loop BB66_41 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_45 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB66_50
# %bb.44:                               # %for.body268
                                        #   in Loop: Header=BB66_43 Depth=3
	movl	$0, -28(%rbp)
.LBB66_45:                              # %for.cond269
                                        #   Parent Loop BB66_39 Depth=1
                                        #     Parent Loop BB66_41 Depth=2
                                        #       Parent Loop BB66_43 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB66_48
# %bb.46:                               # %for.body272
                                        #   in Loop: Header=BB66_45 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.47:                               # %for.inc282
                                        #   in Loop: Header=BB66_45 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB66_45
.LBB66_48:                              # %for.end284
                                        #   in Loop: Header=BB66_43 Depth=3
	jmp	.LBB66_49
.LBB66_49:                              # %for.inc285
                                        #   in Loop: Header=BB66_43 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB66_43
.LBB66_50:                              # %for.end287
                                        #   in Loop: Header=BB66_41 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.51:                               # %for.inc292
                                        #   in Loop: Header=BB66_41 Depth=2
	movl	-104(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB66_41
.LBB66_52:                              # %for.end294
                                        #   in Loop: Header=BB66_39 Depth=1
	jmp	.LBB66_53
.LBB66_53:                              # %for.inc295
                                        #   in Loop: Header=BB66_39 Depth=1
	movl	-100(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB66_39
.LBB66_54:                              # %for.end297
	jmp	.LBB66_55
.LBB66_55:                              # %if.end298
	movl	-60(%rbp), %ebx
	cmpl	$1412712471, -112(%rbp) # imm = 0x54344817
	jne	.LBB66_57
.LBB66_56:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_56
.Lfunc_end66:
	.size	BIDPartitionCost.41, .Lfunc_end66-BIDPartitionCost.41
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.42   # -- Begin function BPredPartitionCost.42
	.p2align	4, 0x90
	.type	BPredPartitionCost.42,@function
BPredPartitionCost.42:                  # @BPredPartitionCost.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$1844218170, -128(%rbp) # imm = 0x6DEC893A
	movl	%edi, -12(%rbp)
	movl	%esi, -44(%rbp)
	movw	%dx, -36(%rbp)
	movw	%cx, -34(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB67_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB67_3
.LBB67_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB67_3
.LBB67_3:                               # %cond.end
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB67_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB67_6
.LBB67_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB67_6
.LBB67_6:                               # %cond.end17
	movl	%eax, -120(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB67_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB67_9
.LBB67_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB67_9
.LBB67_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB67_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB67_12
.LBB67_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB67_12:                              # %cond.end41
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -96(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB67_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_15 Depth 2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB67_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB67_15:                              # %for.cond56
                                        #   Parent Loop BB67_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB67_15 Depth=2
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-88(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-96(%rbp), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB67_15 Depth=2
	movl	-108(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_15
.LBB67_18:                              # %for.end
                                        #   in Loop: Header=BB67_13 Depth=1
	jmp	.LBB67_19
.LBB67_19:                              # %for.inc167
                                        #   in Loop: Header=BB67_13 Depth=1
	movl	-116(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_13
.LBB67_20:                              # %for.end169
	movl	-100(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB67_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_23 Depth 2
                                        #       Child Loop BB67_25 Depth 3
                                        #         Child Loop BB67_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB67_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-44(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB67_23:                              # %for.cond188
                                        #   Parent Loop BB67_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_25 Depth 3
                                        #         Child Loop BB67_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-44(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB67_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -64(%rbp)
	addl	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	-64(%rbp), %edi
	movl	-80(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-36(%rbp), %ax
	movw	-34(%rbp), %bx
	movl	-68(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -28(%rbp)
	movl	$0, -56(%rbp)
.LBB67_25:                              # %for.cond199
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_27 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB67_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB67_25 Depth=3
	movl	$0, -32(%rbp)
.LBB67_27:                              # %for.cond203
                                        #   Parent Loop BB67_21 Depth=1
                                        #     Parent Loop BB67_23 Depth=2
                                        #       Parent Loop BB67_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -32(%rbp)
	jge	.LBB67_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB67_27 Depth=4
	movq	imgY_org, %rax
	movl	-112(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-32(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-52(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB67_27 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_27
.LBB67_30:                              # %for.end232
                                        #   in Loop: Header=BB67_25 Depth=3
	jmp	.LBB67_31
.LBB67_31:                              # %for.inc233
                                        #   in Loop: Header=BB67_25 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_25
.LBB67_32:                              # %for.end235
                                        #   in Loop: Header=BB67_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB67_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB67_35
.LBB67_34:                              # %if.then
                                        #   in Loop: Header=BB67_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB67_35:                              # %if.end
                                        #   in Loop: Header=BB67_23 Depth=2
	jmp	.LBB67_36
.LBB67_36:                              # %for.inc240
                                        #   in Loop: Header=BB67_23 Depth=2
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB67_23
.LBB67_37:                              # %for.end243
                                        #   in Loop: Header=BB67_21 Depth=1
	jmp	.LBB67_38
.LBB67_38:                              # %for.inc244
                                        #   in Loop: Header=BB67_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_21
.LBB67_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB67_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB67_58
# %bb.41:                               # %if.then252
	movl	$0, -52(%rbp)
.LBB67_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_44 Depth 2
                                        #       Child Loop BB67_46 Depth 3
                                        #         Child Loop BB67_48 Depth 4
	movl	-52(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB67_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB67_42 Depth=1
	movl	$0, -48(%rbp)
.LBB67_44:                              # %for.cond261
                                        #   Parent Loop BB67_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_46 Depth 3
                                        #         Child Loop BB67_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB67_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB67_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -32(%rbp)
.LBB67_46:                              # %for.cond269
                                        #   Parent Loop BB67_42 Depth=1
                                        #     Parent Loop BB67_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_48 Depth 4
	cmpl	$8, -32(%rbp)
	jge	.LBB67_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB67_46 Depth=3
	movl	$0, -28(%rbp)
.LBB67_48:                              # %for.cond273
                                        #   Parent Loop BB67_42 Depth=1
                                        #     Parent Loop BB67_44 Depth=2
                                        #       Parent Loop BB67_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -28(%rbp)
	jge	.LBB67_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB67_48 Depth=4
	movl	-32(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB67_48 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_48
.LBB67_51:                              # %for.end288
                                        #   in Loop: Header=BB67_46 Depth=3
	jmp	.LBB67_52
.LBB67_52:                              # %for.inc289
                                        #   in Loop: Header=BB67_46 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB67_46
.LBB67_53:                              # %for.end291
                                        #   in Loop: Header=BB67_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB67_44 Depth=2
	movl	-104(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB67_44
.LBB67_55:                              # %for.end298
                                        #   in Loop: Header=BB67_42 Depth=1
	jmp	.LBB67_56
.LBB67_56:                              # %for.inc299
                                        #   in Loop: Header=BB67_42 Depth=1
	movl	-120(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB67_42
.LBB67_57:                              # %for.end301
	jmp	.LBB67_58
.LBB67_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$1844218170, -128(%rbp) # imm = 0x6DEC893A
	jne	.LBB67_60
.LBB67_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_59
.Lfunc_end67:
	.size	BPredPartitionCost.42, .Lfunc_end67-BPredPartitionCost.42
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.43 # -- Begin function FindSkipModeMotionVector.43
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.43,@function
FindSkipModeMotionVector.43:            # @FindSkipModeMotionVector.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$181389712, -52(%rbp)   # imm = 0xACFC990
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB68_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_4
# %bb.3:                                # %if.then24
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB68_4:                               # %if.end
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_7
# %bb.6:                                # %if.then34
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB68_7:                               # %if.end36
	jmp	.LBB68_8
.LBB68_8:                               # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB68_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_12
# %bb.11:                               # %if.then69
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB68_12:                              # %if.end72
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB68_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_15
# %bb.14:                               # %if.then82
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB68_15:                              # %if.end85
	jmp	.LBB68_16
.LBB68_16:                              # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB68_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB68_22
.LBB68_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB68_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB68_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB68_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB68_22:                              # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB68_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB68_28
.LBB68_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB68_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB68_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB68_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB68_28:                              # %cond.end130
	movl	%ecx, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB68_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -56(%rbp)
	je	.LBB68_39
.LBB68_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB68_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB68_31 Depth=1
	movl	$0, -4(%rbp)
.LBB68_33:                              # %for.cond137
                                        #   Parent Loop BB68_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB68_33 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB68_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_33
.LBB68_36:                              # %for.end
                                        #   in Loop: Header=BB68_31 Depth=1
	jmp	.LBB68_37
.LBB68_37:                              # %for.inc157
                                        #   in Loop: Header=BB68_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_31
.LBB68_38:                              # %for.end159
	jmp	.LBB68_48
.LBB68_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB68_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB68_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB68_40 Depth=1
	movl	$0, -4(%rbp)
.LBB68_42:                              # %for.cond166
                                        #   Parent Loop BB68_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB68_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB68_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_42
.LBB68_45:                              # %for.end190
                                        #   in Loop: Header=BB68_40 Depth=1
	jmp	.LBB68_46
.LBB68_46:                              # %for.inc191
                                        #   in Loop: Header=BB68_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_40
.LBB68_47:                              # %for.end193
	jmp	.LBB68_48
.LBB68_48:                              # %if.end194
	cmpl	$181389712, -52(%rbp)   # imm = 0xACFC990
	jne	.LBB68_50
.LBB68_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_49
.Lfunc_end68:
	.size	FindSkipModeMotionVector.43, .Lfunc_end68-FindSkipModeMotionVector.43
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.44 # -- Begin function SetupFastFullPelSearch.44
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.44,@function
SetupFastFullPelSearch.44:              # @SetupFastFullPelSearch.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$301508828, -136(%rbp)  # imm = 0x11F8A8DC
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB69_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB69_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB69_4
.LBB69_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB69_4
.LBB69_4:                               # %cond.end
	movl	%ecx, -132(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB69_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB69_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB69_10
.LBB69_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB69_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB69_9:                               # %land.end
.LBB69_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	movl	-8(%rbp), %eax
	addl	-132(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB69_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB69_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB69_14
.LBB69_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB69_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -152(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB69_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB69_18
.LBB69_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB69_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB69_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB69_24
.LBB69_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB69_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB69_23
.LBB69_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB69_23:                              # %cond.end82
.LBB69_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB69_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB69_27
.LBB69_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB69_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB69_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB69_33
.LBB69_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB69_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB69_32
.LBB69_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB69_32:                              # %cond.end122
.LBB69_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB69_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -72(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB69_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB69_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -76(%rbp)
.LBB69_37:                              # %for.cond155
                                        #   Parent Loop BB69_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-76(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB69_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB69_37 Depth=2
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB69_37
.LBB69_40:                              # %for.end
                                        #   in Loop: Header=BB69_35 Depth=1
	jmp	.LBB69_41
.LBB69_41:                              # %for.inc165
                                        #   in Loop: Header=BB69_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB69_35
.LBB69_42:                              # %for.end167
	movl	-72(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB69_47
# %bb.43:                               # %land.lhs.true170
	movl	-72(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB69_47
# %bb.44:                               # %land.lhs.true174
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB69_47
# %bb.45:                               # %land.lhs.true177
	movl	-80(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB69_47
# %bb.46:                               # %if.then181
	movl	$0, -116(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB69_48
.LBB69_47:                              # %if.else182
	movl	$1, -116(%rbp)
.LBB69_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB69_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB69_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB69_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB69_50 Depth=1
	movl	-148(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB69_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB69_50 Depth=1
	movl	-144(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB69_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB69_57
.LBB69_54:                              # %if.end209
                                        #   in Loop: Header=BB69_50 Depth=1
	jmp	.LBB69_55
.LBB69_55:                              # %for.inc210
                                        #   in Loop: Header=BB69_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB69_50
.LBB69_56:                              # %for.end212.loopexit
	jmp	.LBB69_57
.LBB69_57:                              # %for.end212
	jmp	.LBB69_58
.LBB69_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB69_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_69 Depth 2
                                        #       Child Loop BB69_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB69_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	-80(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movl	-72(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB69_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB69_59 Depth=1
	cmpl	$0, -68(%rbp)
	jl	.LBB69_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	-68(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB69_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB69_59 Depth=1
	cmpl	$0, -92(%rbp)
	jl	.LBB69_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB69_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB69_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB69_67
.LBB69_66:                              # %if.else238
                                        #   in Loop: Header=BB69_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB69_67:                              # %if.end239
                                        #   in Loop: Header=BB69_59 Depth=1
	jmp	.LBB69_68
.LBB69_68:                              # %if.end240
                                        #   in Loop: Header=BB69_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -84(%rbp)
.LBB69_69:                              # %for.cond242
                                        #   Parent Loop BB69_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_71 Depth 3
	cmpl	$4, -84(%rbp)
	jge	.LBB69_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB69_69 Depth=2
	movl	$0, -52(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -60(%rbp)
.LBB69_71:                              # %for.cond246
                                        #   Parent Loop BB69_59 Depth=1
                                        #     Parent Loop BB69_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB69_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB69_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -68(%rbp)
	movl	-92(%rbp), %edx
	movl	-140(%rbp), %ecx
	movl	-152(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB69_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB69_71
.LBB69_74:                              # %for.end381
                                        #   in Loop: Header=BB69_69 Depth=2
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB69_69 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB69_69
.LBB69_76:                              # %for.end404
                                        #   in Loop: Header=BB69_59 Depth=1
	jmp	.LBB69_77
.LBB69_77:                              # %for.inc405
                                        #   in Loop: Header=BB69_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB69_59
.LBB69_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-88(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$301508828, -136(%rbp)  # imm = 0x11F8A8DC
	jne	.LBB69_80
.LBB69_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_79
.Lfunc_end69:
	.size	SetupFastFullPelSearch.44, .Lfunc_end69-SetupFastFullPelSearch.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.45
.LCPI70_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI70_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.45
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.45,@function
Init_Motion_Search_Module.45:           # @Init_Motion_Search_Module.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1184107730, -52(%rbp)  # imm = 0x46940CD2
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB70_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB70_3
.LBB70_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB70_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB70_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB70_6
.LBB70_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB70_6:                               # %cond.end19
	movl	%eax, -44(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB70_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB70_9
.LBB70_8:                               # %cond.false24
	movl	-48(%rbp), %eax
	addl	$1, %eax
.LBB70_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI70_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI70_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI70_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB70_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB70_11:                              # %if.end
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB70_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB70_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB70_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB70_15:                              # %if.end66
	movslq	-56(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB70_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB70_17:                              # %if.end72
	movslq	-32(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB70_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB70_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB70_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB70_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB70_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_22:                              # %for.cond90
                                        #   Parent Loop BB70_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB70_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB70_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB70_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_22
.LBB70_25:                              # %for.end
                                        #   in Loop: Header=BB70_20 Depth=1
	jmp	.LBB70_26
.LBB70_26:                              # %for.inc98
                                        #   in Loop: Header=BB70_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_20
.LBB70_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB70_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB70_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB70_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_30:                              # %for.cond111
                                        #   Parent Loop BB70_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB70_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB70_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB70_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_30
.LBB70_33:                              # %for.end119
                                        #   in Loop: Header=BB70_28 Depth=1
	jmp	.LBB70_34
.LBB70_34:                              # %for.inc120
                                        #   in Loop: Header=BB70_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_28
.LBB70_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB70_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB70_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB70_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB70_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_36
.LBB70_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB70_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_45 Depth 2
                                        #     Child Loop BB70_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB70_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB70_43
.LBB70_42:                              # %cond.false143
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB70_43:                              # %cond.end144
                                        #   in Loop: Header=BB70_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB70_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB70_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB70_45:                              # %for.cond151
                                        #   Parent Loop BB70_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB70_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB70_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB70_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_45
.LBB70_48:                              # %for.end168
                                        #   in Loop: Header=BB70_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_49:                              # %for.cond170
                                        #   Parent Loop BB70_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB70_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB70_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB70_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_49
.LBB70_52:                              # %for.end187
                                        #   in Loop: Header=BB70_40 Depth=1
	jmp	.LBB70_53
.LBB70_53:                              # %for.inc188
                                        #   in Loop: Header=BB70_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_40
.LBB70_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB70_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB70_56:                              # %if.end192
	cmpl	$1184107730, -52(%rbp)  # imm = 0x46940CD2
	jne	.LBB70_58
.LBB70_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_57
.Lfunc_end70:
	.size	Init_Motion_Search_Module.45, .Lfunc_end70-Init_Motion_Search_Module.45
	.cfi_endproc
                                        # -- End function
	.globl	BPredPartitionCost.46   # -- Begin function BPredPartitionCost.46
	.p2align	4, 0x90
	.type	BPredPartitionCost.46,@function
BPredPartitionCost.46:                  # @BPredPartitionCost.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1416, %rsp             # imm = 0x588
	.cfi_offset %rbx, -24
	movl	$176943257, -124(%rbp)  # imm = 0xA8BF099
	movl	%edi, -12(%rbp)
	movl	%esi, -52(%rbp)
	movw	%dx, -34(%rbp)
	movw	%cx, -36(%rbp)
	movl	%r8d, -104(%rbp)
	movl	%r9d, -64(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 80(%rax,%rcx,8)
	jge	.LBB71_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	jmp	.LBB71_3
.LBB71_2:                               # %cond.false
	movl	$8, %eax
	jmp	.LBB71_3
.LBB71_3:                               # %cond.end
	movl	%eax, -116(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	cmpl	$8, 84(%rax,%rcx,8)
	jge	.LBB71_5
# %bb.4:                                # %cond.true11
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	jmp	.LBB71_6
.LBB71_5:                               # %cond.false16
	movl	$8, %eax
	jmp	.LBB71_6
.LBB71_6:                               # %cond.end17
	movl	%eax, -120(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB71_8
# %bb.7:                                # %cond.true20
	movl	-12(%rbp), %eax
	jmp	.LBB71_9
.LBB71_8:                               # %cond.false21
	movl	$4, %eax
	jmp	.LBB71_9
.LBB71_9:                               # %cond.end22
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -128(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB71_11
# %bb.10:                               # %cond.true39
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB71_12
.LBB71_11:                              # %cond.false40
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB71_12:                              # %cond.end41
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -88(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB71_13:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_15 Depth 2
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_20
# %bb.14:                               # %for.body
                                        #   in Loop: Header=BB71_13 Depth=1
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB71_15:                              # %for.cond56
                                        #   Parent Loop BB71_13 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_18
# %bb.16:                               # %for.body63
                                        #   in Loop: Header=BB71_15 Depth=2
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-34(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movswq	-34(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	mvbits, %rax
	movq	-96(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	movq	-88(%rbp), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movswq	-36(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	2(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc
                                        #   in Loop: Header=BB71_15 Depth=2
	movl	-128(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_15
.LBB71_18:                              # %for.end
                                        #   in Loop: Header=BB71_13 Depth=1
	jmp	.LBB71_19
.LBB71_19:                              # %for.inc167
                                        #   in Loop: Header=BB71_13 Depth=1
	movl	-100(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_13
.LBB71_20:                              # %for.end169
	movl	-104(%rbp), %eax
	imull	-40(%rbp), %eax
	sarl	$16, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -48(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.by0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB71_21:                              # %for.cond174
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_23 Depth 2
                                        #       Child Loop BB71_25 Depth 3
                                        #         Child Loop BB71_27 Depth 4
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.by0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_39
# %bb.22:                               # %for.body182
                                        #   in Loop: Header=BB71_21 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -80(%rbp)
	addl	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -44(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$BPredPartitionCost.bx0, %rcx
	addq	%rax, %rcx
	movslq	-52(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB71_23:                              # %for.cond188
                                        #   Parent Loop BB71_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_25 Depth 3
                                        #         Child Loop BB71_27 Depth 4
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$BPredPartitionCost.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-52(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_37
# %bb.24:                               # %for.body196
                                        #   in Loop: Header=BB71_23 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	%ecx, -76(%rbp)
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-76(%rbp), %edi
	movl	-80(%rbp), %esi
	movl	-12(%rbp), %ecx
	movl	-12(%rbp), %r8d
	movw	-34(%rbp), %ax
	movw	-36(%rbp), %bx
	movl	-64(%rbp), %r10d
	movl	$2, %edx
	movswl	%ax, %r9d
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi
	movl	$0, -32(%rbp)
	movl	$0, -56(%rbp)
.LBB71_25:                              # %for.cond199
                                        #   Parent Loop BB71_21 Depth=1
                                        #     Parent Loop BB71_23 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_27 Depth 4
	cmpl	$4, -32(%rbp)
	jge	.LBB71_32
# %bb.26:                               # %for.body202
                                        #   in Loop: Header=BB71_25 Depth=3
	movl	$0, -28(%rbp)
.LBB71_27:                              # %for.cond203
                                        #   Parent Loop BB71_21 Depth=1
                                        #     Parent Loop BB71_23 Depth=2
                                        #       Parent Loop BB71_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -28(%rbp)
	jge	.LBB71_30
# %bb.28:                               # %for.body206
                                        #   in Loop: Header=BB71_27 Depth=4
	movq	imgY_org, %rax
	movl	-112(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-108(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-48(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1408(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-56(%rbp), %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.29:                               # %for.inc230
                                        #   in Loop: Header=BB71_27 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB71_27
.LBB71_30:                              # %for.end232
                                        #   in Loop: Header=BB71_25 Depth=3
	jmp	.LBB71_31
.LBB71_31:                              # %for.inc233
                                        #   in Loop: Header=BB71_25 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_25
.LBB71_32:                              # %for.end235
                                        #   in Loop: Header=BB71_23 Depth=2
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB71_34
# %bb.33:                               # %lor.lhs.false
                                        #   in Loop: Header=BB71_23 Depth=2
	cmpl	$4, -12(%rbp)
	jle	.LBB71_35
.LBB71_34:                              # %if.then
                                        #   in Loop: Header=BB71_23 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB71_35:                              # %if.end
                                        #   in Loop: Header=BB71_23 Depth=2
	jmp	.LBB71_36
.LBB71_36:                              # %for.inc240
                                        #   in Loop: Header=BB71_23 Depth=2
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_23
.LBB71_37:                              # %for.end243
                                        #   in Loop: Header=BB71_21 Depth=1
	jmp	.LBB71_38
.LBB71_38:                              # %for.inc244
                                        #   in Loop: Header=BB71_21 Depth=1
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_21
.LBB71_39:                              # %for.end247
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB71_58
# %bb.40:                               # %land.lhs.true
	cmpl	$4, -12(%rbp)
	jg	.LBB71_58
# %bb.41:                               # %if.then252
	movl	$0, -48(%rbp)
.LBB71_42:                              # %for.cond253
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_44 Depth 2
                                        #       Child Loop BB71_46 Depth 3
                                        #         Child Loop BB71_48 Depth 4
	movl	-48(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	84(%rcx,%rdx,8), %eax
	jge	.LBB71_57
# %bb.43:                               # %for.body260
                                        #   in Loop: Header=BB71_42 Depth=1
	movl	$0, -44(%rbp)
.LBB71_44:                              # %for.cond261
                                        #   Parent Loop BB71_42 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_46 Depth 3
                                        #         Child Loop BB71_48 Depth 4
	movl	-44(%rbp), %eax
	movq	input, %rcx
	movslq	-24(%rbp), %rdx
	cmpl	80(%rcx,%rdx,8), %eax
	jge	.LBB71_55
# %bb.45:                               # %for.body268
                                        #   in Loop: Header=BB71_44 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -28(%rbp)
.LBB71_46:                              # %for.cond269
                                        #   Parent Loop BB71_42 Depth=1
                                        #     Parent Loop BB71_44 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_48 Depth 4
	cmpl	$8, -28(%rbp)
	jge	.LBB71_53
# %bb.47:                               # %for.body272
                                        #   in Loop: Header=BB71_46 Depth=3
	movl	$0, -32(%rbp)
.LBB71_48:                              # %for.cond273
                                        #   Parent Loop BB71_42 Depth=1
                                        #     Parent Loop BB71_44 Depth=2
                                        #       Parent Loop BB71_46 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$8, -32(%rbp)
	jge	.LBB71_51
# %bb.49:                               # %for.body276
                                        #   in Loop: Header=BB71_48 Depth=4
	movl	-28(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1408(%rbp), %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	addl	-44(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	-56(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -56(%rbp)
	movslq	%ecx, %rcx
	movl	%eax, -384(%rbp,%rcx,4)
# %bb.50:                               # %for.inc286
                                        #   in Loop: Header=BB71_48 Depth=4
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB71_48
.LBB71_51:                              # %for.end288
                                        #   in Loop: Header=BB71_46 Depth=3
	jmp	.LBB71_52
.LBB71_52:                              # %for.inc289
                                        #   in Loop: Header=BB71_46 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB71_46
.LBB71_53:                              # %for.end291
                                        #   in Loop: Header=BB71_44 Depth=2
	leaq	-384(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.54:                               # %for.inc296
                                        #   in Loop: Header=BB71_44 Depth=2
	movl	-116(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB71_44
.LBB71_55:                              # %for.end298
                                        #   in Loop: Header=BB71_42 Depth=1
	jmp	.LBB71_56
.LBB71_56:                              # %for.inc299
                                        #   in Loop: Header=BB71_42 Depth=1
	movl	-120(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB71_42
.LBB71_57:                              # %for.end301
	jmp	.LBB71_58
.LBB71_58:                              # %if.end302
	movl	-60(%rbp), %ebx
	cmpl	$176943257, -124(%rbp)  # imm = 0xA8BF099
	jne	.LBB71_60
.LBB71_59:
	movl	%ebx, %eax
	addq	$1416, %rsp             # imm = 0x588
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_60:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_59
.Lfunc_end71:
	.size	BPredPartitionCost.46, .Lfunc_end71-BPredPartitionCost.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.47
.LCPI72_0:
	.quad	4602678819172646912     # double 0.5
.LCPI72_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.47
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.47,@function
FullPelBlockMotionBiPred.47:            # @FullPelBlockMotionBiPred.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$907563007, -192(%rbp)  # imm = 0x36184FFF
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -124(%rbp)
	movl	%r8d, -116(%rbp)
	movl	%r9d, -144(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB72_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB72_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB72_4
.LBB72_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB72_4
.LBB72_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB72_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB72_7
.LBB72_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB72_7:                               # %cond.end12
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI72_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -112(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -104(%rbp)
	movl	$0, -120(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -180(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -108(%rbp)
	movq	input, %rax
	movslq	-144(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -140(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movl	-124(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-116(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-124(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movl	-116(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -42(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB72_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB72_11
.LBB72_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB72_11:                              # %cond.end87
	jmp	.LBB72_13
.LBB72_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB72_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB72_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB72_17
.LBB72_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB72_17:                              # %cond.end114
	jmp	.LBB72_19
.LBB72_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB72_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB72_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB72_23
.LBB72_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB72_23:                              # %cond.end138
	jmp	.LBB72_25
.LBB72_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB72_25
.LBB72_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB72_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB72_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB72_29
.LBB72_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB72_29:                              # %cond.end161
	jmp	.LBB72_31
.LBB72_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB72_31
.LBB72_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB72_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB72_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB72_37
.LBB72_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB72_37:                              # %if.end
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB72_42
# %bb.38:                               # %land.lhs.true196
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_42
# %bb.39:                               # %land.lhs.true204
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB72_42
# %bb.40:                               # %land.lhs.true208
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-108(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB72_43
.LBB72_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB72_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB72_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_49 Depth 2
                                        #       Child Loop BB72_51 Depth 3
                                        #     Child Loop BB72_85 Depth 2
                                        #       Child Loop BB72_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB72_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB72_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-46(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-44(%rbp), %esi
	shll	$2, %esi
	subl	-176(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-184(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-172(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB72_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_99
.LBB72_47:                              # %if.end257
                                        #   in Loop: Header=BB72_44 Depth=1
	cmpw	$0, -42(%rbp)
	je	.LBB72_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB72_44 Depth=1
	movl	$0, -36(%rbp)
.LBB72_49:                              # %for.cond260
                                        #   Parent Loop BB72_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB72_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB72_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -88(%rbp)
.LBB72_51:                              # %for.cond271
                                        #   Parent Loop BB72_44 Depth=1
                                        #     Parent Loop BB72_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB72_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB72_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB72_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB72_58
.LBB72_54:                              # %cond.false296
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB72_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB72_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_57
.LBB72_56:                              # %cond.false310
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB72_57:                              # %cond.end320
                                        #   in Loop: Header=BB72_51 Depth=3
.LBB72_58:                              # %cond.end322
                                        #   in Loop: Header=BB72_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB72_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB72_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB72_64
.LBB72_60:                              # %cond.false354
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB72_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB72_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_63
.LBB72_62:                              # %cond.false369
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB72_63:                              # %cond.end379
                                        #   in Loop: Header=BB72_51 Depth=3
.LBB72_64:                              # %cond.end381
                                        #   in Loop: Header=BB72_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB72_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB72_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB72_70
.LBB72_66:                              # %cond.false413
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB72_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB72_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_69
.LBB72_68:                              # %cond.false428
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB72_69:                              # %cond.end438
                                        #   in Loop: Header=BB72_51 Depth=3
.LBB72_70:                              # %cond.end440
                                        #   in Loop: Header=BB72_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB72_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB72_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB72_76
.LBB72_72:                              # %cond.false472
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB72_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB72_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB72_75
.LBB72_74:                              # %cond.false487
                                        #   in Loop: Header=BB72_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB72_75:                              # %cond.end497
                                        #   in Loop: Header=BB72_51 Depth=3
.LBB72_76:                              # %cond.end499
                                        #   in Loop: Header=BB72_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB72_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB72_51
.LBB72_78:                              # %for.end
                                        #   in Loop: Header=BB72_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB72_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_83
.LBB72_80:                              # %if.end512
                                        #   in Loop: Header=BB72_49 Depth=2
	jmp	.LBB72_81
.LBB72_81:                              # %for.inc513
                                        #   in Loop: Header=BB72_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB72_49
.LBB72_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_83
.LBB72_83:                              # %for.end515
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_96
.LBB72_84:                              # %if.else516
                                        #   in Loop: Header=BB72_44 Depth=1
	movl	$0, -36(%rbp)
.LBB72_85:                              # %for.cond517
                                        #   Parent Loop BB72_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB72_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB72_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-104(%rbp), %r8d
	movl	-112(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -88(%rbp)
.LBB72_87:                              # %for.cond529
                                        #   Parent Loop BB72_44 Depth=1
                                        #     Parent Loop BB72_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB72_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB72_87 Depth=3
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -64(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB72_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB72_87
.LBB72_90:                              # %for.end583
                                        #   in Loop: Header=BB72_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB72_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_95
.LBB72_92:                              # %if.end587
                                        #   in Loop: Header=BB72_85 Depth=2
	jmp	.LBB72_93
.LBB72_93:                              # %for.inc588
                                        #   in Loop: Header=BB72_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB72_85
.LBB72_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_95
.LBB72_95:                              # %for.end590
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_96
.LBB72_96:                              # %if.end591
                                        #   in Loop: Header=BB72_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB72_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB72_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB72_98:                              # %if.end595
                                        #   in Loop: Header=BB72_44 Depth=1
	jmp	.LBB72_99
.LBB72_99:                              # %for.inc596
                                        #   in Loop: Header=BB72_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB72_44
.LBB72_100:                             # %for.end598
	cmpl	$0, -120(%rbp)
	je	.LBB72_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-120(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB72_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$907563007, -192(%rbp)  # imm = 0x36184FFF
	jne	.LBB72_104
.LBB72_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_103
.Lfunc_end72:
	.size	FullPelBlockMotionBiPred.47, .Lfunc_end72-FullPelBlockMotionBiPred.47
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.48    # -- Begin function Get_Direct_CostMB.48
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.48,@function
Get_Direct_CostMB.48:                   # @Get_Direct_CostMB.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$138223275, -28(%rbp)   # imm = 0x83D1EAB
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB73_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB73_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB73_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB73_5
.LBB73_4:                               # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB73_18
.LBB73_5:                               # %if.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_6
.LBB73_6:                               # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_1
.LBB73_7:                               # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB73_9
	jmp	.LBB73_8
.LBB73_8:                               # %for.end
	subl	$2, %eax
	je	.LBB73_15
	jmp	.LBB73_16
.LBB73_9:                               # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB73_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB73_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB73_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB73_14
.LBB73_13:                              # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB73_14:                              # %if.end9
	jmp	.LBB73_17
.LBB73_15:                              # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_17
.LBB73_16:                              # %sw.default
	jmp	.LBB73_17
.LBB73_17:                              # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB73_18:                              # %return
	movl	-24(%rbp), %ebx
	cmpl	$138223275, -28(%rbp)   # imm = 0x83D1EAB
	jne	.LBB73_20
.LBB73_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_19
.Lfunc_end73:
	.size	Get_Direct_CostMB.48, .Lfunc_end73-Get_Direct_CostMB.48
	.cfi_endproc
                                        # -- End function
	.globl	sign.49                 # -- Begin function sign.49
	.p2align	4, 0x90
	.type	sign.49,@function
sign.49:                                # @sign.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$769834433, -28(%rbp)   # imm = 0x2DE2BDC1
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	cmpl	$0, -12(%rbp)
	jge	.LBB74_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB74_3
.LBB74_2:                               # %cond.false
	movl	-12(%rbp), %eax
.LBB74_3:                               # %cond.end
	movl	%eax, -16(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB74_5
# %bb.4:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_6
.LBB74_5:                               # %if.else
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB74_6:                               # %return
	movl	-20(%rbp), %ebx
	cmpl	$769834433, -28(%rbp)   # imm = 0x2DE2BDC1
	jne	.LBB74_8
.LBB74_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_7
.Lfunc_end74:
	.size	sign.49, .Lfunc_end74-sign.49
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.50 # -- Begin function ClearFastFullIntegerSearch.50
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.50,@function
ClearFastFullIntegerSearch.50:          # @ClearFastFullIntegerSearch.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$489395502, -20(%rbp)   # imm = 0x1D2B952E
	movl	$0, -4(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
                                        #       Child Loop BB75_5 Depth 3
                                        #         Child Loop BB75_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB75_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_3:                               # %for.cond1
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_5 Depth 3
                                        #         Child Loop BB75_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB75_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	$1, -12(%rbp)
.LBB75_5:                               # %for.cond4
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB75_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB75_5 Depth=3
	movl	$0, -16(%rbp)
.LBB75_7:                               # %for.cond7
                                        #   Parent Loop BB75_1 Depth=1
                                        #     Parent Loop BB75_3 Depth=2
                                        #       Parent Loop BB75_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB75_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB75_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB75_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_7
.LBB75_10:                              # %for.end
                                        #   in Loop: Header=BB75_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB75_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_5
.LBB75_12:                              # %for.end24
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_3
.LBB75_14:                              # %for.end31
                                        #   in Loop: Header=BB75_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_1
.LBB75_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB75_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB75_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB75_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB75_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_17
.LBB75_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$489395502, -20(%rbp)   # imm = 0x1D2B952E
	jne	.LBB75_22
.LBB75_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_21
.Lfunc_end75:
	.size	ClearFastFullIntegerSearch.50, .Lfunc_end75-ClearFastFullIntegerSearch.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.51
.LCPI76_0:
	.quad	4602678819172646912     # double 0.5
.LCPI76_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.51
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.51,@function
FullPelBlockMotionBiPred.51:            # @FullPelBlockMotionBiPred.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$829077074, -172(%rbp)  # imm = 0x316AB652
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -116(%rbp)
	movl	%r8d, -124(%rbp)
	movl	%r9d, -148(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB76_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB76_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB76_4
.LBB76_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB76_4
.LBB76_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB76_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB76_7
.LBB76_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB76_7:                               # %cond.end12
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -108(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	$0, -104(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -184(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -144(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-124(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-124(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-116(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movl	-124(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -42(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -44(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB76_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB76_11
.LBB76_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB76_11:                              # %cond.end87
	jmp	.LBB76_13
.LBB76_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB76_13:                              # %cond.end91
	movw	%ax, -48(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB76_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB76_17
.LBB76_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB76_17:                              # %cond.end114
	jmp	.LBB76_19
.LBB76_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB76_19:                              # %cond.end118
	movw	%ax, -50(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB76_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB76_23
.LBB76_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB76_23:                              # %cond.end138
	jmp	.LBB76_25
.LBB76_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB76_25
.LBB76_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-44(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB76_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB76_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB76_29
.LBB76_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB76_29:                              # %cond.end161
	jmp	.LBB76_31
.LBB76_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB76_31
.LBB76_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-112(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB76_37
.LBB76_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB76_37:                              # %if.end
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_42
# %bb.38:                               # %land.lhs.true196
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-92(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_42
# %bb.39:                               # %land.lhs.true204
	movswl	-42(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB76_42
# %bb.40:                               # %land.lhs.true208
	movswl	-42(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-112(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB76_43
.LBB76_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB76_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB76_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_49 Depth 2
                                        #       Child Loop BB76_51 Depth 3
                                        #     Child Loop BB76_85 Depth 2
                                        #       Child Loop BB76_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB76_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB76_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-46(%rbp), %edx
	shll	$2, %edx
	subl	-192(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-42(%rbp), %esi
	shll	$2, %esi
	subl	-180(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-128(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-132(%rbp), %esi
	shll	$2, %esi
	subl	-176(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_99
.LBB76_47:                              # %if.end257
                                        #   in Loop: Header=BB76_44 Depth=1
	cmpw	$0, -44(%rbp)
	je	.LBB76_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	$0, -36(%rbp)
.LBB76_49:                              # %for.cond260
                                        #   Parent Loop BB76_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB76_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB76_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB76_51:                              # %for.cond271
                                        #   Parent Loop BB76_44 Depth=1
                                        #     Parent Loop BB76_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB76_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_58
.LBB76_54:                              # %cond.false296
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_57
.LBB76_56:                              # %cond.false310
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_57:                              # %cond.end320
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_58:                              # %cond.end322
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_64
.LBB76_60:                              # %cond.false354
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_63
.LBB76_62:                              # %cond.false369
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_63:                              # %cond.end379
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_64:                              # %cond.end381
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_70
.LBB76_66:                              # %cond.false413
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_69
.LBB76_68:                              # %cond.false428
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_69:                              # %cond.end438
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_70:                              # %cond.end440
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-50(%rbp), %eax
	movq	-80(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -80(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB76_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB76_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB76_76
.LBB76_72:                              # %cond.false472
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB76_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB76_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB76_75
.LBB76_74:                              # %cond.false487
                                        #   in Loop: Header=BB76_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB76_75:                              # %cond.end497
                                        #   in Loop: Header=BB76_51 Depth=3
.LBB76_76:                              # %cond.end499
                                        #   in Loop: Header=BB76_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB76_51 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB76_51
.LBB76_78:                              # %for.end
                                        #   in Loop: Header=BB76_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_83
.LBB76_80:                              # %if.end512
                                        #   in Loop: Header=BB76_49 Depth=2
	jmp	.LBB76_81
.LBB76_81:                              # %for.inc513
                                        #   in Loop: Header=BB76_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB76_49
.LBB76_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_83
.LBB76_83:                              # %for.end515
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_96
.LBB76_84:                              # %if.else516
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	$0, -36(%rbp)
.LBB76_85:                              # %for.cond517
                                        #   Parent Loop BB76_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB76_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB76_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-132(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-128(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -80(%rbp)
	movq	-160(%rbp), %rax
	movl	-92(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-42(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-120(%rbp), %r8d
	movl	-108(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -88(%rbp)
.LBB76_87:                              # %for.cond529
                                        #   Parent Loop BB76_44 Depth=1
                                        #     Parent Loop BB76_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB76_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB76_87 Depth=3
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-72(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -72(%rbp)
	movzwl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	movq	-80(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -80(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB76_87 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB76_87
.LBB76_90:                              # %for.end583
                                        #   in Loop: Header=BB76_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB76_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_95
.LBB76_92:                              # %if.end587
                                        #   in Loop: Header=BB76_85 Depth=2
	jmp	.LBB76_93
.LBB76_93:                              # %for.inc588
                                        #   in Loop: Header=BB76_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB76_85
.LBB76_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_95
.LBB76_95:                              # %for.end590
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_96
.LBB76_96:                              # %if.end591
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB76_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB76_98:                              # %if.end595
                                        #   in Loop: Header=BB76_44 Depth=1
	jmp	.LBB76_99
.LBB76_99:                              # %for.inc596
                                        #   in Loop: Header=BB76_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB76_44
.LBB76_100:                             # %for.end598
	cmpl	$0, -104(%rbp)
	je	.LBB76_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-104(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-104(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB76_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$829077074, -172(%rbp)  # imm = 0x316AB652
	jne	.LBB76_104
.LBB76_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_103
.Lfunc_end76:
	.size	FullPelBlockMotionBiPred.51, .Lfunc_end76-FullPelBlockMotionBiPred.51
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.52 # -- Begin function InitializeFastFullIntegerSearch.52
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.52,@function
InitializeFastFullIntegerSearch.52:     # @InitializeFastFullIntegerSearch.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$79217646, -28(%rbp)    # imm = 0x4B8C3EE
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB77_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB77_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_7 Depth 2
                                        #       Child Loop BB77_11 Depth 3
                                        #         Child Loop BB77_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB77_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB77_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB77_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_6:                               # %if.end12
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	$0, -8(%rbp)
.LBB77_7:                               # %for.cond13
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_11 Depth 3
                                        #         Child Loop BB77_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB77_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB77_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB77_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_10:                              # %if.end26
                                        #   in Loop: Header=BB77_7 Depth=2
	movl	$1, -16(%rbp)
.LBB77_11:                              # %for.cond27
                                        #   Parent Loop BB77_3 Depth=1
                                        #     Parent Loop BB77_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_15 Depth 4
	cmpl	$8, -16(%rbp)
	jge	.LBB77_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB77_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB77_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_14:                              # %if.end41
                                        #   in Loop: Header=BB77_11 Depth=3
	movl	$0, -20(%rbp)
.LBB77_15:                              # %for.cond42
                                        #   Parent Loop BB77_3 Depth=1
                                        #     Parent Loop BB77_7 Depth=2
                                        #       Parent Loop BB77_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB77_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB77_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB77_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB77_18:                              # %if.end60
                                        #   in Loop: Header=BB77_15 Depth=4
	jmp	.LBB77_19
.LBB77_19:                              # %for.inc
                                        #   in Loop: Header=BB77_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_15
.LBB77_20:                              # %for.end
                                        #   in Loop: Header=BB77_11 Depth=3
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc61
                                        #   in Loop: Header=BB77_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_11
.LBB77_22:                              # %for.end63
                                        #   in Loop: Header=BB77_7 Depth=2
	jmp	.LBB77_23
.LBB77_23:                              # %for.inc64
                                        #   in Loop: Header=BB77_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_7
.LBB77_24:                              # %for.end66
                                        #   in Loop: Header=BB77_3 Depth=1
	jmp	.LBB77_25
.LBB77_25:                              # %for.inc67
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_3
.LBB77_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB77_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB77_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB77_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB77_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB77_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB77_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB77_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB77_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB77_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB77_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB77_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB77_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB77_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB77_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB77_40:                              # %if.end109
                                        #   in Loop: Header=BB77_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB77_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB77_42:                              # %if.end120
                                        #   in Loop: Header=BB77_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB77_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB77_44:                              # %if.end131
                                        #   in Loop: Header=BB77_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB77_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB77_46:                              # %if.end142
                                        #   in Loop: Header=BB77_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB77_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB77_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB77_48:                              # %if.end153
                                        #   in Loop: Header=BB77_37 Depth=1
	jmp	.LBB77_49
.LBB77_49:                              # %for.inc154
                                        #   in Loop: Header=BB77_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_37
.LBB77_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB77_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB77_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB77_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	$0, -8(%rbp)
.LBB77_54:                              # %for.cond164
                                        #   Parent Loop BB77_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB77_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_54
.LBB77_57:                              # %for.end175
                                        #   in Loop: Header=BB77_52 Depth=1
	jmp	.LBB77_58
.LBB77_58:                              # %for.inc176
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_52
.LBB77_59:                              # %for.end178
	jmp	.LBB77_69
.LBB77_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB77_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB77_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB77_61 Depth=1
	movl	-12(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB77_63:                              # %for.cond191
                                        #   Parent Loop BB77_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB77_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB77_63 Depth=2
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB77_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_63
.LBB77_66:                              # %for.end202
                                        #   in Loop: Header=BB77_61 Depth=1
	jmp	.LBB77_67
.LBB77_67:                              # %for.inc203
                                        #   in Loop: Header=BB77_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_61
.LBB77_68:                              # %for.end205
	jmp	.LBB77_69
.LBB77_69:                              # %if.end206
	cmpl	$79217646, -28(%rbp)    # imm = 0x4B8C3EE
	jne	.LBB77_71
.LBB77_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_70
.Lfunc_end77:
	.size	InitializeFastFullIntegerSearch.52, .Lfunc_end77-InitializeFastFullIntegerSearch.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.53
.LCPI78_0:
	.quad	4602678819172646912     # double 0.5
.LCPI78_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.53
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.53,@function
FastFullPelBlockMotionSearch.53:        # @FastFullPelBlockMotionSearch.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI78_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1904155725, -56(%rbp)  # imm = 0x717F1C4D
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -68(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -72(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-80(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	BlockSAD, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB78_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-20(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB78_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	search_center_y, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-44(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB78_5
# %bb.4:                                # %if.then51
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB78_5:                               # %if.end56
	jmp	.LBB78_6
.LBB78_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB78_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB78_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB78_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB78_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB78_7 Depth=1
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-44(%rbp), %eax
	movq	mvbits, %rcx
	movl	-60(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-64(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB78_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB78_7 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB78_11:                              # %if.end85
                                        #   in Loop: Header=BB78_7 Depth=1
	jmp	.LBB78_12
.LBB78_12:                              # %if.end86
                                        #   in Loop: Header=BB78_7 Depth=1
	jmp	.LBB78_13
.LBB78_13:                              # %for.inc
                                        #   in Loop: Header=BB78_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB78_7
.LBB78_14:                              # %for.end
	movl	-52(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1904155725, -56(%rbp)  # imm = 0x717F1C4D
	jne	.LBB78_16
.LBB78_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_15
.Lfunc_end78:
	.size	FastFullPelBlockMotionSearch.53, .Lfunc_end78-FastFullPelBlockMotionSearch.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function BlockMotionSearch.54
.LCPI79_0:
	.quad	4611686018427387904     # double 2
.LCPI79_1:
	.quad	4607182418800017408     # double 1
.LCPI79_3:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI79_4:
	.quad	4620693217682128896     # double 8
.LCPI79_5:
	.quad	4602678819172646912     # double 0.5
	.section	.rodata.cst4,"aM",@progbits,4
	.p2align	2
.LCPI79_2:
	.long	1065353216              # float 1
	.text
	.globl	BlockMotionSearch.54
	.p2align	4, 0x90
	.type	BlockMotionSearch.54,@function
BlockMotionSearch.54:                   # @BlockMotionSearch.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$312, %rsp              # imm = 0x138
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$197035572, -212(%rbp)  # imm = 0xBBE8634
	movw	%di, -42(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -184(%rbp)
	movl	%ecx, -180(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -160(%rbp)
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-184(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-180(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-56(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-184(%rbp), %eax
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-180(%rbp), %eax
	movl	%eax, -128(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -224(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -100(%rbp)
	movl	$0, -92(%rbp)
	leaq	-240(%rbp), %rdi
	callq	ftime
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB79_5
# %bb.1:                                # %if.then
	movq	input, %rax
	movl	1236(%rax), %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB79_3
# %bb.2:                                # %cond.true
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	addl	$1, %edx
	jmp	.LBB79_4
.LBB79_3:                               # %cond.false
	xorl	%edx, %edx
	jmp	.LBB79_4
.LBB79_4:                               # %cond.end
	movl	%edx, -92(%rbp)
.LBB79_5:                               # %if.end
	movq	img, %rax
	movq	71920(%rax), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	movl	$0, -72(%rbp)
.LBB79_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_8 Depth 2
	movl	-72(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB79_13
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB79_6 Depth=1
	movl	$0, -64(%rbp)
.LBB79_8:                               # %for.cond24
                                        #   Parent Loop BB79_6 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-64(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB79_11
# %bb.9:                                # %for.body26
                                        #   in Loop: Header=BB79_8 Depth=2
	movq	imgY_org, %rax
	movl	-128(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-124(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-72(%rbp), %rcx
	movq	BlockMotionSearch.orig_pic(,%rcx,8), %rcx
	movslq	-64(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB79_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_8
.LBB79_11:                              # %for.end
                                        #   in Loop: Header=BB79_6 Depth=1
	jmp	.LBB79_12
.LBB79_12:                              # %for.inc37
                                        #   in Loop: Header=BB79_6 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB79_6
.LBB79_13:                              # %for.end39
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB79_107
# %bb.14:                               # %if.then42
	cmpl	$6, -56(%rbp)
	jle	.LBB79_19
# %bb.15:                               # %if.then44
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_17
# %bb.16:                               # %cond.true68
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_18
.LBB79_17:                              # %cond.false80
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB79_18:                              # %cond.end95
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB79_37
.LBB79_19:                              # %if.else
	cmpl	$4, -56(%rbp)
	jle	.LBB79_24
# %bb.20:                               # %if.then99
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_22
# %bb.21:                               # %cond.true124
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_23
.LBB79_22:                              # %cond.false138
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB79_23:                              # %cond.end153
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB79_36
.LBB79_24:                              # %if.else156
	cmpl	$4, -56(%rbp)
	jne	.LBB79_29
# %bb.25:                               # %if.then159
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_27
# %bb.26:                               # %cond.true184
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_28
.LBB79_27:                              # %cond.false198
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB79_28:                              # %cond.end213
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB79_35
.LBB79_29:                              # %if.else216
	cmpl	$1, -56(%rbp)
	jle	.LBB79_34
# %bb.30:                               # %if.then219
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_32
# %bb.31:                               # %cond.true244
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_33
.LBB79_32:                              # %cond.false258
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB79_33:                              # %cond.end273
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB79_34:                              # %if.end276
	jmp	.LBB79_35
.LBB79_35:                              # %if.end277
	jmp	.LBB79_36
.LBB79_36:                              # %if.end278
	jmp	.LBB79_37
.LBB79_37:                              # %if.end279
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_63
# %bb.38:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB79_63
# %bb.39:                               # %if.then284
	cmpl	$6, -56(%rbp)
	jle	.LBB79_44
# %bb.40:                               # %if.then287
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_42
# %bb.41:                               # %cond.true312
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_43
.LBB79_42:                              # %cond.false326
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	(%rax), %eax
.LBB79_43:                              # %cond.end341
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB79_62
.LBB79_44:                              # %if.else344
	cmpl	$4, -56(%rbp)
	jle	.LBB79_49
# %bb.45:                               # %if.then347
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_47
# %bb.46:                               # %cond.true372
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_48
.LBB79_47:                              # %cond.false386
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movl	(%rax), %eax
.LBB79_48:                              # %cond.end401
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB79_61
.LBB79_49:                              # %if.else404
	cmpl	$4, -56(%rbp)
	jne	.LBB79_54
# %bb.50:                               # %if.then407
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_52
# %bb.51:                               # %cond.true432
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_53
.LBB79_52:                              # %cond.false446
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movl	(%rax), %eax
.LBB79_53:                              # %cond.end461
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
	jmp	.LBB79_60
.LBB79_54:                              # %if.else464
	cmpl	$1, -56(%rbp)
	jle	.LBB79_59
# %bb.55:                               # %if.then467
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	(%rax), %eax
	movl	%eax, pred_MV_uplayer
	movq	-120(%rbp), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswl	2(%rax), %eax
	movl	%eax, pred_MV_uplayer+4
	cmpl	$1, -68(%rbp)
	jne	.LBB79_57
# %bb.56:                               # %cond.true492
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB79_58
.LBB79_57:                              # %cond.false506
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movl	(%rax), %eax
.LBB79_58:                              # %cond.end521
	movl	%eax, pred_SAD_uplayer
	movl	pred_SAD_uplayer, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, pred_SAD_uplayer
.LBB79_59:                              # %if.end524
	jmp	.LBB79_60
.LBB79_60:                              # %if.end525
	jmp	.LBB79_61
.LBB79_61:                              # %if.end526
	jmp	.LBB79_62
.LBB79_62:                              # %if.end527
	jmp	.LBB79_63
.LBB79_63:                              # %if.end528
	cmpl	$0, flag_intra_SAD
	je	.LBB79_65
# %bb.64:                               # %cond.true530
	xorl	%eax, %eax
	jmp	.LBB79_66
.LBB79_65:                              # %cond.false531
	movl	pred_SAD_uplayer, %eax
.LBB79_66:                              # %cond.end532
	movl	%eax, pred_SAD_uplayer
	movq	img, %rax
	movl	(%rax), %eax
	movswl	-42(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jle	.LBB79_68
# %bb.67:                               # %if.then538
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_time
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_time+4
.LBB79_68:                              # %if.end584
	cmpl	$1, -68(%rbp)
	jne	.LBB79_77
# %bb.69:                               # %land.lhs.true587
	movl	Bframe_ctr, %eax
	cltd
	idivl	-100(%rbp)
	cmpl	$1, %edx
	jle	.LBB79_77
# %bb.70:                               # %if.then591
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-42(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	4(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB79_72
# %bb.71:                               # %cond.true624
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB79_73
.LBB79_72:                              # %cond.false626
	vmovsd	.LCPI79_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB79_73:                              # %cond.end633
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	vcvtsi2sdl	8(%rax), %xmm0, %xmm0
	cmpl	$1, -92(%rbp)
	jne	.LBB79_75
# %bb.74:                               # %cond.true653
	vcvtsi2sdl	-100(%rbp), %xmm0, %xmm1
	jmp	.LBB79_76
.LBB79_75:                              # %cond.false655
	vmovsd	.LCPI79_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI79_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm2, %xmm3, %xmm2
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vaddsd	%xmm1, %xmm3, %xmm1
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB79_76:                              # %cond.end663
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, pred_MV_time+4
.LBB79_77:                              # %if.end667
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB79_93
# %bb.78:                               # %if.then670
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB79_84
# %bb.79:                               # %land.lhs.true674
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jle	.LBB79_84
# %bb.80:                               # %if.then678
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB79_82
# %bb.81:                               # %cond.true697
	xorl	%eax, %eax
	jmp	.LBB79_83
.LBB79_82:                              # %cond.false698
	movl	pred_SAD_ref, %eax
.LBB79_83:                              # %cond.end699
	movl	%eax, pred_SAD_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref
	movl	pred_MV_ref, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4
	movl	pred_MV_ref+4, %eax
	movswl	-42(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	movswl	-42(%rbp), %eax
	sarl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB79_84:                              # %if.end755
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_92
# %bb.85:                               # %land.lhs.true759
	cmpl	$0, -68(%rbp)
	jne	.LBB79_92
# %bb.86:                               # %land.lhs.true762
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB79_88
# %bb.87:                               # %lor.lhs.false
	movswl	-42(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB79_92
.LBB79_88:                              # %if.then769
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB79_90
# %bb.89:                               # %cond.true785
	xorl	%ecx, %ecx
	jmp	.LBB79_91
.LBB79_90:                              # %cond.false786
	movl	pred_SAD_ref, %ecx
.LBB79_91:                              # %cond.end787
	vmovss	.LCPI79_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB79_92:                              # %if.end835
	jmp	.LBB79_106
.LBB79_93:                              # %if.else836
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jle	.LBB79_98
# %bb.94:                               # %if.then840
	movq	all_mincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB79_96
# %bb.95:                               # %cond.true859
	xorl	%eax, %eax
	jmp	.LBB79_97
.LBB79_96:                              # %cond.false860
	movl	pred_SAD_ref, %eax
.LBB79_97:                              # %cond.end861
	movl	%eax, pred_SAD_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	movl	%eax, pred_MV_ref(%rip)
	movl	pred_MV_ref(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref(%rip)
	movq	all_mincost(%rip), %rax
	movq	img(%rip), %rcx
	movl	152(%rcx), %edx
	movl	156(%rcx), %ecx
	sarl	$2, %edx
	movl	-48(%rbp), %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	sarl	$2, %ecx
	movl	-52(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	-42(%rbp), %ecx
	addl	$-1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	movl	%eax, pred_MV_ref+4(%rip)
	movl	pred_MV_ref+4(%rip), %eax
	movswl	-42(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	imull	%edx, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm0
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB79_98:                              # %if.end911
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_105
# %bb.99:                               # %land.lhs.true915
	cmpl	$0, -68(%rbp)
	jne	.LBB79_105
# %bb.100:                              # %land.lhs.true918
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB79_105
# %bb.101:                              # %if.then922
	movq	all_bwmincost, %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	sarl	$2, %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movl	%eax, pred_SAD_ref
	cmpl	$0, flag_intra_SAD
	je	.LBB79_103
# %bb.102:                              # %cond.true938
	xorl	%ecx, %ecx
	jmp	.LBB79_104
.LBB79_103:                             # %cond.false939
	movl	pred_SAD_ref, %ecx
.LBB79_104:                             # %cond.end940
	vmovss	.LCPI79_2(%rip), %xmm0  # xmm0 = mem[0],zero,zero,zero
	xorl	%eax, %eax
	movl	%ecx, pred_SAD_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	4(%rcx), %ecx
	xorl	%edx, %edx
	subl	-92(%rbp), %edx
	imull	%edx, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %ecx
	subl	-92(%rbp), %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm2
	vdivss	%xmm2, %xmm1, %xmm1
	vcvttss2si	%xmm1, %ecx
	movl	%ecx, pred_MV_ref
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	8(%rcx), %ecx
	subl	-92(%rbp), %eax
	imull	%eax, %ecx
	vcvtsi2ss	%ecx, %xmm0, %xmm1
	movl	-100(%rbp), %eax
	subl	-92(%rbp), %eax
	vcvtsi2ss	%eax, %xmm0, %xmm2
	vaddss	%xmm0, %xmm2, %xmm0
	vdivss	%xmm0, %xmm1, %xmm0
	vcvttss2si	%xmm0, %eax
	movl	%eax, pred_MV_ref+4
.LBB79_105:                             # %if.end988
	jmp	.LBB79_106
.LBB79_106:                             # %if.end989
	jmp	.LBB79_107
.LBB79_107:                             # %if.end990
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB79_109
# %bb.108:                              # %if.then993
	movl	-56(%rbp), %eax
	movl	%eax, FME_blocktype
.LBB79_109:                             # %if.end994
	movq	-176(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %ebx
	movl	-132(%rbp), %r10d
	movl	-140(%rbp), %r11d
	movswl	%ax, %ecx
	movl	%ebx, (%rsp)
	movl	%r10d, 8(%rsp)
	movl	%r11d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -94(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -96(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB79_142
# %bb.110:                              # %if.then1000
	movswl	-94(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movw	%ax, -60(%rbp)
	movswl	-96(%rbp), %eax
	cltd
	idivl	%ecx
	movw	%ax, -58(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB79_130
# %bb.111:                              # %if.then1008
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-60(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB79_113
# %bb.112:                              # %cond.true1013
	movl	-104(%rbp), %ecx
	jmp	.LBB79_114
.LBB79_113:                             # %cond.false1014
	movswl	-60(%rbp), %ecx
.LBB79_114:                             # %cond.end1016
	cmpl	%ecx, %eax
	jle	.LBB79_116
# %bb.115:                              # %cond.true1020
	xorl	%ecx, %ecx
	subl	-104(%rbp), %ecx
	jmp	.LBB79_120
.LBB79_116:                             # %cond.false1022
	movl	-104(%rbp), %eax
	movswl	-60(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_118
# %bb.117:                              # %cond.true1026
	movl	-104(%rbp), %ecx
	jmp	.LBB79_119
.LBB79_118:                             # %cond.false1027
	movswl	-60(%rbp), %ecx
.LBB79_119:                             # %cond.end1029
.LBB79_120:                             # %cond.end1031
	xorl	%eax, %eax
	movw	%cx, -60(%rbp)
	subl	-104(%rbp), %eax
	movl	-104(%rbp), %ecx
	movswl	-58(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB79_122
# %bb.121:                              # %cond.true1038
	movl	-104(%rbp), %ecx
	jmp	.LBB79_123
.LBB79_122:                             # %cond.false1039
	movswl	-58(%rbp), %ecx
.LBB79_123:                             # %cond.end1041
	cmpl	%ecx, %eax
	jle	.LBB79_125
# %bb.124:                              # %cond.true1045
	xorl	%eax, %eax
	subl	-104(%rbp), %eax
	jmp	.LBB79_129
.LBB79_125:                             # %cond.false1047
	movl	-104(%rbp), %eax
	movswl	-58(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_127
# %bb.126:                              # %cond.true1051
	movl	-104(%rbp), %eax
	jmp	.LBB79_128
.LBB79_127:                             # %cond.false1052
	movswl	-58(%rbp), %eax
.LBB79_128:                             # %cond.end1054
.LBB79_129:                             # %cond.end1056
	movw	%ax, -58(%rbp)
.LBB79_130:                             # %if.end1059
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastIntegerPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	movl	$0, -64(%rbp)
.LBB79_131:                             # %for.cond1061
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_133 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_141
# %bb.132:                              # %for.body1065
                                        #   in Loop: Header=BB79_131 Depth=1
	movl	$0, -72(%rbp)
.LBB79_133:                             # %for.cond1066
                                        #   Parent Loop BB79_131 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_139
# %bb.134:                              # %for.body1070
                                        #   in Loop: Header=BB79_133 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB79_136
# %bb.135:                              # %if.then1073
                                        #   in Loop: Header=BB79_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB79_137
.LBB79_136:                             # %if.else1091
                                        #   in Loop: Header=BB79_133 Depth=2
	movl	-84(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
.LBB79_137:                             # %if.end1109
                                        #   in Loop: Header=BB79_133 Depth=2
	jmp	.LBB79_138
.LBB79_138:                             # %for.inc1110
                                        #   in Loop: Header=BB79_133 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB79_133
.LBB79_139:                             # %for.end1112
                                        #   in Loop: Header=BB79_131 Depth=1
	jmp	.LBB79_140
.LBB79_140:                             # %for.inc1113
                                        #   in Loop: Header=BB79_131 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_131
.LBB79_141:                             # %for.end1115
	jmp	.LBB79_143
.LBB79_142:                             # %if.else1116
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-104(%rbp), %r11d
	movl	-84(%rbp), %r14d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	%r11d, 32(%rsp)
	movl	%r14d, 40(%rsp)
	callq	FastFullPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB79_143:                             # %if.end1118
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_146
# %bb.144:                              # %land.lhs.true1120
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB79_146
# %bb.145:                              # %if.then1122
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB79_146:                             # %if.end1123
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB79_162
# %bb.147:                              # %if.then1126
	cmpl	$3, -56(%rbp)
	jle	.LBB79_149
# %bb.148:                              # %if.then1129
	xorl	%eax, %eax
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	movl	$0, 56(%rsp)
	callq	FastSubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
	jmp	.LBB79_150
.LBB79_149:                             # %if.else1131
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB79_150:                             # %if.end1133
	movl	$0, -64(%rbp)
.LBB79_151:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_153 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_161
# %bb.152:                              # %for.body1138
                                        #   in Loop: Header=BB79_151 Depth=1
	movl	$0, -72(%rbp)
.LBB79_153:                             # %for.cond1139
                                        #   Parent Loop BB79_151 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_159
# %bb.154:                              # %for.body1143
                                        #   in Loop: Header=BB79_153 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB79_156
# %bb.155:                              # %if.then1146
                                        #   in Loop: Header=BB79_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_mincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB79_157
.LBB79_156:                             # %if.else1183
                                        #   in Loop: Header=BB79_153 Depth=2
	movswl	-60(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 4(%rcx)
	movswl	-58(%rbp), %eax
	movq	all_bwmincost, %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	sarl	$2, %edx
	addl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	sarl	$2, %edx
	addl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 8(%rcx)
.LBB79_157:                             # %if.end1220
                                        #   in Loop: Header=BB79_153 Depth=2
	jmp	.LBB79_158
.LBB79_158:                             # %for.inc1221
                                        #   in Loop: Header=BB79_153 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB79_153
.LBB79_159:                             # %for.end1223
                                        #   in Loop: Header=BB79_151 Depth=1
	jmp	.LBB79_160
.LBB79_160:                             # %for.inc1224
                                        #   in Loop: Header=BB79_151 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_151
.LBB79_161:                             # %for.end1226
	jmp	.LBB79_166
.LBB79_162:                             # %if.else1227
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_165
# %bb.163:                              # %land.lhs.true1230
	movq	input, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB79_165
# %bb.164:                              # %if.then1233
	movl	-144(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB79_165:                             # %if.end1234
	movw	-42(%rbp), %ax
	movl	-68(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %bx
	movw	-96(%rbp), %r10w
	movl	-84(%rbp), %r11d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%ax, %esi
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	movl	$9, 32(%rsp)
	movl	$9, 40(%rsp)
	movl	%r11d, 48(%rsp)
	callq	SubPelBlockMotionSearch
	movl	%eax, -84(%rbp)
.LBB79_166:                             # %if.end1236
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB79_174
# %bb.167:                              # %if.then1239
	cmpl	$1, -56(%rbp)
	jne	.LBB79_173
# %bb.168:                              # %land.lhs.true1242
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_170
# %bb.169:                              # %lor.lhs.false1246
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB79_173
.LBB79_170:                             # %if.then1250
	callq	FindSkipModeMotionVector
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	GetSkipCostMB
	vmovsd	.LCPI79_3(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI79_4(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -164(%rbp)
	vmulsd	-160(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-164(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -164(%rbp)
	movl	-164(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB79_172
# %bb.171:                              # %if.then1258
	movl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	(%rax), %ax
	movw	%ax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	2(%rax), %ax
	movw	%ax, -58(%rbp)
.LBB79_172:                             # %if.end1273
	jmp	.LBB79_173
.LBB79_173:                             # %if.end1274
	jmp	.LBB79_174
.LBB79_174:                             # %if.end1275
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB79_184
# %bb.175:                              # %if.then1278
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-48(%rbp), %eax
	movl	%eax, -192(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-52(%rbp), %eax
	movl	%eax, -196(%rbp)
	movl	$0, -64(%rbp)
.LBB79_176:                             # %for.cond1285
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_178 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_183
# %bb.177:                              # %for.body1289
                                        #   in Loop: Header=BB79_176 Depth=1
	movl	$0, -72(%rbp)
.LBB79_178:                             # %for.cond1290
                                        #   Parent Loop BB79_176 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_181
# %bb.179:                              # %for.body1294
                                        #   in Loop: Header=BB79_178 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-60(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-224(%rbp), %rcx
	movl	-192(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-196(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.180:                              # %for.inc1335
                                        #   in Loop: Header=BB79_178 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB79_178
.LBB79_181:                             # %for.end1337
                                        #   in Loop: Header=BB79_176 Depth=1
	jmp	.LBB79_182
.LBB79_182:                             # %for.inc1338
                                        #   in Loop: Header=BB79_176 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_176
.LBB79_183:                             # %for.end1340
	jmp	.LBB79_193
.LBB79_184:                             # %if.else1341
	movl	$0, -64(%rbp)
.LBB79_185:                             # %for.cond1342
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_187 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_192
# %bb.186:                              # %for.body1346
                                        #   in Loop: Header=BB79_185 Depth=1
	movl	$0, -72(%rbp)
.LBB79_187:                             # %for.cond1347
                                        #   Parent Loop BB79_185 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_190
# %bb.188:                              # %for.body1351
                                        #   in Loop: Header=BB79_187 Depth=2
	movw	-60(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movw	-58(%rbp), %ax
	movq	-120(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-42(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.189:                              # %for.inc1378
                                        #   in Loop: Header=BB79_187 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB79_187
.LBB79_190:                             # %for.end1380
                                        #   in Loop: Header=BB79_185 Depth=1
	jmp	.LBB79_191
.LBB79_191:                             # %for.inc1381
                                        #   in Loop: Header=BB79_185 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_185
.LBB79_192:                             # %for.end1383
	jmp	.LBB79_193
.LBB79_193:                             # %if.end1384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_229
# %bb.194:                              # %land.lhs.true1388
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB79_229
# %bb.195:                              # %land.lhs.true1391
	cmpl	$1, -56(%rbp)
	jne	.LBB79_229
# %bb.196:                              # %land.lhs.true1394
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB79_229
# %bb.197:                              # %if.then1398
	cmpl	$0, -68(%rbp)
	je	.LBB79_199
# %bb.198:                              # %cond.true1400
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB79_200
.LBB79_199:                             # %cond.false1401
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB79_200:                             # %cond.end1402
	xorl	%r8d, %r8d
	leaq	-168(%rbp), %rdi
	movq	%rax, -208(%rbp)
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
	movw	$0, -106(%rbp)
	movw	$0, -108(%rbp)
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %r8d
	movl	-48(%rbp), %r9d
	movl	-52(%rbp), %eax
	movl	-132(%rbp), %ebx
	movl	-140(%rbp), %r10d
	movl	$0, %ecx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	movl	%r10d, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -60(%rbp)
	movswl	-58(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -58(%rbp)
	movl	$0, -64(%rbp)
.LBB79_201:                             # %for.cond1418
                                        # =>This Inner Loop Header: Depth=1
	movl	-64(%rbp), %eax
	movq	input, %rcx
	cmpl	1260(%rcx), %eax
	jg	.LBB79_210
# %bb.202:                              # %for.body1421
                                        #   in Loop: Header=BB79_201 Depth=1
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB79_204
# %bb.203:                              # %if.then1424
                                        #   in Loop: Header=BB79_201 Depth=1
	xorl	%eax, %eax
	movq	-176(%rbp), %rcx
	movw	(%rcx), %cx
	movw	%cx, -106(%rbp)
	movq	-176(%rbp), %rcx
	movw	2(%rcx), %cx
	movw	%cx, -108(%rbp)
	movw	-168(%rbp), %cx
	movw	%cx, -146(%rbp)
	movw	-166(%rbp), %cx
	movw	%cx, -148(%rbp)
	movw	-76(%rbp), %cx
	movw	%cx, -88(%rbp)
	movw	-74(%rbp), %cx
	movw	%cx, -86(%rbp)
	movw	-60(%rbp), %cx
	movw	%cx, -76(%rbp)
	movw	-58(%rbp), %cx
	movw	%cx, -74(%rbp)
	movl	-68(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movw	%ax, -78(%rbp)
	jmp	.LBB79_208
.LBB79_204:                             # %if.else1433
                                        #   in Loop: Header=BB79_201 Depth=1
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movw	%ax, -146(%rbp)
	movq	-176(%rbp), %rax
	movw	2(%rax), %ax
	movw	%ax, -148(%rbp)
	movw	-168(%rbp), %ax
	movw	%ax, -106(%rbp)
	movw	-166(%rbp), %ax
	movw	%ax, -108(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB79_206
# %bb.205:                              # %if.then1440
                                        #   in Loop: Header=BB79_201 Depth=1
	movw	-76(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-74(%rbp), %ax
	movw	%ax, -86(%rbp)
	movw	-60(%rbp), %ax
	movw	%ax, -76(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -74(%rbp)
	jmp	.LBB79_207
.LBB79_206:                             # %if.else1441
                                        #   in Loop: Header=BB79_201 Depth=1
	movw	-60(%rbp), %ax
	movw	%ax, -88(%rbp)
	movw	-58(%rbp), %ax
	movw	%ax, -86(%rbp)
	movswl	-106(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-108(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movw	%ax, -74(%rbp)
.LBB79_207:                             # %if.end1450
                                        #   in Loop: Header=BB79_201 Depth=1
	movl	-68(%rbp), %eax
	movw	%ax, -78(%rbp)
.LBB79_208:                             # %if.end1452
                                        #   in Loop: Header=BB79_201 Depth=1
	movw	-42(%rbp), %si
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %eax
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movl	-64(%rbp), %r10d
	movw	-146(%rbp), %r11w
	movw	-148(%rbp), %r14w
	movw	-106(%rbp), %r15w
	movw	-108(%rbp), %r12w
	movq	input, %rcx
	movl	1264(%rcx), %ebx
	movl	-64(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movl	-136(%rbp), %r13d
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	movswl	%si, %esi
	movl	%eax, %ecx
	movl	%r10d, (%rsp)
	movswl	%r11w, %eax
	movl	%eax, 8(%rsp)
	movswl	%r14w, %eax
	movl	%eax, 16(%rsp)
	movswl	%r15w, %eax
	movl	%eax, 24(%rsp)
	movswl	%r12w, %eax
	movl	%eax, 32(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 40(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 48(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 56(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 64(%rsp)
	movl	%ebx, 72(%rsp)
	movl	%r13d, 80(%rsp)
	callq	FullPelBlockMotionBiPred
	movl	%eax, -136(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
# %bb.209:                              # %for.inc1456
                                        #   in Loop: Header=BB79_201 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_201
.LBB79_210:                             # %for.end1458
	movswl	-88(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -88(%rbp)
	movswl	-86(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -86(%rbp)
	movq	input, %rax
	cmpl	$0, 1268(%rax)
	je	.LBB79_214
# %bb.211:                              # %if.then1465
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_213
# %bb.212:                              # %if.then1468
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB79_213:                             # %if.end1469
	vmovsd	.LCPI79_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-106(%rbp), %ax
	movw	-108(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-88(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-86(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB79_215
.LBB79_214:                             # %if.else1473
	movswl	-76(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -76(%rbp)
	movswl	-74(%rbp), %eax
	shll	$2, %eax
	movw	%ax, -74(%rbp)
.LBB79_215:                             # %if.end1480
	movq	input, %rax
	cmpl	$2, 1268(%rax)
	jne	.LBB79_219
# %bb.216:                              # %if.then1484
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_218
# %bb.217:                              # %if.then1487
	movl	-144(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB79_218:                             # %if.end1488
	xorl	%edx, %edx
	vmovsd	.LCPI79_5(%rip), %xmm0  # xmm0 = mem[0],zero
	movswl	-78(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%eax, %edx
	movl	-124(%rbp), %ecx
	movl	-128(%rbp), %r8d
	movl	-56(%rbp), %r9d
	movw	-94(%rbp), %ax
	movw	-96(%rbp), %bx
	movl	-136(%rbp), %r10d
	vmulsd	-160(%rbp), %xmm0, %xmm0
	movabsq	$BlockMotionSearch.orig_pic, %rdi
	xorl	%esi, %esi
	cwtl
	movl	%eax, (%rsp)
	movswl	%bx, %eax
	movl	%eax, 8(%rsp)
	leaq	-60(%rbp), %rax
	movq	%rax, 16(%rsp)
	leaq	-58(%rbp), %rax
	movq	%rax, 24(%rsp)
	leaq	-76(%rbp), %rax
	movq	%rax, 32(%rsp)
	leaq	-74(%rbp), %rax
	movq	%rax, 40(%rsp)
	movl	$9, 48(%rsp)
	movl	$9, 56(%rsp)
	movl	%r10d, 64(%rsp)
	callq	SubPelBlockSearchBiPred
	movl	%eax, -136(%rbp)
	jmp	.LBB79_220
.LBB79_219:                             # %if.else1495
	movw	-88(%rbp), %ax
	movw	%ax, -60(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -58(%rbp)
.LBB79_220:                             # %if.end1496
	movl	$0, -64(%rbp)
.LBB79_221:                             # %for.cond1497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_223 Depth 2
	movl	-64(%rbp), %eax
	movl	-132(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_228
# %bb.222:                              # %for.body1501
                                        #   in Loop: Header=BB79_221 Depth=1
	movl	$0, -72(%rbp)
.LBB79_223:                             # %for.cond1502
                                        #   Parent Loop BB79_221 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-72(%rbp), %eax
	movl	-140(%rbp), %ecx
	sarl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_226
# %bb.224:                              # %for.body1506
                                        #   in Loop: Header=BB79_223 Depth=2
	xorl	%eax, %eax
	movw	-60(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movw	-58(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-78(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movw	-76(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %esi
	addl	-64(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-72(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswl	-78(%rbp), %esi
	cmpl	$0, %esi
	movl	$1, %esi
	movl	$0, %edi
	cmovel	%esi, %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-56(%rbp), %rdi
	movq	(%rdx,%rdi,8), %rdx
	movw	%cx, (%rdx)
	movw	-74(%rbp), %cx
	movq	-208(%rbp), %rdx
	movl	-48(%rbp), %edi
	addl	-64(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movl	-52(%rbp), %edi
	addl	-72(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rdx,%rdi,8), %rdx
	movswl	-78(%rbp), %edi
	cmpl	$0, %edi
	cmovel	%esi, %eax
	cltq
	movq	(%rdx,%rax,8), %rax
	movq	(%rax), %rax
	movslq	-56(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	%cx, 2(%rax)
# %bb.225:                              # %for.inc1563
                                        #   in Loop: Header=BB79_223 Depth=2
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB79_223
.LBB79_226:                             # %for.end1565
                                        #   in Loop: Header=BB79_221 Depth=1
	jmp	.LBB79_227
.LBB79_227:                             # %for.inc1566
                                        #   in Loop: Header=BB79_221 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB79_221
.LBB79_228:                             # %for.end1568
	jmp	.LBB79_229
.LBB79_229:                             # %if.end1569
	leaq	-256(%rbp), %rdi
	callq	ftime
	imulq	$1000, -256(%rbp), %rax # imm = 0x3E8
	movzwl	-248(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -240(%rbp), %rcx # imm = 0x3E8
	movzwl	-232(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -188(%rbp)
	movl	-188(%rbp), %eax
	addl	me_tot_time, %eax
	movl	%eax, me_tot_time
	movl	-188(%rbp), %eax
	addl	me_time, %eax
	movl	%eax, me_time
	movl	-84(%rbp), %ebx
	cmpl	$197035572, -212(%rbp)  # imm = 0xBBE8634
	jne	.LBB79_231
.LBB79_230:
	movl	%ebx, %eax
	addq	$312, %rsp              # imm = 0x138
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_231:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_230
.Lfunc_end79:
	.size	BlockMotionSearch.54, .Lfunc_end79-BlockMotionSearch.54
	.cfi_endproc
                                        # -- End function
	.globl	PartitionMotionSearch.55 # -- Begin function PartitionMotionSearch.55
	.p2align	4, 0x90
	.type	PartitionMotionSearch.55,@function
PartitionMotionSearch.55:               # @PartitionMotionSearch.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1512094299, -76(%rbp)  # imm = 0x5A20BA5B
	movl	%edi, -8(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	cmpl	$4, -8(%rbp)
	jge	.LBB80_2
# %bb.1:                                # %cond.true
	movl	-8(%rbp), %eax
	jmp	.LBB80_3
.LBB80_2:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB80_3
.LBB80_3:                               # %cond.end
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	input, %rax
	movslq	-8(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB80_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB80_6
# %bb.5:                                # %if.then20
	movl	$4, -52(%rbp)
	jmp	.LBB80_7
.LBB80_6:                               # %if.else
	movl	$2, -52(%rbp)
.LBB80_7:                               # %if.end
	jmp	.LBB80_9
.LBB80_8:                               # %if.else21
	movl	$0, -52(%rbp)
.LBB80_9:                               # %if.end22
	movl	-64(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB80_10:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_12 Depth 2
                                        #       Child Loop BB80_29 Depth 3
                                        #         Child Loop BB80_31 Depth 4
                                        #           Child Loop BB80_33 Depth 5
                                        #             Child Loop BB80_35 Depth 6
	movl	-12(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB80_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB80_10 Depth=1
	movw	$0, -2(%rbp)
.LBB80_12:                              # %for.cond27
                                        #   Parent Loop BB80_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_29 Depth 3
                                        #         Child Loop BB80_31 Depth 4
                                        #           Child Loop BB80_33 Depth 5
                                        #             Child Loop BB80_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB80_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB80_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB80_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB80_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB80_28
.LBB80_15:                              # %if.else38
                                        #   in Loop: Header=BB80_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB80_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB80_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB80_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB80_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB80_19
.LBB80_18:                              # %cond.false49
                                        #   in Loop: Header=BB80_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB80_19
.LBB80_19:                              # %cond.end50
                                        #   in Loop: Header=BB80_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	jmp	.LBB80_27
.LBB80_20:                              # %if.else53
                                        #   in Loop: Header=BB80_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB80_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB80_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB80_23
.LBB80_22:                              # %cond.false60
                                        #   in Loop: Header=BB80_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB80_23
.LBB80_23:                              # %cond.end61
                                        #   in Loop: Header=BB80_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-8(%rbp), %edx
	jge	.LBB80_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB80_12 Depth=2
	movl	$2, %edx
	jmp	.LBB80_26
.LBB80_25:                              # %cond.false67
                                        #   in Loop: Header=BB80_12 Depth=2
	movl	-8(%rbp), %edx
.LBB80_26:                              # %cond.end68
                                        #   in Loop: Header=BB80_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
.LBB80_27:                              # %if.end71
                                        #   in Loop: Header=BB80_12 Depth=2
	jmp	.LBB80_28
.LBB80_28:                              # %if.end72
                                        #   in Loop: Header=BB80_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB80_29:                              # %for.cond89
                                        #   Parent Loop BB80_10 Depth=1
                                        #     Parent Loop BB80_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB80_31 Depth 4
                                        #           Child Loop BB80_33 Depth 5
                                        #             Child Loop BB80_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-68(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB80_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB80_31:                              # %for.cond103
                                        #   Parent Loop BB80_10 Depth=1
                                        #     Parent Loop BB80_12 Depth=2
                                        #       Parent Loop BB80_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB80_33 Depth 5
                                        #             Child Loop BB80_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB80_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -48(%rbp)
	movw	-2(%rbp), %ax
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	shll	$2, %edx
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	movl	-8(%rbp), %r8d
	movl	-44(%rbp), %r9d
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -24(%rbp)
.LBB80_33:                              # %for.cond123
                                        #   Parent Loop BB80_10 Depth=1
                                        #     Parent Loop BB80_12 Depth=2
                                        #       Parent Loop BB80_29 Depth=3
                                        #         Parent Loop BB80_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB80_35 Depth 6
	movl	-24(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB80_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB80_33 Depth=5
	movl	$0, -28(%rbp)
.LBB80_35:                              # %for.cond127
                                        #   Parent Loop BB80_10 Depth=1
                                        #     Parent Loop BB80_12 Depth=2
                                        #       Parent Loop BB80_29 Depth=3
                                        #         Parent Loop BB80_31 Depth=4
                                        #           Parent Loop BB80_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-28(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB80_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB80_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-104(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB80_35 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB80_35
.LBB80_38:                              # %for.end
                                        #   in Loop: Header=BB80_33 Depth=5
	jmp	.LBB80_39
.LBB80_39:                              # %for.inc174
                                        #   in Loop: Header=BB80_33 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB80_33
.LBB80_40:                              # %for.end176
                                        #   in Loop: Header=BB80_31 Depth=4
	jmp	.LBB80_41
.LBB80_41:                              # %for.inc177
                                        #   in Loop: Header=BB80_31 Depth=4
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_31
.LBB80_42:                              # %for.end179
                                        #   in Loop: Header=BB80_29 Depth=3
	jmp	.LBB80_43
.LBB80_43:                              # %for.inc180
                                        #   in Loop: Header=BB80_29 Depth=3
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_29
.LBB80_44:                              # %for.end182
                                        #   in Loop: Header=BB80_12 Depth=2
	jmp	.LBB80_45
.LBB80_45:                              # %for.inc183
                                        #   in Loop: Header=BB80_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB80_12
.LBB80_46:                              # %for.end185
                                        #   in Loop: Header=BB80_10 Depth=1
	jmp	.LBB80_47
.LBB80_47:                              # %for.inc186
                                        #   in Loop: Header=BB80_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_10
.LBB80_48:                              # %for.end188
	cmpl	$1512094299, -76(%rbp)  # imm = 0x5A20BA5B
	jne	.LBB80_50
.LBB80_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_49
.Lfunc_end80:
	.size	PartitionMotionSearch.55, .Lfunc_end80-PartitionMotionSearch.55
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.56 # -- Begin function InitializeFastFullIntegerSearch.56
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.56,@function
InitializeFastFullIntegerSearch.56:     # @InitializeFastFullIntegerSearch.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2057808316, -28(%rbp)  # imm = 0x7AA7A9BC
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB81_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB81_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_7 Depth 2
                                        #       Child Loop BB81_11 Depth 3
                                        #         Child Loop BB81_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB81_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB81_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB81_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_6:                               # %if.end12
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	$0, -8(%rbp)
.LBB81_7:                               # %for.cond13
                                        #   Parent Loop BB81_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB81_11 Depth 3
                                        #         Child Loop BB81_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB81_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB81_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_10:                              # %if.end26
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	$1, -12(%rbp)
.LBB81_11:                              # %for.cond27
                                        #   Parent Loop BB81_3 Depth=1
                                        #     Parent Loop BB81_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB81_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB81_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB81_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB81_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_14:                              # %if.end41
                                        #   in Loop: Header=BB81_11 Depth=3
	movl	$0, -20(%rbp)
.LBB81_15:                              # %for.cond42
                                        #   Parent Loop BB81_3 Depth=1
                                        #     Parent Loop BB81_7 Depth=2
                                        #       Parent Loop BB81_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB81_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB81_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB81_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB81_18:                              # %if.end60
                                        #   in Loop: Header=BB81_15 Depth=4
	jmp	.LBB81_19
.LBB81_19:                              # %for.inc
                                        #   in Loop: Header=BB81_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB81_15
.LBB81_20:                              # %for.end
                                        #   in Loop: Header=BB81_11 Depth=3
	jmp	.LBB81_21
.LBB81_21:                              # %for.inc61
                                        #   in Loop: Header=BB81_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_11
.LBB81_22:                              # %for.end63
                                        #   in Loop: Header=BB81_7 Depth=2
	jmp	.LBB81_23
.LBB81_23:                              # %for.inc64
                                        #   in Loop: Header=BB81_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_7
.LBB81_24:                              # %for.end66
                                        #   in Loop: Header=BB81_3 Depth=1
	jmp	.LBB81_25
.LBB81_25:                              # %for.inc67
                                        #   in Loop: Header=BB81_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_3
.LBB81_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB81_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB81_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB81_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB81_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB81_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB81_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB81_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB81_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB81_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB81_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB81_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB81_40:                              # %if.end109
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB81_42:                              # %if.end120
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB81_44:                              # %if.end131
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB81_46:                              # %if.end142
                                        #   in Loop: Header=BB81_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB81_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB81_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB81_48:                              # %if.end153
                                        #   in Loop: Header=BB81_37 Depth=1
	jmp	.LBB81_49
.LBB81_49:                              # %for.inc154
                                        #   in Loop: Header=BB81_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_37
.LBB81_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB81_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB81_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB81_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	$0, -8(%rbp)
.LBB81_54:                              # %for.cond164
                                        #   Parent Loop BB81_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB81_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB81_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB81_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_54
.LBB81_57:                              # %for.end175
                                        #   in Loop: Header=BB81_52 Depth=1
	jmp	.LBB81_58
.LBB81_58:                              # %for.inc176
                                        #   in Loop: Header=BB81_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_52
.LBB81_59:                              # %for.end178
	jmp	.LBB81_69
.LBB81_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB81_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB81_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB81_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB81_63:                              # %for.cond191
                                        #   Parent Loop BB81_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB81_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB81_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB81_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_63
.LBB81_66:                              # %for.end202
                                        #   in Loop: Header=BB81_61 Depth=1
	jmp	.LBB81_67
.LBB81_67:                              # %for.inc203
                                        #   in Loop: Header=BB81_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_61
.LBB81_68:                              # %for.end205
	jmp	.LBB81_69
.LBB81_69:                              # %if.end206
	cmpl	$2057808316, -28(%rbp)  # imm = 0x7AA7A9BC
	jne	.LBB81_71
.LBB81_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_70
.Lfunc_end81:
	.size	InitializeFastFullIntegerSearch.56, .Lfunc_end81-InitializeFastFullIntegerSearch.56
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.57 # -- Begin function SetupFastFullPelSearch.57
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.57,@function
SetupFastFullPelSearch.57:              # @SetupFastFullPelSearch.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$1955161060, -140(%rbp) # imm = 0x748963E4
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB82_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB82_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB82_4
.LBB82_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB82_4
.LBB82_4:                               # %cond.end
	movl	%ecx, -156(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB82_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB82_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB82_10
.LBB82_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB82_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB82_9:                               # %land.end
.LBB82_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -144(%rbp)
	movl	-8(%rbp), %eax
	addl	-156(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -144(%rbp)
	je	.LBB82_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB82_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB82_14
.LBB82_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB82_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -116(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -132(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -136(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB82_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB82_18
.LBB82_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB82_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB82_24
.LBB82_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB82_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB82_23
.LBB82_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB82_23:                              # %cond.end82
.LBB82_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB82_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB82_27
.LBB82_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB82_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB82_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB82_33
.LBB82_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB82_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB82_32
.LBB82_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB82_32:                              # %cond.end122
.LBB82_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB82_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -60(%rbp)
.LBB82_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_37 Depth 2
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB82_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -68(%rbp)
.LBB82_37:                              # %for.cond155
                                        #   Parent Loop BB82_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB82_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB82_37 Depth=2
	movq	imgY_org, %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB82_37 Depth=2
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB82_37
.LBB82_40:                              # %for.end
                                        #   in Loop: Header=BB82_35 Depth=1
	jmp	.LBB82_41
.LBB82_41:                              # %for.inc165
                                        #   in Loop: Header=BB82_35 Depth=1
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_35
.LBB82_42:                              # %for.end167
	movl	-80(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB82_47
# %bb.43:                               # %land.lhs.true170
	movl	-80(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB82_47
# %bb.44:                               # %land.lhs.true174
	movl	-76(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB82_47
# %bb.45:                               # %land.lhs.true177
	movl	-76(%rbp), %eax
	movl	-116(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB82_47
# %bb.46:                               # %if.then181
	movl	$0, -112(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB82_48
.LBB82_47:                              # %if.else182
	movl	$1, -112(%rbp)
.LBB82_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB82_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	$0, -28(%rbp)
.LBB82_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB82_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB82_50 Depth=1
	movl	-148(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB82_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB82_50 Depth=1
	movl	-152(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB82_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB82_57
.LBB82_54:                              # %if.end209
                                        #   in Loop: Header=BB82_50 Depth=1
	jmp	.LBB82_55
.LBB82_55:                              # %for.inc210
                                        #   in Loop: Header=BB82_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB82_50
.LBB82_56:                              # %for.end212.loopexit
	jmp	.LBB82_57
.LBB82_57:                              # %for.end212
	jmp	.LBB82_58
.LBB82_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB82_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_69 Depth 2
                                        #       Child Loop BB82_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB82_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB82_59 Depth=1
	movl	-76(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-80(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB82_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB82_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB82_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB82_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jg	.LBB82_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB82_59 Depth=1
	cmpl	$0, -92(%rbp)
	jl	.LBB82_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB82_59 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB82_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB82_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB82_67
.LBB82_66:                              # %if.else238
                                        #   in Loop: Header=BB82_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB82_67:                              # %if.end239
                                        #   in Loop: Header=BB82_59 Depth=1
	jmp	.LBB82_68
.LBB82_68:                              # %if.end240
                                        #   in Loop: Header=BB82_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -88(%rbp)
.LBB82_69:                              # %for.cond242
                                        #   Parent Loop BB82_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_71 Depth 3
	cmpl	$4, -88(%rbp)
	jge	.LBB82_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB82_69 Depth=2
	movl	$0, -56(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -60(%rbp)
.LBB82_71:                              # %for.cond246
                                        #   Parent Loop BB82_59 Depth=1
                                        #     Parent Loop BB82_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -60(%rbp)
	jge	.LBB82_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB82_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-92(%rbp), %edx
	movl	-136(%rbp), %ecx
	movl	-132(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB82_71 Depth=3
	movl	-60(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB82_71
.LBB82_74:                              # %for.end381
                                        #   in Loop: Header=BB82_69 Depth=2
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-64(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -64(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB82_69 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB82_69
.LBB82_76:                              # %for.end404
                                        #   in Loop: Header=BB82_59 Depth=1
	jmp	.LBB82_77
.LBB82_77:                              # %for.inc405
                                        #   in Loop: Header=BB82_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB82_59
.LBB82_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$1955161060, -140(%rbp) # imm = 0x748963E4
	jne	.LBB82_80
.LBB82_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_79
.Lfunc_end82:
	.size	SetupFastFullPelSearch.57, .Lfunc_end82-SetupFastFullPelSearch.57
	.cfi_endproc
                                        # -- End function
	.globl	FindSkipModeMotionVector.58 # -- Begin function FindSkipModeMotionVector.58
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.58,@function
FindSkipModeMotionVector.58:            # @FindSkipModeMotionVector.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1327372515, -56(%rbp)  # imm = 0x4F1E18E3
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB83_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB83_4
# %bb.3:                                # %if.then24
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
.LBB83_4:                               # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB83_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_7
# %bb.6:                                # %if.then34
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB83_7:                               # %if.end36
	jmp	.LBB83_8
.LBB83_8:                               # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB83_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB83_12
# %bb.11:                               # %if.then69
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
.LBB83_12:                              # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB83_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB83_15
# %bb.14:                               # %if.then82
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB83_15:                              # %if.end85
	jmp	.LBB83_16
.LBB83_16:                              # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB83_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB83_22
.LBB83_18:                              # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -24(%rbp)
	jne	.LBB83_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB83_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -20(%rbp)
	sete	%al
.LBB83_21:                              # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB83_22:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB83_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB83_28
.LBB83_24:                              # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jne	.LBB83_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB83_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB83_27:                              # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB83_28:                              # %cond.end130
	movl	%ecx, -60(%rbp)
	cmpl	$0, -60(%rbp)
	jne	.LBB83_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -52(%rbp)
	je	.LBB83_39
.LBB83_30:                              # %if.then134
	movl	$0, -8(%rbp)
.LBB83_31:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB83_31 Depth=1
	movl	$0, -4(%rbp)
.LBB83_33:                              # %for.cond137
                                        #   Parent Loop BB83_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB83_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB83_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_33
.LBB83_36:                              # %for.end
                                        #   in Loop: Header=BB83_31 Depth=1
	jmp	.LBB83_37
.LBB83_37:                              # %for.inc157
                                        #   in Loop: Header=BB83_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_31
.LBB83_38:                              # %for.end159
	jmp	.LBB83_48
.LBB83_39:                              # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB83_40:                              # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB83_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB83_40 Depth=1
	movl	$0, -4(%rbp)
.LBB83_42:                              # %for.cond166
                                        #   Parent Loop BB83_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB83_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB83_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB83_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_42
.LBB83_45:                              # %for.end190
                                        #   in Loop: Header=BB83_40 Depth=1
	jmp	.LBB83_46
.LBB83_46:                              # %for.inc191
                                        #   in Loop: Header=BB83_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_40
.LBB83_47:                              # %for.end193
	jmp	.LBB83_48
.LBB83_48:                              # %if.end194
	cmpl	$1327372515, -56(%rbp)  # imm = 0x4F1E18E3
	jne	.LBB83_50
.LBB83_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_50:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_49
.Lfunc_end83:
	.size	FindSkipModeMotionVector.58, .Lfunc_end83-FindSkipModeMotionVector.58
	.cfi_endproc
                                        # -- End function
	.globl	ClearFastFullIntegerSearch.59 # -- Begin function ClearFastFullIntegerSearch.59
	.p2align	4, 0x90
	.type	ClearFastFullIntegerSearch.59,@function
ClearFastFullIntegerSearch.59:          # @ClearFastFullIntegerSearch.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$954743496, -20(%rbp)   # imm = 0x38E83AC8
	movl	$0, -4(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
                                        #       Child Loop BB84_5 Depth 3
                                        #         Child Loop BB84_7 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB84_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -8(%rbp)
.LBB84_3:                               # %for.cond1
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_5 Depth 3
                                        #         Child Loop BB84_7 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB84_14
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	$1, -12(%rbp)
.LBB84_5:                               # %for.cond4
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_7 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB84_12
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB84_5 Depth=3
	movl	$0, -16(%rbp)
.LBB84_7:                               # %for.cond7
                                        #   Parent Loop BB84_1 Depth=1
                                        #     Parent Loop BB84_3 Depth=2
                                        #       Parent Loop BB84_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -16(%rbp)
	jge	.LBB84_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB84_7 Depth=4
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB84_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_7
.LBB84_10:                              # %for.end
                                        #   in Loop: Header=BB84_5 Depth=3
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.11:                               # %for.inc22
                                        #   in Loop: Header=BB84_5 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_5
.LBB84_12:                              # %for.end24
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.13:                               # %for.inc29
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_3
.LBB84_14:                              # %for.end31
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	BlockSAD, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.15:                               # %for.inc34
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_1
.LBB84_16:                              # %for.end36
	movq	BlockSAD, %rdi
	callq	free
	movl	$0, -4(%rbp)
.LBB84_17:                              # %for.cond37
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB84_20
# %bb.18:                               # %for.body39
                                        #   in Loop: Header=BB84_17 Depth=1
	movq	search_setup_done, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_x, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	search_center_y, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	pos_00, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	max_search_range, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.19:                               # %for.inc50
                                        #   in Loop: Header=BB84_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_17
.LBB84_20:                              # %for.end52
	movq	search_setup_done, %rdi
	callq	free
	movq	search_center_x, %rdi
	callq	free
	movq	search_center_y, %rdi
	callq	free
	movq	pos_00, %rdi
	callq	free
	movq	max_search_range, %rdi
	callq	free
	cmpl	$954743496, -20(%rbp)   # imm = 0x38E83AC8
	jne	.LBB84_22
.LBB84_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_21
.Lfunc_end84:
	.size	ClearFastFullIntegerSearch.59, .Lfunc_end84-ClearFastFullIntegerSearch.59
	.cfi_endproc
                                        # -- End function
	.globl	SATD8X8.60              # -- Begin function SATD8X8.60
	.p2align	4, 0x90
	.type	SATD8X8.60,@function
SATD8X8.60:                             # @SATD8X8.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$808, %rsp              # imm = 0x328
	.cfi_offset %rbx, -24
	movl	$1379557279, -36(%rbp)  # imm = 0x523A5F9F
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -28(%rbp)
	cmpl	$0, -32(%rbp)
	je	.LBB85_21
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB85_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB85_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB85_2 Depth=1
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$3, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %ecx
	movq	-24(%rbp), %rax
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	addl	(%rax,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	leaq	-304(%rbp), %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 12(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$4, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 16(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$5, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 20(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$2, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$6, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 24(%rsi)
	movq	-24(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$3, %edx
	addl	$3, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	-24(%rbp), %rdx
	movl	-16(%rbp), %esi
	shll	$3, %esi
	addl	$7, %esi
	movslq	%esi, %rsi
	subl	(%rdx,%rsi,4), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 28(%rsi)
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	movq	%rax, %rsi
	addq	%rcx, %rsi
	addl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	leaq	-560(%rbp), %rcx
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	8(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	4(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	24(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	20(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	subl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	movl	%edx, 28(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, (%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	4(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 4(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 8(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	8(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	12(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 12(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 16(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	16(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	subl	20(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 20(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addl	28(%rdi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movl	%edx, 24(%rdi)
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movl	24(%rsi), %edx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rcx
	subl	28(%rcx), %edx
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	%edx, 28(%rax)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB85_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_2
.LBB85_5:                               # %for.end
	movl	$0, -12(%rbp)
.LBB85_6:                               # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -12(%rbp)
	jge	.LBB85_9
# %bb.7:                                # %for.body252
                                        #   in Loop: Header=BB85_6 Depth=1
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -784(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -752(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -720(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-304(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-176(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -688(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-144(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -624(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-208(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-80(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -560(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -528(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-816(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-752(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -496(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-784(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-720(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -464(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -432(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-688(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-624(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-656(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-592(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -304(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-560(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-528(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-496(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-464(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -208(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-432(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-400(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	addl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
	movslq	-12(%rbp), %rax
	movl	-368(%rbp,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	subl	-336(%rbp,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -80(%rbp,%rcx,4)
# %bb.8:                                # %for.inc493
                                        #   in Loop: Header=BB85_6 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_6
.LBB85_9:                               # %for.end495
	movl	$0, -16(%rbp)
.LBB85_10:                              # %for.cond496
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_12 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB85_20
# %bb.11:                               # %for.body498
                                        #   in Loop: Header=BB85_10 Depth=1
	movl	$0, -12(%rbp)
.LBB85_12:                              # %for.cond499
                                        #   Parent Loop BB85_10 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB85_18
# %bb.13:                               # %for.body501
                                        #   in Loop: Header=BB85_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	jge	.LBB85_15
# %bb.14:                               # %cond.true
                                        #   in Loop: Header=BB85_12 Depth=2
	xorl	%eax, %eax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	jmp	.LBB85_16
.LBB85_15:                              # %cond.false
                                        #   in Loop: Header=BB85_12 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$5, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
.LBB85_16:                              # %cond.end
                                        #   in Loop: Header=BB85_12 Depth=2
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.17:                               # %for.inc517
                                        #   in Loop: Header=BB85_12 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_12
.LBB85_18:                              # %for.end519
                                        #   in Loop: Header=BB85_10 Depth=1
	jmp	.LBB85_19
.LBB85_19:                              # %for.inc520
                                        #   in Loop: Header=BB85_10 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_10
.LBB85_20:                              # %for.end522
	movl	-28(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB85_26
.LBB85_21:                              # %if.else
	movl	$0, -12(%rbp)
.LBB85_22:                              # %for.cond524
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -12(%rbp)
	jge	.LBB85_25
# %bb.23:                               # %for.body526
                                        #   in Loop: Header=BB85_22 Depth=1
	movq	byte_abs, %rax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.24:                               # %for.inc532
                                        #   in Loop: Header=BB85_22 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_22
.LBB85_25:                              # %for.end534
	jmp	.LBB85_26
.LBB85_26:                              # %if.end
	movl	-28(%rbp), %ebx
	cmpl	$1379557279, -36(%rbp)  # imm = 0x523A5F9F
	jne	.LBB85_28
.LBB85_27:
	movl	%ebx, %eax
	addq	$808, %rsp              # imm = 0x328
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_27
.Lfunc_end85:
	.size	SATD8X8.60, .Lfunc_end85-SATD8X8.60
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.61   # -- Begin function Get_Direct_Cost8x8.61
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.61,@function
Get_Direct_Cost8x8.61:                  # @Get_Direct_Cost8x8.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1017537120, -60(%rbp)  # imm = 0x3CA66260
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -48(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
                                        #       Child Loop BB86_7 Depth 3
                                        #         Child Loop BB86_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB86_3:                               # %for.cond3
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_7 Depth 3
                                        #         Child Loop BB86_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB86_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB86_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB86_30
.LBB86_6:                               # %if.end
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-36(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -28(%rbp)
.LBB86_7:                               # %for.cond34
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB86_7 Depth=3
	movl	$0, -16(%rbp)
.LBB86_9:                               # %for.cond38
                                        #   Parent Loop BB86_1 Depth=1
                                        #     Parent Loop BB86_3 Depth=2
                                        #       Parent Loop BB86_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB86_9 Depth=4
	movq	imgY_org, %rax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB86_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_9
.LBB86_12:                              # %for.end
                                        #   in Loop: Header=BB86_7 Depth=3
	jmp	.LBB86_13
.LBB86_13:                              # %for.inc67
                                        #   in Loop: Header=BB86_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_7
.LBB86_14:                              # %for.end69
                                        #   in Loop: Header=BB86_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_3
.LBB86_16:                              # %for.end73
                                        #   in Loop: Header=BB86_1 Depth=1
	jmp	.LBB86_17
.LBB86_17:                              # %for.inc74
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB86_1
.LBB86_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB86_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB86_29
# %bb.20:                               # %if.then79
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB86_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB86_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB86_21 Depth=1
	movl	$0, -16(%rbp)
.LBB86_23:                              # %for.cond84
                                        #   Parent Loop BB86_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB86_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB86_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB86_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_23
.LBB86_26:                              # %for.end97
                                        #   in Loop: Header=BB86_21 Depth=1
	jmp	.LBB86_27
.LBB86_27:                              # %for.inc98
                                        #   in Loop: Header=BB86_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_21
.LBB86_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB86_29:                              # %if.end105
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB86_30:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$1017537120, -60(%rbp)  # imm = 0x3CA66260
	jne	.LBB86_32
.LBB86_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_31
.Lfunc_end86:
	.size	Get_Direct_Cost8x8.61, .Lfunc_end86-Get_Direct_Cost8x8.61
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.62   # -- Begin function Get_Direct_Cost8x8.62
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.62,@function
Get_Direct_Cost8x8.62:                  # @Get_Direct_Cost8x8.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$1292776070, -60(%rbp)  # imm = 0x4D0E3286
	movl	%edi, -56(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -48(%rbp)
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-56(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_3 Depth 2
                                        #       Child Loop BB87_7 Depth 3
                                        #         Child Loop BB87_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB87_3:                               # %for.cond3
                                        #   Parent Loop BB87_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_7 Depth 3
                                        #         Child Loop BB87_9 Depth 4
	movl	-28(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB87_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB87_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -52(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB87_30
.LBB87_6:                               # %if.end
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-28(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
.LBB87_7:                               # %for.cond34
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB87_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB87_7 Depth=3
	movl	$0, -16(%rbp)
.LBB87_9:                               # %for.cond38
                                        #   Parent Loop BB87_1 Depth=1
                                        #     Parent Loop BB87_3 Depth=2
                                        #       Parent Loop BB87_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB87_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB87_9 Depth=4
	movq	imgY_org, %rax
	movl	-36(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-656(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-28(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB87_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_9
.LBB87_12:                              # %for.end
                                        #   in Loop: Header=BB87_7 Depth=3
	jmp	.LBB87_13
.LBB87_13:                              # %for.inc67
                                        #   in Loop: Header=BB87_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_7
.LBB87_14:                              # %for.end69
                                        #   in Loop: Header=BB87_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB87_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_3
.LBB87_16:                              # %for.end73
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_17
.LBB87_17:                              # %for.inc74
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1
.LBB87_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB87_29
# %bb.20:                               # %if.then79
	movl	$0, -20(%rbp)
	movl	$0, -12(%rbp)
.LBB87_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB87_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB87_21 Depth=1
	movl	$0, -16(%rbp)
.LBB87_23:                              # %for.cond84
                                        #   Parent Loop BB87_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB87_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB87_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-656(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	movl	%eax, -400(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB87_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_23
.LBB87_26:                              # %for.end97
                                        #   in Loop: Header=BB87_21 Depth=1
	jmp	.LBB87_27
.LBB87_27:                              # %for.inc98
                                        #   in Loop: Header=BB87_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_21
.LBB87_28:                              # %for.end100
	leaq	-400(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB87_29:                              # %if.end105
	movl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB87_30:                              # %return
	movl	-52(%rbp), %ebx
	cmpl	$1292776070, -60(%rbp)  # imm = 0x4D0E3286
	jne	.LBB87_32
.LBB87_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_31
.Lfunc_end87:
	.size	Get_Direct_Cost8x8.62, .Lfunc_end87-Get_Direct_Cost8x8.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionBiPred.63
.LCPI88_0:
	.quad	4602678819172646912     # double 0.5
.LCPI88_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionBiPred.63
	.p2align	4, 0x90
	.type	FullPelBlockMotionBiPred.63,@function
FullPelBlockMotionBiPred.63:            # @FullPelBlockMotionBiPred.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$216, %rsp
	.cfi_offset %rbx, -24
	movl	96(%rbp), %eax
	movl	88(%rbp), %eax
	movq	80(%rbp), %rax
	movq	72(%rbp), %rax
	movq	64(%rbp), %rax
	movq	56(%rbp), %rax
	movw	48(%rbp), %ax
	movw	40(%rbp), %ax
	movw	32(%rbp), %ax
	movw	24(%rbp), %ax
	movl	16(%rbp), %eax
	movl	$876525584, -172(%rbp)  # imm = 0x343EB810
	movq	%rdi, -200(%rbp)
	movw	%si, -22(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -116(%rbp)
	movl	%r8d, -112(%rbp)
	movl	%r9d, -148(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB88_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB88_4
.LBB88_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB88_4
.LBB88_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -208(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB88_6
# %bb.5:                                # %cond.true9
	movl	-40(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB88_7
.LBB88_6:                               # %cond.false11
	movl	-40(%rbp), %eax
.LBB88_7:                               # %cond.end12
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI88_1(%rip), %xmm1  # xmm1 = mem[0],zero
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6432(%rax), %rax
	movq	%rax, -216(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-40(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -108(%rbp)
	movl	$0, -124(%rbp)
	movl	88(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	88(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -180(%rbp)
	vmulsd	-224(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movslq	-148(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -144(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	32(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -184(%rbp)
	movl	-116(%rbp), %eax
	shll	$2, %eax
	movswl	40(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-112(%rbp), %eax
	shll	$2, %eax
	movswl	48(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -192(%rbp)
	movl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -94(%rbp)
	movl	-112(%rbp), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -96(%rbp)
	movl	-116(%rbp), %eax
	movq	72(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -46(%rbp)
	movl	-112(%rbp), %eax
	movq	80(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -44(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 196(%rax)
	seta	%al
	andb	$1, %al
	movzbl	%al, %eax
	movw	%ax, -42(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_12
# %bb.8:                                # %cond.true69
	cmpl	$0, -84(%rbp)
	jne	.LBB88_10
# %bb.9:                                # %cond.true72
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB88_11
.LBB88_10:                              # %cond.false79
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB88_11:                              # %cond.end87
	jmp	.LBB88_13
.LBB88_12:                              # %cond.false89
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB88_13:                              # %cond.end91
	movw	%ax, -50(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_18
# %bb.14:                               # %cond.true96
	cmpl	$0, -84(%rbp)
	jne	.LBB88_16
# %bb.15:                               # %cond.true99
	movq	wbp_weight, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB88_17
.LBB88_16:                              # %cond.false107
	movq	wbp_weight, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB88_17:                              # %cond.end114
	jmp	.LBB88_19
.LBB88_18:                              # %cond.false116
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
.LBB88_19:                              # %cond.end118
	movw	%ax, -48(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_24
# %bb.20:                               # %cond.true123
	cmpl	$0, -84(%rbp)
	jne	.LBB88_22
# %bb.21:                               # %cond.true126
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB88_23
.LBB88_22:                              # %cond.false132
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB88_23:                              # %cond.end138
	jmp	.LBB88_25
.LBB88_24:                              # %cond.false140
	xorl	%eax, %eax
	jmp	.LBB88_25
.LBB88_25:                              # %cond.end141
	movw	%ax, -136(%rbp)
	movswl	-42(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB88_30
# %bb.26:                               # %cond.true146
	cmpl	$0, -84(%rbp)
	jne	.LBB88_28
# %bb.27:                               # %cond.true149
	movq	wp_offset, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB88_29
.LBB88_28:                              # %cond.false156
	movq	wp_offset, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB88_29:                              # %cond.end161
	jmp	.LBB88_31
.LBB88_30:                              # %cond.false163
	xorl	%eax, %eax
	jmp	.LBB88_31
.LBB88_31:                              # %cond.end164
	movw	%ax, -134(%rbp)
	movswl	-134(%rbp), %eax
	movswl	-136(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -14(%rbp)
	movswl	-94(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB88_36
# %bb.32:                               # %land.lhs.true176
	movswl	-94(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_36
# %bb.33:                               # %land.lhs.true182
	movswl	-96(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB88_36
# %bb.34:                               # %land.lhs.true186
	movswl	-96(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_36
# %bb.35:                               # %if.then
	movabsq	$FastLineX, %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB88_37
.LBB88_36:                              # %if.else
	movabsq	$UMVLineX, %rax
	movq	%rax, -168(%rbp)
.LBB88_37:                              # %if.end
	movswl	-46(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB88_42
# %bb.38:                               # %land.lhs.true196
	movswl	-46(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_42
# %bb.39:                               # %land.lhs.true204
	movswl	-44(%rbp), %eax
	cmpl	88(%rbp), %eax
	jle	.LBB88_42
# %bb.40:                               # %land.lhs.true208
	movswl	-44(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	88(%rbp), %ecx
	subl	-104(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_42
# %bb.41:                               # %if.then216
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB88_43
.LBB88_42:                              # %if.else217
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB88_43:                              # %if.end218
	movl	$0, -100(%rbp)
.LBB88_44:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_49 Depth 2
                                        #       Child Loop BB88_51 Depth 3
                                        #     Child Loop BB88_85 Depth 2
                                        #       Child Loop BB88_87 Depth 3
	movl	-100(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB88_100
# %bb.45:                               # %for.body
                                        #   in Loop: Header=BB88_44 Depth=1
	movswl	-94(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -132(%rbp)
	movswl	-96(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-100(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -128(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movswl	-46(%rbp), %edx
	shll	$2, %edx
	subl	-176(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movswl	-44(%rbp), %esi
	shll	$2, %esi
	subl	-184(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -20(%rbp)
	movl	-140(%rbp), %eax
	movq	mvbits, %rcx
	movl	-132(%rbp), %edx
	shll	$2, %edx
	subl	-188(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-128(%rbp), %esi
	shll	$2, %esi
	subl	-192(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB88_47
# %bb.46:                               # %if.then256
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_99
.LBB88_47:                              # %if.end257
                                        #   in Loop: Header=BB88_44 Depth=1
	cmpw	$0, -42(%rbp)
	je	.LBB88_84
# %bb.48:                               # %if.then259
                                        #   in Loop: Header=BB88_44 Depth=1
	movl	$0, -36(%rbp)
.LBB88_49:                              # %for.cond260
                                        #   Parent Loop BB88_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_51 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB88_82
# %bb.50:                               # %for.body263
                                        #   in Loop: Header=BB88_49 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB88_51:                              # %for.cond271
                                        #   Parent Loop BB88_44 Depth=1
                                        #     Parent Loop BB88_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB88_78
# %bb.52:                               # %for.body274
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB88_54
# %bb.53:                               # %cond.true295
                                        #   in Loop: Header=BB88_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB88_58
.LBB88_54:                              # %cond.false296
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB88_56
# %bb.55:                               # %cond.true308
                                        #   in Loop: Header=BB88_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_57
.LBB88_56:                              # %cond.false310
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB88_57:                              # %cond.end320
                                        #   in Loop: Header=BB88_51 Depth=3
.LBB88_58:                              # %cond.end322
                                        #   in Loop: Header=BB88_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB88_60
# %bb.59:                               # %cond.true353
                                        #   in Loop: Header=BB88_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB88_64
.LBB88_60:                              # %cond.false354
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB88_62
# %bb.61:                               # %cond.true367
                                        #   in Loop: Header=BB88_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_63
.LBB88_62:                              # %cond.false369
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB88_63:                              # %cond.end379
                                        #   in Loop: Header=BB88_51 Depth=3
.LBB88_64:                              # %cond.end381
                                        #   in Loop: Header=BB88_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB88_66
# %bb.65:                               # %cond.true412
                                        #   in Loop: Header=BB88_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB88_70
.LBB88_66:                              # %cond.false413
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB88_68
# %bb.67:                               # %cond.true426
                                        #   in Loop: Header=BB88_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_69
.LBB88_68:                              # %cond.false428
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB88_69:                              # %cond.end438
                                        #   in Loop: Header=BB88_51 Depth=3
.LBB88_70:                              # %cond.end440
                                        #   in Loop: Header=BB88_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movswl	-50(%rbp), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -12(%rbp)
	movswl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -64(%rbp)
	movzwl	(%rcx), %ecx
	imull	%ecx, %eax
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB88_72
# %bb.71:                               # %cond.true471
                                        #   in Loop: Header=BB88_51 Depth=3
	xorl	%eax, %eax
	jmp	.LBB88_76
.LBB88_72:                              # %cond.false472
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB88_74
# %bb.73:                               # %cond.true485
                                        #   in Loop: Header=BB88_51 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB88_75
.LBB88_74:                              # %cond.false487
                                        #   in Loop: Header=BB88_51 Depth=3
	movswl	-12(%rbp), %eax
	movswl	-10(%rbp), %ecx
	addl	%ecx, %eax
	movl	wp_luma_round, %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %eax
	movswl	-14(%rbp), %ecx
	addl	%ecx, %eax
.LBB88_75:                              # %cond.end497
                                        #   in Loop: Header=BB88_51 Depth=3
.LBB88_76:                              # %cond.end499
                                        #   in Loop: Header=BB88_51 Depth=3
	movw	%ax, -30(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movswl	-30(%rbp), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.77:                               # %for.inc
                                        #   in Loop: Header=BB88_51 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB88_51
.LBB88_78:                              # %for.end
                                        #   in Loop: Header=BB88_49 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB88_80
# %bb.79:                               # %if.then511
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_83
.LBB88_80:                              # %if.end512
                                        #   in Loop: Header=BB88_49 Depth=2
	jmp	.LBB88_81
.LBB88_81:                              # %for.inc513
                                        #   in Loop: Header=BB88_49 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB88_49
.LBB88_82:                              # %for.end515.loopexit
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_83
.LBB88_83:                              # %for.end515
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_96
.LBB88_84:                              # %if.else516
                                        #   in Loop: Header=BB88_44 Depth=1
	movl	$0, -36(%rbp)
.LBB88_85:                              # %for.cond517
                                        #   Parent Loop BB88_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_87 Depth 3
	movl	-36(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB88_94
# %bb.86:                               # %for.body520
                                        #   in Loop: Header=BB88_85 Depth=2
	movq	-168(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-216(%rbp), %rsi
	movl	-128(%rbp), %edx
	addl	-36(%rbp), %edx
	movl	-132(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -64(%rbp)
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-208(%rbp), %rsi
	movswl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-108(%rbp), %r8d
	movl	-120(%rbp), %r9d
	callq	*%rax
	movq	%rax, -72(%rbp)
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB88_87:                              # %for.cond529
                                        #   Parent Loop BB88_44 Depth=1
                                        #     Parent Loop BB88_85 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-92(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB88_90
# %bb.88:                               # %for.body532
                                        #   in Loop: Header=BB88_87 Depth=3
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, %rcx
	addq	$2, %rcx
	movq	%rcx, -80(%rbp)
	movzwl	(%rax), %eax
	movq	-72(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -72(%rbp)
	movzwl	(%rcx), %ecx
	movq	-64(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -64(%rbp)
	movzwl	(%rdx), %edx
	addl	%edx, %ecx
	sarl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	byte_abs, %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
# %bb.89:                               # %for.inc581
                                        #   in Loop: Header=BB88_87 Depth=3
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB88_87
.LBB88_90:                              # %for.end583
                                        #   in Loop: Header=BB88_85 Depth=2
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jl	.LBB88_92
# %bb.91:                               # %if.then586
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_95
.LBB88_92:                              # %if.end587
                                        #   in Loop: Header=BB88_85 Depth=2
	jmp	.LBB88_93
.LBB88_93:                              # %for.inc588
                                        #   in Loop: Header=BB88_85 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB88_85
.LBB88_94:                              # %for.end590.loopexit
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_95
.LBB88_95:                              # %for.end590
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_96
.LBB88_96:                              # %if.end591
                                        #   in Loop: Header=BB88_44 Depth=1
	movl	-20(%rbp), %eax
	cmpl	96(%rbp), %eax
	jge	.LBB88_98
# %bb.97:                               # %if.then594
                                        #   in Loop: Header=BB88_44 Depth=1
	movl	-100(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, 96(%rbp)
.LBB88_98:                              # %if.end595
                                        #   in Loop: Header=BB88_44 Depth=1
	jmp	.LBB88_99
.LBB88_99:                              # %for.inc596
                                        #   in Loop: Header=BB88_44 Depth=1
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB88_44
.LBB88_100:                             # %for.end598
	cmpl	$0, -124(%rbp)
	je	.LBB88_102
# %bb.101:                              # %if.then600
	movq	spiral_search_x, %rax
	movslq	-124(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-124(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	64(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB88_102:                             # %if.end611
	movl	96(%rbp), %ebx
	cmpl	$876525584, -172(%rbp)  # imm = 0x343EB810
	jne	.LBB88_104
.LBB88_103:
	movl	%ebx, %eax
	addq	$216, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_104:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_103
.Lfunc_end88:
	.size	FullPelBlockMotionBiPred.63, .Lfunc_end88-FullPelBlockMotionBiPred.63
	.cfi_endproc
                                        # -- End function
	.globl	SetupFastFullPelSearch.64 # -- Begin function SetupFastFullPelSearch.64
	.p2align	4, 0x90
	.type	SetupFastFullPelSearch.64,@function
SetupFastFullPelSearch.64:              # @SetupFastFullPelSearch.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              # imm = 0x2D0
	leaq	-688(%rbp), %rax
	movl	$949145283, -156(%rbp)  # imm = 0x3892CEC3
	movw	%di, -2(%rbp)
	movl	%esi, -8(%rbp)
	movq	%rax, -24(%rbp)
	movq	BlockSAD, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	max_search_range, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB89_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB89_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB89_4
.LBB89_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB89_4
.LBB89_4:                               # %cond.end
	movl	%ecx, -152(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB89_7
# %bb.5:                                # %land.lhs.true18
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB89_10
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB89_10
.LBB89_7:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB89_9
# %bb.8:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB89_9:                               # %land.end
.LBB89_10:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	movl	-8(%rbp), %eax
	addl	-152(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB89_13
# %bb.11:                               # %land.lhs.true30
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB89_13
# %bb.12:                               # %if.then
	movq	-104(%rbp), %rax
	movq	6440(%rax), %rax
	movq	%rax, -168(%rbp)
	jmp	.LBB89_14
.LBB89_13:                              # %if.else
	movq	-104(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -168(%rbp)
.LBB89_14:                              # %if.end
	leaq	-120(%rbp), %rdi
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	subl	$17, %eax
	movl	%eax, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$17, %eax
	movl	%eax, -112(%rbp)
	movq	-104(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -140(%rbp)
	movq	-104(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -144(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %r8d
	movswl	%ax, %ecx
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movswl	-120(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%eax, (%rdx,%rsi,4)
	movswl	-118(%rbp), %eax
	cltd
	idivl	%ecx
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB89_34
# %bb.15:                               # %if.then49
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB89_17
# %bb.16:                               # %cond.true57
	movl	-12(%rbp), %ecx
	jmp	.LBB89_18
.LBB89_17:                              # %cond.false58
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB89_18:                              # %cond.end63
	cmpl	%ecx, %eax
	jle	.LBB89_20
# %bb.19:                               # %cond.true67
	xorl	%ecx, %ecx
	subl	-12(%rbp), %ecx
	jmp	.LBB89_24
.LBB89_20:                              # %cond.false69
	movl	-12(%rbp), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB89_22
# %bb.21:                               # %cond.true76
	movl	-12(%rbp), %ecx
	jmp	.LBB89_23
.LBB89_22:                              # %cond.false77
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
.LBB89_23:                              # %cond.end82
.LBB89_24:                              # %cond.end84
	xorl	%eax, %eax
	movq	search_center_x, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movl	-12(%rbp), %ecx
	movq	search_center_y, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-2(%rbp), %rsi
	cmpl	(%rdx,%rsi,4), %ecx
	jge	.LBB89_26
# %bb.25:                               # %cond.true97
	movl	-12(%rbp), %ecx
	jmp	.LBB89_27
.LBB89_26:                              # %cond.false98
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB89_27:                              # %cond.end103
	cmpl	%ecx, %eax
	jle	.LBB89_29
# %bb.28:                               # %cond.true107
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	jmp	.LBB89_33
.LBB89_29:                              # %cond.false109
	movl	-12(%rbp), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jge	.LBB89_31
# %bb.30:                               # %cond.true116
	movl	-12(%rbp), %eax
	jmp	.LBB89_32
.LBB89_31:                              # %cond.false117
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
.LBB89_32:                              # %cond.end122
.LBB89_33:                              # %cond.end124
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB89_34:                              # %if.end130
	movq	img, %rax
	movl	168(%rax), %eax
	movq	search_center_x, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	movl	172(%rax), %eax
	movq	search_center_y, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	search_center_x, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -68(%rbp)
	movq	search_center_y, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	movl	%eax, -64(%rbp)
.LBB89_35:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_37 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_42
# %bb.36:                               # %for.body
                                        #   in Loop: Header=BB89_35 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -80(%rbp)
.LBB89_37:                              # %for.cond155
                                        #   Parent Loop BB89_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-80(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_40
# %bb.38:                               # %for.body160
                                        #   in Loop: Header=BB89_37 Depth=2
	movq	imgY_org, %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -24(%rbp)
	movw	%ax, (%rcx)
# %bb.39:                               # %for.inc
                                        #   in Loop: Header=BB89_37 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB89_37
.LBB89_40:                              # %for.end
                                        #   in Loop: Header=BB89_35 Depth=1
	jmp	.LBB89_41
.LBB89_41:                              # %for.inc165
                                        #   in Loop: Header=BB89_35 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB89_35
.LBB89_42:                              # %for.end167
	movl	-68(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB89_47
# %bb.43:                               # %land.lhs.true170
	movl	-68(%rbp), %eax
	movl	-108(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB89_47
# %bb.44:                               # %land.lhs.true174
	movl	-76(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB89_47
# %bb.45:                               # %land.lhs.true177
	movl	-76(%rbp), %eax
	movl	-112(%rbp), %ecx
	subl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jg	.LBB89_47
# %bb.46:                               # %if.then181
	movl	$0, -116(%rbp)
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB89_48
.LBB89_47:                              # %if.else182
	movl	$1, -116(%rbp)
.LBB89_48:                              # %if.end183
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB89_58
# %bb.49:                               # %if.then186
	movq	img, %rax
	movl	168(%rax), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	$0, -28(%rbp)
.LBB89_50:                              # %for.cond191
                                        # =>This Inner Loop Header: Depth=1
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB89_56
# %bb.51:                               # %for.body194
                                        #   in Loop: Header=BB89_50 Depth=1
	movl	-132(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB89_54
# %bb.52:                               # %land.lhs.true199
                                        #   in Loop: Header=BB89_50 Depth=1
	movl	-136(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	cmpl	(%rcx,%rdx,4), %eax
	jne	.LBB89_54
# %bb.53:                               # %if.then204
	movl	-28(%rbp), %eax
	movq	pos_00, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB89_57
.LBB89_54:                              # %if.end209
                                        #   in Loop: Header=BB89_50 Depth=1
	jmp	.LBB89_55
.LBB89_55:                              # %for.inc210
                                        #   in Loop: Header=BB89_50 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB89_50
.LBB89_56:                              # %for.end212.loopexit
	jmp	.LBB89_57
.LBB89_57:                              # %for.end212
	jmp	.LBB89_58
.LBB89_58:                              # %if.end213
	movl	$0, -28(%rbp)
.LBB89_59:                              # %for.cond214
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_69 Depth 2
                                        #       Child Loop BB89_71 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB89_78
# %bb.60:                               # %for.body217
                                        #   in Loop: Header=BB89_59 Depth=1
	movl	-76(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB89_68
# %bb.61:                               # %if.then225
                                        #   in Loop: Header=BB89_59 Depth=1
	cmpl	$0, -72(%rbp)
	jl	.LBB89_66
# %bb.62:                               # %land.lhs.true228
                                        #   in Loop: Header=BB89_59 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB89_66
# %bb.63:                               # %land.lhs.true231
                                        #   in Loop: Header=BB89_59 Depth=1
	cmpl	$0, -88(%rbp)
	jl	.LBB89_66
# %bb.64:                               # %land.lhs.true234
                                        #   in Loop: Header=BB89_59 Depth=1
	movl	-88(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jg	.LBB89_66
# %bb.65:                               # %if.then237
                                        #   in Loop: Header=BB89_59 Depth=1
	movabsq	$FastLine16Y_11, %rax
	movq	%rax, PelYline_11
	jmp	.LBB89_67
.LBB89_66:                              # %if.else238
                                        #   in Loop: Header=BB89_59 Depth=1
	movabsq	$UMVLine16Y_11, %rax
	movq	%rax, PelYline_11
.LBB89_67:                              # %if.end239
                                        #   in Loop: Header=BB89_59 Depth=1
	jmp	.LBB89_68
.LBB89_68:                              # %if.end240
                                        #   in Loop: Header=BB89_59 Depth=1
	leaq	-688(%rbp), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -92(%rbp)
.LBB89_69:                              # %for.cond242
                                        #   Parent Loop BB89_59 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_71 Depth 3
	cmpl	$4, -92(%rbp)
	jge	.LBB89_76
# %bb.70:                               # %for.body245
                                        #   in Loop: Header=BB89_69 Depth=2
	movl	$0, -52(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	movl	$0, -64(%rbp)
.LBB89_71:                              # %for.cond246
                                        #   Parent Loop BB89_59 Depth=1
                                        #     Parent Loop BB89_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -64(%rbp)
	jge	.LBB89_74
# %bb.72:                               # %for.body249
                                        #   in Loop: Header=BB89_71 Depth=3
	movq	PelYline_11, %rax
	movq	-168(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	%esi, %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movl	-88(%rbp), %edx
	movl	-144(%rbp), %ecx
	movl	-140(%rbp), %r8d
	callq	*%rax
	movq	%rax, -40(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	byte_abs, %rax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -40(%rbp)
	movzwl	(%rcx), %ecx
	movq	-24(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -24(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
# %bb.73:                               # %for.inc379
                                        #   in Loop: Header=BB89_71 Depth=3
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB89_71
.LBB89_74:                              # %for.end381
                                        #   in Loop: Header=BB89_69 Depth=2
	movl	-56(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-44(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-48(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-52(%rbp), %eax
	movq	-128(%rbp), %rcx
	movl	-60(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -60(%rbp)
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc402
                                        #   in Loop: Header=BB89_69 Depth=2
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB89_69
.LBB89_76:                              # %for.end404
                                        #   in Loop: Header=BB89_59 Depth=1
	jmp	.LBB89_77
.LBB89_77:                              # %for.inc405
                                        #   in Loop: Header=BB89_59 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB89_59
.LBB89_78:                              # %for.end407
	movl	-8(%rbp), %edi
	movswl	-2(%rbp), %esi
	movl	-84(%rbp), %edx
	callq	SetupLargerBlocks
	movq	search_setup_done, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	cmpl	$949145283, -156(%rbp)  # imm = 0x3892CEC3
	jne	.LBB89_80
.LBB89_79:
	addq	$720, %rsp              # imm = 0x2D0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_80:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_79
.Lfunc_end89:
	.size	SetupFastFullPelSearch.64, .Lfunc_end89-SetupFastFullPelSearch.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.65
.LCPI90_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI90_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.65
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.65,@function
Init_Motion_Search_Module.65:           # @Init_Motion_Search_Module.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$42957879, -60(%rbp)    # imm = 0x28F7C37
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB90_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB90_3:                               # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB90_6
.LBB90_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB90_6:                               # %cond.end19
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB90_9
.LBB90_8:                               # %cond.false24
	movl	-40(%rbp), %eax
	addl	$1, %eax
.LBB90_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI90_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI90_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB90_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB90_11:                              # %if.end
	movslq	-44(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB90_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB90_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB90_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB90_15:                              # %if.end66
	movslq	-52(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB90_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB90_17:                              # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB90_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB90_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB90_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_22 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jg	.LBB90_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB90_20 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_22:                              # %for.cond90
                                        #   Parent Loop BB90_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB90_22 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB90_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_22
.LBB90_25:                              # %for.end
                                        #   in Loop: Header=BB90_20 Depth=1
	jmp	.LBB90_26
.LBB90_26:                              # %for.inc98
                                        #   in Loop: Header=BB90_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_20
.LBB90_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB90_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_30 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB90_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB90_28 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_30:                              # %for.cond111
                                        #   Parent Loop BB90_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB90_30 Depth=2
	movl	-16(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB90_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_30
.LBB90_33:                              # %for.end119
                                        #   in Loop: Header=BB90_28 Depth=1
	jmp	.LBB90_34
.LBB90_34:                              # %for.inc120
                                        #   in Loop: Header=BB90_28 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_28
.LBB90_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB90_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB90_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB90_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_36
.LBB90_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -12(%rbp)
.LBB90_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_45 Depth 2
                                        #     Child Loop BB90_49 Depth 2
	movl	-12(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB90_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB90_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB90_43
.LBB90_42:                              # %cond.false143
                                        #   in Loop: Header=BB90_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB90_43:                              # %cond.end144
                                        #   in Loop: Header=BB90_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB90_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB90_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB90_45:                              # %for.cond151
                                        #   Parent Loop BB90_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB90_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB90_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB90_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_45
.LBB90_48:                              # %for.end168
                                        #   in Loop: Header=BB90_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_49:                              # %for.cond170
                                        #   Parent Loop BB90_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB90_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB90_49 Depth=2
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB90_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_49
.LBB90_52:                              # %for.end187
                                        #   in Loop: Header=BB90_40 Depth=1
	jmp	.LBB90_53
.LBB90_53:                              # %for.inc188
                                        #   in Loop: Header=BB90_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_40
.LBB90_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB90_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB90_56:                              # %if.end192
	cmpl	$42957879, -60(%rbp)    # imm = 0x28F7C37
	jne	.LBB90_58
.LBB90_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_57
.Lfunc_end90:
	.size	Init_Motion_Search_Module.65, .Lfunc_end90-Init_Motion_Search_Module.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.66
.LCPI91_0:
	.quad	4602678819172646912     # double 0.5
.LCPI91_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.66
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.66,@function
FastFullPelBlockMotionSearch.66:        # @FastFullPelBlockMotionSearch.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI91_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI91_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1099911373, -84(%rbp)  # imm = 0x418F50CD
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -56(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -72(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -28(%rbp)
	movl	-76(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-80(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB91_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB91_2:                               # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB91_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-48(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB91_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB91_5:                               # %if.end56
	jmp	.LBB91_6
.LBB91_6:                               # %if.end57
	movl	$0, -24(%rbp)
.LBB91_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB91_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB91_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB91_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB91_7 Depth=1
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-48(%rbp), %eax
	movq	mvbits, %rcx
	movl	-60(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-64(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB91_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB91_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB91_11:                              # %if.end85
                                        #   in Loop: Header=BB91_7 Depth=1
	jmp	.LBB91_12
.LBB91_12:                              # %if.end86
                                        #   in Loop: Header=BB91_7 Depth=1
	jmp	.LBB91_13
.LBB91_13:                              # %for.inc
                                        #   in Loop: Header=BB91_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB91_7
.LBB91_14:                              # %for.end
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-52(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1099911373, -84(%rbp)  # imm = 0x418F50CD
	jne	.LBB91_16
.LBB91_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_15
.Lfunc_end91:
	.size	FastFullPelBlockMotionSearch.66, .Lfunc_end91-FastFullPelBlockMotionSearch.66
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Cost8x8.67   # -- Begin function Get_Direct_Cost8x8.67
	.p2align	4, 0x90
	.type	Get_Direct_Cost8x8.67,@function
Get_Direct_Cost8x8.67:                  # @Get_Direct_Cost8x8.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$664, %rsp              # imm = 0x298
	.cfi_offset %rbx, -24
	movl	$358918439, -60(%rbp)   # imm = 0x1564A927
	movl	%edi, -52(%rbp)
	movq	%rsi, -72(%rbp)
	movl	$0, -40(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB92_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_3 Depth 2
                                        #       Child Loop BB92_7 Depth 3
                                        #         Child Loop BB92_9 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_18
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB92_1 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB92_3:                               # %for.cond3
                                        #   Parent Loop BB92_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_7 Depth 3
                                        #         Child Loop BB92_9 Depth 4
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_16
# %bb.4:                                # %for.body6
                                        #   in Loop: Header=BB92_3 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB92_6
# %bb.5:                                # %if.then
	movq	-72(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$2147483647, -56(%rbp)  # imm = 0x7FFFFFFF
	jmp	.LBB92_30
.LBB92_6:                               # %if.end
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movq	direct_pdir, %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %edx
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %r9w
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %ebx
	sarl	$2, %ebx
	movslq	%ebx, %rbx
	movq	(%rcx,%rbx,8), %rbx
	movl	-36(%rbp), %ecx
	sarl	$2, %ecx
	movslq	%ecx, %rax
	movl	$0, %ecx
	movl	$0, %r8d
	movswl	%r9w, %r9d
	movswl	(%rbx,%rax,2), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movl	$0, -12(%rbp)
	movl	$0, -28(%rbp)
.LBB92_7:                               # %for.cond34
                                        #   Parent Loop BB92_1 Depth=1
                                        #     Parent Loop BB92_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_9 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB92_14
# %bb.8:                                # %for.body37
                                        #   in Loop: Header=BB92_7 Depth=3
	movl	$0, -16(%rbp)
.LBB92_9:                               # %for.cond38
                                        #   Parent Loop BB92_1 Depth=1
                                        #     Parent Loop BB92_3 Depth=2
                                        #       Parent Loop BB92_7 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB92_12
# %bb.10:                               # %for.body41
                                        #   in Loop: Header=BB92_9 Depth=4
	movq	imgY_org, %rax
	movl	-36(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	subl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	leaq	-400(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-20(%rbp), %ecx
	subl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-28(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB92_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_9
.LBB92_12:                              # %for.end
                                        #   in Loop: Header=BB92_7 Depth=3
	jmp	.LBB92_13
.LBB92_13:                              # %for.inc67
                                        #   in Loop: Header=BB92_7 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_7
.LBB92_14:                              # %for.end69
                                        #   in Loop: Header=BB92_3 Depth=2
	leaq	-144(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.15:                               # %for.inc71
                                        #   in Loop: Header=BB92_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_3
.LBB92_16:                              # %for.end73
                                        #   in Loop: Header=BB92_1 Depth=1
	jmp	.LBB92_17
.LBB92_17:                              # %for.inc74
                                        #   in Loop: Header=BB92_1 Depth=1
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB92_1
.LBB92_18:                              # %for.end76
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB92_29
# %bb.19:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB92_29
# %bb.20:                               # %if.then79
	movl	$0, -28(%rbp)
	movl	$0, -12(%rbp)
.LBB92_21:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_23 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB92_28
# %bb.22:                               # %for.body83
                                        #   in Loop: Header=BB92_21 Depth=1
	movl	$0, -16(%rbp)
.LBB92_23:                              # %for.cond84
                                        #   Parent Loop BB92_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB92_26
# %bb.24:                               # %for.body87
                                        #   in Loop: Header=BB92_23 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	leaq	-400(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -656(%rbp,%rcx,4)
# %bb.25:                               # %for.inc94
                                        #   in Loop: Header=BB92_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB92_23
.LBB92_26:                              # %for.end97
                                        #   in Loop: Header=BB92_21 Depth=1
	jmp	.LBB92_27
.LBB92_27:                              # %for.inc98
                                        #   in Loop: Header=BB92_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_21
.LBB92_28:                              # %for.end100
	leaq	-656(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movq	-72(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB92_29:                              # %if.end105
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB92_30:                              # %return
	movl	-56(%rbp), %ebx
	cmpl	$358918439, -60(%rbp)   # imm = 0x1564A927
	jne	.LBB92_32
.LBB92_31:
	movl	%ebx, %eax
	addq	$664, %rsp              # imm = 0x298
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_32:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_31
.Lfunc_end92:
	.size	Get_Direct_Cost8x8.67, .Lfunc_end92-Get_Direct_Cost8x8.67
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.68
.LCPI93_0:
	.quad	4602678819172646912     # double 0.5
.LCPI93_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.68
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.68,@function
FullPelBlockMotionSearch.68:            # @FullPelBlockMotionSearch.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$979491769, -124(%rbp)  # imm = 0x3A61DBB9
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -92(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB93_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB93_4
.LBB93_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB93_4
.LBB93_4:                               # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI93_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%ecx, -32(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -136(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -144(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-92(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-92(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -88(%rbp)
	movl	-88(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -132(%rbp)
	movl	-84(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -140(%rbp)
	movl	-80(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movl	-84(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movl	-80(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	cmpl	$1, -92(%rbp)
	jne	.LBB93_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB93_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB93_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB93_8:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -120(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB93_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB93_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB93_14
.LBB93_11:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB93_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB93_13:                              # %land.end63
.LBB93_14:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -148(%rbp)
	cmpl	$0, -148(%rbp)
	je	.LBB93_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB93_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB93_18
.LBB93_17:                              # %if.else
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB93_18:                              # %if.end
	movl	-64(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB93_23
# %bb.19:                               # %land.lhs.true81
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-88(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_23
# %bb.20:                               # %land.lhs.true86
	movl	-68(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB93_23
# %bb.21:                               # %land.lhs.true89
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-96(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB93_24
.LBB93_23:                              # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB93_24:                              # %if.end97
	movl	$0, -20(%rbp)
.LBB93_25:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_33 Depth 2
                                        #       Child Loop BB93_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB93_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-64(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movl	-100(%rbp), %eax
	movq	mvbits, %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	subl	-140(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	subl	-128(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -120(%rbp)
	je	.LBB93_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-72(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jne	.LBB93_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-60(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jne	.LBB93_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-100(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB93_30:                              # %if.end128
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB93_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_46
.LBB93_32:                              # %if.end132
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	$0, -28(%rbp)
.LBB93_33:                              # %for.cond133
                                        #   Parent Loop BB93_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_35 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB93_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB93_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-88(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-60(%rbp), %edx
	addl	-28(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-136(%rbp), %r8d
	movl	-116(%rbp), %r9d
	callq	*%rax
	movq	%rax, -48(%rbp)
	movq	-168(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -76(%rbp)
.LBB93_35:                              # %for.cond140
                                        #   Parent Loop BB93_25 Depth=1
                                        #     Parent Loop BB93_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-76(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB93_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB93_35 Depth=3
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-56(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -56(%rbp)
	movzwl	(%rcx), %ecx
	movq	-48(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -48(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB93_35 Depth=3
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB93_35
.LBB93_38:                              # %for.end
                                        #   in Loop: Header=BB93_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB93_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_43
.LBB93_40:                              # %if.end178
                                        #   in Loop: Header=BB93_33 Depth=2
	jmp	.LBB93_41
.LBB93_41:                              # %for.inc179
                                        #   in Loop: Header=BB93_33 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB93_33
.LBB93_42:                              # %for.end181.loopexit
                                        #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_43
.LBB93_43:                              # %for.end181
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB93_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB93_45:                              # %if.end185
                                        #   in Loop: Header=BB93_25 Depth=1
	jmp	.LBB93_46
.LBB93_46:                              # %for.inc186
                                        #   in Loop: Header=BB93_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB93_25
.LBB93_47:                              # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB93_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB93_49:                              # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$979491769, -124(%rbp)  # imm = 0x3A61DBB9
	jne	.LBB93_51
.LBB93_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_51:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_50
.Lfunc_end93:
	.size	FullPelBlockMotionSearch.68, .Lfunc_end93-FullPelBlockMotionSearch.68
	.cfi_endproc
                                        # -- End function
	.globl	InitializeFastFullIntegerSearch.69 # -- Begin function InitializeFastFullIntegerSearch.69
	.p2align	4, 0x90
	.type	InitializeFastFullIntegerSearch.69,@function
InitializeFastFullIntegerSearch.69:     # @InitializeFastFullIntegerSearch.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1650068017, -28(%rbp)  # imm = 0x625A0A31
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-16(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -24(%rbp)
	movl	$16, %edi
	callq	malloc
	movq	%rax, BlockSAD
	cmpq	$0, %rax
	jne	.LBB94_2
# %bb.1:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB94_2:                               # %if.end
	movl	$0, -4(%rbp)
.LBB94_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_7 Depth 2
                                        #       Child Loop BB94_11 Depth 3
                                        #         Child Loop BB94_15 Depth 4
	cmpl	$2, -4(%rbp)
	jge	.LBB94_26
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB94_3 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$3, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_6
# %bb.5:                                # %if.then11
                                        #   in Loop: Header=BB94_3 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB94_6:                               # %if.end12
                                        #   in Loop: Header=BB94_3 Depth=1
	movl	$0, -8(%rbp)
.LBB94_7:                               # %for.cond13
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB94_11 Depth 3
                                        #         Child Loop BB94_15 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB94_24
# %bb.8:                                # %for.body17
                                        #   in Loop: Header=BB94_7 Depth=2
	movl	$64, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_10
# %bb.9:                                # %if.then25
                                        #   in Loop: Header=BB94_7 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB94_10:                              # %if.end26
                                        #   in Loop: Header=BB94_7 Depth=2
	movl	$1, -12(%rbp)
.LBB94_11:                              # %for.cond27
                                        #   Parent Loop BB94_3 Depth=1
                                        #     Parent Loop BB94_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB94_15 Depth 4
	cmpl	$8, -12(%rbp)
	jge	.LBB94_22
# %bb.12:                               # %for.body30
                                        #   in Loop: Header=BB94_11 Depth=3
	movl	$128, %edi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_14
# %bb.13:                               # %if.then40
                                        #   in Loop: Header=BB94_11 Depth=3
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB94_14:                              # %if.end41
                                        #   in Loop: Header=BB94_11 Depth=3
	movl	$0, -20(%rbp)
.LBB94_15:                              # %for.cond42
                                        #   Parent Loop BB94_3 Depth=1
                                        #     Parent Loop BB94_7 Depth=2
                                        #       Parent Loop BB94_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -20(%rbp)
	jge	.LBB94_20
# %bb.16:                               # %for.body45
                                        #   in Loop: Header=BB94_15 Depth=4
	movslq	-24(%rbp), %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	BlockSAD, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_18
# %bb.17:                               # %if.then59
                                        #   in Loop: Header=BB94_15 Depth=4
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB94_18:                              # %if.end60
                                        #   in Loop: Header=BB94_15 Depth=4
	jmp	.LBB94_19
.LBB94_19:                              # %for.inc
                                        #   in Loop: Header=BB94_15 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_15
.LBB94_20:                              # %for.end
                                        #   in Loop: Header=BB94_11 Depth=3
	jmp	.LBB94_21
.LBB94_21:                              # %for.inc61
                                        #   in Loop: Header=BB94_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_11
.LBB94_22:                              # %for.end63
                                        #   in Loop: Header=BB94_7 Depth=2
	jmp	.LBB94_23
.LBB94_23:                              # %for.inc64
                                        #   in Loop: Header=BB94_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_7
.LBB94_24:                              # %for.end66
                                        #   in Loop: Header=BB94_3 Depth=1
	jmp	.LBB94_25
.LBB94_25:                              # %for.inc67
                                        #   in Loop: Header=BB94_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_3
.LBB94_26:                              # %for.end69
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_setup_done
	cmpq	$0, %rax
	jne	.LBB94_28
# %bb.27:                               # %if.then73
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB94_28:                              # %if.end74
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_x
	cmpq	$0, %rax
	jne	.LBB94_30
# %bb.29:                               # %if.then78
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB94_30:                              # %if.end79
	movl	$16, %edi
	callq	malloc
	movq	%rax, search_center_y
	cmpq	$0, %rax
	jne	.LBB94_32
# %bb.31:                               # %if.then83
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB94_32:                              # %if.end84
	movl	$16, %edi
	callq	malloc
	movq	%rax, pos_00
	cmpq	$0, %rax
	jne	.LBB94_34
# %bb.33:                               # %if.then88
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB94_34:                              # %if.end89
	movl	$16, %edi
	callq	malloc
	movq	%rax, max_search_range
	cmpq	$0, %rax
	jne	.LBB94_36
# %bb.35:                               # %if.then93
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB94_36:                              # %if.end94
	movl	$0, -4(%rbp)
.LBB94_37:                              # %for.cond95
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB94_50
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB94_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_setup_done, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_40
# %bb.39:                               # %if.then108
                                        #   in Loop: Header=BB94_37 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB94_40:                              # %if.end109
                                        #   in Loop: Header=BB94_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_x, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_42
# %bb.41:                               # %if.then119
                                        #   in Loop: Header=BB94_37 Depth=1
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB94_42:                              # %if.end120
                                        #   in Loop: Header=BB94_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	search_center_y, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_44
# %bb.43:                               # %if.then130
                                        #   in Loop: Header=BB94_37 Depth=1
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB94_44:                              # %if.end131
                                        #   in Loop: Header=BB94_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	pos_00, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_46
# %bb.45:                               # %if.then141
                                        #   in Loop: Header=BB94_37 Depth=1
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB94_46:                              # %if.end142
                                        #   in Loop: Header=BB94_37 Depth=1
	movq	img, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB94_48
# %bb.47:                               # %if.then152
                                        #   in Loop: Header=BB94_37 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB94_48:                              # %if.end153
                                        #   in Loop: Header=BB94_37 Depth=1
	jmp	.LBB94_49
.LBB94_49:                              # %for.inc154
                                        #   in Loop: Header=BB94_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_37
.LBB94_50:                              # %for.end156
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB94_60
# %bb.51:                               # %if.then159
	movl	$0, -4(%rbp)
.LBB94_52:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_54 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB94_59
# %bb.53:                               # %for.body163
                                        #   in Loop: Header=BB94_52 Depth=1
	movl	$0, -8(%rbp)
.LBB94_54:                              # %for.cond164
                                        #   Parent Loop BB94_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jg	.LBB94_57
# %bb.55:                               # %for.body168
                                        #   in Loop: Header=BB94_54 Depth=2
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.56:                               # %for.inc173
                                        #   in Loop: Header=BB94_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_54
.LBB94_57:                              # %for.end175
                                        #   in Loop: Header=BB94_52 Depth=1
	jmp	.LBB94_58
.LBB94_58:                              # %for.inc176
                                        #   in Loop: Header=BB94_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_52
.LBB94_59:                              # %for.end178
	jmp	.LBB94_69
.LBB94_60:                              # %if.else
	movl	$0, -4(%rbp)
.LBB94_61:                              # %for.cond179
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_63 Depth 2
	cmpl	$2, -4(%rbp)
	jge	.LBB94_68
# %bb.62:                               # %for.body182
                                        #   in Loop: Header=BB94_61 Depth=1
	movl	-16(%rbp), %eax
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	36(%rdx), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, (%rcx)
	movl	$1, -8(%rbp)
.LBB94_63:                              # %for.cond191
                                        #   Parent Loop BB94_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB94_66
# %bb.64:                               # %for.body195
                                        #   in Loop: Header=BB94_63 Depth=2
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	max_search_range, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.65:                               # %for.inc200
                                        #   in Loop: Header=BB94_63 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_63
.LBB94_66:                              # %for.end202
                                        #   in Loop: Header=BB94_61 Depth=1
	jmp	.LBB94_67
.LBB94_67:                              # %for.inc203
                                        #   in Loop: Header=BB94_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_61
.LBB94_68:                              # %for.end205
	jmp	.LBB94_69
.LBB94_69:                              # %if.end206
	cmpl	$1650068017, -28(%rbp)  # imm = 0x625A0A31
	jne	.LBB94_71
.LBB94_70:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_71:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_70
.Lfunc_end94:
	.size	InitializeFastFullIntegerSearch.69, .Lfunc_end94-InitializeFastFullIntegerSearch.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.70
.LCPI95_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI95_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.70
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.70,@function
Init_Motion_Search_Module.70:           # @Init_Motion_Search_Module.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1557225360, -60(%rbp)  # imm = 0x5CD15F90
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB95_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB95_3
.LBB95_2:                               # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB95_3:                               # %cond.end
	movl	%eax, -32(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB95_6
.LBB95_5:                               # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB95_6:                               # %cond.end19
	movl	%eax, -40(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB95_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB95_9
.LBB95_8:                               # %cond.false24
	movl	-48(%rbp), %eax
	addl	$1, %eax
.LBB95_9:                               # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI95_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI95_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI95_1(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI95_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB95_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB95_11:                              # %if.end
	movslq	-40(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB95_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB95_13:                              # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB95_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB95_15:                              # %if.end66
	movslq	-52(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB95_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB95_17:                              # %if.end72
	movslq	-32(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB95_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB95_19:                              # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB95_20:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_22 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jg	.LBB95_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB95_20 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_22:                              # %for.cond90
                                        #   Parent Loop BB95_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB95_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB95_22 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB95_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_22
.LBB95_25:                              # %for.end
                                        #   in Loop: Header=BB95_20 Depth=1
	jmp	.LBB95_26
.LBB95_26:                              # %for.inc98
                                        #   in Loop: Header=BB95_20 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_20
.LBB95_27:                              # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -16(%rbp)
.LBB95_28:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_30 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB95_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB95_28 Depth=1
	movl	-16(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_30:                              # %for.cond111
                                        #   Parent Loop BB95_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB95_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB95_30 Depth=2
	movl	-16(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB95_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_30
.LBB95_33:                              # %for.end119
                                        #   in Loop: Header=BB95_28 Depth=1
	jmp	.LBB95_34
.LBB95_34:                              # %for.inc120
                                        #   in Loop: Header=BB95_28 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_28
.LBB95_35:                              # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB95_36:                              # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB95_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB95_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB95_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_36
.LBB95_39:                              # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -12(%rbp)
.LBB95_40:                              # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_45 Depth 2
                                        #     Child Loop BB95_49 Depth 2
	movl	-12(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB95_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB95_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB95_43
.LBB95_42:                              # %cond.false143
                                        #   in Loop: Header=BB95_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB95_43:                              # %cond.end144
                                        #   in Loop: Header=BB95_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB95_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB95_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB95_45:                              # %for.cond151
                                        #   Parent Loop BB95_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB95_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB95_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB95_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_45
.LBB95_48:                              # %for.end168
                                        #   in Loop: Header=BB95_40 Depth=1
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB95_49:                              # %for.cond170
                                        #   Parent Loop BB95_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jg	.LBB95_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB95_49 Depth=2
	xorl	%eax, %eax
	subl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-12(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB95_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_49
.LBB95_52:                              # %for.end187
                                        #   in Loop: Header=BB95_40 Depth=1
	jmp	.LBB95_53
.LBB95_53:                              # %for.inc188
                                        #   in Loop: Header=BB95_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_40
.LBB95_54:                              # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB95_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB95_56:                              # %if.end192
	cmpl	$1557225360, -60(%rbp)  # imm = 0x5CD15F90
	jne	.LBB95_58
.LBB95_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_58:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_57
.Lfunc_end95:
	.size	Init_Motion_Search_Module.70, .Lfunc_end95-Init_Motion_Search_Module.70
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.71    # -- Begin function SetupLargerBlocks.71
	.p2align	4, 0x90
	.type	SetupLargerBlocks.71,@function
SetupLargerBlocks.71:                   # @SetupLargerBlocks.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1153006989, -76(%rbp)  # imm = 0x44B97D8D
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_4:                               # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB96_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB96_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_5
.LBB96_8:                               # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB96_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB96_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_9
.LBB96_12:                              # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB96_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB96_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_13
.LBB96_16:                              # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB96_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB96_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_17
.LBB96_20:                              # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB96_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB96_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_21
.LBB96_24:                              # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB96_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB96_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_25
.LBB96_28:                              # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB96_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB96_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_29
.LBB96_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB96_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB96_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_33
.LBB96_36:                              # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB96_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB96_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_37
.LBB96_40:                              # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB96_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB96_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_41
.LBB96_44:                              # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB96_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB96_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_45
.LBB96_48:                              # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB96_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB96_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_49
.LBB96_52:                              # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB96_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB96_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_53
.LBB96_56:                              # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB96_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB96_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_57
.LBB96_60:                              # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB96_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB96_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_61
.LBB96_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB96_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB96_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_65
.LBB96_68:                              # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB96_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB96_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_69
.LBB96_72:                              # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB96_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB96_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_73
.LBB96_76:                              # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB96_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB96_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_77
.LBB96_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB96_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB96_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_81
.LBB96_84:                              # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB96_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB96_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_85
.LBB96_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB96_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB96_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_89
.LBB96_92:                              # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB96_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB96_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_93
.LBB96_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB96_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB96_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB96_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB96_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_97
.LBB96_100:                             # %for.end438
	cmpl	$1153006989, -76(%rbp)  # imm = 0x44B97D8D
	jne	.LBB96_102
.LBB96_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_101
.Lfunc_end96:
	.size	SetupLargerBlocks.71, .Lfunc_end96-SetupLargerBlocks.71
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.72 # -- Begin function SetMotionVectorPredictor.72
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.72,@function
SetMotionVectorPredictor.72:            # @SetMotionVectorPredictor.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$569453934, -180(%rbp)  # imm = 0x21F12D6E
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -144(%rbp)
	movl	-144(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB97_2:                               # %if.end
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-144(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -172(%rbp)
	jle	.LBB97_19
# %bb.3:                                # %if.then2
	cmpl	$8, -164(%rbp)
	jge	.LBB97_14
# %bb.4:                                # %if.then4
	cmpl	$8, -172(%rbp)
	jne	.LBB97_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB97_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB97_8
.LBB97_7:                               # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB97_8:                               # %if.end10
	jmp	.LBB97_13
.LBB97_9:                               # %if.else11
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB97_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB97_12
.LBB97_11:                              # %if.else16
	movl	$0, -56(%rbp)
.LBB97_12:                              # %if.end18
	jmp	.LBB97_13
.LBB97_13:                              # %if.end19
	jmp	.LBB97_18
.LBB97_14:                              # %if.else20
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB97_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB97_17
.LBB97_16:                              # %if.else26
	movl	$0, -56(%rbp)
.LBB97_17:                              # %if.end28
	jmp	.LBB97_18
.LBB97_18:                              # %if.end29
	jmp	.LBB97_19
.LBB97_19:                              # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB97_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB97_21:                              # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB97_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB97_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_25
.LBB97_24:                              # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_25
.LBB97_25:                              # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_28
.LBB97_27:                              # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_28
.LBB97_28:                              # %cond.end56
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_31
.LBB97_30:                              # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_31
.LBB97_31:                              # %cond.end71
	movl	%eax, -84(%rbp)
	jmp	.LBB97_72
.LBB97_32:                              # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB97_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_37
.LBB97_36:                              # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB97_37:                              # %cond.end108
	jmp	.LBB97_39
.LBB97_38:                              # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_39
.LBB97_39:                              # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_43
.LBB97_42:                              # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB97_43:                              # %cond.end143
	jmp	.LBB97_45
.LBB97_44:                              # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_45
.LBB97_45:                              # %cond.end146
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_49
.LBB97_48:                              # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB97_49:                              # %cond.end178
	jmp	.LBB97_51
.LBB97_50:                              # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_51
.LBB97_51:                              # %cond.end181
	movl	%eax, -84(%rbp)
	jmp	.LBB97_71
.LBB97_52:                              # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB97_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB97_56
.LBB97_55:                              # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_56:                              # %cond.end213
	jmp	.LBB97_58
.LBB97_57:                              # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_58
.LBB97_58:                              # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB97_62
.LBB97_61:                              # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_62:                              # %cond.end248
	jmp	.LBB97_64
.LBB97_63:                              # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_64
.LBB97_64:                              # %cond.end251
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB97_68
.LBB97_67:                              # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_68:                              # %cond.end283
	jmp	.LBB97_70
.LBB97_69:                              # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB97_70
.LBB97_70:                              # %cond.end286
	movl	%eax, -84(%rbp)
.LBB97_71:                              # %if.end288
	jmp	.LBB97_72
.LBB97_72:                              # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_76
# %bb.73:                               # %land.lhs.true
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_76
# %bb.74:                               # %land.lhs.true296
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB97_86
.LBB97_76:                              # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_80
# %bb.77:                               # %land.lhs.true305
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_80
# %bb.78:                               # %land.lhs.true309
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB97_85
.LBB97_80:                              # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_84
# %bb.81:                               # %land.lhs.true318
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB97_84
# %bb.82:                               # %land.lhs.true322
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB97_84:                              # %if.end327
	jmp	.LBB97_85
.LBB97_85:                              # %if.end328
	jmp	.LBB97_86
.LBB97_86:                              # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB97_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB97_96
# %bb.88:                               # %if.then335
	cmpl	$0, -164(%rbp)
	jne	.LBB97_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB97_91:                              # %if.end343
	jmp	.LBB97_95
.LBB97_92:                              # %if.else344
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB97_94:                              # %if.end349
	jmp	.LBB97_95
.LBB97_95:                              # %if.end350
	jmp	.LBB97_107
.LBB97_96:                              # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB97_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB97_106
# %bb.98:                               # %if.then357
	cmpl	$0, -172(%rbp)
	jne	.LBB97_102
# %bb.99:                               # %if.then360
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB97_101:                             # %if.end365
	jmp	.LBB97_105
.LBB97_102:                             # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB97_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB97_104:                             # %if.end371
	jmp	.LBB97_105
.LBB97_105:                             # %if.end372
	jmp	.LBB97_106
.LBB97_106:                             # %if.end373
	jmp	.LBB97_107
.LBB97_107:                             # %if.end374
	movl	$0, -12(%rbp)
.LBB97_108:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB97_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB97_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB97_121
.LBB97_111:                             # %if.then381
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_114
.LBB97_113:                             # %cond.false396
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_114
.LBB97_114:                             # %cond.end397
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_117
.LBB97_116:                             # %cond.false413
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_117
.LBB97_117:                             # %cond.end414
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_120
.LBB97_119:                             # %cond.false430
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_120
.LBB97_120:                             # %cond.end431
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB97_161
.LBB97_121:                             # %if.else433
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_126
.LBB97_125:                             # %cond.false462
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB97_126:                             # %cond.end474
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_128
.LBB97_127:                             # %cond.false476
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_128
.LBB97_128:                             # %cond.end477
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_132
.LBB97_131:                             # %cond.false500
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB97_132:                             # %cond.end513
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_134
.LBB97_133:                             # %cond.false515
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_134
.LBB97_134:                             # %cond.end516
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB97_138
.LBB97_137:                             # %cond.false539
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB97_138:                             # %cond.end552
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_140
.LBB97_139:                             # %cond.false554
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_140
.LBB97_140:                             # %cond.end555
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB97_160
.LBB97_141:                             # %if.else557
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB97_145
.LBB97_144:                             # %cond.false580
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_145:                             # %cond.end592
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_147
.LBB97_146:                             # %cond.false594
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_147
.LBB97_147:                             # %cond.end595
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB97_151
.LBB97_150:                             # %cond.false619
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_151:                             # %cond.end631
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_153
.LBB97_152:                             # %cond.false633
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_153
.LBB97_153:                             # %cond.end634
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB97_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB97_157
.LBB97_156:                             # %cond.false658
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB97_157:                             # %cond.end670
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_159
.LBB97_158:                             # %cond.false672
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_159
.LBB97_159:                             # %cond.end673
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB97_160:                             # %if.end675
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_161
.LBB97_161:                             # %if.end676
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB97_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_166
.LBB97_165:                             # %cond.false696
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_166:                             # %cond.end708
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_168
.LBB97_167:                             # %cond.false710
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_168
.LBB97_168:                             # %cond.end711
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -140(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB97_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_172
.LBB97_171:                             # %cond.false729
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_172:                             # %cond.end741
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_174
.LBB97_173:                             # %cond.false743
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_174
.LBB97_174:                             # %cond.end744
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB97_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_178
.LBB97_177:                             # %cond.false762
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_178:                             # %cond.end774
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_180
.LBB97_179:                             # %cond.false776
                                        #   in Loop: Header=BB97_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB97_180
.LBB97_180:                             # %cond.end777
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB97_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB97_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB97_184
.LBB97_183:                             # %cond.false795
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB97_184:                             # %cond.end807
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_186
.LBB97_185:                             # %cond.false809
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-176(%rbp), %eax
.LBB97_186:                             # %cond.end810
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	%eax, -168(%rbp)
.LBB97_187:                             # %if.end812
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB97_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	.LJTI97_0(,%rax,8), %rax
	jmpq	*%rax
.LBB97_189:                             # %sw.bb
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB97_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB97_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_193:                             # %if.end824
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_213
.LBB97_194:                             # %if.else825
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB97_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB97_197
.LBB97_196:                             # %cond.false831
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %edx
.LBB97_197:                             # %cond.end832
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB97_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB97_203
.LBB97_199:                             # %cond.false837
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB97_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB97_202
.LBB97_201:                             # %cond.false841
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB97_202:                             # %cond.end842
                                        #   in Loop: Header=BB97_108 Depth=1
.LBB97_203:                             # %cond.end844
                                        #   in Loop: Header=BB97_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB97_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB97_206
.LBB97_205:                             # %cond.false849
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %edx
.LBB97_206:                             # %cond.end850
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB97_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB97_212
.LBB97_208:                             # %cond.false855
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB97_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB97_211
.LBB97_210:                             # %cond.false859
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB97_211:                             # %cond.end860
                                        #   in Loop: Header=BB97_108 Depth=1
.LBB97_212:                             # %cond.end862
                                        #   in Loop: Header=BB97_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB97_213:                             # %if.end865
                                        #   in Loop: Header=BB97_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB97_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -140(%rbp)
	je	.LBB97_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB97_222
.LBB97_217:                             # %if.else877
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB97_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB97_108 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB97_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB97_221
.LBB97_220:                             # %if.else886
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_221:                             # %if.end889
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_222
.LBB97_222:                             # %if.end890
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_223
.LBB97_223:                             # %if.end891
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_224:                             # %sw.bb892
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-140(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_226:                             # %if.end898
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_227:                             # %sw.bb899
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_229:                             # %if.end905
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_230:                             # %sw.bb906
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB97_232:                             # %if.end912
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_233:                             # %sw.default
                                        #   in Loop: Header=BB97_108 Depth=1
	jmp	.LBB97_234
.LBB97_234:                             # %sw.epilog
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB97_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_108
.LBB97_236:                             # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB97_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB97_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB97_240
.LBB97_239:                             # %cond.false925
	movl	-152(%rbp), %eax
.LBB97_240:                             # %cond.end927
	movl	%eax, pred_SAD_space
.LBB97_241:                             # %if.end929
	cmpl	$569453934, -180(%rbp)  # imm = 0x21F12D6E
	jne	.LBB97_243
.LBB97_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_243:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_242
.Lfunc_end97:
	.size	SetMotionVectorPredictor.72, .Lfunc_end97-SetMotionVectorPredictor.72
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI97_0:
	.quad	.LBB97_189
	.quad	.LBB97_224
	.quad	.LBB97_227
	.quad	.LBB97_230
                                        # -- End function
	.text
	.globl	SATD.73                 # -- Begin function SATD.73
	.p2align	4, 0x90
	.type	SATD.73,@function
SATD.73:                                # @SATD.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$814915935, -184(%rbp)  # imm = 0x3092A15F
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB98_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB98_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB98_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB98_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB98_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB98_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB98_6
.LBB98_5:                               # %cond.false
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-100(%rbp), %eax
.LBB98_6:                               # %cond.end
                                        #   in Loop: Header=BB98_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB98_2
.LBB98_8:                               # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_14
.LBB98_9:                               # %if.else
	movl	$0, -20(%rbp)
.LBB98_10:                              # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB98_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB98_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB98_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_10
.LBB98_13:                              # %for.end270
	jmp	.LBB98_14
.LBB98_14:                              # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$814915935, -184(%rbp)  # imm = 0x3092A15F
	jne	.LBB98_16
.LBB98_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_15
.Lfunc_end98:
	.size	SATD.73, .Lfunc_end98-SATD.73
	.cfi_endproc
                                        # -- End function
	.globl	SetupLargerBlocks.74    # -- Begin function SetupLargerBlocks.74
	.p2align	4, 0x90
	.type	SetupLargerBlocks.74,@function
SetupLargerBlocks.74:                   # @SetupLargerBlocks.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1541407370, -76(%rbp)  # imm = 0x5BE0028A
	movl	%edi, -72(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -36(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$32, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_1
.LBB99_4:                               # %for.end
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_5:                               # %for.cond18
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_8
# %bb.6:                                # %for.body20
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc28
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_5
.LBB99_8:                               # %for.end30
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_9:                               # %for.cond34
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_12
# %bb.10:                               # %for.body36
                                        #   in Loop: Header=BB99_9 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.11:                               # %for.inc44
                                        #   in Loop: Header=BB99_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_9
.LBB99_12:                              # %for.end46
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_13:                              # %for.cond50
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_16
# %bb.14:                               # %for.body52
                                        #   in Loop: Header=BB99_13 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc60
                                        #   in Loop: Header=BB99_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_13
.LBB99_16:                              # %for.end62
	movq	-32(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$40, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_17:                              # %for.cond66
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_20
# %bb.18:                               # %for.body68
                                        #   in Loop: Header=BB99_17 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc76
                                        #   in Loop: Header=BB99_17 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_17
.LBB99_20:                              # %for.end78
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_21:                              # %for.cond82
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_24
# %bb.22:                               # %for.body84
                                        #   in Loop: Header=BB99_21 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.23:                               # %for.inc92
                                        #   in Loop: Header=BB99_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_21
.LBB99_24:                              # %for.end94
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_25:                              # %for.cond98
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_28
# %bb.26:                               # %for.body100
                                        #   in Loop: Header=BB99_25 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc108
                                        #   in Loop: Header=BB99_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_25
.LBB99_28:                              # %for.end110
	movq	-32(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_29:                              # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_32
# %bb.30:                               # %for.body116
                                        #   in Loop: Header=BB99_29 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc124
                                        #   in Loop: Header=BB99_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_29
.LBB99_32:                              # %for.end126
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_33:                              # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB99_33 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc148
                                        #   in Loop: Header=BB99_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_33
.LBB99_36:                              # %for.end150
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_37:                              # %for.cond154
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_40
# %bb.38:                               # %for.body156
                                        #   in Loop: Header=BB99_37 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.39:                               # %for.inc164
                                        #   in Loop: Header=BB99_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_37
.LBB99_40:                              # %for.end166
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_41:                              # %for.cond170
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_44
# %bb.42:                               # %for.body172
                                        #   in Loop: Header=BB99_41 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.43:                               # %for.inc180
                                        #   in Loop: Header=BB99_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_41
.LBB99_44:                              # %for.end182
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_45:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_48
# %bb.46:                               # %for.body188
                                        #   in Loop: Header=BB99_45 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc196
                                        #   in Loop: Header=BB99_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_45
.LBB99_48:                              # %for.end198
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_49:                              # %for.cond202
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_52
# %bb.50:                               # %for.body204
                                        #   in Loop: Header=BB99_49 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc212
                                        #   in Loop: Header=BB99_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_49
.LBB99_52:                              # %for.end214
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_53:                              # %for.cond218
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_56
# %bb.54:                               # %for.body220
                                        #   in Loop: Header=BB99_53 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.55:                               # %for.inc228
                                        #   in Loop: Header=BB99_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_53
.LBB99_56:                              # %for.end230
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_57:                              # %for.cond234
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_60
# %bb.58:                               # %for.body236
                                        #   in Loop: Header=BB99_57 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.59:                               # %for.inc244
                                        #   in Loop: Header=BB99_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_57
.LBB99_60:                              # %for.end246
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_61:                              # %for.cond250
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_64
# %bb.62:                               # %for.body252
                                        #   in Loop: Header=BB99_61 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.63:                               # %for.inc260
                                        #   in Loop: Header=BB99_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_61
.LBB99_64:                              # %for.end262
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_65:                              # %for.cond274
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_68
# %bb.66:                               # %for.body276
                                        #   in Loop: Header=BB99_65 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.67:                               # %for.inc284
                                        #   in Loop: Header=BB99_65 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_65
.LBB99_68:                              # %for.end286
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_69:                              # %for.cond290
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_72
# %bb.70:                               # %for.body292
                                        #   in Loop: Header=BB99_69 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.71:                               # %for.inc300
                                        #   in Loop: Header=BB99_69 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_69
.LBB99_72:                              # %for.end302
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_73:                              # %for.cond306
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_76
# %bb.74:                               # %for.body308
                                        #   in Loop: Header=BB99_73 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.75:                               # %for.inc316
                                        #   in Loop: Header=BB99_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_73
.LBB99_76:                              # %for.end318
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_77:                              # %for.cond322
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_80
# %bb.78:                               # %for.body324
                                        #   in Loop: Header=BB99_77 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.79:                               # %for.inc332
                                        #   in Loop: Header=BB99_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_77
.LBB99_80:                              # %for.end334
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_81:                              # %for.cond346
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_84
# %bb.82:                               # %for.body348
                                        #   in Loop: Header=BB99_81 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.83:                               # %for.inc356
                                        #   in Loop: Header=BB99_81 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_81
.LBB99_84:                              # %for.end358
	movq	-32(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_85:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_88
# %bb.86:                               # %for.body364
                                        #   in Loop: Header=BB99_85 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.87:                               # %for.inc372
                                        #   in Loop: Header=BB99_85 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_85
.LBB99_88:                              # %for.end374
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	16(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_89:                              # %for.cond386
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_92
# %bb.90:                               # %for.body388
                                        #   in Loop: Header=BB99_89 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.91:                               # %for.inc396
                                        #   in Loop: Header=BB99_89 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_89
.LBB99_92:                              # %for.end398
	movq	-32(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -16(%rbp)
	movq	-24(%rbp), %rax
	addq	$64, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_93:                              # %for.cond402
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_96
# %bb.94:                               # %for.body404
                                        #   in Loop: Header=BB99_93 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.95:                               # %for.inc412
                                        #   in Loop: Header=BB99_93 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_93
.LBB99_96:                              # %for.end414
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	BlockSAD, %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	24(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$16, %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -4(%rbp)
.LBB99_97:                              # %for.cond426
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_100
# %bb.98:                               # %for.body428
                                        #   in Loop: Header=BB99_97 Depth=1
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.99:                               # %for.inc436
                                        #   in Loop: Header=BB99_97 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_97
.LBB99_100:                             # %for.end438
	cmpl	$1541407370, -76(%rbp)  # imm = 0x5BE0028A
	jne	.LBB99_102
.LBB99_101:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_102:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_101
.Lfunc_end99:
	.size	SetupLargerBlocks.74, .Lfunc_end99-SetupLargerBlocks.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Init_Motion_Search_Module.75
.LCPI100_0:
	.quad	4457293557087583675     # double 1.0E-10
.LCPI100_1:
	.quad	4611686018427387904     # double 2
	.text
	.globl	Init_Motion_Search_Module.75
	.p2align	4, 0x90
	.type	Init_Motion_Search_Module.75,@function
Init_Motion_Search_Module.75:           # @Init_Motion_Search_Module.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$941924734, -56(%rbp)   # imm = 0x3824A17E
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB100_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
	jmp	.LBB100_3
.LBB100_2:                              # %cond.false
	movq	img, %rax
	movl	72688(%rax), %eax
	addl	$1, %eax
	shll	$1, %eax
.LBB100_3:                              # %cond.end
	movl	%eax, -28(%rbp)
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	36(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	$9, %ecx
	cmpl	%eax, %ecx
	jle	.LBB100_5
# %bb.4:                                # %cond.true12
	movl	$9, %eax
	jmp	.LBB100_6
.LBB100_5:                              # %cond.false13
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	-20(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
.LBB100_6:                              # %cond.end19
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	$16, %ecx
	cmpl	%eax, %ecx
	jle	.LBB100_8
# %bb.7:                                # %cond.true23
	movl	$16, %eax
	jmp	.LBB100_9
.LBB100_8:                              # %cond.false24
	movl	-48(%rbp), %eax
	addl	$1, %eax
.LBB100_9:                              # %cond.end26
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -72(%rbp)        # 8-byte Spill
	vmovsd	.LCPI100_1(%rip), %xmm0 # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI100_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-72(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	$3, %eax
	shll	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm0
	callq	log
	vmovsd	%xmm0, -80(%rbp)        # 8-byte Spill
	vmovsd	.LCPI100_1(%rip), %xmm0 # xmm0 = mem[0],zero
	callq	log
	vmovsd	.LCPI100_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-80(%rbp), %xmm2        # 8-byte Reload
                                        # xmm2 = mem[0],zero
	vdivsd	%xmm0, %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$10, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	shll	$1, %eax
	addl	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, max_mvd
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_x
	cmpq	$0, %rax
	jne	.LBB100_11
# %bb.10:                               # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB100_11:                             # %if.end
	movslq	-36(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, spiral_search_y
	cmpq	$0, %rax
	jne	.LBB100_13
# %bb.12:                               # %if.then57
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB100_13:                             # %if.end58
	movl	max_mvd, %eax
	shll	$1, %eax
	addl	$1, %eax
	movslq	%eax, %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, mvbits
	cmpq	$0, %rax
	jne	.LBB100_15
# %bb.14:                               # %if.then65
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB100_15:                             # %if.end66
	movslq	-52(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, refbits
	cmpq	$0, %rax
	jne	.LBB100_17
# %bb.16:                               # %if.then71
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB100_17:                             # %if.end72
	movslq	-28(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	%rax, byte_abs
	cmpq	$0, %rax
	jne	.LBB100_19
# %bb.18:                               # %if.then77
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB100_19:                             # %if.end78
	movq	img, %rax
	movl	36(%rax), %ecx
	addl	$1, %ecx
	movabsq	$motion_cost, %rdi
	movl	$8, %esi
	movl	$2, %edx
	movl	$4, %r8d
	callq	get_mem4Dint
	movl	max_mvd, %eax
	movq	mvbits, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, mvbits
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	byte_abs, %rcx
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, byte_abs
	movq	mvbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB100_20:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_22 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jg	.LBB100_27
# %bb.21:                               # %for.body
                                        #   in Loop: Header=BB100_20 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_22:                             # %for.cond90
                                        #   Parent Loop BB100_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB100_25
# %bb.23:                               # %for.body93
                                        #   in Loop: Header=BB100_22 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	movq	mvbits, %rdx
	movslq	-4(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movq	mvbits, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
# %bb.24:                               # %for.inc
                                        #   in Loop: Header=BB100_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_22
.LBB100_25:                             # %for.end
                                        #   in Loop: Header=BB100_20 Depth=1
	jmp	.LBB100_26
.LBB100_26:                             # %for.inc98
                                        #   in Loop: Header=BB100_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_20
.LBB100_27:                             # %for.end100
	movq	refbits, %rax
	movl	$1, (%rax)
	movl	$3, -12(%rbp)
.LBB100_28:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_30 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jg	.LBB100_35
# %bb.29:                               # %for.body105
                                        #   in Loop: Header=BB100_28 Depth=1
	movl	-12(%rbp), %ecx
	sarl	$1, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	subl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_30:                             # %for.cond111
                                        #   Parent Loop BB100_28 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB100_33
# %bb.31:                               # %for.body114
                                        #   in Loop: Header=BB100_30 Depth=2
	movl	-12(%rbp), %eax
	movq	refbits, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc117
                                        #   in Loop: Header=BB100_30 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_30
.LBB100_33:                             # %for.end119
                                        #   in Loop: Header=BB100_28 Depth=1
	jmp	.LBB100_34
.LBB100_34:                             # %for.inc120
                                        #   in Loop: Header=BB100_28 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_28
.LBB100_35:                             # %for.end122
	movq	byte_abs, %rax
	movl	$0, (%rax)
	movl	$1, -4(%rbp)
.LBB100_36:                             # %for.cond124
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB100_39
# %bb.37:                               # %for.body128
                                        #   in Loop: Header=BB100_36 Depth=1
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	byte_abs, %rdx
	subl	-4(%rbp), %eax
	cltq
	movl	%ecx, (%rdx,%rax,4)
	movq	byte_abs, %rax
	movslq	-4(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc134
                                        #   in Loop: Header=BB100_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_36
.LBB100_39:                             # %for.end136
	movq	spiral_search_y, %rax
	movl	$0, (%rax)
	movq	spiral_search_x, %rax
	movl	$0, (%rax)
	movl	$1, -8(%rbp)
	movl	$1, -16(%rbp)
.LBB100_40:                             # %for.cond139
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_45 Depth 2
                                        #     Child Loop BB100_49 Depth 2
	movl	-16(%rbp), %eax
	movl	$1, %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB100_42
# %bb.41:                               # %cond.true142
                                        #   in Loop: Header=BB100_40 Depth=1
	movl	$1, %ecx
	jmp	.LBB100_43
.LBB100_42:                             # %cond.false143
                                        #   in Loop: Header=BB100_40 Depth=1
	movl	-20(%rbp), %ecx
.LBB100_43:                             # %cond.end144
                                        #   in Loop: Header=BB100_40 Depth=1
	cmpl	%ecx, %eax
	jg	.LBB100_54
# %bb.44:                               # %for.body148
                                        #   in Loop: Header=BB100_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB100_45:                             # %for.cond151
                                        #   Parent Loop BB100_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB100_48
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB100_45 Depth=2
	xorl	%eax, %eax
	movl	-4(%rbp), %ecx
	movq	spiral_search_x, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	subl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.47:                               # %for.inc166
                                        #   in Loop: Header=BB100_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_45
.LBB100_48:                             # %for.end168
                                        #   in Loop: Header=BB100_40 Depth=1
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_49:                             # %for.cond170
                                        #   Parent Loop BB100_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jg	.LBB100_52
# %bb.50:                               # %for.body173
                                        #   in Loop: Header=BB100_49 Depth=2
	xorl	%eax, %eax
	subl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-16(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-4(%rbp), %eax
	movq	spiral_search_y, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.51:                               # %for.inc185
                                        #   in Loop: Header=BB100_49 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_49
.LBB100_52:                             # %for.end187
                                        #   in Loop: Header=BB100_40 Depth=1
	jmp	.LBB100_53
.LBB100_53:                             # %for.inc188
                                        #   in Loop: Header=BB100_40 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_40
.LBB100_54:                             # %for.end190
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB100_56
# %bb.55:                               # %if.then191
	callq	InitializeFastFullIntegerSearch
.LBB100_56:                             # %if.end192
	cmpl	$941924734, -56(%rbp)   # imm = 0x3824A17E
	jne	.LBB100_58
.LBB100_57:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_58:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_57
.Lfunc_end100:
	.size	Init_Motion_Search_Module.75, .Lfunc_end100-Init_Motion_Search_Module.75
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.76    # -- Begin function Get_Direct_CostMB.76
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.76,@function
Get_Direct_CostMB.76:                   # @Get_Direct_CostMB.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1119241110, -28(%rbp)  # imm = 0x42B64396
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB101_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB101_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB101_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB101_5
.LBB101_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB101_18
.LBB101_5:                              # %if.end
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_6
.LBB101_6:                              # %for.inc
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_1
.LBB101_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB101_9
	jmp	.LBB101_8
.LBB101_8:                              # %for.end
	subl	$2, %eax
	je	.LBB101_15
	jmp	.LBB101_16
.LBB101_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB101_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB101_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB101_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB101_14
.LBB101_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_14:                             # %if.end9
	jmp	.LBB101_17
.LBB101_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_17
.LBB101_16:                             # %sw.default
	jmp	.LBB101_17
.LBB101_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB101_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1119241110, -28(%rbp)  # imm = 0x42B64396
	jne	.LBB101_20
.LBB101_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_19
.Lfunc_end101:
	.size	Get_Direct_CostMB.76, .Lfunc_end101-Get_Direct_CostMB.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FastFullPelBlockMotionSearch.77
.LCPI102_0:
	.quad	4602678819172646912     # double 0.5
.LCPI102_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FastFullPelBlockMotionSearch.77
	.p2align	4, 0x90
	.type	FastFullPelBlockMotionSearch.77,@function
FastFullPelBlockMotionSearch.77:        # @FastFullPelBlockMotionSearch.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	vmovsd	.LCPI102_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1529546477, -80(%rbp)  # imm = 0x5B2B06ED
	movq	%rdi, -104(%rbp)
	movw	%si, -10(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -72(%rbp)
	movl	%r9d, -84(%rbp)
	vmovsd	%xmm0, -96(%rbp)
	movl	48(%rbp), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	imull	%ecx, %eax
	movl	%eax, -68(%rbp)
	vmulsd	-96(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	-76(%rbp), %ecx
	movq	img, %rdx
	subl	168(%rdx), %ecx
	sarl	$2, %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	BlockSAD, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -40(%rbp)
	movq	search_setup_done, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB102_2
# %bb.1:                                # %if.then
	movw	-10(%rbp), %ax
	movl	-16(%rbp), %esi
	movswl	%ax, %edi
	callq	SetupFastFullPelSearch
.LBB102_2:                              # %if.end
	movq	search_center_x, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	168(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	search_center_y, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	172(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB102_6
# %bb.3:                                # %if.then31
	xorl	%eax, %eax
	movq	-40(%rbp), %rcx
	movq	pos_00, %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movswq	-10(%rbp), %rsi
	movslq	(%rdx,%rsi,4), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movl	-52(%rbp), %edx
	movq	mvbits, %rsi
	movswl	16(%rbp), %edi
	xorl	%ebx, %ebx
	subl	%edi, %ebx
	movslq	%ebx, %rdi
	movl	(%rsi,%rdi,4), %esi
	movq	mvbits, %rdi
	movswl	24(%rbp), %ebx
	subl	%ebx, %eax
	cltq
	addl	(%rdi,%rax,4), %esi
	imull	%esi, %edx
	sarl	$16, %edx
	addl	%edx, %ecx
	movl	%ecx, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB102_5
# %bb.4:                                # %if.then51
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movq	pos_00, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-10(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -28(%rbp)
.LBB102_5:                              # %if.end56
	jmp	.LBB102_6
.LBB102_6:                              # %if.end57
	movl	$0, -24(%rbp)
.LBB102_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-24(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB102_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB102_7 Depth=1
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB102_12
# %bb.9:                                # %if.then62
                                        #   in Loop: Header=BB102_7 Depth=1
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -64(%rbp)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-24(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -60(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-52(%rbp), %eax
	movq	mvbits, %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	movswl	16(%rbp), %esi
	subl	%esi, %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-60(%rbp), %esi
	shll	$2, %esi
	movswl	24(%rbp), %edi
	subl	%edi, %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB102_11
# %bb.10:                               # %if.then84
                                        #   in Loop: Header=BB102_7 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, 56(%rbp)
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
.LBB102_11:                             # %if.end85
                                        #   in Loop: Header=BB102_7 Depth=1
	jmp	.LBB102_12
.LBB102_12:                             # %if.end86
                                        #   in Loop: Header=BB102_7 Depth=1
	jmp	.LBB102_13
.LBB102_13:                             # %for.inc
                                        #   in Loop: Header=BB102_7 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB102_7
.LBB102_14:                             # %for.end
	movl	-44(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	32(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	-48(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movq	40(%rbp), %rcx
	movw	%ax, (%rcx)
	movl	56(%rbp), %ebx
	cmpl	$1529546477, -80(%rbp)  # imm = 0x5B2B06ED
	jne	.LBB102_16
.LBB102_15:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_15
.Lfunc_end102:
	.size	FastFullPelBlockMotionSearch.77, .Lfunc_end102-FastFullPelBlockMotionSearch.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.78
.LCPI103_0:
	.quad	4602678819172646912     # double 0.5
.LCPI103_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.78
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.78,@function
SubPelBlockSearchBiPred.78:             # @SubPelBlockSearchBiPred.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI103_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI103_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1686640205, -196(%rbp) # imm = 0x6488164D
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -150(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -174(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB103_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB103_4
.LBB103_3:                              # %cond.false
	movl	64(%rbp), %eax
.LBB103_4:                              # %cond.end
	jmp	.LBB103_6
.LBB103_5:                              # %cond.false17
	movl	64(%rbp), %eax
.LBB103_6:                              # %cond.end18
	movw	%ax, -170(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB103_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB103_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB103_10
.LBB103_9:                              # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB103_10
.LBB103_10:                             # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -114(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB103_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB103_14
.LBB103_13:                             # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB103_14:                             # %cond.end55
	jmp	.LBB103_16
.LBB103_15:                             # %cond.false57
	movl	$1, %eax
	jmp	.LBB103_16
.LBB103_16:                             # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB103_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB103_20
.LBB103_19:                             # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB103_20:                             # %cond.end82
	jmp	.LBB103_22
.LBB103_21:                             # %cond.false84
	movl	$1, %eax
	jmp	.LBB103_22
.LBB103_22:                             # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB103_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB103_26
.LBB103_25:                             # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB103_26:                             # %cond.end106
	jmp	.LBB103_28
.LBB103_27:                             # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB103_28
.LBB103_28:                             # %cond.end109
	movw	%ax, -172(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB103_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB103_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB103_32
.LBB103_31:                             # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB103_32:                             # %cond.end130
	jmp	.LBB103_34
.LBB103_33:                             # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB103_34
.LBB103_34:                             # %cond.end133
	movw	%ax, -176(%rbp)
	movswl	-176(%rbp), %eax
	movswl	-172(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB103_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB103_37
.LBB103_36:                             # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB103_37:                             # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB103_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB103_40
.LBB103_39:                             # %cond.false161
	movswl	-90(%rbp), %eax
.LBB103_40:                             # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-150(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_45
# %bb.41:                               # %land.lhs.true197
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_45
# %bb.42:                               # %land.lhs.true205
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_45
# %bb.43:                               # %land.lhs.true211
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB103_46
.LBB103_45:                             # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB103_46:                             # %if.end
	movswl	-118(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_51
# %bb.47:                               # %land.lhs.true224
	movswl	-118(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_51
# %bb.48:                               # %land.lhs.true232
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_51
# %bb.49:                               # %land.lhs.true238
	movswl	-116(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB103_52
.LBB103_51:                             # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB103_52:                             # %if.end248
	movw	$0, -102(%rbp)
	movw	-174(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB103_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_55 Depth 2
                                        #       Child Loop BB103_60 Depth 3
                                        #         Child Loop BB103_162 Depth 4
                                        #           Child Loop BB103_164 Depth 5
                                        #       Child Loop BB103_175 Depth 3
                                        #         Child Loop BB103_181 Depth 4
                                        #           Child Loop BB103_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-170(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB103_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB103_55:                             # %for.cond283
                                        #   Parent Loop BB103_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_60 Depth 3
                                        #         Child Loop BB103_162 Depth 4
                                        #           Child Loop BB103_164 Depth 5
                                        #       Child Loop BB103_175 Depth 3
                                        #         Child Loop BB103_181 Depth 4
                                        #           Child Loop BB103_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB103_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB103_55 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB103_57:                             # %land.end
                                        #   in Loop: Header=BB103_55 Depth=2
	testb	$1, %al
	jne	.LBB103_58
	jmp	.LBB103_195
.LBB103_58:                             # %for.body289
                                        #   in Loop: Header=BB103_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB103_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$0, -40(%rbp)
.LBB103_60:                             # %for.cond304
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_162 Depth 4
                                        #           Child Loop BB103_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB103_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_67
.LBB103_63:                             # %cond.false345
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_66
.LBB103_65:                             # %cond.false369
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_66:                             # %cond.end389
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_67:                             # %cond.end391
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_73
.LBB103_69:                             # %cond.false421
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_72
.LBB103_71:                             # %cond.false448
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_72:                             # %cond.end470
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_73:                             # %cond.end472
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_79
.LBB103_75:                             # %cond.false505
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_78
.LBB103_77:                             # %cond.false532
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_78:                             # %cond.end554
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_79:                             # %cond.end556
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_85
.LBB103_81:                             # %cond.false589
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_84
.LBB103_83:                             # %cond.false616
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_84:                             # %cond.end638
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_85:                             # %cond.end640
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_91
.LBB103_87:                             # %cond.false681
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_90
.LBB103_89:                             # %cond.false706
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_90:                             # %cond.end726
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_91:                             # %cond.end728
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_97
.LBB103_93:                             # %cond.false759
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_96
.LBB103_95:                             # %cond.false786
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_96:                             # %cond.end808
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_97:                             # %cond.end810
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_103
.LBB103_99:                             # %cond.false843
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_102
.LBB103_101:                            # %cond.false870
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_102:                            # %cond.end892
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_103:                            # %cond.end894
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_109
.LBB103_105:                            # %cond.false927
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_108
.LBB103_107:                            # %cond.false954
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_108:                            # %cond.end976
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_109:                            # %cond.end978
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_115
.LBB103_111:                            # %cond.false1019
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_114
.LBB103_113:                            # %cond.false1044
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_114:                            # %cond.end1064
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_115:                            # %cond.end1066
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_121
.LBB103_117:                            # %cond.false1097
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_120
.LBB103_119:                            # %cond.false1124
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_120:                            # %cond.end1146
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_121:                            # %cond.end1148
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_127
.LBB103_123:                            # %cond.false1181
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_126
.LBB103_125:                            # %cond.false1208
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_126:                            # %cond.end1230
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_127:                            # %cond.end1232
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_133
.LBB103_129:                            # %cond.false1265
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_132
.LBB103_131:                            # %cond.false1292
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_132:                            # %cond.end1314
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_133:                            # %cond.end1316
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_139
.LBB103_135:                            # %cond.false1357
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_138
.LBB103_137:                            # %cond.false1382
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_138:                            # %cond.end1402
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_139:                            # %cond.end1404
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_145
.LBB103_141:                            # %cond.false1435
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_144
.LBB103_143:                            # %cond.false1462
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_144:                            # %cond.end1484
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_145:                            # %cond.end1486
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_151
.LBB103_147:                            # %cond.false1519
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_150
.LBB103_149:                            # %cond.false1546
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_150:                            # %cond.end1568
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_151:                            # %cond.end1570
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB103_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_157
.LBB103_153:                            # %cond.false1603
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB103_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_156
.LBB103_155:                            # %cond.false1630
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_156:                            # %cond.end1652
                                        #   in Loop: Header=BB103_60 Depth=3
.LBB103_157:                            # %cond.end1654
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB103_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB103_173
.LBB103_160:                            # %if.end1673
                                        #   in Loop: Header=BB103_60 Depth=3
	jmp	.LBB103_170
.LBB103_161:                            # %if.else1674
                                        #   in Loop: Header=BB103_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB103_162:                            # %for.cond1675
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB103_162 Depth=4
	movl	$0, -100(%rbp)
.LBB103_164:                            # %for.cond1679
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_60 Depth=3
                                        #         Parent Loop BB103_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB103_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB103_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_164
.LBB103_167:                            # %for.end
                                        #   in Loop: Header=BB103_162 Depth=4
	jmp	.LBB103_168
.LBB103_168:                            # %for.inc1694
                                        #   in Loop: Header=BB103_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB103_162
.LBB103_169:                            # %for.end1696
                                        #   in Loop: Header=BB103_60 Depth=3
	jmp	.LBB103_170
.LBB103_170:                            # %if.end1697
                                        #   in Loop: Header=BB103_60 Depth=3
	jmp	.LBB103_171
.LBB103_171:                            # %for.inc1698
                                        #   in Loop: Header=BB103_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_60
.LBB103_172:                            # %for.end1702.loopexit
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_173
.LBB103_173:                            # %for.end1702
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_193
.LBB103_174:                            # %if.else1703
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$0, -40(%rbp)
.LBB103_175:                            # %for.cond1704
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_181 Depth 4
                                        #           Child Loop BB103_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB103_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB103_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB103_55 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB103_192
.LBB103_179:                            # %if.end2054
                                        #   in Loop: Header=BB103_175 Depth=3
	jmp	.LBB103_189
.LBB103_180:                            # %if.else2055
                                        #   in Loop: Header=BB103_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB103_181:                            # %for.cond2056
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB103_181 Depth=4
	movl	$0, -100(%rbp)
.LBB103_183:                            # %for.cond2060
                                        #   Parent Loop BB103_53 Depth=1
                                        #     Parent Loop BB103_55 Depth=2
                                        #       Parent Loop BB103_175 Depth=3
                                        #         Parent Loop BB103_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB103_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB103_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_183
.LBB103_186:                            # %for.end2077
                                        #   in Loop: Header=BB103_181 Depth=4
	jmp	.LBB103_187
.LBB103_187:                            # %for.inc2078
                                        #   in Loop: Header=BB103_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB103_181
.LBB103_188:                            # %for.end2080
                                        #   in Loop: Header=BB103_175 Depth=3
	jmp	.LBB103_189
.LBB103_189:                            # %if.end2081
                                        #   in Loop: Header=BB103_175 Depth=3
	jmp	.LBB103_190
.LBB103_190:                            # %for.inc2082
                                        #   in Loop: Header=BB103_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_175
.LBB103_191:                            # %for.end2086.loopexit
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_192
.LBB103_192:                            # %for.end2086
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_193
.LBB103_193:                            # %if.end2087
                                        #   in Loop: Header=BB103_55 Depth=2
	jmp	.LBB103_194
.LBB103_194:                            # %for.inc2088
                                        #   in Loop: Header=BB103_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB103_55
.LBB103_195:                            # %for.end2092
                                        #   in Loop: Header=BB103_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB103_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB103_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB103_197:                            # %if.end2101
                                        #   in Loop: Header=BB103_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB103_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB103_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB103_199:                            # %if.end2107
                                        #   in Loop: Header=BB103_53 Depth=1
	jmp	.LBB103_200
.LBB103_200:                            # %for.inc2108
                                        #   in Loop: Header=BB103_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB103_53
.LBB103_201:                            # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB103_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB103_203:                            # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB103_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB103_205:                            # %if.end2129
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB103_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB103_211
.LBB103_210:                            # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB103_211:                            # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB103_212:                            # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_214 Depth 2
                                        #       Child Loop BB103_219 Depth 3
                                        #         Child Loop BB103_321 Depth 4
                                        #           Child Loop BB103_323 Depth 5
                                        #       Child Loop BB103_334 Depth 3
                                        #         Child Loop BB103_340 Depth 4
                                        #           Child Loop BB103_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB103_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB103_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -112(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-112(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -110(%rbp)
.LBB103_214:                            # %for.cond2194
                                        #   Parent Loop BB103_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_219 Depth 3
                                        #         Child Loop BB103_321 Depth 4
                                        #           Child Loop BB103_323 Depth 5
                                        #       Child Loop BB103_334 Depth 3
                                        #         Child Loop BB103_340 Depth 4
                                        #           Child Loop BB103_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB103_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB103_214 Depth=2
	cmpw	$0, -110(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB103_216:                            # %land.end2202
                                        #   in Loop: Header=BB103_214 Depth=2
	testb	$1, %al
	jne	.LBB103_217
	jmp	.LBB103_354
.LBB103_217:                            # %for.body2203
                                        #   in Loop: Header=BB103_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB103_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$0, -40(%rbp)
.LBB103_219:                            # %for.cond2218
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_321 Depth 4
                                        #           Child Loop BB103_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB103_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_226
.LBB103_222:                            # %cond.false2261
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_225
.LBB103_224:                            # %cond.false2286
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_225:                            # %cond.end2306
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_226:                            # %cond.end2308
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_232
.LBB103_228:                            # %cond.false2339
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_231
.LBB103_230:                            # %cond.false2366
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_231:                            # %cond.end2388
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_232:                            # %cond.end2390
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_238
.LBB103_234:                            # %cond.false2423
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_237
.LBB103_236:                            # %cond.false2450
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_237:                            # %cond.end2472
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_238:                            # %cond.end2474
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_244
.LBB103_240:                            # %cond.false2507
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_243
.LBB103_242:                            # %cond.false2534
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_243:                            # %cond.end2556
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_244:                            # %cond.end2558
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_250
.LBB103_246:                            # %cond.false2599
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_249
.LBB103_248:                            # %cond.false2624
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_249:                            # %cond.end2644
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_250:                            # %cond.end2646
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_256
.LBB103_252:                            # %cond.false2677
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_255
.LBB103_254:                            # %cond.false2704
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_255:                            # %cond.end2726
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_256:                            # %cond.end2728
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_262
.LBB103_258:                            # %cond.false2761
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_261
.LBB103_260:                            # %cond.false2788
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_261:                            # %cond.end2810
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_262:                            # %cond.end2812
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_268
.LBB103_264:                            # %cond.false2845
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_267
.LBB103_266:                            # %cond.false2872
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_267:                            # %cond.end2894
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_268:                            # %cond.end2896
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_274
.LBB103_270:                            # %cond.false2937
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_273
.LBB103_272:                            # %cond.false2962
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_273:                            # %cond.end2982
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_274:                            # %cond.end2984
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_280
.LBB103_276:                            # %cond.false3015
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_279
.LBB103_278:                            # %cond.false3042
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_279:                            # %cond.end3064
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_280:                            # %cond.end3066
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_286
.LBB103_282:                            # %cond.false3099
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_285
.LBB103_284:                            # %cond.false3126
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_285:                            # %cond.end3148
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_286:                            # %cond.end3150
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_292
.LBB103_288:                            # %cond.false3183
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_291
.LBB103_290:                            # %cond.false3210
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_291:                            # %cond.end3232
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_292:                            # %cond.end3234
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_298
.LBB103_294:                            # %cond.false3275
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_297
.LBB103_296:                            # %cond.false3300
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_297:                            # %cond.end3320
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_298:                            # %cond.end3322
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_304
.LBB103_300:                            # %cond.false3353
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_303
.LBB103_302:                            # %cond.false3380
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_303:                            # %cond.end3402
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_304:                            # %cond.end3404
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_310
.LBB103_306:                            # %cond.false3437
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_309
.LBB103_308:                            # %cond.false3464
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_309:                            # %cond.end3486
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_310:                            # %cond.end3488
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB103_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB103_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB103_316
.LBB103_312:                            # %cond.false3521
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB103_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB103_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB103_315
.LBB103_314:                            # %cond.false3548
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB103_315:                            # %cond.end3570
                                        #   in Loop: Header=BB103_219 Depth=3
.LBB103_316:                            # %cond.end3572
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB103_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB103_332
.LBB103_319:                            # %if.end3593
                                        #   in Loop: Header=BB103_219 Depth=3
	jmp	.LBB103_329
.LBB103_320:                            # %if.else3594
                                        #   in Loop: Header=BB103_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB103_321:                            # %for.cond3595
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB103_321 Depth=4
	movl	$0, -100(%rbp)
.LBB103_323:                            # %for.cond3599
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_219 Depth=3
                                        #         Parent Loop BB103_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB103_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB103_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_323
.LBB103_326:                            # %for.end3616
                                        #   in Loop: Header=BB103_321 Depth=4
	jmp	.LBB103_327
.LBB103_327:                            # %for.inc3617
                                        #   in Loop: Header=BB103_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB103_321
.LBB103_328:                            # %for.end3619
                                        #   in Loop: Header=BB103_219 Depth=3
	jmp	.LBB103_329
.LBB103_329:                            # %if.end3620
                                        #   in Loop: Header=BB103_219 Depth=3
	jmp	.LBB103_330
.LBB103_330:                            # %for.inc3621
                                        #   in Loop: Header=BB103_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_219
.LBB103_331:                            # %for.end3625.loopexit
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_332
.LBB103_332:                            # %for.end3625
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_352
.LBB103_333:                            # %if.else3626
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$0, -40(%rbp)
.LBB103_334:                            # %for.cond3627
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_340 Depth 4
                                        #           Child Loop BB103_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB103_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB103_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-112(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-56(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-48(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB103_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB103_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB103_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB103_214 Depth=2
	movw	$1, -110(%rbp)
	jmp	.LBB103_351
.LBB103_338:                            # %if.end3978
                                        #   in Loop: Header=BB103_334 Depth=3
	jmp	.LBB103_348
.LBB103_339:                            # %if.else3979
                                        #   in Loop: Header=BB103_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB103_340:                            # %for.cond3980
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB103_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB103_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB103_340 Depth=4
	movl	$0, -100(%rbp)
.LBB103_342:                            # %for.cond3984
                                        #   Parent Loop BB103_212 Depth=1
                                        #     Parent Loop BB103_214 Depth=2
                                        #       Parent Loop BB103_334 Depth=3
                                        #         Parent Loop BB103_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB103_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB103_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB103_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB103_342
.LBB103_345:                            # %for.end4001
                                        #   in Loop: Header=BB103_340 Depth=4
	jmp	.LBB103_346
.LBB103_346:                            # %for.inc4002
                                        #   in Loop: Header=BB103_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB103_340
.LBB103_347:                            # %for.end4004
                                        #   in Loop: Header=BB103_334 Depth=3
	jmp	.LBB103_348
.LBB103_348:                            # %if.end4005
                                        #   in Loop: Header=BB103_334 Depth=3
	jmp	.LBB103_349
.LBB103_349:                            # %for.inc4006
                                        #   in Loop: Header=BB103_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB103_334
.LBB103_350:                            # %for.end4010.loopexit
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_351
.LBB103_351:                            # %for.end4010
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_352
.LBB103_352:                            # %if.end4011
                                        #   in Loop: Header=BB103_214 Depth=2
	jmp	.LBB103_353
.LBB103_353:                            # %for.inc4012
                                        #   in Loop: Header=BB103_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB103_214
.LBB103_354:                            # %for.end4016
                                        #   in Loop: Header=BB103_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB103_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB103_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB103_356:                            # %if.end4026
                                        #   in Loop: Header=BB103_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB103_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB103_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB103_358:                            # %if.end4032
                                        #   in Loop: Header=BB103_212 Depth=1
	jmp	.LBB103_359
.LBB103_359:                            # %for.inc4033
                                        #   in Loop: Header=BB103_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB103_212
.LBB103_360:                            # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB103_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB103_362:                            # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1686640205, -196(%rbp) # imm = 0x6488164D
	jne	.LBB103_364
.LBB103_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_364:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_363
.Lfunc_end103:
	.size	SubPelBlockSearchBiPred.78, .Lfunc_end103-SubPelBlockSearchBiPred.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.79
.LCPI104_0:
	.quad	4602678819172646912     # double 0.5
.LCPI104_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.79
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.79,@function
SubPelBlockMotionSearch.79:             # @SubPelBlockMotionSearch.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI104_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI104_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$750195176, -184(%rbp)  # imm = 0x2CB711E8
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -156(%rbp)
	movl	%ecx, -152(%rbp)
	movl	%r8d, -132(%rbp)
	movl	%r9d, -96(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -144(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -96(%rbp)
	jne	.LBB104_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB104_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB104_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB104_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB104_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB104_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB104_7:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movl	-132(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB104_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB104_10
.LBB104_9:                              # %cond.false
	movl	$1, %eax
	jmp	.LBB104_10
.LBB104_10:                             # %cond.end
	movl	%eax, -196(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB104_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB104_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB104_14
.LBB104_13:                             # %cond.false34
	movl	48(%rbp), %eax
.LBB104_14:                             # %cond.end35
	jmp	.LBB104_16
.LBB104_15:                             # %cond.false37
	movl	48(%rbp), %eax
.LBB104_16:                             # %cond.end38
	movl	%eax, -200(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB104_20
.LBB104_19:                             # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB104_20
.LBB104_20:                             # %cond.end50
	movl	%ecx, -148(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB104_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB104_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB104_26
.LBB104_23:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB104_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB104_25:                             # %land.end65
.LBB104_26:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -192(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB104_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB104_29
.LBB104_28:                             # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB104_29:                             # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -180(%rbp)
	movl	-156(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -192(%rbp)
	je	.LBB104_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB104_32
# %bb.31:                               # %if.then
	movl	-156(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB104_33
.LBB104_32:                             # %if.else
	movl	-156(%rbp), %eax
	addl	-148(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB104_33:                             # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-136(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB104_38
# %bb.34:                               # %land.lhs.true112
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_38
# %bb.35:                               # %land.lhs.true118
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB104_38
# %bb.36:                               # %land.lhs.true123
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB104_39
.LBB104_38:                             # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB104_39:                             # %if.end131
	movl	$0, -84(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB104_40:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_47 Depth 2
                                        #       Child Loop BB104_51 Depth 3
                                        #         Child Loop BB104_57 Depth 4
                                        #           Child Loop BB104_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-200(%rbp), %eax
	jge	.LBB104_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB104_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -104(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-104(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -188(%rbp)
	je	.LBB104_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB104_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB104_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	-144(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB104_44:                             # %if.end164
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB104_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB104_40 Depth=1
	jmp	.LBB104_75
.LBB104_46:                             # %if.end168
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB104_47:                             # %for.cond169
                                        #   Parent Loop BB104_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_51 Depth 3
                                        #         Child Loop BB104_57 Depth 4
                                        #           Child Loop BB104_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-140(%rbp), %ecx
	jge	.LBB104_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB104_47 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB104_49:                             # %land.end174
                                        #   in Loop: Header=BB104_47 Depth=2
	testb	$1, %al
	jne	.LBB104_50
	jmp	.LBB104_70
.LBB104_50:                             # %for.body176
                                        #   in Loop: Header=BB104_47 Depth=2
	movl	-132(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB104_51:                             # %for.cond180
                                        #   Parent Loop BB104_40 Depth=1
                                        #     Parent Loop BB104_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_57 Depth 4
                                        #           Child Loop BB104_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB104_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB104_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-104(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB104_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB104_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB104_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB104_47 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB104_68
.LBB104_55:                             # %if.end342
                                        #   in Loop: Header=BB104_51 Depth=3
	jmp	.LBB104_65
.LBB104_56:                             # %if.else343
                                        #   in Loop: Header=BB104_51 Depth=3
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB104_57:                             # %for.cond344
                                        #   Parent Loop BB104_40 Depth=1
                                        #     Parent Loop BB104_47 Depth=2
                                        #       Parent Loop BB104_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB104_59 Depth 5
	cmpl	$4, -72(%rbp)
	jge	.LBB104_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB104_57 Depth=4
	movl	$0, -76(%rbp)
.LBB104_59:                             # %for.cond348
                                        #   Parent Loop BB104_40 Depth=1
                                        #     Parent Loop BB104_47 Depth=2
                                        #       Parent Loop BB104_51 Depth=3
                                        #         Parent Loop BB104_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -76(%rbp)
	jge	.LBB104_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB104_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB104_59 Depth=5
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB104_59
.LBB104_62:                             # %for.end
                                        #   in Loop: Header=BB104_57 Depth=4
	jmp	.LBB104_63
.LBB104_63:                             # %for.inc361
                                        #   in Loop: Header=BB104_57 Depth=4
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB104_57
.LBB104_64:                             # %for.end363
                                        #   in Loop: Header=BB104_51 Depth=3
	jmp	.LBB104_65
.LBB104_65:                             # %if.end364
                                        #   in Loop: Header=BB104_51 Depth=3
	jmp	.LBB104_66
.LBB104_66:                             # %for.inc365
                                        #   in Loop: Header=BB104_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_51
.LBB104_67:                             # %for.end367.loopexit
                                        #   in Loop: Header=BB104_47 Depth=2
	jmp	.LBB104_68
.LBB104_68:                             # %for.end367
                                        #   in Loop: Header=BB104_47 Depth=2
	jmp	.LBB104_69
.LBB104_69:                             # %for.inc368
                                        #   in Loop: Header=BB104_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB104_47
.LBB104_70:                             # %for.end370
                                        #   in Loop: Header=BB104_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB104_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB104_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB104_72:                             # %if.end377
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB104_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB104_74:                             # %if.end381
                                        #   in Loop: Header=BB104_40 Depth=1
	jmp	.LBB104_75
.LBB104_75:                             # %for.inc382
                                        #   in Loop: Header=BB104_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB104_40
.LBB104_76:                             # %for.end384
	cmpl	$0, -84(%rbp)
	je	.LBB104_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB104_78:                             # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB104_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB104_80:                             # %if.end403
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB104_85
# %bb.81:                               # %land.lhs.true408
	movl	-112(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_85
# %bb.82:                               # %land.lhs.true414
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB104_85
# %bb.83:                               # %land.lhs.true419
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB104_86
.LBB104_85:                             # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB104_86:                             # %if.end427
	movl	$0, -84(%rbp)
	movl	-180(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB104_87:                             # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_91 Depth 2
                                        #       Child Loop BB104_95 Depth 3
                                        #         Child Loop BB104_101 Depth 4
                                        #           Child Loop BB104_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB104_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB104_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -104(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-104(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB104_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB104_87 Depth=1
	jmp	.LBB104_119
.LBB104_90:                             # %if.end456
                                        #   in Loop: Header=BB104_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -100(%rbp)
.LBB104_91:                             # %for.cond457
                                        #   Parent Loop BB104_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_95 Depth 3
                                        #         Child Loop BB104_101 Depth 4
                                        #           Child Loop BB104_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-140(%rbp), %ecx
	jge	.LBB104_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB104_91 Depth=2
	cmpl	$0, -100(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB104_93:                             # %land.end463
                                        #   in Loop: Header=BB104_91 Depth=2
	testb	$1, %al
	jne	.LBB104_94
	jmp	.LBB104_114
.LBB104_94:                             # %for.body465
                                        #   in Loop: Header=BB104_91 Depth=2
	movl	-132(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB104_95:                             # %for.cond469
                                        #   Parent Loop BB104_87 Depth=1
                                        #     Parent Loop BB104_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_101 Depth 4
                                        #           Child Loop BB104_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB104_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB104_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-152(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-104(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-80(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB104_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB104_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB104_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB104_91 Depth=2
	movl	$1, -100(%rbp)
	jmp	.LBB104_112
.LBB104_99:                             # %if.end636
                                        #   in Loop: Header=BB104_95 Depth=3
	jmp	.LBB104_109
.LBB104_100:                            # %if.else637
                                        #   in Loop: Header=BB104_95 Depth=3
	movl	$0, -72(%rbp)
	movl	$0, -92(%rbp)
.LBB104_101:                            # %for.cond638
                                        #   Parent Loop BB104_87 Depth=1
                                        #     Parent Loop BB104_91 Depth=2
                                        #       Parent Loop BB104_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB104_103 Depth 5
	cmpl	$4, -72(%rbp)
	jge	.LBB104_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB104_101 Depth=4
	movl	$0, -76(%rbp)
.LBB104_103:                            # %for.cond642
                                        #   Parent Loop BB104_87 Depth=1
                                        #     Parent Loop BB104_91 Depth=2
                                        #       Parent Loop BB104_95 Depth=3
                                        #         Parent Loop BB104_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -76(%rbp)
	jge	.LBB104_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB104_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB104_103 Depth=5
	movl	-76(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -76(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB104_103
.LBB104_106:                            # %for.end657
                                        #   in Loop: Header=BB104_101 Depth=4
	jmp	.LBB104_107
.LBB104_107:                            # %for.inc658
                                        #   in Loop: Header=BB104_101 Depth=4
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB104_101
.LBB104_108:                            # %for.end660
                                        #   in Loop: Header=BB104_95 Depth=3
	jmp	.LBB104_109
.LBB104_109:                            # %if.end661
                                        #   in Loop: Header=BB104_95 Depth=3
	jmp	.LBB104_110
.LBB104_110:                            # %for.inc662
                                        #   in Loop: Header=BB104_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_95
.LBB104_111:                            # %for.end664.loopexit
                                        #   in Loop: Header=BB104_91 Depth=2
	jmp	.LBB104_112
.LBB104_112:                            # %for.end664
                                        #   in Loop: Header=BB104_91 Depth=2
	jmp	.LBB104_113
.LBB104_113:                            # %for.inc665
                                        #   in Loop: Header=BB104_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB104_91
.LBB104_114:                            # %for.end667
                                        #   in Loop: Header=BB104_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB104_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB104_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB104_116:                            # %if.end675
                                        #   in Loop: Header=BB104_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB104_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB104_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
.LBB104_118:                            # %if.end679
                                        #   in Loop: Header=BB104_87 Depth=1
	jmp	.LBB104_119
.LBB104_119:                            # %for.inc680
                                        #   in Loop: Header=BB104_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB104_87
.LBB104_120:                            # %for.end682
	cmpl	$0, -84(%rbp)
	je	.LBB104_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB104_122:                            # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$750195176, -184(%rbp)  # imm = 0x2CB711E8
	jne	.LBB104_124
.LBB104_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_123
.Lfunc_end104:
	.size	SubPelBlockMotionSearch.79, .Lfunc_end104-SubPelBlockMotionSearch.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.80
.LCPI105_0:
	.quad	4602678819172646912     # double 0.5
.LCPI105_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.80
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.80,@function
SubPelBlockMotionSearch.80:             # @SubPelBlockMotionSearch.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI105_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1477832986, -184(%rbp) # imm = 0x5815F11A
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -132(%rbp)
	movl	%ecx, -148(%rbp)
	movl	%r8d, -152(%rbp)
	movl	%r9d, -104(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -144(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$1, -104(%rbp)
	jne	.LBB105_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB105_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB105_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB105_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB105_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB105_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB105_7:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	movslq	-104(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -156(%rbp)
	movl	-148(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movl	-152(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -112(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB105_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB105_10
.LBB105_9:                              # %cond.false
	movl	$1, %eax
	jmp	.LBB105_10
.LBB105_10:                             # %cond.end
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB105_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB105_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB105_14
.LBB105_13:                             # %cond.false34
	movl	48(%rbp), %eax
.LBB105_14:                             # %cond.end35
	jmp	.LBB105_16
.LBB105_15:                             # %cond.false37
	movl	48(%rbp), %eax
.LBB105_16:                             # %cond.end38
	movl	%eax, -192(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB105_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB105_20
.LBB105_19:                             # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB105_20
.LBB105_20:                             # %cond.end50
	movl	%ecx, -136(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB105_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB105_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB105_26
.LBB105_23:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB105_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB105_25:                             # %land.end65
.LBB105_26:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB105_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB105_29
.LBB105_28:                             # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB105_29:                             # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -196(%rbp)
	movl	-132(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -200(%rbp)
	je	.LBB105_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB105_32
# %bb.31:                               # %if.then
	movl	-132(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB105_33
.LBB105_32:                             # %if.else
	movl	-132(%rbp), %eax
	addl	-136(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB105_33:                             # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-140(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-156(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB105_38
# %bb.34:                               # %land.lhs.true112
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_38
# %bb.35:                               # %land.lhs.true118
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB105_38
# %bb.36:                               # %land.lhs.true123
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB105_39
.LBB105_38:                             # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB105_39:                             # %if.end131
	movl	$0, -72(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB105_40:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_47 Depth 2
                                        #       Child Loop BB105_51 Depth 3
                                        #         Child Loop BB105_57 Depth 4
                                        #           Child Loop BB105_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-192(%rbp), %eax
	jge	.LBB105_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB105_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB105_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB105_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB105_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB105_40 Depth=1
	movl	-144(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB105_44:                             # %if.end164
                                        #   in Loop: Header=BB105_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB105_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB105_40 Depth=1
	jmp	.LBB105_75
.LBB105_46:                             # %if.end168
                                        #   in Loop: Header=BB105_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -96(%rbp)
.LBB105_47:                             # %for.cond169
                                        #   Parent Loop BB105_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_51 Depth 3
                                        #         Child Loop BB105_57 Depth 4
                                        #           Child Loop BB105_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-156(%rbp), %ecx
	jge	.LBB105_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB105_47 Depth=2
	cmpl	$0, -96(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB105_49:                             # %land.end174
                                        #   in Loop: Header=BB105_47 Depth=2
	testb	$1, %al
	jne	.LBB105_50
	jmp	.LBB105_70
.LBB105_50:                             # %for.body176
                                        #   in Loop: Header=BB105_47 Depth=2
	movl	-152(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB105_51:                             # %for.cond180
                                        #   Parent Loop BB105_40 Depth=1
                                        #     Parent Loop BB105_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_57 Depth 4
                                        #           Child Loop BB105_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB105_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB105_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-148(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB105_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB105_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB105_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB105_47 Depth=2
	movl	$1, -96(%rbp)
	jmp	.LBB105_68
.LBB105_55:                             # %if.end342
                                        #   in Loop: Header=BB105_51 Depth=3
	jmp	.LBB105_65
.LBB105_56:                             # %if.else343
                                        #   in Loop: Header=BB105_51 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB105_57:                             # %for.cond344
                                        #   Parent Loop BB105_40 Depth=1
                                        #     Parent Loop BB105_47 Depth=2
                                        #       Parent Loop BB105_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_59 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB105_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB105_57 Depth=4
	movl	$0, -80(%rbp)
.LBB105_59:                             # %for.cond348
                                        #   Parent Loop BB105_40 Depth=1
                                        #     Parent Loop BB105_47 Depth=2
                                        #       Parent Loop BB105_51 Depth=3
                                        #         Parent Loop BB105_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB105_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB105_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB105_59 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB105_59
.LBB105_62:                             # %for.end
                                        #   in Loop: Header=BB105_57 Depth=4
	jmp	.LBB105_63
.LBB105_63:                             # %for.inc361
                                        #   in Loop: Header=BB105_57 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB105_57
.LBB105_64:                             # %for.end363
                                        #   in Loop: Header=BB105_51 Depth=3
	jmp	.LBB105_65
.LBB105_65:                             # %if.end364
                                        #   in Loop: Header=BB105_51 Depth=3
	jmp	.LBB105_66
.LBB105_66:                             # %for.inc365
                                        #   in Loop: Header=BB105_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_51
.LBB105_67:                             # %for.end367.loopexit
                                        #   in Loop: Header=BB105_47 Depth=2
	jmp	.LBB105_68
.LBB105_68:                             # %for.end367
                                        #   in Loop: Header=BB105_47 Depth=2
	jmp	.LBB105_69
.LBB105_69:                             # %for.inc368
                                        #   in Loop: Header=BB105_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB105_47
.LBB105_70:                             # %for.end370
                                        #   in Loop: Header=BB105_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB105_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB105_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB105_72:                             # %if.end377
                                        #   in Loop: Header=BB105_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB105_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB105_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB105_74:                             # %if.end381
                                        #   in Loop: Header=BB105_40 Depth=1
	jmp	.LBB105_75
.LBB105_75:                             # %for.inc382
                                        #   in Loop: Header=BB105_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB105_40
.LBB105_76:                             # %for.end384
	cmpl	$0, -72(%rbp)
	je	.LBB105_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB105_78:                             # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB105_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB105_80:                             # %if.end403
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB105_85
# %bb.81:                               # %land.lhs.true408
	movl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_85
# %bb.82:                               # %land.lhs.true414
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB105_85
# %bb.83:                               # %land.lhs.true419
	movl	-112(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-160(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB105_86
.LBB105_85:                             # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB105_86:                             # %if.end427
	movl	$0, -72(%rbp)
	movl	-196(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB105_87:                             # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_91 Depth 2
                                        #       Child Loop BB105_95 Depth 3
                                        #         Child Loop BB105_101 Depth 4
                                        #           Child Loop BB105_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB105_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB105_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movl	-144(%rbp), %eax
	movq	mvbits, %rdx
	movl	-100(%rbp), %esi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-108(%rbp), %edi
	movl	-120(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB105_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB105_87 Depth=1
	jmp	.LBB105_119
.LBB105_90:                             # %if.end456
                                        #   in Loop: Header=BB105_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -96(%rbp)
.LBB105_91:                             # %for.cond457
                                        #   Parent Loop BB105_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_95 Depth 3
                                        #         Child Loop BB105_101 Depth 4
                                        #           Child Loop BB105_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-156(%rbp), %ecx
	jge	.LBB105_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB105_91 Depth=2
	cmpl	$0, -96(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB105_93:                             # %land.end463
                                        #   in Loop: Header=BB105_91 Depth=2
	testb	$1, %al
	jne	.LBB105_94
	jmp	.LBB105_114
.LBB105_94:                             # %for.body465
                                        #   in Loop: Header=BB105_91 Depth=2
	movl	-152(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-108(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB105_95:                             # %for.cond469
                                        #   Parent Loop BB105_87 Depth=1
                                        #     Parent Loop BB105_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_101 Depth 4
                                        #           Child Loop BB105_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB105_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB105_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-148(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-100(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-76(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB105_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB105_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB105_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB105_91 Depth=2
	movl	$1, -96(%rbp)
	jmp	.LBB105_112
.LBB105_99:                             # %if.end636
                                        #   in Loop: Header=BB105_95 Depth=3
	jmp	.LBB105_109
.LBB105_100:                            # %if.else637
                                        #   in Loop: Header=BB105_95 Depth=3
	movl	$0, -84(%rbp)
	movl	$0, -92(%rbp)
.LBB105_101:                            # %for.cond638
                                        #   Parent Loop BB105_87 Depth=1
                                        #     Parent Loop BB105_91 Depth=2
                                        #       Parent Loop BB105_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_103 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB105_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB105_101 Depth=4
	movl	$0, -80(%rbp)
.LBB105_103:                            # %for.cond642
                                        #   Parent Loop BB105_87 Depth=1
                                        #     Parent Loop BB105_91 Depth=2
                                        #       Parent Loop BB105_95 Depth=3
                                        #         Parent Loop BB105_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -80(%rbp)
	jge	.LBB105_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB105_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB105_103 Depth=5
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB105_103
.LBB105_106:                            # %for.end657
                                        #   in Loop: Header=BB105_101 Depth=4
	jmp	.LBB105_107
.LBB105_107:                            # %for.inc658
                                        #   in Loop: Header=BB105_101 Depth=4
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB105_101
.LBB105_108:                            # %for.end660
                                        #   in Loop: Header=BB105_95 Depth=3
	jmp	.LBB105_109
.LBB105_109:                            # %if.end661
                                        #   in Loop: Header=BB105_95 Depth=3
	jmp	.LBB105_110
.LBB105_110:                            # %for.inc662
                                        #   in Loop: Header=BB105_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_95
.LBB105_111:                            # %for.end664.loopexit
                                        #   in Loop: Header=BB105_91 Depth=2
	jmp	.LBB105_112
.LBB105_112:                            # %for.end664
                                        #   in Loop: Header=BB105_91 Depth=2
	jmp	.LBB105_113
.LBB105_113:                            # %for.inc665
                                        #   in Loop: Header=BB105_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB105_91
.LBB105_114:                            # %for.end667
                                        #   in Loop: Header=BB105_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB105_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB105_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-104(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB105_116:                            # %if.end675
                                        #   in Loop: Header=BB105_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB105_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB105_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB105_118:                            # %if.end679
                                        #   in Loop: Header=BB105_87 Depth=1
	jmp	.LBB105_119
.LBB105_119:                            # %for.inc680
                                        #   in Loop: Header=BB105_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB105_87
.LBB105_120:                            # %for.end682
	cmpl	$0, -72(%rbp)
	je	.LBB105_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-72(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB105_122:                            # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$1477832986, -184(%rbp) # imm = 0x5815F11A
	jne	.LBB105_124
.LBB105_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_123
.Lfunc_end105:
	.size	SubPelBlockMotionSearch.80, .Lfunc_end105-SubPelBlockMotionSearch.80
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.81 # -- Begin function SetMotionVectorPredictor.81
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.81,@function
SetMotionVectorPredictor.81:            # @SetMotionVectorPredictor.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1152454482, -180(%rbp) # imm = 0x44B10F52
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -156(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB106_2:                              # %if.end
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-156(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -172(%rbp)
	jle	.LBB106_19
# %bb.3:                                # %if.then2
	cmpl	$8, -164(%rbp)
	jge	.LBB106_14
# %bb.4:                                # %if.then4
	cmpl	$8, -172(%rbp)
	jne	.LBB106_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB106_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB106_8
.LBB106_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB106_8:                              # %if.end10
	jmp	.LBB106_13
.LBB106_9:                              # %if.else11
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB106_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB106_12
.LBB106_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB106_12:                             # %if.end18
	jmp	.LBB106_13
.LBB106_13:                             # %if.end19
	jmp	.LBB106_18
.LBB106_14:                             # %if.else20
	movl	-164(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB106_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB106_17
.LBB106_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB106_17:                             # %if.end28
	jmp	.LBB106_18
.LBB106_18:                             # %if.end29
	jmp	.LBB106_19
.LBB106_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB106_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB106_21:                             # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB106_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB106_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_25
.LBB106_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_25
.LBB106_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_28
.LBB106_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_28
.LBB106_28:                             # %cond.end56
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_31
.LBB106_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_31
.LBB106_31:                             # %cond.end71
	movl	%eax, -84(%rbp)
	jmp	.LBB106_72
.LBB106_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB106_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_37
.LBB106_36:                             # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_37:                             # %cond.end108
	jmp	.LBB106_39
.LBB106_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_39
.LBB106_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_43
.LBB106_42:                             # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_43:                             # %cond.end143
	jmp	.LBB106_45
.LBB106_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_45
.LBB106_45:                             # %cond.end146
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_49
.LBB106_48:                             # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB106_49:                             # %cond.end178
	jmp	.LBB106_51
.LBB106_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_51
.LBB106_51:                             # %cond.end181
	movl	%eax, -84(%rbp)
	jmp	.LBB106_71
.LBB106_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB106_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_56
.LBB106_55:                             # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_56:                             # %cond.end213
	jmp	.LBB106_58
.LBB106_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_58
.LBB106_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_62
.LBB106_61:                             # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_62:                             # %cond.end248
	jmp	.LBB106_64
.LBB106_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_64
.LBB106_64:                             # %cond.end251
	movl	%eax, -80(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB106_68
.LBB106_67:                             # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_68:                             # %cond.end283
	jmp	.LBB106_70
.LBB106_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB106_70
.LBB106_70:                             # %cond.end286
	movl	%eax, -84(%rbp)
.LBB106_71:                             # %if.end288
	jmp	.LBB106_72
.LBB106_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_76
# %bb.73:                               # %land.lhs.true
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_76
# %bb.74:                               # %land.lhs.true296
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB106_86
.LBB106_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_80
# %bb.77:                               # %land.lhs.true305
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_80
# %bb.78:                               # %land.lhs.true309
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB106_85
.LBB106_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_84
# %bb.81:                               # %land.lhs.true318
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB106_84
# %bb.82:                               # %land.lhs.true322
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB106_84:                             # %if.end327
	jmp	.LBB106_85
.LBB106_85:                             # %if.end328
	jmp	.LBB106_86
.LBB106_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB106_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB106_96
# %bb.88:                               # %if.then335
	cmpl	$0, -164(%rbp)
	jne	.LBB106_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB106_91:                             # %if.end343
	jmp	.LBB106_95
.LBB106_92:                             # %if.else344
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB106_94:                             # %if.end349
	jmp	.LBB106_95
.LBB106_95:                             # %if.end350
	jmp	.LBB106_107
.LBB106_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB106_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB106_106
# %bb.98:                               # %if.then357
	cmpl	$0, -172(%rbp)
	jne	.LBB106_102
# %bb.99:                               # %if.then360
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB106_101:                            # %if.end365
	jmp	.LBB106_105
.LBB106_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB106_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB106_104:                            # %if.end371
	jmp	.LBB106_105
.LBB106_105:                            # %if.end372
	jmp	.LBB106_106
.LBB106_106:                            # %if.end373
	jmp	.LBB106_107
.LBB106_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB106_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB106_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB106_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB106_121
.LBB106_111:                            # %if.then381
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_114
.LBB106_113:                            # %cond.false396
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_114
.LBB106_114:                            # %cond.end397
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_117
.LBB106_116:                            # %cond.false413
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_117
.LBB106_117:                            # %cond.end414
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_120
.LBB106_119:                            # %cond.false430
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_120
.LBB106_120:                            # %cond.end431
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB106_161
.LBB106_121:                            # %if.else433
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_126
.LBB106_125:                            # %cond.false462
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB106_126:                            # %cond.end474
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_128
.LBB106_127:                            # %cond.false476
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_128
.LBB106_128:                            # %cond.end477
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_132
.LBB106_131:                            # %cond.false500
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB106_132:                            # %cond.end513
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_134
.LBB106_133:                            # %cond.false515
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_134
.LBB106_134:                            # %cond.end516
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB106_138
.LBB106_137:                            # %cond.false539
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB106_138:                            # %cond.end552
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_140
.LBB106_139:                            # %cond.false554
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_140
.LBB106_140:                            # %cond.end555
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB106_160
.LBB106_141:                            # %if.else557
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB106_145
.LBB106_144:                            # %cond.false580
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_145:                            # %cond.end592
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_147
.LBB106_146:                            # %cond.false594
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_147
.LBB106_147:                            # %cond.end595
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB106_151
.LBB106_150:                            # %cond.false619
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_151:                            # %cond.end631
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_153
.LBB106_152:                            # %cond.false633
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_153
.LBB106_153:                            # %cond.end634
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB106_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB106_157
.LBB106_156:                            # %cond.false658
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB106_157:                            # %cond.end670
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_159
.LBB106_158:                            # %cond.false672
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_159
.LBB106_159:                            # %cond.end673
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB106_160:                            # %if.end675
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_161
.LBB106_161:                            # %if.end676
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB106_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_166
.LBB106_165:                            # %cond.false696
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_166:                            # %cond.end708
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_168
.LBB106_167:                            # %cond.false710
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_168
.LBB106_168:                            # %cond.end711
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB106_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_172
.LBB106_171:                            # %cond.false729
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_172:                            # %cond.end741
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_174
.LBB106_173:                            # %cond.false743
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_174
.LBB106_174:                            # %cond.end744
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -160(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB106_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_178
.LBB106_177:                            # %cond.false762
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_178:                            # %cond.end774
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_180
.LBB106_179:                            # %cond.false776
                                        #   in Loop: Header=BB106_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB106_180
.LBB106_180:                            # %cond.end777
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB106_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB106_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB106_184
.LBB106_183:                            # %cond.false795
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB106_184:                            # %cond.end807
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_186
.LBB106_185:                            # %cond.false809
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-176(%rbp), %eax
.LBB106_186:                            # %cond.end810
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	%eax, -168(%rbp)
.LBB106_187:                            # %if.end812
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB106_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	.LJTI106_0(,%rax,8), %rax
	jmpq	*%rax
.LBB106_189:                            # %sw.bb
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB106_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB106_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_193:                            # %if.end824
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_213
.LBB106_194:                            # %if.else825
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB106_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB106_197
.LBB106_196:                            # %cond.false831
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %edx
.LBB106_197:                            # %cond.end832
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB106_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB106_203
.LBB106_199:                            # %cond.false837
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB106_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB106_202
.LBB106_201:                            # %cond.false841
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB106_202:                            # %cond.end842
                                        #   in Loop: Header=BB106_108 Depth=1
.LBB106_203:                            # %cond.end844
                                        #   in Loop: Header=BB106_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB106_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB106_206
.LBB106_205:                            # %cond.false849
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %edx
.LBB106_206:                            # %cond.end850
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB106_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB106_212
.LBB106_208:                            # %cond.false855
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB106_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB106_211
.LBB106_210:                            # %cond.false859
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB106_211:                            # %cond.end860
                                        #   in Loop: Header=BB106_108 Depth=1
.LBB106_212:                            # %cond.end862
                                        #   in Loop: Header=BB106_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB106_213:                            # %if.end865
                                        #   in Loop: Header=BB106_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB106_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB106_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB106_222
.LBB106_217:                            # %if.else877
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB106_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB106_108 Depth=1
	cmpl	$0, -160(%rbp)
	je	.LBB106_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB106_221
.LBB106_220:                            # %if.else886
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_221:                            # %if.end889
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_222
.LBB106_222:                            # %if.end890
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_223
.LBB106_223:                            # %if.end891
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_224:                            # %sw.bb892
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_226:                            # %if.end898
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_227:                            # %sw.bb899
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-160(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_229:                            # %if.end905
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_230:                            # %sw.bb906
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB106_232:                            # %if.end912
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_233:                            # %sw.default
                                        #   in Loop: Header=BB106_108 Depth=1
	jmp	.LBB106_234
.LBB106_234:                            # %sw.epilog
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB106_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB106_108
.LBB106_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB106_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB106_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB106_240
.LBB106_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB106_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB106_241:                            # %if.end929
	cmpl	$1152454482, -180(%rbp) # imm = 0x44B10F52
	jne	.LBB106_243
.LBB106_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_242
.Lfunc_end106:
	.size	SetMotionVectorPredictor.81, .Lfunc_end106-SetMotionVectorPredictor.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI106_0:
	.quad	.LBB106_189
	.quad	.LBB106_224
	.quad	.LBB106_227
	.quad	.LBB106_230
                                        # -- End function
	.text
	.globl	FindSkipModeMotionVector.82 # -- Begin function FindSkipModeMotionVector.82
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.82,@function
FindSkipModeMotionVector.82:            # @FindSkipModeMotionVector.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$1796116434, -60(%rbp)  # imm = 0x6B0E8FD2
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB107_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB107_4
# %bb.3:                                # %if.then24
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB107_4:                              # %if.end
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB107_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_7
# %bb.6:                                # %if.then34
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB107_7:                              # %if.end36
	jmp	.LBB107_8
.LBB107_8:                              # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB107_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB107_12
# %bb.11:                               # %if.then69
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
.LBB107_12:                             # %if.end72
	movq	-40(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB107_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB107_15
# %bb.14:                               # %if.then82
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB107_15:                             # %if.end85
	jmp	.LBB107_16
.LBB107_16:                             # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB107_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB107_22
.LBB107_18:                             # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB107_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB107_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -12(%rbp)
	sete	%al
.LBB107_21:                             # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB107_22:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB107_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB107_28
.LBB107_24:                             # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -16(%rbp)
	jne	.LBB107_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB107_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB107_27:                             # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB107_28:                             # %cond.end130
	movl	%ecx, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB107_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -56(%rbp)
	je	.LBB107_39
.LBB107_30:                             # %if.then134
	movl	$0, -8(%rbp)
.LBB107_31:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB107_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB107_31 Depth=1
	movl	$0, -4(%rbp)
.LBB107_33:                             # %for.cond137
                                        #   Parent Loop BB107_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB107_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB107_33 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB107_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_33
.LBB107_36:                             # %for.end
                                        #   in Loop: Header=BB107_31 Depth=1
	jmp	.LBB107_37
.LBB107_37:                             # %for.inc157
                                        #   in Loop: Header=BB107_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_31
.LBB107_38:                             # %for.end159
	jmp	.LBB107_48
.LBB107_39:                             # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB107_40:                             # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB107_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB107_40 Depth=1
	movl	$0, -4(%rbp)
.LBB107_42:                             # %for.cond166
                                        #   Parent Loop BB107_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB107_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB107_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB107_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_42
.LBB107_45:                             # %for.end190
                                        #   in Loop: Header=BB107_40 Depth=1
	jmp	.LBB107_46
.LBB107_46:                             # %for.inc191
                                        #   in Loop: Header=BB107_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_40
.LBB107_47:                             # %for.end193
	jmp	.LBB107_48
.LBB107_48:                             # %if.end194
	cmpl	$1796116434, -60(%rbp)  # imm = 0x6B0E8FD2
	jne	.LBB107_50
.LBB107_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_49
.Lfunc_end107:
	.size	FindSkipModeMotionVector.82, .Lfunc_end107-FindSkipModeMotionVector.82
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.83            # -- Begin function find_SATD.83
	.p2align	4, 0x90
	.type	find_SATD.83,@function
find_SATD.83:                           # @find_SATD.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$1765578163, -52(%rbp)  # imm = 0x693C95B3
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-28(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_3 Depth 2
                                        #       Child Loop BB108_5 Depth 3
                                        #         Child Loop BB108_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	$0, -24(%rbp)
.LBB108_3:                              # %for.cond7
                                        #   Parent Loop BB108_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_5 Depth 3
                                        #         Child Loop BB108_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB108_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB108_5:                              # %for.cond10
                                        #   Parent Loop BB108_1 Depth=1
                                        #     Parent Loop BB108_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB108_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB108_7:                              # %for.cond13
                                        #   Parent Loop BB108_1 Depth=1
                                        #     Parent Loop BB108_3 Depth=2
                                        #       Parent Loop BB108_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-36(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB108_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB108_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB108_7
.LBB108_10:                             # %for.end
                                        #   in Loop: Header=BB108_5 Depth=3
	jmp	.LBB108_11
.LBB108_11:                             # %for.inc24
                                        #   in Loop: Header=BB108_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB108_5
.LBB108_12:                             # %for.end26
                                        #   in Loop: Header=BB108_3 Depth=2
	jmp	.LBB108_13
.LBB108_13:                             # %for.inc27
                                        #   in Loop: Header=BB108_3 Depth=2
	movl	-36(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_3
.LBB108_14:                             # %for.end29
                                        #   in Loop: Header=BB108_1 Depth=1
	jmp	.LBB108_15
.LBB108_15:                             # %for.inc30
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-36(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_1
.LBB108_16:                             # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB108_26
# %bb.17:                               # %if.then
	movl	-28(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB108_24
# %bb.18:                               # %if.then
	movq	.LJTI108_0(,%rax,8), %rax
	jmpq	*%rax
.LBB108_19:                             # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_20:                             # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_21:                             # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_22:                             # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_23:                             # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB108_25
.LBB108_24:                             # %sw.default
	movl	$-1, -12(%rbp)
.LBB108_25:                             # %sw.epilog
	jmp	.LBB108_31
.LBB108_26:                             # %if.else
	movl	$0, -16(%rbp)
.LBB108_27:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB108_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB108_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_27
.LBB108_30:                             # %for.end79
	jmp	.LBB108_31
.LBB108_31:                             # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$1765578163, -52(%rbp)  # imm = 0x693C95B3
	jne	.LBB108_33
.LBB108_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_32
.Lfunc_end108:
	.size	find_SATD.83, .Lfunc_end108-find_SATD.83
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI108_0:
	.quad	.LBB108_19
	.quad	.LBB108_20
	.quad	.LBB108_20
	.quad	.LBB108_21
	.quad	.LBB108_22
	.quad	.LBB108_22
	.quad	.LBB108_23
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockMotionSearch.84
.LCPI109_0:
	.quad	4602678819172646912     # double 0.5
.LCPI109_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockMotionSearch.84
	.p2align	4, 0x90
	.type	SubPelBlockMotionSearch.84,@function
SubPelBlockMotionSearch.84:             # @SubPelBlockMotionSearch.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1288, %rsp             # imm = 0x508
	.cfi_offset %rbx, -24
	movl	64(%rbp), %eax
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI109_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$509848084, -200(%rbp)  # imm = 0x1E63AA14
	movq	%rdi, -128(%rbp)
	movw	%si, -86(%rbp)
	movl	%edx, -140(%rbp)
	movl	%ecx, -136(%rbp)
	movl	%r8d, -156(%rbp)
	movl	%r9d, -96(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -148(%rbp)
	movl	$0, -112(%rbp)
	cmpl	$1, -96(%rbp)
	jne	.LBB109_7
# %bb.1:                                # %land.lhs.true
	xorl	%eax, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB109_7
# %bb.2:                                # %land.lhs.true5
	xorl	%eax, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB109_7
# %bb.3:                                # %land.lhs.true9
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 24(%rcx)
	je	.LBB109_7
# %bb.4:                                # %land.lhs.true10
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB109_7
# %bb.5:                                # %land.lhs.true12
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB109_7
# %bb.6:                                # %land.rhs
	movswl	-86(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB109_7:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -196(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -132(%rbp)
	movq	input, %rax
	movslq	-96(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -152(%rbp)
	movl	-136(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -120(%rbp)
	movl	-156(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_9
# %bb.8:                                # %cond.true
	xorl	%eax, %eax
	movq	input, %rcx
	movl	28(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	jmp	.LBB109_10
.LBB109_9:                              # %cond.false
	movl	$1, %eax
	jmp	.LBB109_10
.LBB109_10:                             # %cond.end
	movl	%eax, -184(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_15
# %bb.11:                               # %cond.true30
	movl	$1, %eax
	cmpl	48(%rbp), %eax
	jle	.LBB109_13
# %bb.12:                               # %cond.true33
	movl	$1, %eax
	jmp	.LBB109_14
.LBB109_13:                             # %cond.false34
	movl	48(%rbp), %eax
.LBB109_14:                             # %cond.end35
	jmp	.LBB109_16
.LBB109_15:                             # %cond.false37
	movl	48(%rbp), %eax
.LBB109_16:                             # %cond.end38
	movl	%eax, -180(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_19
# %bb.17:                               # %land.lhs.true41
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB109_19
# %bb.18:                               # %cond.true45
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB109_20
.LBB109_19:                             # %cond.false49
	xorl	%ecx, %ecx
	jmp	.LBB109_20
.LBB109_20:                             # %cond.end50
	movl	%ecx, -144(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB109_23
# %bb.21:                               # %land.lhs.true53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB109_26
# %bb.22:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB109_26
.LBB109_23:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB109_25
# %bb.24:                               # %land.rhs61
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB109_25:                             # %land.end65
.LBB109_26:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -192(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB109_28
# %bb.27:                               # %cond.true69
	xorl	%eax, %eax
	jmp	.LBB109_29
.LBB109_28:                             # %cond.false70
	movq	input, %rax
	movl	24(%rax), %eax
.LBB109_29:                             # %cond.end72
	xorl	%ecx, %ecx
	movl	%eax, -160(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -188(%rbp)
	movl	-140(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -176(%rbp)
	cmpl	$0, -192(%rbp)
	je	.LBB109_32
# %bb.30:                               # %land.lhs.true83
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB109_32
# %bb.31:                               # %if.then
	movl	-140(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6456(%rax), %rax
	movq	%rax, -64(%rbp)
	jmp	.LBB109_33
.LBB109_32:                             # %if.else
	movl	-140(%rbp), %eax
	addl	-144(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-86(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -64(%rbp)
.LBB109_33:                             # %if.end
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-176(%rbp), %rax
	movl	6392(%rax), %eax
	subl	-132(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -164(%rbp)
	movq	-176(%rbp), %rax
	movl	6396(%rax), %eax
	subl	-152(%rbp), %eax
	addl	$1, %eax
	shll	$2, %eax
	movl	%eax, -168(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB109_38
# %bb.34:                               # %land.lhs.true112
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_38
# %bb.35:                               # %land.lhs.true118
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB109_38
# %bb.36:                               # %land.lhs.true123
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_38
# %bb.37:                               # %if.then129
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB109_39
.LBB109_38:                             # %if.else130
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB109_39:                             # %if.end131
	movl	$0, -76(%rbp)
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB109_40:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_47 Depth 2
                                        #       Child Loop BB109_51 Depth 3
                                        #         Child Loop BB109_57 Depth 4
                                        #           Child Loop BB109_59 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB109_76
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB109_40 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -100(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-100(%rbp), %edi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, -196(%rbp)
	je	.LBB109_44
# %bb.42:                               # %land.lhs.true157
                                        #   in Loop: Header=BB109_40 Depth=1
	cmpl	$0, -68(%rbp)
	jne	.LBB109_44
# %bb.43:                               # %if.then160
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	-148(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-56(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -56(%rbp)
.LBB109_44:                             # %if.end164
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB109_46
# %bb.45:                               # %if.then167
                                        #   in Loop: Header=BB109_40 Depth=1
	jmp	.LBB109_75
.LBB109_46:                             # %if.end168
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB109_47:                             # %for.cond169
                                        #   Parent Loop BB109_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_51 Depth 3
                                        #         Child Loop BB109_57 Depth 4
                                        #           Child Loop BB109_59 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-152(%rbp), %ecx
	jge	.LBB109_49
# %bb.48:                               # %land.rhs172
                                        #   in Loop: Header=BB109_47 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB109_49:                             # %land.end174
                                        #   in Loop: Header=BB109_47 Depth=2
	testb	$1, %al
	jne	.LBB109_50
	jmp	.LBB109_70
.LBB109_50:                             # %for.body176
                                        #   in Loop: Header=BB109_47 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-100(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB109_51:                             # %for.cond180
                                        #   Parent Loop BB109_40 Depth=1
                                        #     Parent Loop BB109_47 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_57 Depth 4
                                        #           Child Loop BB109_59 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB109_67
# %bb.52:                               # %for.body183
                                        #   in Loop: Header=BB109_51 Depth=3
	leaq	-272(%rbp), %rax
	movl	-136(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB109_56
# %bb.53:                               # %if.then335
                                        #   in Loop: Header=BB109_51 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-160(%rbp), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB109_55
# %bb.54:                               # %if.then341
                                        #   in Loop: Header=BB109_47 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB109_68
.LBB109_55:                             # %if.end342
                                        #   in Loop: Header=BB109_51 Depth=3
	jmp	.LBB109_65
.LBB109_56:                             # %if.else343
                                        #   in Loop: Header=BB109_51 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB109_57:                             # %for.cond344
                                        #   Parent Loop BB109_40 Depth=1
                                        #     Parent Loop BB109_47 Depth=2
                                        #       Parent Loop BB109_51 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_59 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB109_64
# %bb.58:                               # %for.body347
                                        #   in Loop: Header=BB109_57 Depth=4
	movl	$0, -72(%rbp)
.LBB109_59:                             # %for.cond348
                                        #   Parent Loop BB109_40 Depth=1
                                        #     Parent Loop BB109_47 Depth=2
                                        #       Parent Loop BB109_51 Depth=3
                                        #         Parent Loop BB109_57 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB109_62
# %bb.60:                               # %for.body351
                                        #   in Loop: Header=BB109_59 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.61:                               # %for.inc
                                        #   in Loop: Header=BB109_59 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB109_59
.LBB109_62:                             # %for.end
                                        #   in Loop: Header=BB109_57 Depth=4
	jmp	.LBB109_63
.LBB109_63:                             # %for.inc361
                                        #   in Loop: Header=BB109_57 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB109_57
.LBB109_64:                             # %for.end363
                                        #   in Loop: Header=BB109_51 Depth=3
	jmp	.LBB109_65
.LBB109_65:                             # %if.end364
                                        #   in Loop: Header=BB109_51 Depth=3
	jmp	.LBB109_66
.LBB109_66:                             # %for.inc365
                                        #   in Loop: Header=BB109_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_51
.LBB109_67:                             # %for.end367.loopexit
                                        #   in Loop: Header=BB109_47 Depth=2
	jmp	.LBB109_68
.LBB109_68:                             # %for.end367
                                        #   in Loop: Header=BB109_47 Depth=2
	jmp	.LBB109_69
.LBB109_69:                             # %for.inc368
                                        #   in Loop: Header=BB109_47 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB109_47
.LBB109_70:                             # %for.end370
                                        #   in Loop: Header=BB109_40 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_72
# %bb.71:                               # %if.then373
                                        #   in Loop: Header=BB109_40 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-160(%rbp), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB109_72:                             # %if.end377
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB109_74
# %bb.73:                               # %if.then380
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB109_74:                             # %if.end381
                                        #   in Loop: Header=BB109_40 Depth=1
	jmp	.LBB109_75
.LBB109_75:                             # %for.inc382
                                        #   in Loop: Header=BB109_40 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB109_40
.LBB109_76:                             # %for.end384
	cmpl	$0, -76(%rbp)
	je	.LBB109_78
# %bb.77:                               # %if.then386
	movq	spiral_search_x, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB109_78:                             # %if.end399
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB109_80
# %bb.79:                               # %if.then402
	movl	$2147483647, 64(%rbp)   # imm = 0x7FFFFFFF
.LBB109_80:                             # %if.end403
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB109_85
# %bb.81:                               # %land.lhs.true408
	movl	-120(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-164(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_85
# %bb.82:                               # %land.lhs.true414
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB109_85
# %bb.83:                               # %land.lhs.true419
	movl	-116(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	-168(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_85
# %bb.84:                               # %if.then425
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB109_86
.LBB109_85:                             # %if.else426
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB109_86:                             # %if.end427
	movl	$0, -76(%rbp)
	movl	-188(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB109_87:                             # %for.cond428
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_91 Depth 2
                                        #       Child Loop BB109_95 Depth 3
                                        #         Child Loop BB109_101 Depth 4
                                        #           Child Loop BB109_103 Depth 5
	movl	-68(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB109_120
# %bb.88:                               # %for.body431
                                        #   in Loop: Header=BB109_87 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -108(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movslq	-68(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -100(%rbp)
	movl	-148(%rbp), %eax
	movq	mvbits, %rdx
	movl	-108(%rbp), %esi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movl	-100(%rbp), %edi
	movl	-112(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jl	.LBB109_90
# %bb.89:                               # %if.then455
                                        #   in Loop: Header=BB109_87 Depth=1
	jmp	.LBB109_119
.LBB109_90:                             # %if.end456
                                        #   in Loop: Header=BB109_87 Depth=1
	movl	$0, -52(%rbp)
	movl	$0, -104(%rbp)
.LBB109_91:                             # %for.cond457
                                        #   Parent Loop BB109_87 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_95 Depth 3
                                        #         Child Loop BB109_101 Depth 4
                                        #           Child Loop BB109_103 Depth 5
	xorl	%eax, %eax
	movl	-52(%rbp), %ecx
	cmpl	-152(%rbp), %ecx
	jge	.LBB109_93
# %bb.92:                               # %land.rhs460
                                        #   in Loop: Header=BB109_91 Depth=2
	cmpl	$0, -104(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB109_93:                             # %land.end463
                                        #   in Loop: Header=BB109_91 Depth=2
	testb	$1, %al
	jne	.LBB109_94
	jmp	.LBB109_114
.LBB109_94:                             # %for.body465
                                        #   in Loop: Header=BB109_91 Depth=2
	movl	-156(%rbp), %eax
	addl	-52(%rbp), %eax
	shll	$2, %eax
	addl	-100(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	$0, -12(%rbp)
.LBB109_95:                             # %for.cond469
                                        #   Parent Loop BB109_87 Depth=1
                                        #     Parent Loop BB109_91 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_101 Depth 4
                                        #           Child Loop BB109_103 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB109_111
# %bb.96:                               # %for.body472
                                        #   in Loop: Header=BB109_95 Depth=3
	leaq	-272(%rbp), %rax
	movl	-136(%rbp), %ecx
	addl	-12(%rbp), %ecx
	shll	$2, %ecx
	addl	-108(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	%rax, -40(%rbp)
	movq	-128(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-128(%rbp), %rax
	movl	-52(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	-84(%rbp), %eax
	addl	$12, %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	%ebx, (%rax)
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %ebx
	movq	PelY_14, %rax
	movq	-64(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-24(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	subl	%eax, %ebx
	movq	-40(%rbp), %rax
	movl	%ebx, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB109_100
# %bb.97:                               # %if.then628
                                        #   in Loop: Header=BB109_95 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
	cmpl	64(%rbp), %eax
	jle	.LBB109_99
# %bb.98:                               # %if.then635
                                        #   in Loop: Header=BB109_91 Depth=2
	movl	$1, -104(%rbp)
	jmp	.LBB109_112
.LBB109_99:                             # %if.end636
                                        #   in Loop: Header=BB109_95 Depth=3
	jmp	.LBB109_109
.LBB109_100:                            # %if.else637
                                        #   in Loop: Header=BB109_95 Depth=3
	movl	$0, -80(%rbp)
	movl	$0, -92(%rbp)
.LBB109_101:                            # %for.cond638
                                        #   Parent Loop BB109_87 Depth=1
                                        #     Parent Loop BB109_91 Depth=2
                                        #       Parent Loop BB109_95 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_103 Depth 5
	cmpl	$4, -80(%rbp)
	jge	.LBB109_108
# %bb.102:                              # %for.body641
                                        #   in Loop: Header=BB109_101 Depth=4
	movl	$0, -72(%rbp)
.LBB109_103:                            # %for.cond642
                                        #   Parent Loop BB109_87 Depth=1
                                        #     Parent Loop BB109_91 Depth=2
                                        #       Parent Loop BB109_95 Depth=3
                                        #         Parent Loop BB109_101 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -72(%rbp)
	jge	.LBB109_106
# %bb.104:                              # %for.body645
                                        #   in Loop: Header=BB109_103 Depth=5
	movslq	-92(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movl	-52(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.105:                              # %for.inc654
                                        #   in Loop: Header=BB109_103 Depth=5
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	movl	-92(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -92(%rbp)
	jmp	.LBB109_103
.LBB109_106:                            # %for.end657
                                        #   in Loop: Header=BB109_101 Depth=4
	jmp	.LBB109_107
.LBB109_107:                            # %for.inc658
                                        #   in Loop: Header=BB109_101 Depth=4
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB109_101
.LBB109_108:                            # %for.end660
                                        #   in Loop: Header=BB109_95 Depth=3
	jmp	.LBB109_109
.LBB109_109:                            # %if.end661
                                        #   in Loop: Header=BB109_95 Depth=3
	jmp	.LBB109_110
.LBB109_110:                            # %for.inc662
                                        #   in Loop: Header=BB109_95 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_95
.LBB109_111:                            # %for.end664.loopexit
                                        #   in Loop: Header=BB109_91 Depth=2
	jmp	.LBB109_112
.LBB109_112:                            # %for.end664
                                        #   in Loop: Header=BB109_91 Depth=2
	jmp	.LBB109_113
.LBB109_113:                            # %for.inc665
                                        #   in Loop: Header=BB109_91 Depth=2
	movl	-52(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB109_91
.LBB109_114:                            # %for.end667
                                        #   in Loop: Header=BB109_87 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_116
# %bb.115:                              # %if.then670
                                        #   in Loop: Header=BB109_87 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-96(%rbp), %edx
	callq	find_SATD
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB109_116:                            # %if.end675
                                        #   in Loop: Header=BB109_87 Depth=1
	movl	-56(%rbp), %eax
	cmpl	64(%rbp), %eax
	jge	.LBB109_118
# %bb.117:                              # %if.then678
                                        #   in Loop: Header=BB109_87 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, 64(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB109_118:                            # %if.end679
                                        #   in Loop: Header=BB109_87 Depth=1
	jmp	.LBB109_119
.LBB109_119:                            # %for.inc680
                                        #   in Loop: Header=BB109_87 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB109_87
.LBB109_120:                            # %for.end682
	cmpl	$0, -76(%rbp)
	je	.LBB109_122
# %bb.121:                              # %if.then684
	movq	spiral_search_x, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-76(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB109_122:                            # %if.end695
	movl	64(%rbp), %ebx
	cmpl	$509848084, -200(%rbp)  # imm = 0x1E63AA14
	jne	.LBB109_124
.LBB109_123:
	movl	%ebx, %eax
	addq	$1288, %rsp             # imm = 0x508
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_123
.Lfunc_end109:
	.size	SubPelBlockMotionSearch.84, .Lfunc_end109-SubPelBlockMotionSearch.84
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_CostMB.85    # -- Begin function Get_Direct_CostMB.85
	.p2align	4, 0x90
	.type	Get_Direct_CostMB.85,@function
Get_Direct_CostMB.85:                   # @Get_Direct_CostMB.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1619976460, -28(%rbp)  # imm = 0x608EE10C
	vmovsd	%xmm0, -40(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -20(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB110_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	cmpl	$2147483647, -12(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB110_4
# %bb.3:                                # %lor.lhs.false
                                        #   in Loop: Header=BB110_1 Depth=1
	cmpl	$2147483647, -16(%rbp)  # imm = 0x7FFFFFFF
	jne	.LBB110_5
.LBB110_4:                              # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB110_18
.LBB110_5:                              # %if.end
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_6
.LBB110_6:                              # %for.inc
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_1
.LBB110_7:                              # %for.end
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB110_9
	jmp	.LBB110_8
.LBB110_8:                              # %for.end
	subl	$2, %eax
	je	.LBB110_15
	jmp	.LBB110_16
.LBB110_9:                              # %sw.bb
	movl	-16(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB110_13
# %bb.10:                               # %lor.lhs.false4
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	je	.LBB110_13
# %bb.11:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	je	.LBB110_13
# %bb.12:                               # %land.lhs.true6
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	jne	.LBB110_14
.LBB110_13:                             # %if.then8
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB110_14:                             # %if.end9
	jmp	.LBB110_17
.LBB110_15:                             # %sw.bb10
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_17
.LBB110_16:                             # %sw.default
	jmp	.LBB110_17
.LBB110_17:                             # %sw.epilog
	movl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB110_18:                             # %return
	movl	-24(%rbp), %ebx
	cmpl	$1619976460, -28(%rbp)  # imm = 0x608EE10C
	jne	.LBB110_20
.LBB110_19:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_19
.Lfunc_end110:
	.size	Get_Direct_CostMB.85, .Lfunc_end110-Get_Direct_CostMB.85
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.86            # -- Begin function find_SATD.86
	.p2align	4, 0x90
	.type	find_SATD.86,@function
find_SATD.86:                           # @find_SATD.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$171120148, -56(%rbp)   # imm = 0xA331614
	movq	%rdi, -64(%rbp)
	movl	%esi, -52(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -20(%rbp)
.LBB111_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_3 Depth 2
                                        #       Child Loop BB111_5 Depth 3
                                        #         Child Loop BB111_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB111_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	$0, -24(%rbp)
.LBB111_3:                              # %for.cond7
                                        #   Parent Loop BB111_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_5 Depth 3
                                        #         Child Loop BB111_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB111_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB111_5:                              # %for.cond10
                                        #   Parent Loop BB111_1 Depth=1
                                        #     Parent Loop BB111_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB111_5 Depth=3
	movl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB111_7:                              # %for.cond13
                                        #   Parent Loop BB111_1 Depth=1
                                        #     Parent Loop BB111_3 Depth=2
                                        #       Parent Loop BB111_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB111_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB111_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB111_7
.LBB111_10:                             # %for.end
                                        #   in Loop: Header=BB111_5 Depth=3
	jmp	.LBB111_11
.LBB111_11:                             # %for.inc24
                                        #   in Loop: Header=BB111_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB111_5
.LBB111_12:                             # %for.end26
                                        #   in Loop: Header=BB111_3 Depth=2
	jmp	.LBB111_13
.LBB111_13:                             # %for.inc27
                                        #   in Loop: Header=BB111_3 Depth=2
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB111_3
.LBB111_14:                             # %for.end29
                                        #   in Loop: Header=BB111_1 Depth=1
	jmp	.LBB111_15
.LBB111_15:                             # %for.inc30
                                        #   in Loop: Header=BB111_1 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_1
.LBB111_16:                             # %for.end32
	cmpl	$0, -52(%rbp)
	je	.LBB111_26
# %bb.17:                               # %if.then
	movl	-36(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB111_24
# %bb.18:                               # %if.then
	movq	.LJTI111_0(,%rax,8), %rax
	jmpq	*%rax
.LBB111_19:                             # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_25
.LBB111_20:                             # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_25
.LBB111_21:                             # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB111_25
.LBB111_22:                             # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_25
.LBB111_23:                             # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB111_25
.LBB111_24:                             # %sw.default
	movl	$-1, -12(%rbp)
.LBB111_25:                             # %sw.epilog
	jmp	.LBB111_31
.LBB111_26:                             # %if.else
	movl	$0, -16(%rbp)
.LBB111_27:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB111_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB111_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_27
.LBB111_30:                             # %for.end79
	jmp	.LBB111_31
.LBB111_31:                             # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$171120148, -56(%rbp)   # imm = 0xA331614
	jne	.LBB111_33
.LBB111_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_32
.Lfunc_end111:
	.size	find_SATD.86, .Lfunc_end111-find_SATD.86
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI111_0:
	.quad	.LBB111_19
	.quad	.LBB111_20
	.quad	.LBB111_20
	.quad	.LBB111_21
	.quad	.LBB111_22
	.quad	.LBB111_22
	.quad	.LBB111_23
                                        # -- End function
	.text
	.globl	SetMotionVectorPredictor.87 # -- Begin function SetMotionVectorPredictor.87
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.87,@function
SetMotionVectorPredictor.87:            # @SetMotionVectorPredictor.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1095373000, -180(%rbp) # imm = 0x414A10C8
	movq	%rdi, -216(%rbp)
	movq	%rsi, -64(%rbp)
	movq	%rdx, -72(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -160(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -164(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB112_2:                              # %if.end
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-164(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -172(%rbp)
	jle	.LBB112_19
# %bb.3:                                # %if.then2
	cmpl	$8, -160(%rbp)
	jge	.LBB112_14
# %bb.4:                                # %if.then4
	cmpl	$8, -172(%rbp)
	jne	.LBB112_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB112_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB112_8
.LBB112_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB112_8:                              # %if.end10
	jmp	.LBB112_13
.LBB112_9:                              # %if.else11
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB112_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB112_12
.LBB112_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB112_12:                             # %if.end18
	jmp	.LBB112_13
.LBB112_13:                             # %if.end19
	jmp	.LBB112_18
.LBB112_14:                             # %if.else20
	movl	-160(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB112_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB112_17
.LBB112_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB112_17:                             # %if.end28
	jmp	.LBB112_18
.LBB112_18:                             # %if.end29
	jmp	.LBB112_19
.LBB112_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB112_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB112_21:                             # %if.end34
	movl	$0, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB112_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB112_24
# %bb.23:                               # %cond.true
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_25
.LBB112_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_25
.LBB112_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB112_27
# %bb.26:                               # %cond.true45
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_28
.LBB112_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_28
.LBB112_28:                             # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB112_30
# %bb.29:                               # %cond.true60
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_31
.LBB112_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_31
.LBB112_31:                             # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB112_72
.LBB112_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB112_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_36
# %bb.35:                               # %cond.true87
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_37
.LBB112_36:                             # %cond.false97
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB112_37:                             # %cond.end108
	jmp	.LBB112_39
.LBB112_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_39
.LBB112_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB112_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_42
# %bb.41:                               # %cond.true122
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_43
.LBB112_42:                             # %cond.false132
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB112_43:                             # %cond.end143
	jmp	.LBB112_45
.LBB112_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_45
.LBB112_45:                             # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB112_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_48
# %bb.47:                               # %cond.true157
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_49
.LBB112_48:                             # %cond.false167
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB112_49:                             # %cond.end178
	jmp	.LBB112_51
.LBB112_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_51
.LBB112_51:                             # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB112_71
.LBB112_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB112_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_55
# %bb.54:                               # %cond.true193
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB112_56
.LBB112_55:                             # %cond.false203
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB112_56:                             # %cond.end213
	jmp	.LBB112_58
.LBB112_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_58
.LBB112_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB112_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_61
# %bb.60:                               # %cond.true227
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB112_62
.LBB112_61:                             # %cond.false238
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB112_62:                             # %cond.end248
	jmp	.LBB112_64
.LBB112_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_64
.LBB112_64:                             # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB112_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_67
# %bb.66:                               # %cond.true262
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB112_68
.LBB112_67:                             # %cond.false273
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB112_68:                             # %cond.end283
	jmp	.LBB112_70
.LBB112_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB112_70
.LBB112_70:                             # %cond.end286
	movl	%eax, -80(%rbp)
.LBB112_71:                             # %if.end288
	jmp	.LBB112_72
.LBB112_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB112_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB112_76
# %bb.75:                               # %if.then300
	movl	$1, -28(%rbp)
	jmp	.LBB112_86
.LBB112_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB112_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB112_80
# %bb.79:                               # %if.then313
	movl	$2, -28(%rbp)
	jmp	.LBB112_85
.LBB112_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB112_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB112_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_84
# %bb.83:                               # %if.then326
	movl	$3, -28(%rbp)
.LBB112_84:                             # %if.end327
	jmp	.LBB112_85
.LBB112_85:                             # %if.end328
	jmp	.LBB112_86
.LBB112_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB112_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB112_96
# %bb.88:                               # %if.then335
	cmpl	$0, -160(%rbp)
	jne	.LBB112_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_91
# %bb.90:                               # %if.then342
	movl	$1, -28(%rbp)
.LBB112_91:                             # %if.end343
	jmp	.LBB112_95
.LBB112_92:                             # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_94
# %bb.93:                               # %if.then348
	movl	$3, -28(%rbp)
.LBB112_94:                             # %if.end349
	jmp	.LBB112_95
.LBB112_95:                             # %if.end350
	jmp	.LBB112_107
.LBB112_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB112_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB112_106
# %bb.98:                               # %if.then357
	cmpl	$0, -172(%rbp)
	jne	.LBB112_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_101
# %bb.100:                              # %if.then364
	movl	$2, -28(%rbp)
.LBB112_101:                            # %if.end365
	jmp	.LBB112_105
.LBB112_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB112_104
# %bb.103:                              # %if.then370
	movl	$1, -28(%rbp)
.LBB112_104:                            # %if.end371
	jmp	.LBB112_105
.LBB112_105:                            # %if.end372
	jmp	.LBB112_106
.LBB112_106:                            # %if.end373
	jmp	.LBB112_107
.LBB112_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB112_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB112_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB112_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB112_121
.LBB112_111:                            # %if.then381
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB112_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_114
.LBB112_113:                            # %cond.false396
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_114
.LBB112_114:                            # %cond.end397
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB112_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_117
.LBB112_116:                            # %cond.false413
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_117
.LBB112_117:                            # %cond.end414
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB112_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_120
.LBB112_119:                            # %cond.false430
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_120
.LBB112_120:                            # %cond.end431
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB112_161
.LBB112_121:                            # %if.else433
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB112_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_126
.LBB112_125:                            # %cond.false462
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB112_126:                            # %cond.end474
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_128
.LBB112_127:                            # %cond.false476
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_128
.LBB112_128:                            # %cond.end477
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB112_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_132
.LBB112_131:                            # %cond.false500
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB112_132:                            # %cond.end513
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_134
.LBB112_133:                            # %cond.false515
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_134
.LBB112_134:                            # %cond.end516
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB112_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB112_138
.LBB112_137:                            # %cond.false539
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB112_138:                            # %cond.end552
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_140
.LBB112_139:                            # %cond.false554
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_140
.LBB112_140:                            # %cond.end555
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB112_160
.LBB112_141:                            # %if.else557
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB112_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB112_145
.LBB112_144:                            # %cond.false580
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB112_145:                            # %cond.end592
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_147
.LBB112_146:                            # %cond.false594
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_147
.LBB112_147:                            # %cond.end595
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB112_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB112_151
.LBB112_150:                            # %cond.false619
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB112_151:                            # %cond.end631
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_153
.LBB112_152:                            # %cond.false633
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_153
.LBB112_153:                            # %cond.end634
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB112_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB112_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB112_157
.LBB112_156:                            # %cond.false658
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB112_157:                            # %cond.end670
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_159
.LBB112_158:                            # %cond.false672
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_159
.LBB112_159:                            # %cond.end673
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB112_160:                            # %if.end675
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_161
.LBB112_161:                            # %if.end676
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB112_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB112_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB112_166
.LBB112_165:                            # %cond.false696
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB112_166:                            # %cond.end708
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_168
.LBB112_167:                            # %cond.false710
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_168
.LBB112_168:                            # %cond.end711
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB112_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB112_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB112_172
.LBB112_171:                            # %cond.false729
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB112_172:                            # %cond.end741
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_174
.LBB112_173:                            # %cond.false743
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_174
.LBB112_174:                            # %cond.end744
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -156(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB112_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB112_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB112_178
.LBB112_177:                            # %cond.false762
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB112_178:                            # %cond.end774
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_180
.LBB112_179:                            # %cond.false776
                                        #   in Loop: Header=BB112_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB112_180
.LBB112_180:                            # %cond.end777
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB112_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB112_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB112_184
.LBB112_183:                            # %cond.false795
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB112_184:                            # %cond.end807
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_186
.LBB112_185:                            # %cond.false809
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-176(%rbp), %eax
.LBB112_186:                            # %cond.end810
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	%eax, -168(%rbp)
.LBB112_187:                            # %if.end812
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-28(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB112_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	.LJTI112_0(,%rax,8), %rax
	jmpq	*%rax
.LBB112_189:                            # %sw.bb
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB112_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB112_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB112_193:                            # %if.end824
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_213
.LBB112_194:                            # %if.else825
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB112_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB112_197
.LBB112_196:                            # %cond.false831
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-20(%rbp), %edx
.LBB112_197:                            # %cond.end832
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB112_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB112_203
.LBB112_199:                            # %cond.false837
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB112_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB112_202
.LBB112_201:                            # %cond.false841
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB112_202:                            # %cond.end842
                                        #   in Loop: Header=BB112_108 Depth=1
.LBB112_203:                            # %cond.end844
                                        #   in Loop: Header=BB112_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB112_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB112_206
.LBB112_205:                            # %cond.false849
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-20(%rbp), %edx
.LBB112_206:                            # %cond.end850
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB112_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB112_212
.LBB112_208:                            # %cond.false855
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB112_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB112_211
.LBB112_210:                            # %cond.false859
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB112_211:                            # %cond.end860
                                        #   in Loop: Header=BB112_108 Depth=1
.LBB112_212:                            # %cond.end862
                                        #   in Loop: Header=BB112_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
.LBB112_213:                            # %if.end865
                                        #   in Loop: Header=BB112_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB112_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB112_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB112_222
.LBB112_217:                            # %if.else877
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-32(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB112_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB112_108 Depth=1
	cmpl	$0, -156(%rbp)
	je	.LBB112_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB112_221
.LBB112_220:                            # %if.else886
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB112_221:                            # %if.end889
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_222
.LBB112_222:                            # %if.end890
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_223
.LBB112_223:                            # %if.end891
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_234
.LBB112_224:                            # %sw.bb892
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB112_226:                            # %if.end898
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_234
.LBB112_227:                            # %sw.bb899
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-156(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB112_229:                            # %if.end905
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_234
.LBB112_230:                            # %sw.bb906
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB112_232:                            # %if.end912
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_234
.LBB112_233:                            # %sw.default
                                        #   in Loop: Header=BB112_108 Depth=1
	jmp	.LBB112_234
.LBB112_234:                            # %sw.epilog
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB112_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_108
.LBB112_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB112_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB112_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB112_240
.LBB112_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB112_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB112_241:                            # %if.end929
	cmpl	$1095373000, -180(%rbp) # imm = 0x414A10C8
	jne	.LBB112_243
.LBB112_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_242
.Lfunc_end112:
	.size	SetMotionVectorPredictor.87, .Lfunc_end112-SetMotionVectorPredictor.87
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI112_0:
	.quad	.LBB112_189
	.quad	.LBB112_224
	.quad	.LBB112_227
	.quad	.LBB112_230
                                        # -- End function
	.text
	.globl	PartitionMotionSearch.88 # -- Begin function PartitionMotionSearch.88
	.p2align	4, 0x90
	.type	PartitionMotionSearch.88,@function
PartitionMotionSearch.88:               # @PartitionMotionSearch.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1381971101, -72(%rbp)  # imm = 0x525F349D
	movl	%edi, -12(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -104(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB113_2
# %bb.1:                                # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB113_3
.LBB113_2:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB113_3
.LBB113_3:                              # %cond.end
	movl	%eax, -24(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-24(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -80(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB113_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB113_6
# %bb.5:                                # %if.then20
	movl	$4, -48(%rbp)
	jmp	.LBB113_7
.LBB113_6:                              # %if.else
	movl	$2, -48(%rbp)
.LBB113_7:                              # %if.end
	jmp	.LBB113_9
.LBB113_8:                              # %if.else21
	movl	$0, -48(%rbp)
.LBB113_9:                              # %if.end22
	movl	-68(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -8(%rbp)
.LBB113_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_12 Depth 2
                                        #       Child Loop BB113_29 Depth 3
                                        #         Child Loop BB113_31 Depth 4
                                        #           Child Loop BB113_33 Depth 5
                                        #             Child Loop BB113_35 Depth 6
	movl	-8(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB113_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB113_10 Depth=1
	movw	$0, -2(%rbp)
.LBB113_12:                             # %for.cond27
                                        #   Parent Loop BB113_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_29 Depth 3
                                        #         Child Loop BB113_31 Depth 4
                                        #           Child Loop BB113_33 Depth 5
                                        #             Child Loop BB113_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	-48(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB113_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB113_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB113_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB113_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB113_28
.LBB113_15:                             # %if.else38
                                        #   in Loop: Header=BB113_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB113_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB113_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB113_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB113_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB113_19
.LBB113_18:                             # %cond.false49
                                        #   in Loop: Header=BB113_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB113_19
.LBB113_19:                             # %cond.end50
                                        #   in Loop: Header=BB113_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	jmp	.LBB113_27
.LBB113_20:                             # %if.else53
                                        #   in Loop: Header=BB113_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB113_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB113_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB113_23
.LBB113_22:                             # %cond.false60
                                        #   in Loop: Header=BB113_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB113_23
.LBB113_23:                             # %cond.end61
                                        #   in Loop: Header=BB113_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-12(%rbp), %edx
	jge	.LBB113_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB113_12 Depth=2
	movl	$2, %edx
	jmp	.LBB113_26
.LBB113_25:                             # %cond.false67
                                        #   in Loop: Header=BB113_12 Depth=2
	movl	-12(%rbp), %edx
.LBB113_26:                             # %cond.end68
                                        #   in Loop: Header=BB113_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
.LBB113_27:                             # %if.end71
                                        #   in Loop: Header=BB113_12 Depth=2
	jmp	.LBB113_28
.LBB113_28:                             # %if.end72
                                        #   in Loop: Header=BB113_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -112(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB113_29:                             # %for.cond89
                                        #   Parent Loop BB113_10 Depth=1
                                        #     Parent Loop BB113_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_31 Depth 4
                                        #           Child Loop BB113_33 Depth 5
                                        #             Child Loop BB113_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-80(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB113_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB113_31:                             # %for.cond103
                                        #   Parent Loop BB113_10 Depth=1
                                        #     Parent Loop BB113_12 Depth=2
                                        #       Parent Loop BB113_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB113_33 Depth 5
                                        #             Child Loop BB113_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-28(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB113_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -44(%rbp)
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %esi
	movl	-20(%rbp), %edx
	shll	$2, %edx
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-12(%rbp), %r8d
	movl	-40(%rbp), %r9d
	vmovsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -32(%rbp)
.LBB113_33:                             # %for.cond123
                                        #   Parent Loop BB113_10 Depth=1
                                        #     Parent Loop BB113_12 Depth=2
                                        #       Parent Loop BB113_29 Depth=3
                                        #         Parent Loop BB113_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB113_35 Depth 6
	movl	-32(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB113_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB113_33 Depth=5
	movl	$0, -36(%rbp)
.LBB113_35:                             # %for.cond127
                                        #   Parent Loop BB113_10 Depth=1
                                        #     Parent Loop BB113_12 Depth=2
                                        #       Parent Loop BB113_29 Depth=3
                                        #         Parent Loop BB113_31 Depth=4
                                        #           Parent Loop BB113_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-36(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB113_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB113_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-112(%rbp), %rcx
	movl	-44(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB113_35 Depth=6
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB113_35
.LBB113_38:                             # %for.end
                                        #   in Loop: Header=BB113_33 Depth=5
	jmp	.LBB113_39
.LBB113_39:                             # %for.inc174
                                        #   in Loop: Header=BB113_33 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB113_33
.LBB113_40:                             # %for.end176
                                        #   in Loop: Header=BB113_31 Depth=4
	jmp	.LBB113_41
.LBB113_41:                             # %for.inc177
                                        #   in Loop: Header=BB113_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_31
.LBB113_42:                             # %for.end179
                                        #   in Loop: Header=BB113_29 Depth=3
	jmp	.LBB113_43
.LBB113_43:                             # %for.inc180
                                        #   in Loop: Header=BB113_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_29
.LBB113_44:                             # %for.end182
                                        #   in Loop: Header=BB113_12 Depth=2
	jmp	.LBB113_45
.LBB113_45:                             # %for.inc183
                                        #   in Loop: Header=BB113_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB113_12
.LBB113_46:                             # %for.end185
                                        #   in Loop: Header=BB113_10 Depth=1
	jmp	.LBB113_47
.LBB113_47:                             # %for.inc186
                                        #   in Loop: Header=BB113_10 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_10
.LBB113_48:                             # %for.end188
	cmpl	$1381971101, -72(%rbp)  # imm = 0x525F349D
	jne	.LBB113_50
.LBB113_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_49
.Lfunc_end113:
	.size	PartitionMotionSearch.88, .Lfunc_end113-PartitionMotionSearch.88
	.cfi_endproc
                                        # -- End function
	.globl	SATD.89                 # -- Begin function SATD.89
	.p2align	4, 0x90
	.type	SATD.89,@function
SATD.89:                                # @SATD.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$184, %rsp
	.cfi_offset %rbx, -24
	movl	$276915442, -184(%rbp)  # imm = 0x108164F2
	movq	%rdi, -16(%rbp)
	movl	%esi, -180(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -180(%rbp)
	je	.LBB114_9
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	48(%rcx), %eax
	movl	%eax, -96(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	32(%rcx), %eax
	movl	%eax, -80(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	32(%rcx), %eax
	movl	%eax, -64(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	48(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	52(%rcx), %eax
	movl	%eax, -92(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	36(%rcx), %eax
	movl	%eax, -76(%rbp)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	36(%rcx), %eax
	movl	%eax, -60(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	52(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	56(%rcx), %eax
	movl	%eax, -88(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	40(%rcx), %eax
	movl	%eax, -72(%rbp)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	40(%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	56(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	60(%rcx), %eax
	movl	%eax, -84(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	addl	44(%rcx), %eax
	movl	%eax, -68(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	44(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	subl	60(%rcx), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-80(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-80(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-48(%rbp), %eax
	subl	-64(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-92(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-92(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-60(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-44(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-88(%rbp), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-88(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-40(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-84(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-84(%rbp), %eax
	subl	-68(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-52(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-36(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	-176(%rbp), %eax
	addl	-164(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-172(%rbp), %eax
	addl	-168(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-172(%rbp), %eax
	subl	-168(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-176(%rbp), %eax
	subl	-164(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-160(%rbp), %eax
	addl	-148(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-156(%rbp), %eax
	addl	-152(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-156(%rbp), %eax
	subl	-152(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-160(%rbp), %eax
	subl	-148(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-144(%rbp), %eax
	addl	-132(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-140(%rbp), %eax
	addl	-136(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-140(%rbp), %eax
	subl	-136(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-144(%rbp), %eax
	subl	-132(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-128(%rbp), %eax
	addl	-116(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-124(%rbp), %eax
	addl	-120(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-124(%rbp), %eax
	subl	-120(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-128(%rbp), %eax
	subl	-116(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-96(%rbp), %eax
	addl	-92(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	-96(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	-88(%rbp), %eax
	addl	-84(%rbp), %eax
	movl	%eax, -168(%rbp)
	movl	-84(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	%eax, -164(%rbp)
	movl	-80(%rbp), %eax
	addl	-76(%rbp), %eax
	movl	%eax, -160(%rbp)
	movl	-80(%rbp), %eax
	subl	-76(%rbp), %eax
	movl	%eax, -156(%rbp)
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -152(%rbp)
	movl	-68(%rbp), %eax
	subl	-72(%rbp), %eax
	movl	%eax, -148(%rbp)
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-64(%rbp), %eax
	subl	-60(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-56(%rbp), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-52(%rbp), %eax
	subl	-56(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -128(%rbp)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -124(%rbp)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -120(%rbp)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movl	%eax, -116(%rbp)
	movl	$0, -20(%rbp)
	movl	-176(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB114_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	cmpl	$0, -100(%rbp)
	jge	.LBB114_5
# %bb.4:                                # %cond.true
                                        #   in Loop: Header=BB114_2 Depth=1
	xorl	%eax, %eax
	subl	-100(%rbp), %eax
	jmp	.LBB114_6
.LBB114_5:                              # %cond.false
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-100(%rbp), %eax
.LBB114_6:                              # %cond.end
                                        #   in Loop: Header=BB114_2 Depth=1
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	cltq
	movl	-176(%rbp,%rax,4), %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB114_2
.LBB114_8:                              # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	sarl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB114_14
.LBB114_9:                              # %if.else
	movl	$0, -20(%rbp)
.LBB114_10:                             # %for.cond260
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -20(%rbp)
	jge	.LBB114_13
# %bb.11:                               # %for.body262
                                        #   in Loop: Header=BB114_10 Depth=1
	movq	byte_abs, %rax
	movq	-16(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
# %bb.12:                               # %for.inc268
                                        #   in Loop: Header=BB114_10 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_10
.LBB114_13:                             # %for.end270
	jmp	.LBB114_14
.LBB114_14:                             # %if.end
	movl	-24(%rbp), %ebx
	cmpl	$276915442, -184(%rbp)  # imm = 0x108164F2
	jne	.LBB114_16
.LBB114_15:
	movl	%ebx, %eax
	addq	$184, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_15
.Lfunc_end114:
	.size	SATD.89, .Lfunc_end114-SATD.89
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorPredictor.90 # -- Begin function SetMotionVectorPredictor.90
	.p2align	4, 0x90
	.type	SetMotionVectorPredictor.90,@function
SetMotionVectorPredictor.90:            # @SetMotionVectorPredictor.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$224, %rsp
	movl	32(%rbp), %eax
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$353688542, -180(%rbp)  # imm = 0x1514DBDE
	movq	%rdi, -216(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -64(%rbp)
	movw	%cx, -2(%rbp)
	movl	%r8d, -8(%rbp)
	movl	%r9d, -140(%rbp)
	movl	-140(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -156(%rbp)
	movl	16(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -172(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -160(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -168(%rbp)
	movl	$0, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_2
# %bb.1:                                # %if.then
	movl	$0, pred_SAD_space
.LBB115_2:                              # %if.end
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	24(%rbp), %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-56(%rbp), %r9
	callq	getLuma4x4Neighbour
	movl	-160(%rbp), %edi
	movl	-140(%rbp), %esi
	movl	16(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -172(%rbp)
	jle	.LBB115_19
# %bb.3:                                # %if.then2
	cmpl	$8, -156(%rbp)
	jge	.LBB115_14
# %bb.4:                                # %if.then4
	cmpl	$8, -172(%rbp)
	jne	.LBB115_9
# %bb.5:                                # %if.then6
	cmpl	$16, 24(%rbp)
	jne	.LBB115_7
# %bb.6:                                # %if.then8
	movl	$0, -56(%rbp)
	jmp	.LBB115_8
.LBB115_7:                              # %if.else
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
.LBB115_8:                              # %if.end10
	jmp	.LBB115_13
.LBB115_9:                              # %if.else11
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$8, %eax
	je	.LBB115_11
# %bb.10:                               # %if.then13
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB115_12
.LBB115_11:                             # %if.else16
	movl	$0, -56(%rbp)
.LBB115_12:                             # %if.end18
	jmp	.LBB115_13
.LBB115_13:                             # %if.end19
	jmp	.LBB115_18
.LBB115_14:                             # %if.else20
	movl	-156(%rbp), %eax
	addl	24(%rbp), %eax
	cmpl	$16, %eax
	je	.LBB115_16
# %bb.15:                               # %if.then23
	movl	-56(%rbp), %eax
	andl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB115_17
.LBB115_16:                             # %if.else26
	movl	$0, -56(%rbp)
.LBB115_17:                             # %if.end28
	jmp	.LBB115_18
.LBB115_18:                             # %if.end29
	jmp	.LBB115_19
.LBB115_19:                             # %if.end30
	cmpl	$0, -56(%rbp)
	jne	.LBB115_21
# %bb.20:                               # %if.then33
	movq	-208(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -48(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -40(%rbp)
.LBB115_21:                             # %if.end34
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB115_32
# %bb.22:                               # %if.then36
	cmpl	$0, -136(%rbp)
	je	.LBB115_24
# %bb.23:                               # %cond.true
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_25
.LBB115_24:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_25
.LBB115_25:                             # %cond.end
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_27
# %bb.26:                               # %cond.true45
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_28
.LBB115_27:                             # %cond.false55
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_28
.LBB115_28:                             # %cond.end56
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_30
# %bb.29:                               # %cond.true60
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_31
.LBB115_30:                             # %cond.false70
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_31
.LBB115_31:                             # %cond.end71
	movl	%eax, -80(%rbp)
	jmp	.LBB115_72
.LBB115_32:                             # %if.else73
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_52
# %bb.33:                               # %if.then78
	cmpl	$0, -136(%rbp)
	je	.LBB115_38
# %bb.34:                               # %cond.true81
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_36
# %bb.35:                               # %cond.true87
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_37
.LBB115_36:                             # %cond.false97
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB115_37:                             # %cond.end108
	jmp	.LBB115_39
.LBB115_38:                             # %cond.false110
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_39
.LBB115_39:                             # %cond.end111
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_44
# %bb.40:                               # %cond.true115
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_42
# %bb.41:                               # %cond.true122
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_43
.LBB115_42:                             # %cond.false132
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB115_43:                             # %cond.end143
	jmp	.LBB115_45
.LBB115_44:                             # %cond.false145
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_45
.LBB115_45:                             # %cond.end146
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_50
# %bb.46:                               # %cond.true150
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_48
# %bb.47:                               # %cond.true157
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_49
.LBB115_48:                             # %cond.false167
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB115_49:                             # %cond.end178
	jmp	.LBB115_51
.LBB115_50:                             # %cond.false180
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_51
.LBB115_51:                             # %cond.end181
	movl	%eax, -80(%rbp)
	jmp	.LBB115_71
.LBB115_52:                             # %if.else183
	cmpl	$0, -136(%rbp)
	je	.LBB115_57
# %bb.53:                               # %cond.true186
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_55
# %bb.54:                               # %cond.true193
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB115_56
.LBB115_55:                             # %cond.false203
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_56:                             # %cond.end213
	jmp	.LBB115_58
.LBB115_57:                             # %cond.false215
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_58
.LBB115_58:                             # %cond.end216
	movl	%eax, -76(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_63
# %bb.59:                               # %cond.true220
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_61
# %bb.60:                               # %cond.true227
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB115_62
.LBB115_61:                             # %cond.false238
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_62:                             # %cond.end248
	jmp	.LBB115_64
.LBB115_63:                             # %cond.false250
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_64
.LBB115_64:                             # %cond.end251
	movl	%eax, -84(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_69
# %bb.65:                               # %cond.true255
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_67
# %bb.66:                               # %cond.true262
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB115_68
.LBB115_67:                             # %cond.false273
	movq	-72(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_68:                             # %cond.end283
	jmp	.LBB115_70
.LBB115_69:                             # %cond.false285
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB115_70
.LBB115_70:                             # %cond.end286
	movl	%eax, -80(%rbp)
.LBB115_71:                             # %if.end288
	jmp	.LBB115_72
.LBB115_72:                             # %if.end289
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_76
# %bb.73:                               # %land.lhs.true
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_76
# %bb.74:                               # %land.lhs.true296
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_76
# %bb.75:                               # %if.then300
	movl	$1, -32(%rbp)
	jmp	.LBB115_86
.LBB115_76:                             # %if.else301
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_80
# %bb.77:                               # %land.lhs.true305
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_80
# %bb.78:                               # %land.lhs.true309
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_80
# %bb.79:                               # %if.then313
	movl	$2, -32(%rbp)
	jmp	.LBB115_85
.LBB115_80:                             # %if.else314
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_84
# %bb.81:                               # %land.lhs.true318
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	je	.LBB115_84
# %bb.82:                               # %land.lhs.true322
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_84
# %bb.83:                               # %if.then326
	movl	$3, -32(%rbp)
.LBB115_84:                             # %if.end327
	jmp	.LBB115_85
.LBB115_85:                             # %if.end328
	jmp	.LBB115_86
.LBB115_86:                             # %if.end329
	cmpl	$8, 24(%rbp)
	jne	.LBB115_96
# %bb.87:                               # %land.lhs.true332
	cmpl	$16, 32(%rbp)
	jne	.LBB115_96
# %bb.88:                               # %if.then335
	cmpl	$0, -156(%rbp)
	jne	.LBB115_92
# %bb.89:                               # %if.then338
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_91
# %bb.90:                               # %if.then342
	movl	$1, -32(%rbp)
.LBB115_91:                             # %if.end343
	jmp	.LBB115_95
.LBB115_92:                             # %if.else344
	movl	-80(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_94
# %bb.93:                               # %if.then348
	movl	$3, -32(%rbp)
.LBB115_94:                             # %if.end349
	jmp	.LBB115_95
.LBB115_95:                             # %if.end350
	jmp	.LBB115_107
.LBB115_96:                             # %if.else351
	cmpl	$16, 24(%rbp)
	jne	.LBB115_106
# %bb.97:                               # %land.lhs.true354
	cmpl	$8, 32(%rbp)
	jne	.LBB115_106
# %bb.98:                               # %if.then357
	cmpl	$0, -172(%rbp)
	jne	.LBB115_102
# %bb.99:                               # %if.then360
	movl	-84(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_101
# %bb.100:                              # %if.then364
	movl	$2, -32(%rbp)
.LBB115_101:                            # %if.end365
	jmp	.LBB115_105
.LBB115_102:                            # %if.else366
	movl	-76(%rbp), %eax
	movswl	-2(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_104
# %bb.103:                              # %if.then370
	movl	$1, -32(%rbp)
.LBB115_104:                            # %if.end371
	jmp	.LBB115_105
.LBB115_105:                            # %if.end372
	jmp	.LBB115_106
.LBB115_106:                            # %if.end373
	jmp	.LBB115_107
.LBB115_107:                            # %if.end374
	movl	$0, -12(%rbp)
.LBB115_108:                            # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -12(%rbp)
	jge	.LBB115_236
# %bb.109:                              # %for.body
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB115_111
# %bb.110:                              # %lor.lhs.false
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -12(%rbp)
	jne	.LBB115_121
.LBB115_111:                            # %if.then381
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_113
# %bb.112:                              # %cond.true384
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_114
.LBB115_113:                            # %cond.false396
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_114
.LBB115_114:                            # %cond.end397
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_116
# %bb.115:                              # %cond.true401
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_117
.LBB115_116:                            # %cond.false413
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_117
.LBB115_117:                            # %cond.end414
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_119
# %bb.118:                              # %cond.true418
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_120
.LBB115_119:                            # %cond.false430
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_120
.LBB115_120:                            # %cond.end431
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB115_161
.LBB115_121:                            # %if.else433
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_141
# %bb.122:                              # %if.then440
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_127
# %bb.123:                              # %cond.true443
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_125
# %bb.124:                              # %cond.true450
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_126
.LBB115_125:                            # %cond.false462
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB115_126:                            # %cond.end474
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_128
.LBB115_127:                            # %cond.false476
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_128
.LBB115_128:                            # %cond.end477
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_133
# %bb.129:                              # %cond.true481
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_131
# %bb.130:                              # %cond.true488
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_132
.LBB115_131:                            # %cond.false500
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB115_132:                            # %cond.end513
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_134
.LBB115_133:                            # %cond.false515
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_134
.LBB115_134:                            # %cond.end516
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_139
# %bb.135:                              # %cond.true520
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_137
# %bb.136:                              # %cond.true527
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB115_138
.LBB115_137:                            # %cond.false539
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB115_138:                            # %cond.end552
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_140
.LBB115_139:                            # %cond.false554
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_140
.LBB115_140:                            # %cond.end555
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -20(%rbp)
	jmp	.LBB115_160
.LBB115_141:                            # %if.else557
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_146
# %bb.142:                              # %cond.true560
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_144
# %bb.143:                              # %cond.true567
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB115_145
.LBB115_144:                            # %cond.false580
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_145:                            # %cond.end592
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_147
.LBB115_146:                            # %cond.false594
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_147
.LBB115_147:                            # %cond.end595
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -24(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_152
# %bb.148:                              # %cond.true599
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_150
# %bb.149:                              # %cond.true606
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB115_151
.LBB115_150:                            # %cond.false619
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_151:                            # %cond.end631
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_153
.LBB115_152:                            # %cond.false633
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_153
.LBB115_153:                            # %cond.end634
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -16(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_158
# %bb.154:                              # %cond.true638
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_156
# %bb.155:                              # %cond.true645
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
	jmp	.LBB115_157
.LBB115_156:                            # %cond.false658
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB115_157:                            # %cond.end670
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_159
.LBB115_158:                            # %cond.false672
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_159
.LBB115_159:                            # %cond.end673
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -20(%rbp)
.LBB115_160:                            # %if.end675
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_161
.LBB115_161:                            # %if.end676
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_187
# %bb.162:                              # %if.then679
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -136(%rbp)
	je	.LBB115_167
# %bb.163:                              # %cond.true682
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_165
# %bb.164:                              # %cond.true685
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_166
.LBB115_165:                            # %cond.false696
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_166:                            # %cond.end708
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_168
.LBB115_167:                            # %cond.false710
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_168
.LBB115_168:                            # %cond.end711
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -144(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB115_173
# %bb.169:                              # %cond.true715
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_171
# %bb.170:                              # %cond.true718
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_172
.LBB115_171:                            # %cond.false729
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_172:                            # %cond.end741
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_174
.LBB115_173:                            # %cond.false743
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_174
.LBB115_174:                            # %cond.end744
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -164(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB115_179
# %bb.175:                              # %cond.true748
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_177
# %bb.176:                              # %cond.true751
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_178
.LBB115_177:                            # %cond.false762
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_178:                            # %cond.end774
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_180
.LBB115_179:                            # %cond.false776
                                        #   in Loop: Header=BB115_108 Depth=1
	xorl	%eax, %eax
	jmp	.LBB115_180
.LBB115_180:                            # %cond.end777
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -176(%rbp)
	cmpl	$0, -56(%rbp)
	je	.LBB115_185
# %bb.181:                              # %cond.true781
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -8(%rbp)
	jne	.LBB115_183
# %bb.182:                              # %cond.true784
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_bwmincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB115_184
.LBB115_183:                            # %cond.false795
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	all_mincost, %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	FME_blocktype, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB115_184:                            # %cond.end807
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_186
.LBB115_185:                            # %cond.false809
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-176(%rbp), %eax
.LBB115_186:                            # %cond.end810
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	%eax, -168(%rbp)
.LBB115_187:                            # %if.end812
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-32(%rbp), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB115_233
# %bb.188:                              # %if.end812
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	.LJTI115_0(,%rax,8), %rax
	jmpq	*%rax
.LBB115_189:                            # %sw.bb
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -112(%rbp)
	jne	.LBB115_194
# %bb.190:                              # %lor.lhs.false815
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -56(%rbp)
	jne	.LBB115_194
# %bb.191:                              # %if.then818
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_193
# %bb.192:                              # %if.then821
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_193:                            # %if.end824
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_213
.LBB115_194:                            # %if.else825
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jge	.LBB115_196
# %bb.195:                              # %cond.true830
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB115_197
.LBB115_196:                            # %cond.false831
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %edx
.LBB115_197:                            # %cond.end832
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	%edx, %ecx
	jge	.LBB115_199
# %bb.198:                              # %cond.true836
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB115_203
.LBB115_199:                            # %cond.false837
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jge	.LBB115_201
# %bb.200:                              # %cond.true840
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB115_202
.LBB115_201:                            # %cond.false841
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB115_202:                            # %cond.end842
                                        #   in Loop: Header=BB115_108 Depth=1
.LBB115_203:                            # %cond.end844
                                        #   in Loop: Header=BB115_108 Depth=1
	subl	%ecx, %eax
	movl	-24(%rbp), %ecx
	movl	-16(%rbp), %edx
	cmpl	-20(%rbp), %edx
	jle	.LBB115_205
# %bb.204:                              # %cond.true848
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %edx
	jmp	.LBB115_206
.LBB115_205:                            # %cond.false849
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %edx
.LBB115_206:                            # %cond.end850
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	%edx, %ecx
	jle	.LBB115_208
# %bb.207:                              # %cond.true854
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %ecx
	jmp	.LBB115_212
.LBB115_208:                            # %cond.false855
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	cmpl	-20(%rbp), %ecx
	jle	.LBB115_210
# %bb.209:                              # %cond.true858
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %ecx
	jmp	.LBB115_211
.LBB115_210:                            # %cond.false859
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %ecx
.LBB115_211:                            # %cond.end860
                                        #   in Loop: Header=BB115_108 Depth=1
.LBB115_212:                            # %cond.end862
                                        #   in Loop: Header=BB115_108 Depth=1
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
.LBB115_213:                            # %if.end865
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_223
# %bb.214:                              # %if.then868
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB115_217
# %bb.215:                              # %land.lhs.true871
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -144(%rbp)
	je	.LBB115_217
# %bb.216:                              # %if.then874
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB115_222
.LBB115_217:                            # %if.else877
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-28(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB115_220
# %bb.218:                              # %land.lhs.true880
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB115_220
# %bb.219:                              # %if.then883
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
	jmp	.LBB115_221
.LBB115_220:                            # %if.else886
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_221:                            # %if.end889
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_222
.LBB115_222:                            # %if.end890
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_223
.LBB115_223:                            # %if.end891
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_224:                            # %sw.bb892
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_226
# %bb.225:                              # %if.then895
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-144(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_226:                            # %if.end898
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_227:                            # %sw.bb899
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_229
# %bb.228:                              # %if.then902
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-164(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_229:                            # %if.end905
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_230:                            # %sw.bb906
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_232
# %bb.231:                              # %if.then909
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-168(%rbp), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, -152(%rbp,%rcx,4)
.LBB115_232:                            # %if.end912
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_233:                            # %sw.default
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_234
.LBB115_234:                            # %sw.epilog
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-216(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.235:                              # %for.inc
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_108
.LBB115_236:                            # %for.end
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB115_241
# %bb.237:                              # %if.then918
	movl	-152(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jle	.LBB115_239
# %bb.238:                              # %cond.true923
	movl	-148(%rbp), %eax
	jmp	.LBB115_240
.LBB115_239:                            # %cond.false925
	movl	-152(%rbp), %eax
.LBB115_240:                            # %cond.end927
	movl	%eax, pred_SAD_space
.LBB115_241:                            # %if.end929
	cmpl	$353688542, -180(%rbp)  # imm = 0x1514DBDE
	jne	.LBB115_243
.LBB115_242:
	addq	$224, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_243:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_242
.Lfunc_end115:
	.size	SetMotionVectorPredictor.90, .Lfunc_end115-SetMotionVectorPredictor.90
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI115_0:
	.quad	.LBB115_189
	.quad	.LBB115_224
	.quad	.LBB115_227
	.quad	.LBB115_230
                                        # -- End function
	.text
	.globl	FindSkipModeMotionVector.91 # -- Begin function FindSkipModeMotionVector.91
	.p2align	4, 0x90
	.type	FindSkipModeMotionVector.91,@function
FindSkipModeMotionVector.91:            # @FindSkipModeMotionVector.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movl	$100661474, -56(%rbp)   # imm = 0x5FFF8E2
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -88(%rbp)
	je	.LBB116_8
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_4
# %bb.2:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_4
# %bb.3:                                # %if.then24
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -12(%rbp)
.LBB116_4:                              # %if.end
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_7
# %bb.5:                                # %land.lhs.true27
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_7
# %bb.6:                                # %if.then34
	movl	-16(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB116_7:                              # %if.end36
	jmp	.LBB116_8
.LBB116_8:                              # %if.end37
	cmpl	$0, -112(%rbp)
	je	.LBB116_16
# %bb.9:                                # %if.then40
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_12
# %bb.10:                               # %land.lhs.true62
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_12
# %bb.11:                               # %if.then69
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -20(%rbp)
.LBB116_12:                             # %if.end72
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB116_15
# %bb.13:                               # %land.lhs.true75
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_15
# %bb.14:                               # %if.then82
	movl	-24(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB116_15:                             # %if.end85
	jmp	.LBB116_16
.LBB116_16:                             # %if.end86
	cmpl	$0, -88(%rbp)
	jne	.LBB116_18
# %bb.17:                               # %cond.true
	movl	$1, %ecx
	jmp	.LBB116_22
.LBB116_18:                             # %cond.false
	xorl	%eax, %eax
	cmpl	$0, -12(%rbp)
	jne	.LBB116_21
# %bb.19:                               # %land.lhs.true90
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB116_21
# %bb.20:                               # %land.rhs
	cmpl	$0, -16(%rbp)
	sete	%al
.LBB116_21:                             # %land.end
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB116_22:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, -112(%rbp)
	jne	.LBB116_24
# %bb.23:                               # %cond.true108
	movl	$1, %ecx
	jmp	.LBB116_28
.LBB116_24:                             # %cond.false109
	xorl	%eax, %eax
	cmpl	$0, -20(%rbp)
	jne	.LBB116_27
# %bb.25:                               # %land.lhs.true112
	xorl	%eax, %eax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-96(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	cmpl	$0, %ecx
	jne	.LBB116_27
# %bb.26:                               # %land.rhs125
	cmpl	$0, -24(%rbp)
	sete	%al
.LBB116_27:                             # %land.end128
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
.LBB116_28:                             # %cond.end130
	movl	%ecx, -52(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB116_30
# %bb.29:                               # %lor.lhs.false
	cmpl	$0, -60(%rbp)
	je	.LBB116_39
.LBB116_30:                             # %if.then134
	movl	$0, -8(%rbp)
.LBB116_31:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_33 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_38
# %bb.32:                               # %for.body
                                        #   in Loop: Header=BB116_31 Depth=1
	movl	$0, -4(%rbp)
.LBB116_33:                             # %for.cond137
                                        #   Parent Loop BB116_31 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_36
# %bb.34:                               # %for.body140
                                        #   in Loop: Header=BB116_33 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
# %bb.35:                               # %for.inc
                                        #   in Loop: Header=BB116_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_33
.LBB116_36:                             # %for.end
                                        #   in Loop: Header=BB116_31 Depth=1
	jmp	.LBB116_37
.LBB116_37:                             # %for.inc157
                                        #   in Loop: Header=BB116_31 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_31
.LBB116_38:                             # %for.end159
	jmp	.LBB116_48
.LBB116_39:                             # %if.else
	leaq	-28(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movl	$0, %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
	movl	$0, -8(%rbp)
.LBB116_40:                             # %for.cond162
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_42 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_47
# %bb.41:                               # %for.body165
                                        #   in Loop: Header=BB116_40 Depth=1
	movl	$0, -4(%rbp)
.LBB116_42:                             # %for.cond166
                                        #   Parent Loop BB116_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_45
# %bb.43:                               # %for.body169
                                        #   in Loop: Header=BB116_42 Depth=2
	movw	-28(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.44:                               # %for.inc188
                                        #   in Loop: Header=BB116_42 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_42
.LBB116_45:                             # %for.end190
                                        #   in Loop: Header=BB116_40 Depth=1
	jmp	.LBB116_46
.LBB116_46:                             # %for.inc191
                                        #   in Loop: Header=BB116_40 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_40
.LBB116_47:                             # %for.end193
	jmp	.LBB116_48
.LBB116_48:                             # %if.end194
	cmpl	$100661474, -56(%rbp)   # imm = 0x5FFF8E2
	jne	.LBB116_50
.LBB116_49:
	addq	$144, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_49
.Lfunc_end116:
	.size	FindSkipModeMotionVector.91, .Lfunc_end116-FindSkipModeMotionVector.91
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function FullPelBlockMotionSearch.92
.LCPI117_0:
	.quad	4602678819172646912     # double 0.5
.LCPI117_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	FullPelBlockMotionSearch.92
	.p2align	4, 0x90
	.type	FullPelBlockMotionSearch.92,@function
FullPelBlockMotionSearch.92:            # @FullPelBlockMotionSearch.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	56(%rbp), %eax
	movl	48(%rbp), %eax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1142425199, -148(%rbp) # imm = 0x4418066F
	movq	%rdi, -168(%rbp)
	movw	%si, -14(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -72(%rbp)
	movl	%r9d, -64(%rbp)
	vmovsd	%xmm0, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB117_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB117_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB117_4
.LBB117_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB117_4
.LBB117_4:                              # %cond.end
	xorl	%eax, %eax
	vmovsd	.LCPI117_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI117_1(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	%ecx, -32(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	6432(%rcx), %rcx
	movq	%rcx, -112(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6392(%rcx), %ecx
	movl	%ecx, -144(%rbp)
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	listX(,%rcx,8), %rcx
	movswq	-14(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	6396(%rcx), %ecx
	movl	%ecx, -124(%rbp)
	movl	$0, -36(%rbp)
	movl	48(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movl	48(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	%ecx, -116(%rbp)
	vmulsd	-176(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -96(%rbp)
	movq	input, %rcx
	movslq	-64(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movl	%ecx, -100(%rbp)
	movq	input, %rcx
	movslq	-64(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %ecx
	sarl	$2, %ecx
	movl	%ecx, -120(%rbp)
	movl	-76(%rbp), %ecx
	shll	$2, %ecx
	movswl	16(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -128(%rbp)
	movl	-72(%rbp), %ecx
	shll	$2, %ecx
	movswl	24(%rbp), %edx
	addl	%edx, %ecx
	movl	%ecx, -136(%rbp)
	movl	-76(%rbp), %ecx
	movq	32(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movl	-72(%rbp), %ecx
	movq	40(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	cmpl	$1, -64(%rbp)
	jne	.LBB117_8
# %bb.5:                                # %land.lhs.true42
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 2464(%rcx)
	jne	.LBB117_8
# %bb.6:                                # %land.lhs.true44
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	je	.LBB117_8
# %bb.7:                                # %land.rhs
	movswl	-14(%rbp), %eax
	cmpl	$0, %eax
	sete	%al
.LBB117_8:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -140(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB117_11
# %bb.9:                                # %land.lhs.true51
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB117_14
# %bb.10:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB117_14
.LBB117_11:                             # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB117_13
# %bb.12:                               # %land.rhs59
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB117_13:                             # %land.end63
.LBB117_14:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -132(%rbp)
	cmpl	$0, -132(%rbp)
	je	.LBB117_17
# %bb.15:                               # %land.lhs.true66
	movq	input, %rax
	cmpl	$0, 1292(%rax)
	je	.LBB117_17
# %bb.16:                               # %if.then
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6440(%rax), %rax
	movq	%rax, -112(%rbp)
	jmp	.LBB117_18
.LBB117_17:                             # %if.else
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-14(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6432(%rax), %rax
	movq	%rax, -112(%rbp)
.LBB117_18:                             # %if.end
	movl	-60(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB117_23
# %bb.19:                               # %land.lhs.true81
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movl	52(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-84(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_23
# %bb.20:                               # %land.lhs.true86
	movl	-92(%rbp), %eax
	cmpl	48(%rbp), %eax
	jle	.LBB117_23
# %bb.21:                               # %land.lhs.true89
	movl	-92(%rbp), %eax
	movq	img, %rcx
	movl	60(%rcx), %ecx
	subl	$1, %ecx
	subl	48(%rbp), %ecx
	subl	-100(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_23
# %bb.22:                               # %if.then95
	movabsq	$FastLineX, %rax
	movq	%rax, -160(%rbp)
	jmp	.LBB117_24
.LBB117_23:                             # %if.else96
	movabsq	$UMVLineX, %rax
	movq	%rax, -160(%rbp)
.LBB117_24:                             # %if.end97
	movl	$0, -20(%rbp)
.LBB117_25:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_33 Depth 2
                                        #       Child Loop BB117_35 Depth 3
	movl	-20(%rbp), %eax
	cmpl	-116(%rbp), %eax
	jge	.LBB117_47
# %bb.26:                               # %for.body
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-60(%rbp), %eax
	movq	spiral_search_x, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	movq	spiral_search_y, %rcx
	movslq	-20(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, -80(%rbp)
	movl	-96(%rbp), %eax
	movq	mvbits, %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	subl	-128(%rbp), %edx
	movslq	%edx, %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	mvbits, %rdx
	movl	-80(%rbp), %esi
	shll	$2, %esi
	subl	-136(%rbp), %esi
	movslq	%esi, %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	%eax, -12(%rbp)
	cmpl	$0, -140(%rbp)
	je	.LBB117_30
# %bb.27:                               # %land.lhs.true118
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jne	.LBB117_30
# %bb.28:                               # %land.lhs.true121
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-80(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jne	.LBB117_30
# %bb.29:                               # %if.then124
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-96(%rbp), %eax
	shll	$4, %eax
	sarl	$16, %eax
	movl	-12(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -12(%rbp)
.LBB117_30:                             # %if.end128
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB117_32
# %bb.31:                               # %if.then131
                                        #   in Loop: Header=BB117_25 Depth=1
	jmp	.LBB117_46
.LBB117_32:                             # %if.end132
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	$0, -28(%rbp)
.LBB117_33:                             # %for.cond133
                                        #   Parent Loop BB117_25 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_35 Depth 3
	movl	-28(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB117_42
# %bb.34:                               # %for.body136
                                        #   in Loop: Header=BB117_33 Depth=2
	movq	-160(%rbp), %rax
	movl	-84(%rbp), %edi
	movq	-112(%rbp), %rsi
	movl	-80(%rbp), %edx
	addl	-28(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-124(%rbp), %r8d
	movl	-144(%rbp), %r9d
	callq	*%rax
	movq	%rax, -56(%rbp)
	movq	-168(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -48(%rbp)
	movl	$0, -88(%rbp)
.LBB117_35:                             # %for.cond140
                                        #   Parent Loop BB117_25 Depth=1
                                        #     Parent Loop BB117_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-88(%rbp), %eax
	cmpl	-120(%rbp), %eax
	jge	.LBB117_38
# %bb.36:                               # %for.body143
                                        #   in Loop: Header=BB117_35 Depth=3
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	byte_abs, %rax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$2, %rdx
	movq	%rdx, -48(%rbp)
	movzwl	(%rcx), %ecx
	movq	-56(%rbp), %rdx
	movq	%rdx, %rsi
	addq	$2, %rsi
	movq	%rsi, -56(%rbp)
	movzwl	(%rdx), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB117_35 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB117_35
.LBB117_38:                             # %for.end
                                        #   in Loop: Header=BB117_33 Depth=2
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jl	.LBB117_40
# %bb.39:                               # %if.then177
                                        #   in Loop: Header=BB117_25 Depth=1
	jmp	.LBB117_43
.LBB117_40:                             # %if.end178
                                        #   in Loop: Header=BB117_33 Depth=2
	jmp	.LBB117_41
.LBB117_41:                             # %for.inc179
                                        #   in Loop: Header=BB117_33 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB117_33
.LBB117_42:                             # %for.end181.loopexit
                                        #   in Loop: Header=BB117_25 Depth=1
	jmp	.LBB117_43
.LBB117_43:                             # %for.end181
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-12(%rbp), %eax
	cmpl	56(%rbp), %eax
	jge	.LBB117_45
# %bb.44:                               # %if.then184
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, 56(%rbp)
.LBB117_45:                             # %if.end185
                                        #   in Loop: Header=BB117_25 Depth=1
	jmp	.LBB117_46
.LBB117_46:                             # %for.inc186
                                        #   in Loop: Header=BB117_25 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB117_25
.LBB117_47:                             # %for.end188
	cmpl	$0, -36(%rbp)
	je	.LBB117_49
# %bb.48:                               # %if.then190
	movq	spiral_search_x, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB117_49:                             # %if.end201
	movl	56(%rbp), %ebx
	cmpl	$1142425199, -148(%rbp) # imm = 0x4418066F
	jne	.LBB117_51
.LBB117_50:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_51:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_50
.Lfunc_end117:
	.size	FullPelBlockMotionSearch.92, .Lfunc_end117-FullPelBlockMotionSearch.92
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.93 # -- Begin function Get_Direct_Motion_Vectors.93
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.93,@function
Get_Direct_Motion_Vectors.93:           # @Get_Direct_Motion_Vectors.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$1619884759, -232(%rbp) # imm = 0x608D7AD7
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB118_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB118_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB118_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB118_5
.LBB118_4:                              # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB118_5:                              # %if.end
	jmp	.LBB118_7
.LBB118_6:                              # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB118_7:                              # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB118_226
# %bb.8:                                # %if.then9
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB118_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB118_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_12
.LBB118_11:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_12
.LBB118_12:                             # %cond.end
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB118_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_15
.LBB118_14:                             # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_15
.LBB118_15:                             # %cond.end38
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB118_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_18
.LBB118_17:                             # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_18
.LBB118_18:                             # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB118_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_21
.LBB118_20:                             # %cond.false69
	movswl	-50(%rbp), %eax
.LBB118_21:                             # %cond.end71
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB118_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_24
.LBB118_23:                             # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_24
.LBB118_24:                             # %cond.end87
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB118_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_27
.LBB118_26:                             # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_27
.LBB118_27:                             # %cond.end103
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB118_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_30
.LBB118_29:                             # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_30
.LBB118_30:                             # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB118_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_33
.LBB118_32:                             # %cond.false134
	movswl	-52(%rbp), %eax
.LBB118_33:                             # %cond.end136
	movw	%ax, -26(%rbp)
	jmp	.LBB118_150
.LBB118_34:                             # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB118_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB118_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_39
.LBB118_38:                             # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_40
.LBB118_39:                             # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_40:                             # %cond.end181
	jmp	.LBB118_42
.LBB118_41:                             # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_42
.LBB118_42:                             # %cond.end184
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB118_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_46
.LBB118_45:                             # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_47
.LBB118_46:                             # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_47:                             # %cond.end229
	jmp	.LBB118_49
.LBB118_48:                             # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_49
.LBB118_49:                             # %cond.end232
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB118_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_53
.LBB118_52:                             # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_54
.LBB118_53:                             # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_54:                             # %cond.end277
	jmp	.LBB118_56
.LBB118_55:                             # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_56
.LBB118_56:                             # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB118_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_60
.LBB118_59:                             # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_61
.LBB118_60:                             # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_61:                             # %cond.end325
	jmp	.LBB118_63
.LBB118_62:                             # %cond.false327
	movswl	-50(%rbp), %eax
.LBB118_63:                             # %cond.end329
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB118_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_67
.LBB118_66:                             # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_68
.LBB118_67:                             # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_68:                             # %cond.end374
	jmp	.LBB118_70
.LBB118_69:                             # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_70
.LBB118_70:                             # %cond.end377
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB118_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_74
.LBB118_73:                             # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_75
.LBB118_74:                             # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_75:                             # %cond.end422
	jmp	.LBB118_77
.LBB118_76:                             # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_77
.LBB118_77:                             # %cond.end425
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB118_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_81
.LBB118_80:                             # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_82
.LBB118_81:                             # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_82:                             # %cond.end470
	jmp	.LBB118_84
.LBB118_83:                             # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_84
.LBB118_84:                             # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB118_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_88
.LBB118_87:                             # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB118_89
.LBB118_88:                             # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB118_89:                             # %cond.end518
	jmp	.LBB118_91
.LBB118_90:                             # %cond.false520
	movswl	-52(%rbp), %eax
.LBB118_91:                             # %cond.end522
	movw	%ax, -26(%rbp)
	jmp	.LBB118_149
.LBB118_92:                             # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB118_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_96
.LBB118_95:                             # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_97
.LBB118_96:                             # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_97:                             # %cond.end567
	jmp	.LBB118_99
.LBB118_98:                             # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_99
.LBB118_99:                             # %cond.end570
	movw	%ax, -28(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB118_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_103
.LBB118_102:                            # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_104
.LBB118_103:                            # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_104:                            # %cond.end615
	jmp	.LBB118_106
.LBB118_105:                            # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_106
.LBB118_106:                            # %cond.end618
	movw	%ax, -24(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB118_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_110
.LBB118_109:                            # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_111
.LBB118_110:                            # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_111:                            # %cond.end663
	jmp	.LBB118_113
.LBB118_112:                            # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_113
.LBB118_113:                            # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB118_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_117
.LBB118_116:                            # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_118
.LBB118_117:                            # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_118:                            # %cond.end711
	jmp	.LBB118_120
.LBB118_119:                            # %cond.false713
	movswl	-50(%rbp), %eax
.LBB118_120:                            # %cond.end715
	movw	%ax, -30(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB118_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_124
.LBB118_123:                            # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_125
.LBB118_124:                            # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_125:                            # %cond.end760
	jmp	.LBB118_127
.LBB118_126:                            # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_127
.LBB118_127:                            # %cond.end763
	movw	%ax, -32(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB118_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_131
.LBB118_130:                            # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_132
.LBB118_131:                            # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_132:                            # %cond.end808
	jmp	.LBB118_134
.LBB118_133:                            # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_134
.LBB118_134:                            # %cond.end811
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB118_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_138
.LBB118_137:                            # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_139
.LBB118_138:                            # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_139:                            # %cond.end856
	jmp	.LBB118_141
.LBB118_140:                            # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB118_141
.LBB118_141:                            # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB118_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB118_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB118_145
.LBB118_144:                            # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB118_146
.LBB118_145:                            # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB118_146:                            # %cond.end904
	jmp	.LBB118_148
.LBB118_147:                            # %cond.false906
	movswl	-52(%rbp), %eax
.LBB118_148:                            # %cond.end908
	movw	%ax, -26(%rbp)
.LBB118_149:                            # %if.end911
	jmp	.LBB118_150
.LBB118_150:                            # %if.end912
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_156
# %bb.151:                              # %land.lhs.true916
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_156
# %bb.152:                              # %cond.true920
	movswl	-28(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_154
# %bb.153:                              # %cond.true925
	movswl	-28(%rbp), %eax
	jmp	.LBB118_155
.LBB118_154:                            # %cond.false927
	movswl	-24(%rbp), %eax
.LBB118_155:                            # %cond.end929
	jmp	.LBB118_160
.LBB118_156:                            # %cond.false931
	movswl	-28(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB118_158
# %bb.157:                              # %cond.true936
	movswl	-28(%rbp), %eax
	jmp	.LBB118_159
.LBB118_158:                            # %cond.false938
	movswl	-24(%rbp), %eax
.LBB118_159:                            # %cond.end940
.LBB118_160:                            # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_166
# %bb.161:                              # %land.lhs.true948
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB118_165
.LBB118_164:                            # %cond.false959
	movswl	-30(%rbp), %eax
.LBB118_165:                            # %cond.end961
	jmp	.LBB118_170
.LBB118_166:                            # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB118_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB118_169
.LBB118_168:                            # %cond.false970
	movswl	-30(%rbp), %eax
.LBB118_169:                            # %cond.end972
.LBB118_170:                            # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_176
# %bb.171:                              # %land.lhs.true980
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_176
# %bb.172:                              # %cond.true984
	movswl	-32(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_174
# %bb.173:                              # %cond.true989
	movswl	-32(%rbp), %eax
	jmp	.LBB118_175
.LBB118_174:                            # %cond.false991
	movswl	-22(%rbp), %eax
.LBB118_175:                            # %cond.end993
	jmp	.LBB118_180
.LBB118_176:                            # %cond.false995
	movswl	-32(%rbp), %eax
	movswl	-22(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB118_178
# %bb.177:                              # %cond.true1000
	movswl	-32(%rbp), %eax
	jmp	.LBB118_179
.LBB118_178:                            # %cond.false1002
	movswl	-22(%rbp), %eax
.LBB118_179:                            # %cond.end1004
.LBB118_180:                            # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB118_185
.LBB118_184:                            # %cond.false1023
	movswl	-26(%rbp), %eax
.LBB118_185:                            # %cond.end1025
	jmp	.LBB118_190
.LBB118_186:                            # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB118_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB118_189
.LBB118_188:                            # %cond.false1034
	movswl	-26(%rbp), %eax
.LBB118_189:                            # %cond.end1036
.LBB118_190:                            # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_192
# %bb.191:                              # %if.then1044
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB118_192:                            # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_194
# %bb.193:                              # %if.then1051
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB118_194:                            # %if.end1055
	movl	$0, -8(%rbp)
.LBB118_195:                            # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB118_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB118_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB118_197:                            # %for.cond1061
                                        #   Parent Loop BB118_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB118_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -40(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB118_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB118_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB118_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB118_203
.LBB118_202:                            # %if.else1102
                                        #   in Loop: Header=BB118_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB118_203:                            # %if.end1128
                                        #   in Loop: Header=BB118_197 Depth=2
	jmp	.LBB118_205
.LBB118_204:                            # %if.else1129
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB118_205:                            # %if.end1151
                                        #   in Loop: Header=BB118_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB118_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB118_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB118_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	-208(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB118_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB118_210
.LBB118_209:                            # %if.else1187
                                        #   in Loop: Header=BB118_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB118_210:                            # %if.end1213
                                        #   in Loop: Header=BB118_197 Depth=2
	jmp	.LBB118_212
.LBB118_211:                            # %if.else1214
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB118_212:                            # %if.end1236
                                        #   in Loop: Header=BB118_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB118_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB118_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB118_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB118_215:                            # %if.end1255
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB118_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB118_221
.LBB118_217:                            # %if.else1269
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB118_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB118_220
.LBB118_219:                            # %if.else1283
                                        #   in Loop: Header=BB118_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB118_220:                            # %if.end1288
                                        #   in Loop: Header=BB118_197 Depth=2
	jmp	.LBB118_221
.LBB118_221:                            # %if.end1289
                                        #   in Loop: Header=BB118_197 Depth=2
	jmp	.LBB118_222
.LBB118_222:                            # %for.inc
                                        #   in Loop: Header=BB118_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_197
.LBB118_223:                            # %for.end
                                        #   in Loop: Header=BB118_195 Depth=1
	jmp	.LBB118_224
.LBB118_224:                            # %for.inc1290
                                        #   in Loop: Header=BB118_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_195
.LBB118_225:                            # %for.end1292
	jmp	.LBB118_259
.LBB118_226:                            # %if.else1293
	movl	$0, -8(%rbp)
.LBB118_227:                            # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_229 Depth 2
                                        #       Child Loop BB118_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB118_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB118_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB118_229:                            # %for.cond1304
                                        #   Parent Loop BB118_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB118_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB118_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB118_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB118_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB118_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB118_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB118_234
.LBB118_233:                            # %cond.false1319
                                        #   in Loop: Header=BB118_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB118_234
.LBB118_234:                            # %cond.end1320
                                        #   in Loop: Header=BB118_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -40(%rbp)
	movq	-200(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-200(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -228(%rbp)
	cmpl	$-1, -228(%rbp)
	jne	.LBB118_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB118_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB118_254
.LBB118_236:                            # %if.else1393
                                        #   in Loop: Header=BB118_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB118_237:                            # %for.cond1394
                                        #   Parent Loop BB118_227 Depth=1
                                        #     Parent Loop BB118_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB118_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB118_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB118_240
.LBB118_239:                            # %cond.false1402
                                        #   in Loop: Header=BB118_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB118_240:                            # %cond.end1406
                                        #   in Loop: Header=BB118_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB118_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB118_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB118_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB118_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB118_247
.LBB118_243:                            # %if.else1425
                                        #   in Loop: Header=BB118_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB118_237 Depth=3
	jmp	.LBB118_245
.LBB118_245:                            # %for.inc1427
                                        #   in Loop: Header=BB118_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB118_237
.LBB118_246:                            # %for.end1429.loopexit
                                        #   in Loop: Header=BB118_229 Depth=2
	jmp	.LBB118_247
.LBB118_247:                            # %for.end1429
                                        #   in Loop: Header=BB118_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB118_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB118_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB118_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB118_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB118_251
.LBB118_250:                            # %if.else1487
                                        #   in Loop: Header=BB118_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB118_251:                            # %if.end1571
                                        #   in Loop: Header=BB118_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB118_253
.LBB118_252:                            # %if.else1587
                                        #   in Loop: Header=BB118_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB118_253:                            # %if.end1602
                                        #   in Loop: Header=BB118_229 Depth=2
	jmp	.LBB118_254
.LBB118_254:                            # %if.end1603
                                        #   in Loop: Header=BB118_229 Depth=2
	jmp	.LBB118_255
.LBB118_255:                            # %for.inc1604
                                        #   in Loop: Header=BB118_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_229
.LBB118_256:                            # %for.end1606
                                        #   in Loop: Header=BB118_227 Depth=1
	jmp	.LBB118_257
.LBB118_257:                            # %for.inc1607
                                        #   in Loop: Header=BB118_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_227
.LBB118_258:                            # %for.end1609
	jmp	.LBB118_259
.LBB118_259:                            # %if.end1610
	cmpl	$1619884759, -232(%rbp) # imm = 0x608D7AD7
	jne	.LBB118_261
.LBB118_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_261:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_260
.Lfunc_end118:
	.size	Get_Direct_Motion_Vectors.93, .Lfunc_end118-Get_Direct_Motion_Vectors.93
	.cfi_endproc
                                        # -- End function
	.globl	Get_Direct_Motion_Vectors.94 # -- Begin function Get_Direct_Motion_Vectors.94
	.p2align	4, 0x90
	.type	Get_Direct_Motion_Vectors.94,@function
Get_Direct_Motion_Vectors.94:           # @Get_Direct_Motion_Vectors.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$256, %rsp              # imm = 0x100
	movl	$604598320, -228(%rbp)  # imm = 0x24097030
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -216(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_6
# %bb.1:                                # %land.lhs.true
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB119_6
# %bb.2:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB119_4
# %bb.3:                                # %if.then4
	movq	Co_located, %rax
	movq	4856(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	4848(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	4832(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	4840(%rax), %rax
	movq	%rax, -224(%rbp)
	jmp	.LBB119_5
.LBB119_4:                              # %if.else
	movq	Co_located, %rax
	movq	3240(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	3232(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	3216(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	3224(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB119_5:                              # %if.end
	jmp	.LBB119_7
.LBB119_6:                              # %if.else5
	movq	Co_located, %rax
	movq	1624(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	Co_located, %rax
	movq	1616(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	Co_located, %rax
	movq	1600(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	Co_located, %rax
	movq	1608(%rax), %rax
	movq	%rax, -224(%rbp)
.LBB119_7:                              # %if.end7
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	je	.LBB119_226
# %bb.8:                                # %if.then9
	leaq	-188(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	leaq	-192(%rbp), %rdi
	xorl	%esi, %esi
	movl	$4, %edx
	callq	memset
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-136(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-160(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$16, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-112(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-88(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB119_34
# %bb.9:                                # %if.then16
	cmpl	$0, -136(%rbp)
	je	.LBB119_11
# %bb.10:                               # %cond.true
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_12
.LBB119_11:                             # %cond.false
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_12
.LBB119_12:                             # %cond.end
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_14
# %bb.13:                               # %cond.true27
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_15
.LBB119_14:                             # %cond.false37
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_15
.LBB119_15:                             # %cond.end38
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_17
# %bb.16:                               # %cond.true43
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_18
.LBB119_17:                             # %cond.false53
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_18
.LBB119_18:                             # %cond.end54
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_20
# %bb.19:                               # %cond.true59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_21
.LBB119_20:                             # %cond.false69
	movswl	-50(%rbp), %eax
.LBB119_21:                             # %cond.end71
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_23
# %bb.22:                               # %cond.true76
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_24
.LBB119_23:                             # %cond.false86
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_24
.LBB119_24:                             # %cond.end87
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_26
# %bb.25:                               # %cond.true92
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_27
.LBB119_26:                             # %cond.false102
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_27
.LBB119_27:                             # %cond.end103
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_29
# %bb.28:                               # %cond.true108
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_30
.LBB119_29:                             # %cond.false118
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_30
.LBB119_30:                             # %cond.end119
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_32
# %bb.31:                               # %cond.true124
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_33
.LBB119_32:                             # %cond.false134
	movswl	-52(%rbp), %eax
.LBB119_33:                             # %cond.end136
	movw	%ax, -30(%rbp)
	jmp	.LBB119_150
.LBB119_34:                             # %if.else139
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB119_92
# %bb.35:                               # %if.then142
	cmpl	$0, -136(%rbp)
	je	.LBB119_41
# %bb.36:                               # %cond.true145
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_38
# %bb.37:                               # %lor.lhs.false
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_39
.LBB119_38:                             # %cond.true161
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_40
.LBB119_39:                             # %cond.false171
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_40:                             # %cond.end181
	jmp	.LBB119_42
.LBB119_41:                             # %cond.false183
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_42
.LBB119_42:                             # %cond.end184
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_48
# %bb.43:                               # %cond.true189
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_45
# %bb.44:                               # %lor.lhs.false196
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_46
.LBB119_45:                             # %cond.true208
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_47
.LBB119_46:                             # %cond.false218
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_47:                             # %cond.end229
	jmp	.LBB119_49
.LBB119_48:                             # %cond.false231
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_49
.LBB119_49:                             # %cond.end232
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_55
# %bb.50:                               # %cond.true237
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_52
# %bb.51:                               # %lor.lhs.false244
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_53
.LBB119_52:                             # %cond.true256
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_54
.LBB119_53:                             # %cond.false266
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_54:                             # %cond.end277
	jmp	.LBB119_56
.LBB119_55:                             # %cond.false279
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_56
.LBB119_56:                             # %cond.end280
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_62
# %bb.57:                               # %cond.true285
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_59
# %bb.58:                               # %lor.lhs.false292
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_60
.LBB119_59:                             # %cond.true304
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_61
.LBB119_60:                             # %cond.false314
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_61:                             # %cond.end325
	jmp	.LBB119_63
.LBB119_62:                             # %cond.false327
	movswl	-50(%rbp), %eax
.LBB119_63:                             # %cond.end329
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_69
# %bb.64:                               # %cond.true334
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_66
# %bb.65:                               # %lor.lhs.false341
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_67
.LBB119_66:                             # %cond.true353
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_68
.LBB119_67:                             # %cond.false363
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_68:                             # %cond.end374
	jmp	.LBB119_70
.LBB119_69:                             # %cond.false376
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_70
.LBB119_70:                             # %cond.end377
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_76
# %bb.71:                               # %cond.true382
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_73
# %bb.72:                               # %lor.lhs.false389
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_74
.LBB119_73:                             # %cond.true401
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_75
.LBB119_74:                             # %cond.false411
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_75:                             # %cond.end422
	jmp	.LBB119_77
.LBB119_76:                             # %cond.false424
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_77
.LBB119_77:                             # %cond.end425
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_83
# %bb.78:                               # %cond.true430
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_80
# %bb.79:                               # %lor.lhs.false437
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_81
.LBB119_80:                             # %cond.true449
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_82
.LBB119_81:                             # %cond.false459
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_82:                             # %cond.end470
	jmp	.LBB119_84
.LBB119_83:                             # %cond.false472
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_84
.LBB119_84:                             # %cond.end473
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_90
# %bb.85:                               # %cond.true478
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_87
# %bb.86:                               # %lor.lhs.false485
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_88
.LBB119_87:                             # %cond.true497
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	jmp	.LBB119_89
.LBB119_88:                             # %cond.false507
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	shll	$1, %eax
.LBB119_89:                             # %cond.end518
	jmp	.LBB119_91
.LBB119_90:                             # %cond.false520
	movswl	-52(%rbp), %eax
.LBB119_91:                             # %cond.end522
	movw	%ax, -30(%rbp)
	jmp	.LBB119_149
.LBB119_92:                             # %if.else525
	cmpl	$0, -136(%rbp)
	je	.LBB119_98
# %bb.93:                               # %cond.true528
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_95
# %bb.94:                               # %lor.lhs.false535
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_96
.LBB119_95:                             # %cond.true547
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_97
.LBB119_96:                             # %cond.false557
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_97:                             # %cond.end567
	jmp	.LBB119_99
.LBB119_98:                             # %cond.false569
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_99
.LBB119_99:                             # %cond.end570
	movw	%ax, -22(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_105
# %bb.100:                              # %cond.true575
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_102
# %bb.101:                              # %lor.lhs.false582
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_103
.LBB119_102:                            # %cond.true594
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_104
.LBB119_103:                            # %cond.false605
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_104:                            # %cond.end615
	jmp	.LBB119_106
.LBB119_105:                            # %cond.false617
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_106
.LBB119_106:                            # %cond.end618
	movw	%ax, -32(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_112
# %bb.107:                              # %cond.true623
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_109
# %bb.108:                              # %lor.lhs.false630
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_110
.LBB119_109:                            # %cond.true642
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_111
.LBB119_110:                            # %cond.false653
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_111:                            # %cond.end663
	jmp	.LBB119_113
.LBB119_112:                            # %cond.false665
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_113
.LBB119_113:                            # %cond.end666
	movw	%ax, -50(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_119
# %bb.114:                              # %cond.true671
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_116
# %bb.115:                              # %lor.lhs.false678
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_117
.LBB119_116:                            # %cond.true690
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_118
.LBB119_117:                            # %cond.false701
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_118:                            # %cond.end711
	jmp	.LBB119_120
.LBB119_119:                            # %cond.false713
	movswl	-50(%rbp), %eax
.LBB119_120:                            # %cond.end715
	movw	%ax, -24(%rbp)
	cmpl	$0, -136(%rbp)
	je	.LBB119_126
# %bb.121:                              # %cond.true720
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-132(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_123
# %bb.122:                              # %lor.lhs.false727
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_124
.LBB119_123:                            # %cond.true739
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_125
.LBB119_124:                            # %cond.false750
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-120(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-116(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_125:                            # %cond.end760
	jmp	.LBB119_127
.LBB119_126:                            # %cond.false762
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_127
.LBB119_127:                            # %cond.end763
	movw	%ax, -28(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB119_133
# %bb.128:                              # %cond.true768
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-156(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_130
# %bb.129:                              # %lor.lhs.false775
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_131
.LBB119_130:                            # %cond.true787
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_132
.LBB119_131:                            # %cond.false798
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-144(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-140(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_132:                            # %cond.end808
	jmp	.LBB119_134
.LBB119_133:                            # %cond.false810
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_134
.LBB119_134:                            # %cond.end811
	movw	%ax, -26(%rbp)
	cmpl	$0, -88(%rbp)
	je	.LBB119_140
# %bb.135:                              # %cond.true816
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_137
# %bb.136:                              # %lor.lhs.false823
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_138
.LBB119_137:                            # %cond.true835
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_139
.LBB119_138:                            # %cond.false846
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_139:                            # %cond.end856
	jmp	.LBB119_141
.LBB119_140:                            # %cond.false858
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB119_141
.LBB119_141:                            # %cond.end859
	movw	%ax, -52(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB119_147
# %bb.142:                              # %cond.true864
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-108(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	jne	.LBB119_144
# %bb.143:                              # %lor.lhs.false871
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB119_145
.LBB119_144:                            # %cond.true883
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	sarl	$1, %eax
	jmp	.LBB119_146
.LBB119_145:                            # %cond.false894
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
.LBB119_146:                            # %cond.end904
	jmp	.LBB119_148
.LBB119_147:                            # %cond.false906
	movswl	-52(%rbp), %eax
.LBB119_148:                            # %cond.end908
	movw	%ax, -30(%rbp)
.LBB119_149:                            # %if.end911
	jmp	.LBB119_150
.LBB119_150:                            # %if.end912
	movswl	-22(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_156
# %bb.151:                              # %land.lhs.true916
	movswl	-32(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_156
# %bb.152:                              # %cond.true920
	movswl	-22(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_154
# %bb.153:                              # %cond.true925
	movswl	-22(%rbp), %eax
	jmp	.LBB119_155
.LBB119_154:                            # %cond.false927
	movswl	-32(%rbp), %eax
.LBB119_155:                            # %cond.end929
	jmp	.LBB119_160
.LBB119_156:                            # %cond.false931
	movswl	-22(%rbp), %eax
	movswl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_158
# %bb.157:                              # %cond.true936
	movswl	-22(%rbp), %eax
	jmp	.LBB119_159
.LBB119_158:                            # %cond.false938
	movswl	-32(%rbp), %eax
.LBB119_159:                            # %cond.end940
.LBB119_160:                            # %cond.end942
	movw	%ax, -12(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_166
# %bb.161:                              # %land.lhs.true948
	movswl	-24(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_166
# %bb.162:                              # %cond.true952
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_164
# %bb.163:                              # %cond.true957
	movswl	-12(%rbp), %eax
	jmp	.LBB119_165
.LBB119_164:                            # %cond.false959
	movswl	-24(%rbp), %eax
.LBB119_165:                            # %cond.end961
	jmp	.LBB119_170
.LBB119_166:                            # %cond.false963
	movswl	-12(%rbp), %eax
	movswl	-24(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_168
# %bb.167:                              # %cond.true968
	movswl	-12(%rbp), %eax
	jmp	.LBB119_169
.LBB119_168:                            # %cond.false970
	movswl	-24(%rbp), %eax
.LBB119_169:                            # %cond.end972
.LBB119_170:                            # %cond.end974
	movw	%ax, -12(%rbp)
	movswl	-28(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_176
# %bb.171:                              # %land.lhs.true980
	movswl	-26(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_176
# %bb.172:                              # %cond.true984
	movswl	-28(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_174
# %bb.173:                              # %cond.true989
	movswl	-28(%rbp), %eax
	jmp	.LBB119_175
.LBB119_174:                            # %cond.false991
	movswl	-26(%rbp), %eax
.LBB119_175:                            # %cond.end993
	jmp	.LBB119_180
.LBB119_176:                            # %cond.false995
	movswl	-28(%rbp), %eax
	movswl	-26(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_178
# %bb.177:                              # %cond.true1000
	movswl	-28(%rbp), %eax
	jmp	.LBB119_179
.LBB119_178:                            # %cond.false1002
	movswl	-26(%rbp), %eax
.LBB119_179:                            # %cond.end1004
.LBB119_180:                            # %cond.end1006
	movw	%ax, -10(%rbp)
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_186
# %bb.181:                              # %land.lhs.true1012
	movswl	-30(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_186
# %bb.182:                              # %cond.true1016
	movswl	-10(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB119_184
# %bb.183:                              # %cond.true1021
	movswl	-10(%rbp), %eax
	jmp	.LBB119_185
.LBB119_184:                            # %cond.false1023
	movswl	-30(%rbp), %eax
.LBB119_185:                            # %cond.end1025
	jmp	.LBB119_190
.LBB119_186:                            # %cond.false1027
	movswl	-10(%rbp), %eax
	movswl	-30(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB119_188
# %bb.187:                              # %cond.true1032
	movswl	-10(%rbp), %eax
	jmp	.LBB119_189
.LBB119_188:                            # %cond.false1034
	movswl	-30(%rbp), %eax
.LBB119_189:                            # %cond.end1036
.LBB119_190:                            # %cond.end1038
	movw	%ax, -10(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_192
# %bb.191:                              # %if.then1044
	leaq	-188(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-12(%rbp), %ecx
	movl	$0, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB119_192:                            # %if.end1047
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_194
# %bb.193:                              # %if.then1051
	leaq	-192(%rbp), %rdi
	movq	enc_picture, %rax
	movq	6480(%rax), %rsi
	movq	enc_picture, %rax
	movq	6504(%rax), %rdx
	movswl	-10(%rbp), %ecx
	movl	$1, %r8d
	xorl	%r9d, %r9d
	movl	$0, (%rsp)
	movl	$16, 8(%rsp)
	movl	$16, 16(%rsp)
	callq	SetMotionVectorPredictor
.LBB119_194:                            # %if.end1055
	movl	$0, -8(%rbp)
.LBB119_195:                            # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_197 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB119_225
# %bb.196:                              # %for.body
                                        #   in Loop: Header=BB119_195 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB119_197:                            # %for.cond1061
                                        #   Parent Loop BB119_195 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB119_223
# %bb.198:                              # %for.body1064
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	sarl	$2, %eax
	addl	-4(%rbp), %eax
	movl	%eax, -36(%rbp)
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_204
# %bb.199:                              # %if.then1072
                                        #   in Loop: Header=BB119_197 Depth=2
	cmpw	$0, -12(%rbp)
	jne	.LBB119_202
# %bb.200:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB119_202
# %bb.201:                              # %if.then1080
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB119_203
.LBB119_202:                            # %if.else1102
                                        #   in Loop: Header=BB119_197 Depth=2
	movw	-188(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-186(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movswq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-12(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB119_203:                            # %if.end1128
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_205
.LBB119_204:                            # %if.else1129
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB119_205:                            # %if.end1151
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB119_211
# %bb.206:                              # %if.then1155
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB119_209
# %bb.207:                              # %land.lhs.true1159
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-200(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB119_209
# %bb.208:                              # %if.then1165
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB119_210
.LBB119_209:                            # %if.else1187
                                        #   in Loop: Header=BB119_197 Depth=2
	movw	-192(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movw	-190(%rbp), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movswq	-10(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movw	-10(%rbp), %ax
	movq	direct_ref_idx, %rcx
	movq	8(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB119_210:                            # %if.end1213
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_212
.LBB119_211:                            # %if.else1214
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
.LBB119_212:                            # %if.end1236
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-12(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB119_215
# %bb.213:                              # %land.lhs.true1240
                                        #   in Loop: Header=BB119_197 Depth=2
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jge	.LBB119_215
# %bb.214:                              # %if.then1244
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB119_215:                            # %if.end1255
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB119_217
# %bb.216:                              # %if.then1264
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB119_221
.LBB119_217:                            # %if.else1269
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB119_219
# %bb.218:                              # %if.then1278
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$1, (%rax,%rcx,2)
	jmp	.LBB119_220
.LBB119_219:                            # %if.else1283
                                        #   in Loop: Header=BB119_197 Depth=2
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
.LBB119_220:                            # %if.end1288
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_221
.LBB119_221:                            # %if.end1289
                                        #   in Loop: Header=BB119_197 Depth=2
	jmp	.LBB119_222
.LBB119_222:                            # %for.inc
                                        #   in Loop: Header=BB119_197 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_197
.LBB119_223:                            # %for.end
                                        #   in Loop: Header=BB119_195 Depth=1
	jmp	.LBB119_224
.LBB119_224:                            # %for.inc1290
                                        #   in Loop: Header=BB119_195 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_195
.LBB119_225:                            # %for.end1292
	jmp	.LBB119_259
.LBB119_226:                            # %if.else1293
	movl	$0, -8(%rbp)
.LBB119_227:                            # %for.cond1294
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_229 Depth 2
                                        #       Child Loop BB119_237 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB119_258
# %bb.228:                              # %for.body1297
                                        #   in Loop: Header=BB119_227 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	sarl	$2, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	$0, -4(%rbp)
.LBB119_229:                            # %for.cond1304
                                        #   Parent Loop BB119_227 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_237 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB119_256
# %bb.230:                              # %for.body1307
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_233
# %bb.231:                              # %land.lhs.true1311
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	-216(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB119_233
# %bb.232:                              # %cond.true1314
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB119_234
.LBB119_233:                            # %cond.false1319
                                        #   in Loop: Header=BB119_229 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB119_234
.LBB119_234:                            # %cond.end1320
                                        #   in Loop: Header=BB119_229 Depth=2
	xorl	%eax, %eax
	movl	%ecx, -172(%rbp)
	movq	img, %rcx
	movl	152(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	168(%rcx), %ecx
	sarl	$2, %ecx
	addl	-4(%rbp), %ecx
	movl	%ecx, -36(%rbp)
	movq	-208(%rbp), %rcx
	movq	(%rcx), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	cmpl	$-1, %ecx
	movl	$1, %ecx
	cmovel	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	-208(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -232(%rbp)
	cmpl	$-1, -232(%rbp)
	jne	.LBB119_236
# %bb.235:                              # %if.then1346
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB119_254
.LBB119_236:                            # %if.else1393
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	movl	$0, -168(%rbp)
.LBB119_237:                            # %for.cond1394
                                        #   Parent Loop BB119_227 Depth=1
                                        #     Parent Loop BB119_229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-168(%rbp), %eax
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	movl	-172(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	cmpl	listXsize(,%rdx,4), %ecx
	jge	.LBB119_239
# %bb.238:                              # %cond.true1400
                                        #   in Loop: Header=BB119_237 Depth=3
	movq	img, %rcx
	movl	72000(%rcx), %ecx
	jmp	.LBB119_240
.LBB119_239:                            # %cond.false1402
                                        #   in Loop: Header=BB119_237 Depth=3
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	movl	listXsize(,%rcx,4), %ecx
.LBB119_240:                            # %cond.end1406
                                        #   in Loop: Header=BB119_237 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB119_246
# %bb.241:                              # %for.body1410
                                        #   in Loop: Header=BB119_237 Depth=3
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-168(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-224(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB119_243
# %bb.242:                              # %if.then1424
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-168(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB119_247
.LBB119_243:                            # %if.else1425
                                        #   in Loop: Header=BB119_237 Depth=3
	movl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
# %bb.244:                              # %if.end1426
                                        #   in Loop: Header=BB119_237 Depth=3
	jmp	.LBB119_245
.LBB119_245:                            # %for.inc1427
                                        #   in Loop: Header=BB119_237 Depth=3
	movl	-168(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -168(%rbp)
	jmp	.LBB119_237
.LBB119_246:                            # %for.end1429.loopexit
                                        #   in Loop: Header=BB119_229 Depth=2
	jmp	.LBB119_247
.LBB119_247:                            # %for.end1429
                                        #   in Loop: Header=BB119_229 Depth=2
	cmpl	$-135792468, -60(%rbp)  # imm = 0xF7E7F8AC
	je	.LBB119_252
# %bb.248:                              # %if.then1432
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movl	-172(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-60(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -164(%rbp)
	cmpl	$9999, -164(%rbp)       # imm = 0x270F
	jne	.LBB119_250
# %bb.249:                              # %if.then1440
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movq	-184(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, (%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_251
.LBB119_250:                            # %if.else1487
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, (%rcx)
	movl	-164(%rbp), %eax
	subl	$256, %eax              # imm = 0x100
	movq	-184(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	imull	%ecx, %eax
	addl	$128, %eax
	sarl	$8, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movw	%ax, 2(%rcx)
.LBB119_251:                            # %if.end1571
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-60(%rbp), %eax
	movq	direct_ref_idx, %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$2, (%rax,%rcx,2)
	jmp	.LBB119_253
.LBB119_252:                            # %if.else1587
                                        #   in Loop: Header=BB119_229 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	direct_pdir, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB119_253:                            # %if.end1602
                                        #   in Loop: Header=BB119_229 Depth=2
	jmp	.LBB119_254
.LBB119_254:                            # %if.end1603
                                        #   in Loop: Header=BB119_229 Depth=2
	jmp	.LBB119_255
.LBB119_255:                            # %for.inc1604
                                        #   in Loop: Header=BB119_229 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_229
.LBB119_256:                            # %for.end1606
                                        #   in Loop: Header=BB119_227 Depth=1
	jmp	.LBB119_257
.LBB119_257:                            # %for.inc1607
                                        #   in Loop: Header=BB119_227 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_227
.LBB119_258:                            # %for.end1609
	jmp	.LBB119_259
.LBB119_259:                            # %if.end1610
	cmpl	$604598320, -228(%rbp)  # imm = 0x24097030
	jne	.LBB119_261
.LBB119_260:
	addq	$256, %rsp              # imm = 0x100
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_261:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_260
.Lfunc_end119:
	.size	Get_Direct_Motion_Vectors.94, .Lfunc_end119-Get_Direct_Motion_Vectors.94
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.95
.LCPI120_0:
	.quad	4602678819172646912     # double 0.5
.LCPI120_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.95
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.95,@function
SubPelBlockSearchBiPred.95:             # @SubPelBlockSearchBiPred.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI120_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI120_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$1036092334, -196(%rbp) # imm = 0x3DC183AE
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -122(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -152(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -114(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -172(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB120_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB120_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB120_4
.LBB120_3:                              # %cond.false
	movl	64(%rbp), %eax
.LBB120_4:                              # %cond.end
	jmp	.LBB120_6
.LBB120_5:                              # %cond.false17
	movl	64(%rbp), %eax
.LBB120_6:                              # %cond.end18
	movw	%ax, -176(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB120_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB120_10
.LBB120_9:                              # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB120_10
.LBB120_10:                             # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -116(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB120_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB120_14
.LBB120_13:                             # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB120_14:                             # %cond.end55
	jmp	.LBB120_16
.LBB120_15:                             # %cond.false57
	movl	$1, %eax
	jmp	.LBB120_16
.LBB120_16:                             # %cond.end58
	movw	%ax, -36(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB120_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB120_20
.LBB120_19:                             # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB120_20:                             # %cond.end82
	jmp	.LBB120_22
.LBB120_21:                             # %cond.false84
	movl	$1, %eax
	jmp	.LBB120_22
.LBB120_22:                             # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB120_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB120_26
.LBB120_25:                             # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB120_26:                             # %cond.end106
	jmp	.LBB120_28
.LBB120_27:                             # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB120_28
.LBB120_28:                             # %cond.end109
	movw	%ax, -174(%rbp)
	movswl	-116(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB120_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB120_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB120_32
.LBB120_31:                             # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB120_32:                             # %cond.end130
	jmp	.LBB120_34
.LBB120_33:                             # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB120_34
.LBB120_34:                             # %cond.end133
	movw	%ax, -170(%rbp)
	movswl	-170(%rbp), %eax
	movswl	-174(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -34(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB120_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB120_37
.LBB120_36:                             # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB120_37:                             # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB120_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB120_40
.LBB120_39:                             # %cond.false161
	movswl	-90(%rbp), %eax
.LBB120_40:                             # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-122(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -150(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-152(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_45
# %bb.41:                               # %land.lhs.true197
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_45
# %bb.42:                               # %land.lhs.true205
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_45
# %bb.43:                               # %land.lhs.true211
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB120_46
.LBB120_45:                             # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB120_46:                             # %if.end
	movswl	-118(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_51
# %bb.47:                               # %land.lhs.true224
	movswl	-118(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_51
# %bb.48:                               # %land.lhs.true232
	movswl	-114(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_51
# %bb.49:                               # %land.lhs.true238
	movswl	-114(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB120_52
.LBB120_51:                             # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB120_52:                             # %if.end248
	movw	$0, -102(%rbp)
	movw	-172(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB120_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_55 Depth 2
                                        #       Child Loop BB120_60 Depth 3
                                        #         Child Loop BB120_162 Depth 4
                                        #           Child Loop BB120_164 Depth 5
                                        #       Child Loop BB120_175 Depth 3
                                        #         Child Loop BB120_181 Depth 4
                                        #           Child Loop BB120_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-176(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB120_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB120_55:                             # %for.cond283
                                        #   Parent Loop BB120_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_60 Depth 3
                                        #         Child Loop BB120_162 Depth 4
                                        #           Child Loop BB120_164 Depth 5
                                        #       Child Loop BB120_175 Depth 3
                                        #         Child Loop BB120_181 Depth 4
                                        #           Child Loop BB120_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB120_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB120_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB120_57:                             # %land.end
                                        #   in Loop: Header=BB120_55 Depth=2
	testb	$1, %al
	jne	.LBB120_58
	jmp	.LBB120_195
.LBB120_58:                             # %for.body289
                                        #   in Loop: Header=BB120_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB120_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$0, -40(%rbp)
.LBB120_60:                             # %for.cond304
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_162 Depth 4
                                        #           Child Loop BB120_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB120_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_67
.LBB120_63:                             # %cond.false345
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_66
.LBB120_65:                             # %cond.false369
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_66:                             # %cond.end389
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_67:                             # %cond.end391
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_73
.LBB120_69:                             # %cond.false421
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_72
.LBB120_71:                             # %cond.false448
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_72:                             # %cond.end470
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_73:                             # %cond.end472
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_79
.LBB120_75:                             # %cond.false505
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_78
.LBB120_77:                             # %cond.false532
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_78:                             # %cond.end554
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_79:                             # %cond.end556
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_85
.LBB120_81:                             # %cond.false589
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_84
.LBB120_83:                             # %cond.false616
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_84:                             # %cond.end638
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_85:                             # %cond.end640
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_91
.LBB120_87:                             # %cond.false681
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_90
.LBB120_89:                             # %cond.false706
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_90:                             # %cond.end726
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_91:                             # %cond.end728
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_97
.LBB120_93:                             # %cond.false759
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_96
.LBB120_95:                             # %cond.false786
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_96:                             # %cond.end808
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_97:                             # %cond.end810
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_103
.LBB120_99:                             # %cond.false843
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_102
.LBB120_101:                            # %cond.false870
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_102:                            # %cond.end892
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_103:                            # %cond.end894
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_109
.LBB120_105:                            # %cond.false927
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_108
.LBB120_107:                            # %cond.false954
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_108:                            # %cond.end976
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_109:                            # %cond.end978
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_115
.LBB120_111:                            # %cond.false1019
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_114
.LBB120_113:                            # %cond.false1044
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_114:                            # %cond.end1064
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_115:                            # %cond.end1066
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_121
.LBB120_117:                            # %cond.false1097
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_120
.LBB120_119:                            # %cond.false1124
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_120:                            # %cond.end1146
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_121:                            # %cond.end1148
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_127
.LBB120_123:                            # %cond.false1181
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_126
.LBB120_125:                            # %cond.false1208
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_126:                            # %cond.end1230
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_127:                            # %cond.end1232
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_133
.LBB120_129:                            # %cond.false1265
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_132
.LBB120_131:                            # %cond.false1292
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_132:                            # %cond.end1314
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_133:                            # %cond.end1316
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_139
.LBB120_135:                            # %cond.false1357
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_138
.LBB120_137:                            # %cond.false1382
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_138:                            # %cond.end1402
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_139:                            # %cond.end1404
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_145
.LBB120_141:                            # %cond.false1435
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_144
.LBB120_143:                            # %cond.false1462
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_144:                            # %cond.end1484
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_145:                            # %cond.end1486
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_151
.LBB120_147:                            # %cond.false1519
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_150
.LBB120_149:                            # %cond.false1546
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_150:                            # %cond.end1568
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_151:                            # %cond.end1570
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB120_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_157
.LBB120_153:                            # %cond.false1603
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB120_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_156
.LBB120_155:                            # %cond.false1630
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_156:                            # %cond.end1652
                                        #   in Loop: Header=BB120_60 Depth=3
.LBB120_157:                            # %cond.end1654
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB120_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB120_173
.LBB120_160:                            # %if.end1673
                                        #   in Loop: Header=BB120_60 Depth=3
	jmp	.LBB120_170
.LBB120_161:                            # %if.else1674
                                        #   in Loop: Header=BB120_60 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB120_162:                            # %for.cond1675
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_164 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB120_162 Depth=4
	movl	$0, -100(%rbp)
.LBB120_164:                            # %for.cond1679
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_60 Depth=3
                                        #         Parent Loop BB120_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB120_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB120_164 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_164
.LBB120_167:                            # %for.end
                                        #   in Loop: Header=BB120_162 Depth=4
	jmp	.LBB120_168
.LBB120_168:                            # %for.inc1694
                                        #   in Loop: Header=BB120_162 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB120_162
.LBB120_169:                            # %for.end1696
                                        #   in Loop: Header=BB120_60 Depth=3
	jmp	.LBB120_170
.LBB120_170:                            # %if.end1697
                                        #   in Loop: Header=BB120_60 Depth=3
	jmp	.LBB120_171
.LBB120_171:                            # %for.inc1698
                                        #   in Loop: Header=BB120_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_60
.LBB120_172:                            # %for.end1702.loopexit
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_173
.LBB120_173:                            # %for.end1702
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_193
.LBB120_174:                            # %if.else1703
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$0, -40(%rbp)
.LBB120_175:                            # %for.cond1704
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_181 Depth 4
                                        #           Child Loop BB120_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB120_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB120_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB120_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB120_192
.LBB120_179:                            # %if.end2054
                                        #   in Loop: Header=BB120_175 Depth=3
	jmp	.LBB120_189
.LBB120_180:                            # %if.else2055
                                        #   in Loop: Header=BB120_175 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB120_181:                            # %for.cond2056
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_183 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB120_181 Depth=4
	movl	$0, -100(%rbp)
.LBB120_183:                            # %for.cond2060
                                        #   Parent Loop BB120_53 Depth=1
                                        #     Parent Loop BB120_55 Depth=2
                                        #       Parent Loop BB120_175 Depth=3
                                        #         Parent Loop BB120_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB120_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB120_183 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_183
.LBB120_186:                            # %for.end2077
                                        #   in Loop: Header=BB120_181 Depth=4
	jmp	.LBB120_187
.LBB120_187:                            # %for.inc2078
                                        #   in Loop: Header=BB120_181 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB120_181
.LBB120_188:                            # %for.end2080
                                        #   in Loop: Header=BB120_175 Depth=3
	jmp	.LBB120_189
.LBB120_189:                            # %if.end2081
                                        #   in Loop: Header=BB120_175 Depth=3
	jmp	.LBB120_190
.LBB120_190:                            # %for.inc2082
                                        #   in Loop: Header=BB120_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_175
.LBB120_191:                            # %for.end2086.loopexit
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_192
.LBB120_192:                            # %for.end2086
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_193
.LBB120_193:                            # %if.end2087
                                        #   in Loop: Header=BB120_55 Depth=2
	jmp	.LBB120_194
.LBB120_194:                            # %for.inc2088
                                        #   in Loop: Header=BB120_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB120_55
.LBB120_195:                            # %for.end2092
                                        #   in Loop: Header=BB120_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB120_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB120_197:                            # %if.end2101
                                        #   in Loop: Header=BB120_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB120_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB120_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB120_199:                            # %if.end2107
                                        #   in Loop: Header=BB120_53 Depth=1
	jmp	.LBB120_200
.LBB120_200:                            # %for.inc2108
                                        #   in Loop: Header=BB120_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB120_53
.LBB120_201:                            # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB120_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB120_203:                            # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB120_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB120_205:                            # %if.end2129
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-118(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-150(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB120_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-114(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB120_211
.LBB120_210:                            # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB120_211:                            # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB120_212:                            # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_214 Depth 2
                                        #       Child Loop BB120_219 Depth 3
                                        #         Child Loop BB120_321 Depth 4
                                        #           Child Loop BB120_323 Depth 5
                                        #       Child Loop BB120_334 Depth 3
                                        #         Child Loop BB120_340 Depth 4
                                        #           Child Loop BB120_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB120_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB120_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -120(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-120(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB120_214:                            # %for.cond2194
                                        #   Parent Loop BB120_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB120_219 Depth 3
                                        #         Child Loop BB120_321 Depth 4
                                        #           Child Loop BB120_323 Depth 5
                                        #       Child Loop BB120_334 Depth 3
                                        #         Child Loop BB120_340 Depth 4
                                        #           Child Loop BB120_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-152(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB120_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB120_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB120_216:                            # %land.end2202
                                        #   in Loop: Header=BB120_214 Depth=2
	testb	$1, %al
	jne	.LBB120_217
	jmp	.LBB120_354
.LBB120_217:                            # %for.body2203
                                        #   in Loop: Header=BB120_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-120(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -116(%rbp)
	je	.LBB120_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$0, -40(%rbp)
.LBB120_219:                            # %for.cond2218
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_321 Depth 4
                                        #           Child Loop BB120_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB120_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_226
.LBB120_222:                            # %cond.false2261
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_225
.LBB120_224:                            # %cond.false2286
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_225:                            # %cond.end2306
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_226:                            # %cond.end2308
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_232
.LBB120_228:                            # %cond.false2339
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_231
.LBB120_230:                            # %cond.false2366
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_231:                            # %cond.end2388
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_232:                            # %cond.end2390
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_238
.LBB120_234:                            # %cond.false2423
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_237
.LBB120_236:                            # %cond.false2450
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_237:                            # %cond.end2472
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_238:                            # %cond.end2474
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_244
.LBB120_240:                            # %cond.false2507
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_243
.LBB120_242:                            # %cond.false2534
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_243:                            # %cond.end2556
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_244:                            # %cond.end2558
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_250
.LBB120_246:                            # %cond.false2599
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_249
.LBB120_248:                            # %cond.false2624
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_249:                            # %cond.end2644
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_250:                            # %cond.end2646
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_256
.LBB120_252:                            # %cond.false2677
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_255
.LBB120_254:                            # %cond.false2704
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_255:                            # %cond.end2726
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_256:                            # %cond.end2728
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_262
.LBB120_258:                            # %cond.false2761
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_261
.LBB120_260:                            # %cond.false2788
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_261:                            # %cond.end2810
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_262:                            # %cond.end2812
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_268
.LBB120_264:                            # %cond.false2845
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_267
.LBB120_266:                            # %cond.false2872
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_267:                            # %cond.end2894
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_268:                            # %cond.end2896
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_274
.LBB120_270:                            # %cond.false2937
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_273
.LBB120_272:                            # %cond.false2962
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_273:                            # %cond.end2982
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_274:                            # %cond.end2984
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_280
.LBB120_276:                            # %cond.false3015
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_279
.LBB120_278:                            # %cond.false3042
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_279:                            # %cond.end3064
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_280:                            # %cond.end3066
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_286
.LBB120_282:                            # %cond.false3099
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_285
.LBB120_284:                            # %cond.false3126
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_285:                            # %cond.end3148
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_286:                            # %cond.end3150
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_292
.LBB120_288:                            # %cond.false3183
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_291
.LBB120_290:                            # %cond.false3210
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_291:                            # %cond.end3232
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_292:                            # %cond.end3234
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_298
.LBB120_294:                            # %cond.false3275
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_297
.LBB120_296:                            # %cond.false3300
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_297:                            # %cond.end3320
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_298:                            # %cond.end3322
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_304
.LBB120_300:                            # %cond.false3353
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_303
.LBB120_302:                            # %cond.false3380
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_303:                            # %cond.end3402
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_304:                            # %cond.end3404
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_310
.LBB120_306:                            # %cond.false3437
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_309
.LBB120_308:                            # %cond.false3464
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_309:                            # %cond.end3486
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_310:                            # %cond.end3488
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB120_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB120_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB120_316
.LBB120_312:                            # %cond.false3521
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB120_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB120_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB120_315
.LBB120_314:                            # %cond.false3548
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-36(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-34(%rbp), %eax
	addl	%eax, %ebx
.LBB120_315:                            # %cond.end3570
                                        #   in Loop: Header=BB120_219 Depth=3
.LBB120_316:                            # %cond.end3572
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB120_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB120_332
.LBB120_319:                            # %if.end3593
                                        #   in Loop: Header=BB120_219 Depth=3
	jmp	.LBB120_329
.LBB120_320:                            # %if.else3594
                                        #   in Loop: Header=BB120_219 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB120_321:                            # %for.cond3595
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_323 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB120_321 Depth=4
	movl	$0, -100(%rbp)
.LBB120_323:                            # %for.cond3599
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_219 Depth=3
                                        #         Parent Loop BB120_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB120_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB120_323 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_323
.LBB120_326:                            # %for.end3616
                                        #   in Loop: Header=BB120_321 Depth=4
	jmp	.LBB120_327
.LBB120_327:                            # %for.inc3617
                                        #   in Loop: Header=BB120_321 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB120_321
.LBB120_328:                            # %for.end3619
                                        #   in Loop: Header=BB120_219 Depth=3
	jmp	.LBB120_329
.LBB120_329:                            # %if.end3620
                                        #   in Loop: Header=BB120_219 Depth=3
	jmp	.LBB120_330
.LBB120_330:                            # %for.inc3621
                                        #   in Loop: Header=BB120_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_219
.LBB120_331:                            # %for.end3625.loopexit
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_332
.LBB120_332:                            # %for.end3625
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_352
.LBB120_333:                            # %if.else3626
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$0, -40(%rbp)
.LBB120_334:                            # %for.cond3627
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB120_340 Depth 4
                                        #           Child Loop BB120_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-122(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB120_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB120_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-28(%rbp), %ecx
	movl	-32(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB120_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB120_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB120_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB120_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB120_351
.LBB120_338:                            # %if.end3978
                                        #   in Loop: Header=BB120_334 Depth=3
	jmp	.LBB120_348
.LBB120_339:                            # %if.else3979
                                        #   in Loop: Header=BB120_334 Depth=3
	movl	$0, -96(%rbp)
	movl	$0, -108(%rbp)
.LBB120_340:                            # %for.cond3980
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB120_342 Depth 5
	cmpl	$4, -96(%rbp)
	jge	.LBB120_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB120_340 Depth=4
	movl	$0, -100(%rbp)
.LBB120_342:                            # %for.cond3984
                                        #   Parent Loop BB120_212 Depth=1
                                        #     Parent Loop BB120_214 Depth=2
                                        #       Parent Loop BB120_334 Depth=3
                                        #         Parent Loop BB120_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -100(%rbp)
	jge	.LBB120_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB120_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB120_342 Depth=5
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB120_342
.LBB120_345:                            # %for.end4001
                                        #   in Loop: Header=BB120_340 Depth=4
	jmp	.LBB120_346
.LBB120_346:                            # %for.inc4002
                                        #   in Loop: Header=BB120_340 Depth=4
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	jmp	.LBB120_340
.LBB120_347:                            # %for.end4004
                                        #   in Loop: Header=BB120_334 Depth=3
	jmp	.LBB120_348
.LBB120_348:                            # %if.end4005
                                        #   in Loop: Header=BB120_334 Depth=3
	jmp	.LBB120_349
.LBB120_349:                            # %for.inc4006
                                        #   in Loop: Header=BB120_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB120_334
.LBB120_350:                            # %for.end4010.loopexit
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_351
.LBB120_351:                            # %for.end4010
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_352
.LBB120_352:                            # %if.end4011
                                        #   in Loop: Header=BB120_214 Depth=2
	jmp	.LBB120_353
.LBB120_353:                            # %for.inc4012
                                        #   in Loop: Header=BB120_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB120_214
.LBB120_354:                            # %for.end4016
                                        #   in Loop: Header=BB120_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB120_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB120_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB120_356:                            # %if.end4026
                                        #   in Loop: Header=BB120_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB120_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB120_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB120_358:                            # %if.end4032
                                        #   in Loop: Header=BB120_212 Depth=1
	jmp	.LBB120_359
.LBB120_359:                            # %for.inc4033
                                        #   in Loop: Header=BB120_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB120_212
.LBB120_360:                            # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB120_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB120_362:                            # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$1036092334, -196(%rbp) # imm = 0x3DC183AE
	jne	.LBB120_364
.LBB120_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_364:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_363
.Lfunc_end120:
	.size	SubPelBlockSearchBiPred.95, .Lfunc_end120-SubPelBlockSearchBiPred.95
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function SubPelBlockSearchBiPred.96
.LCPI121_0:
	.quad	4602678819172646912     # double 0.5
.LCPI121_1:
	.quad	4679240012837945344     # double 65536
	.text
	.globl	SubPelBlockSearchBiPred.96
	.p2align	4, 0x90
	.type	SubPelBlockSearchBiPred.96,@function
SubPelBlockSearchBiPred.96:             # @SubPelBlockSearchBiPred.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$1280, %rsp             # imm = 0x500
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	80(%rbp), %eax
	movl	72(%rbp), %eax
	movl	64(%rbp), %eax
	movq	56(%rbp), %rax
	movq	48(%rbp), %rax
	movq	40(%rbp), %rax
	movq	32(%rbp), %rax
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%eax, %eax
	vmovsd	.LCPI121_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI121_1(%rip), %xmm2 # xmm2 = mem[0],zero
	movl	$330743521, -196(%rbp)  # imm = 0x13B6BEE1
	movq	%rdi, -144(%rbp)
	movw	%si, -104(%rbp)
	movl	%edx, -148(%rbp)
	movl	%ecx, -128(%rbp)
	movl	%r8d, -160(%rbp)
	movl	%r9d, -164(%rbp)
	vmovsd	%xmm0, -208(%rbp)
	vmulsd	-208(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	movl	%ecx, -180(%rbp)
	movw	$0, -130(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	80(%rcx,%rdx,8), %ecx
	movw	%cx, -120(%rbp)
	movq	input, %rcx
	movslq	-164(%rbp), %rdx
	movl	84(%rcx,%rdx,8), %ecx
	movw	%cx, -150(%rbp)
	movl	-128(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -116(%rbp)
	movl	-160(%rbp), %ecx
	shll	$2, %ecx
	movw	%cx, -118(%rbp)
	movq	input, %rcx
	movl	24(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movw	%cx, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_5
# %bb.1:                                # %cond.true
	movl	$1, %eax
	cmpl	64(%rbp), %eax
	jle	.LBB121_3
# %bb.2:                                # %cond.true15
	movl	$1, %eax
	jmp	.LBB121_4
.LBB121_3:                              # %cond.false
	movl	64(%rbp), %eax
.LBB121_4:                              # %cond.end
	jmp	.LBB121_6
.LBB121_5:                              # %cond.false17
	movl	64(%rbp), %eax
.LBB121_6:                              # %cond.end18
	movw	%ax, -174(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB121_9
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB121_9
# %bb.8:                                # %cond.true25
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB121_10
.LBB121_9:                              # %cond.false29
	xorl	%ecx, %ecx
	jmp	.LBB121_10
.LBB121_10:                             # %cond.end30
	movw	%cx, -90(%rbp)
	movq	active_pps, %rax
	movl	196(%rax), %eax
	movw	%ax, -114(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_15
# %bb.11:                               # %cond.true36
	cmpl	$0, -148(%rbp)
	jne	.LBB121_13
# %bb.12:                               # %cond.true39
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB121_14
.LBB121_13:                             # %cond.false46
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB121_14:                             # %cond.end55
	jmp	.LBB121_16
.LBB121_15:                             # %cond.false57
	movl	$1, %eax
	jmp	.LBB121_16
.LBB121_16:                             # %cond.end58
	movw	%ax, -34(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_21
# %bb.17:                               # %cond.true63
	cmpl	$0, -148(%rbp)
	jne	.LBB121_19
# %bb.18:                               # %cond.true66
	movq	wbp_weight, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	jmp	.LBB121_20
.LBB121_19:                             # %cond.false75
	movq	wbp_weight, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
.LBB121_20:                             # %cond.end82
	jmp	.LBB121_22
.LBB121_21:                             # %cond.false84
	movl	$1, %eax
	jmp	.LBB121_22
.LBB121_22:                             # %cond.end85
	movw	%ax, -38(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_27
# %bb.23:                               # %cond.true90
	cmpl	$0, -148(%rbp)
	jne	.LBB121_25
# %bb.24:                               # %cond.true93
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB121_26
.LBB121_25:                             # %cond.false99
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB121_26:                             # %cond.end106
	jmp	.LBB121_28
.LBB121_27:                             # %cond.false108
	xorl	%eax, %eax
	jmp	.LBB121_28
.LBB121_28:                             # %cond.end109
	movw	%ax, -172(%rbp)
	movswl	-114(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB121_33
# %bb.29:                               # %cond.true114
	cmpl	$0, -148(%rbp)
	jne	.LBB121_31
# %bb.30:                               # %cond.true117
	movq	wp_offset, %rax
	movswl	-90(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	jmp	.LBB121_32
.LBB121_31:                             # %cond.false125
	movq	wp_offset, %rax
	movswq	-90(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
.LBB121_32:                             # %cond.end130
	jmp	.LBB121_34
.LBB121_33:                             # %cond.false132
	xorl	%eax, %eax
	jmp	.LBB121_34
.LBB121_34:                             # %cond.end133
	movw	%ax, -170(%rbp)
	movswl	-170(%rbp), %eax
	movswl	-172(%rbp), %ecx
	addl	%ecx, %eax
	addl	$1, %eax
	sarl	$1, %eax
	movw	%ax, -36(%rbp)
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB121_36
# %bb.35:                               # %cond.true142
	xorl	%eax, %eax
	jmp	.LBB121_37
.LBB121_36:                             # %cond.false143
	movq	input, %rax
	movl	24(%rax), %eax
.LBB121_37:                             # %cond.end145
	xorl	%ecx, %ecx
	movl	%eax, -168(%rbp)
	movq	input, %rax
	movl	28(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -200(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -48(%rbp)
	cmpl	$0, -148(%rbp)
	jne	.LBB121_39
# %bb.38:                               # %cond.true158
	movswl	-90(%rbp), %eax
	addl	$1, %eax
	jmp	.LBB121_40
.LBB121_39:                             # %cond.false161
	movswl	-90(%rbp), %eax
.LBB121_40:                             # %cond.end163
	cltq
	movq	listX(,%rax,8), %rax
	movq	(%rax), %rax
	movq	6448(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-148(%rbp), %eax
	movswl	-90(%rbp), %ecx
	addl	%ecx, %eax
	cltq
	movq	listX(,%rax,8), %rax
	movswq	-104(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-192(%rbp), %rax
	movl	6392(%rax), %eax
	movswl	-120(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -154(%rbp)
	movq	-192(%rbp), %rax
	movl	6396(%rax), %eax
	movswl	-150(%rbp), %ecx
	subl	%ecx, %eax
	addl	$1, %eax
	shll	$2, %eax
	movw	%ax, -152(%rbp)
	movq	32(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movq	40(%rbp), %rax
	movswl	(%rax), %ecx
	shll	$2, %ecx
	movw	%cx, (%rax)
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB121_45
# %bb.41:                               # %land.lhs.true197
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_45
# %bb.42:                               # %land.lhs.true205
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB121_45
# %bb.43:                               # %land.lhs.true211
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_45
# %bb.44:                               # %if.then
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB121_46
.LBB121_45:                             # %if.else
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB121_46:                             # %if.end
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB121_51
# %bb.47:                               # %land.lhs.true224
	movswl	-116(%rbp), %eax
	movq	48(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_51
# %bb.48:                               # %land.lhs.true232
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB121_51
# %bb.49:                               # %land.lhs.true238
	movswl	-118(%rbp), %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_51
# %bb.50:                               # %if.then246
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14b
	jmp	.LBB121_52
.LBB121_51:                             # %if.else247
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14b
.LBB121_52:                             # %if.end248
	movw	$0, -102(%rbp)
	movw	-176(%rbp), %ax
	movw	%ax, -88(%rbp)
.LBB121_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_55 Depth 2
                                        #       Child Loop BB121_60 Depth 3
                                        #         Child Loop BB121_162 Depth 4
                                        #           Child Loop BB121_164 Depth 5
                                        #       Child Loop BB121_175 Depth 3
                                        #         Child Loop BB121_181 Depth 4
                                        #           Child Loop BB121_183 Depth 5
	movswl	-88(%rbp), %eax
	movswl	-174(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_201
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB121_53 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB121_55:                             # %for.cond283
                                        #   Parent Loop BB121_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_60 Depth 3
                                        #         Child Loop BB121_162 Depth 4
                                        #           Child Loop BB121_164 Depth 5
                                        #       Child Loop BB121_175 Depth 3
                                        #         Child Loop BB121_181 Depth 4
                                        #           Child Loop BB121_183 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB121_57
# %bb.56:                               # %land.rhs
                                        #   in Loop: Header=BB121_55 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB121_57:                             # %land.end
                                        #   in Loop: Header=BB121_55 Depth=2
	testb	$1, %al
	jne	.LBB121_58
	jmp	.LBB121_195
.LBB121_58:                             # %for.body289
                                        #   in Loop: Header=BB121_55 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB121_174
# %bb.59:                               # %if.then303
                                        #   in Loop: Header=BB121_55 Depth=2
	movw	$0, -40(%rbp)
.LBB121_60:                             # %for.cond304
                                        #   Parent Loop BB121_53 Depth=1
                                        #     Parent Loop BB121_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_162 Depth 4
                                        #           Child Loop BB121_164 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_172
# %bb.61:                               # %for.body309
                                        #   in Loop: Header=BB121_60 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_63
# %bb.62:                               # %cond.true344
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_67
.LBB121_63:                             # %cond.false345
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_65
# %bb.64:                               # %cond.true367
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_66
.LBB121_65:                             # %cond.false369
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_66:                             # %cond.end389
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_67:                             # %cond.end391
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_69
# %bb.68:                               # %cond.true420
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_73
.LBB121_69:                             # %cond.false421
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_71
# %bb.70:                               # %cond.true446
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_72
.LBB121_71:                             # %cond.false448
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_72:                             # %cond.end470
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_73:                             # %cond.end472
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_75
# %bb.74:                               # %cond.true504
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_79
.LBB121_75:                             # %cond.false505
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_77
# %bb.76:                               # %cond.true530
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_78
.LBB121_77:                             # %cond.false532
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_78:                             # %cond.end554
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_79:                             # %cond.end556
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_81
# %bb.80:                               # %cond.true588
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_85
.LBB121_81:                             # %cond.false589
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_83
# %bb.82:                               # %cond.true614
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_84
.LBB121_83:                             # %cond.false616
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_84:                             # %cond.end638
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_85:                             # %cond.end640
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_87
# %bb.86:                               # %cond.true680
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_91
.LBB121_87:                             # %cond.false681
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_89
# %bb.88:                               # %cond.true704
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_90
.LBB121_89:                             # %cond.false706
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_90:                             # %cond.end726
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_91:                             # %cond.end728
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_93
# %bb.92:                               # %cond.true758
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_97
.LBB121_93:                             # %cond.false759
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_95
# %bb.94:                               # %cond.true784
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_96
.LBB121_95:                             # %cond.false786
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_96:                             # %cond.end808
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_97:                             # %cond.end810
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_99
# %bb.98:                               # %cond.true842
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_103
.LBB121_99:                             # %cond.false843
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_101
# %bb.100:                              # %cond.true868
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_102
.LBB121_101:                            # %cond.false870
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_102:                            # %cond.end892
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_103:                            # %cond.end894
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_105
# %bb.104:                              # %cond.true926
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_109
.LBB121_105:                            # %cond.false927
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_107
# %bb.106:                              # %cond.true952
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_108
.LBB121_107:                            # %cond.false954
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_108:                            # %cond.end976
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_109:                            # %cond.end978
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_111
# %bb.110:                              # %cond.true1018
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_115
.LBB121_111:                            # %cond.false1019
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_113
# %bb.112:                              # %cond.true1042
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_114
.LBB121_113:                            # %cond.false1044
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_114:                            # %cond.end1064
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_115:                            # %cond.end1066
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_117
# %bb.116:                              # %cond.true1096
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_121
.LBB121_117:                            # %cond.false1097
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_119
# %bb.118:                              # %cond.true1122
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_120
.LBB121_119:                            # %cond.false1124
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_120:                            # %cond.end1146
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_121:                            # %cond.end1148
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_123
# %bb.122:                              # %cond.true1180
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_127
.LBB121_123:                            # %cond.false1181
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_125
# %bb.124:                              # %cond.true1206
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_126
.LBB121_125:                            # %cond.false1208
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_126:                            # %cond.end1230
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_127:                            # %cond.end1232
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_129
# %bb.128:                              # %cond.true1264
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_133
.LBB121_129:                            # %cond.false1265
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_131
# %bb.130:                              # %cond.true1290
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_132
.LBB121_131:                            # %cond.false1292
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_132:                            # %cond.end1314
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_133:                            # %cond.end1316
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_135
# %bb.134:                              # %cond.true1356
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_139
.LBB121_135:                            # %cond.false1357
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_137
# %bb.136:                              # %cond.true1380
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_138
.LBB121_137:                            # %cond.false1382
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_138:                            # %cond.end1402
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_139:                            # %cond.end1404
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_141
# %bb.140:                              # %cond.true1434
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_145
.LBB121_141:                            # %cond.false1435
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_143
# %bb.142:                              # %cond.true1460
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_144
.LBB121_143:                            # %cond.false1462
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_144:                            # %cond.end1484
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_145:                            # %cond.end1486
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_147
# %bb.146:                              # %cond.true1518
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_151
.LBB121_147:                            # %cond.false1519
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_149
# %bb.148:                              # %cond.true1544
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_150
.LBB121_149:                            # %cond.false1546
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_150:                            # %cond.end1568
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_151:                            # %cond.end1570
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_153
# %bb.152:                              # %cond.true1602
                                        #   in Loop: Header=BB121_60 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_157
.LBB121_153:                            # %cond.false1603
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_155
# %bb.154:                              # %cond.true1628
                                        #   in Loop: Header=BB121_60 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_156
.LBB121_155:                            # %cond.false1630
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_156:                            # %cond.end1652
                                        #   in Loop: Header=BB121_60 Depth=3
.LBB121_157:                            # %cond.end1654
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB121_161
# %bb.158:                              # %if.then1663
                                        #   in Loop: Header=BB121_60 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB121_160
# %bb.159:                              # %if.then1672
                                        #   in Loop: Header=BB121_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB121_173
.LBB121_160:                            # %if.end1673
                                        #   in Loop: Header=BB121_60 Depth=3
	jmp	.LBB121_170
.LBB121_161:                            # %if.else1674
                                        #   in Loop: Header=BB121_60 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB121_162:                            # %for.cond1675
                                        #   Parent Loop BB121_53 Depth=1
                                        #     Parent Loop BB121_55 Depth=2
                                        #       Parent Loop BB121_60 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_164 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB121_169
# %bb.163:                              # %for.body1678
                                        #   in Loop: Header=BB121_162 Depth=4
	movl	$0, -96(%rbp)
.LBB121_164:                            # %for.cond1679
                                        #   Parent Loop BB121_53 Depth=1
                                        #     Parent Loop BB121_55 Depth=2
                                        #       Parent Loop BB121_60 Depth=3
                                        #         Parent Loop BB121_162 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB121_167
# %bb.165:                              # %for.body1682
                                        #   in Loop: Header=BB121_164 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.166:                              # %for.inc
                                        #   in Loop: Header=BB121_164 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB121_164
.LBB121_167:                            # %for.end
                                        #   in Loop: Header=BB121_162 Depth=4
	jmp	.LBB121_168
.LBB121_168:                            # %for.inc1694
                                        #   in Loop: Header=BB121_162 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB121_162
.LBB121_169:                            # %for.end1696
                                        #   in Loop: Header=BB121_60 Depth=3
	jmp	.LBB121_170
.LBB121_170:                            # %if.end1697
                                        #   in Loop: Header=BB121_60 Depth=3
	jmp	.LBB121_171
.LBB121_171:                            # %for.inc1698
                                        #   in Loop: Header=BB121_60 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB121_60
.LBB121_172:                            # %for.end1702.loopexit
                                        #   in Loop: Header=BB121_55 Depth=2
	jmp	.LBB121_173
.LBB121_173:                            # %for.end1702
                                        #   in Loop: Header=BB121_55 Depth=2
	jmp	.LBB121_193
.LBB121_174:                            # %if.else1703
                                        #   in Loop: Header=BB121_55 Depth=2
	movw	$0, -40(%rbp)
.LBB121_175:                            # %for.cond1704
                                        #   Parent Loop BB121_53 Depth=1
                                        #     Parent Loop BB121_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_181 Depth 4
                                        #           Child Loop BB121_183 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_191
# %bb.176:                              # %for.body1709
                                        #   in Loop: Header=BB121_175 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$2, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB121_180
# %bb.177:                              # %if.then2044
                                        #   in Loop: Header=BB121_175 Depth=3
	leaq	-272(%rbp), %rdi
	movl	-168(%rbp), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB121_179
# %bb.178:                              # %if.then2053
                                        #   in Loop: Header=BB121_55 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB121_192
.LBB121_179:                            # %if.end2054
                                        #   in Loop: Header=BB121_175 Depth=3
	jmp	.LBB121_189
.LBB121_180:                            # %if.else2055
                                        #   in Loop: Header=BB121_175 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB121_181:                            # %for.cond2056
                                        #   Parent Loop BB121_53 Depth=1
                                        #     Parent Loop BB121_55 Depth=2
                                        #       Parent Loop BB121_175 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_183 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB121_188
# %bb.182:                              # %for.body2059
                                        #   in Loop: Header=BB121_181 Depth=4
	movl	$0, -96(%rbp)
.LBB121_183:                            # %for.cond2060
                                        #   Parent Loop BB121_53 Depth=1
                                        #     Parent Loop BB121_55 Depth=2
                                        #       Parent Loop BB121_175 Depth=3
                                        #         Parent Loop BB121_181 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB121_186
# %bb.184:                              # %for.body2063
                                        #   in Loop: Header=BB121_183 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.185:                              # %for.inc2074
                                        #   in Loop: Header=BB121_183 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB121_183
.LBB121_186:                            # %for.end2077
                                        #   in Loop: Header=BB121_181 Depth=4
	jmp	.LBB121_187
.LBB121_187:                            # %for.inc2078
                                        #   in Loop: Header=BB121_181 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB121_181
.LBB121_188:                            # %for.end2080
                                        #   in Loop: Header=BB121_175 Depth=3
	jmp	.LBB121_189
.LBB121_189:                            # %if.end2081
                                        #   in Loop: Header=BB121_175 Depth=3
	jmp	.LBB121_190
.LBB121_190:                            # %for.inc2082
                                        #   in Loop: Header=BB121_175 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB121_175
.LBB121_191:                            # %for.end2086.loopexit
                                        #   in Loop: Header=BB121_55 Depth=2
	jmp	.LBB121_192
.LBB121_192:                            # %for.end2086
                                        #   in Loop: Header=BB121_55 Depth=2
	jmp	.LBB121_193
.LBB121_193:                            # %if.end2087
                                        #   in Loop: Header=BB121_55 Depth=2
	jmp	.LBB121_194
.LBB121_194:                            # %for.inc2088
                                        #   in Loop: Header=BB121_55 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB121_55
.LBB121_195:                            # %for.end2092
                                        #   in Loop: Header=BB121_53 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB121_197
# %bb.196:                              # %if.then2095
                                        #   in Loop: Header=BB121_53 Depth=1
	leaq	-1296(%rbp), %rdi
	movl	-168(%rbp), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB121_197:                            # %if.end2101
                                        #   in Loop: Header=BB121_53 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB121_199
# %bb.198:                              # %if.then2105
                                        #   in Loop: Header=BB121_53 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB121_199:                            # %if.end2107
                                        #   in Loop: Header=BB121_53 Depth=1
	jmp	.LBB121_200
.LBB121_200:                            # %for.inc2108
                                        #   in Loop: Header=BB121_53 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB121_53
.LBB121_201:                            # %for.end2110
	cmpw	$0, -102(%rbp)
	je	.LBB121_203
# %bb.202:                              # %if.then2112
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	shll	$1, %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB121_203:                            # %if.end2125
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB121_205
# %bb.204:                              # %if.then2128
	movl	$2147483647, 80(%rbp)   # imm = 0x7FFFFFFF
.LBB121_205:                            # %if.end2129
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB121_210
# %bb.206:                              # %land.lhs.true2135
	movswl	-116(%rbp), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-154(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_210
# %bb.207:                              # %land.lhs.true2143
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	cmpl	$1, %eax
	jle	.LBB121_210
# %bb.208:                              # %land.lhs.true2149
	movswl	-118(%rbp), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movswl	-152(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_210
# %bb.209:                              # %if.then2157
	movabsq	$FastPelY_14, %rax
	movq	%rax, PelY_14
	jmp	.LBB121_211
.LBB121_210:                            # %if.else2158
	movabsq	$UMVPelY_14, %rax
	movq	%rax, PelY_14
.LBB121_211:                            # %if.end2159
	movw	$0, -102(%rbp)
	movl	-200(%rbp), %eax
	movw	%ax, -88(%rbp)
.LBB121_212:                            # %for.cond2161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_214 Depth 2
                                        #       Child Loop BB121_219 Depth 3
                                        #         Child Loop BB121_321 Depth 4
                                        #           Child Loop BB121_323 Depth 5
                                        #       Child Loop BB121_334 Depth 3
                                        #         Child Loop BB121_340 Depth 4
                                        #           Child Loop BB121_342 Depth 5
	movswl	-88(%rbp), %eax
	cmpl	72(%rbp), %eax
	jge	.LBB121_360
# %bb.213:                              # %for.body2165
                                        #   in Loop: Header=BB121_212 Depth=1
	movq	32(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_x, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -110(%rbp)
	movq	40(%rbp), %rax
	movswl	(%rax), %eax
	movq	spiral_search_y, %rcx
	movswq	-88(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movw	%ax, -122(%rbp)
	movl	-180(%rbp), %eax
	movq	mvbits, %rdx
	movswl	-110(%rbp), %esi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %esi
	movswl	16(%rbp), %ecx
	subl	%ecx, %esi
	movslq	%esi, %rcx
	movl	(%rdx,%rcx,4), %edx
	movq	mvbits, %rsi
	movswl	-122(%rbp), %edi
	movswl	-130(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	shll	%cl, %edi
	movswl	24(%rbp), %ecx
	subl	%ecx, %edi
	movslq	%edi, %rcx
	addl	(%rsi,%rcx,4), %edx
	imull	%edx, %eax
	sarl	$16, %eax
	movw	%ax, -84(%rbp)
	movw	$0, -70(%rbp)
	movw	$0, -112(%rbp)
.LBB121_214:                            # %for.cond2194
                                        #   Parent Loop BB121_212 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_219 Depth 3
                                        #         Child Loop BB121_321 Depth 4
                                        #           Child Loop BB121_323 Depth 5
                                        #       Child Loop BB121_334 Depth 3
                                        #         Child Loop BB121_340 Depth 4
                                        #           Child Loop BB121_342 Depth 5
	xorl	%eax, %eax
	movswl	-70(%rbp), %ecx
	movswl	-150(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB121_216
# %bb.215:                              # %land.rhs2199
                                        #   in Loop: Header=BB121_214 Depth=2
	cmpw	$0, -112(%rbp)
	setne	%al
	xorb	$-1, %al
.LBB121_216:                            # %land.end2202
                                        #   in Loop: Header=BB121_214 Depth=2
	testb	$1, %al
	jne	.LBB121_217
	jmp	.LBB121_354
.LBB121_217:                            # %for.body2203
                                        #   in Loop: Header=BB121_214 Depth=2
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movq	56(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movw	%ax, -82(%rbp)
	movl	-160(%rbp), %eax
	movswl	-70(%rbp), %ecx
	addl	%ecx, %eax
	shll	$2, %eax
	movswl	-122(%rbp), %ecx
	addl	%ecx, %eax
	movw	%ax, -86(%rbp)
	cmpw	$0, -114(%rbp)
	je	.LBB121_333
# %bb.218:                              # %if.then2217
                                        #   in Loop: Header=BB121_214 Depth=2
	movw	$0, -40(%rbp)
.LBB121_219:                            # %for.cond2218
                                        #   Parent Loop BB121_212 Depth=1
                                        #     Parent Loop BB121_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_321 Depth 4
                                        #           Child Loop BB121_323 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_331
# %bb.220:                              # %for.body2223
                                        #   in Loop: Header=BB121_219 Depth=3
	leaq	-272(%rbp), %rax
	movw	-82(%rbp), %cx
	movw	%cx, -18(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_222
# %bb.221:                              # %cond.true2260
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_226
.LBB121_222:                            # %cond.false2261
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_224
# %bb.223:                              # %cond.true2284
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_225
.LBB121_224:                            # %cond.false2286
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_225:                            # %cond.end2306
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_226:                            # %cond.end2308
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_228
# %bb.227:                              # %cond.true2338
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_232
.LBB121_228:                            # %cond.false2339
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_230
# %bb.229:                              # %cond.true2364
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_231
.LBB121_230:                            # %cond.false2366
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_231:                            # %cond.end2388
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_232:                            # %cond.end2390
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_234
# %bb.233:                              # %cond.true2422
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_238
.LBB121_234:                            # %cond.false2423
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_236
# %bb.235:                              # %cond.true2448
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_237
.LBB121_236:                            # %cond.false2450
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_237:                            # %cond.end2472
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_238:                            # %cond.end2474
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_240
# %bb.239:                              # %cond.true2506
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_244
.LBB121_240:                            # %cond.false2507
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_242
# %bb.241:                              # %cond.true2532
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_243
.LBB121_242:                            # %cond.false2534
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_243:                            # %cond.end2556
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_244:                            # %cond.end2558
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_246
# %bb.245:                              # %cond.true2598
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_250
.LBB121_246:                            # %cond.false2599
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_248
# %bb.247:                              # %cond.true2622
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_249
.LBB121_248:                            # %cond.false2624
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_249:                            # %cond.end2644
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_250:                            # %cond.end2646
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_252
# %bb.251:                              # %cond.true2676
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_256
.LBB121_252:                            # %cond.false2677
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_254
# %bb.253:                              # %cond.true2702
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_255
.LBB121_254:                            # %cond.false2704
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_255:                            # %cond.end2726
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_256:                            # %cond.end2728
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_258
# %bb.257:                              # %cond.true2760
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_262
.LBB121_258:                            # %cond.false2761
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_260
# %bb.259:                              # %cond.true2786
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_261
.LBB121_260:                            # %cond.false2788
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_261:                            # %cond.end2810
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_262:                            # %cond.end2812
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_264
# %bb.263:                              # %cond.true2844
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_268
.LBB121_264:                            # %cond.false2845
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_266
# %bb.265:                              # %cond.true2870
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_267
.LBB121_266:                            # %cond.false2872
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_267:                            # %cond.end2894
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_268:                            # %cond.end2896
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_270
# %bb.269:                              # %cond.true2936
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_274
.LBB121_270:                            # %cond.false2937
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_272
# %bb.271:                              # %cond.true2960
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_273
.LBB121_272:                            # %cond.false2962
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_273:                            # %cond.end2982
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_274:                            # %cond.end2984
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_276
# %bb.275:                              # %cond.true3014
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_280
.LBB121_276:                            # %cond.false3015
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_278
# %bb.277:                              # %cond.true3040
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_279
.LBB121_278:                            # %cond.false3042
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_279:                            # %cond.end3064
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_280:                            # %cond.end3066
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_282
# %bb.281:                              # %cond.true3098
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_286
.LBB121_282:                            # %cond.false3099
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_284
# %bb.283:                              # %cond.true3124
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_285
.LBB121_284:                            # %cond.false3126
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_285:                            # %cond.end3148
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_286:                            # %cond.end3150
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_288
# %bb.287:                              # %cond.true3182
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_292
.LBB121_288:                            # %cond.false3183
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_290
# %bb.289:                              # %cond.true3208
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_291
.LBB121_290:                            # %cond.false3210
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_291:                            # %cond.end3232
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_292:                            # %cond.end3234
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_294
# %bb.293:                              # %cond.true3274
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_298
.LBB121_294:                            # %cond.false3275
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_296
# %bb.295:                              # %cond.true3298
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_297
.LBB121_296:                            # %cond.false3300
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_297:                            # %cond.end3320
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_298:                            # %cond.end3322
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_300
# %bb.299:                              # %cond.true3352
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_304
.LBB121_300:                            # %cond.false3353
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_302
# %bb.301:                              # %cond.true3378
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_303
.LBB121_302:                            # %cond.false3380
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_303:                            # %cond.end3402
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_304:                            # %cond.end3404
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_306
# %bb.305:                              # %cond.true3436
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_310
.LBB121_306:                            # %cond.false3437
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_308
# %bb.307:                              # %cond.true3462
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_309
.LBB121_308:                            # %cond.false3464
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_309:                            # %cond.end3486
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_310:                            # %cond.end3488
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -64(%rbp)
	movl	%eax, (%rcx)
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	cmpl	$0, %ebx
	jge	.LBB121_312
# %bb.311:                              # %cond.true3520
                                        #   in Loop: Header=BB121_219 Depth=3
	xorl	%ebx, %ebx
	jmp	.LBB121_316
.LBB121_312:                            # %cond.false3521
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
	movq	img, %rax
	cmpl	72684(%rax), %ebx
	jle	.LBB121_314
# %bb.313:                              # %cond.true3546
                                        #   in Loop: Header=BB121_219 Depth=3
	movq	img, %rax
	movl	72684(%rax), %ebx
	jmp	.LBB121_315
.LBB121_314:                            # %cond.false3548
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-34(%rbp), %ebx
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %ebx
	movswl	-38(%rbp), %r14d
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	imull	%eax, %r14d
	addl	%r14d, %ebx
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %ebx
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %ebx
	movswl	-36(%rbp), %eax
	addl	%eax, %ebx
.LBB121_315:                            # %cond.end3570
                                        #   in Loop: Header=BB121_219 Depth=3
.LBB121_316:                            # %cond.end3572
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	%ebx, -68(%rbp)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	-68(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB121_320
# %bb.317:                              # %if.then3582
                                        #   in Loop: Header=BB121_219 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB121_319
# %bb.318:                              # %if.then3592
                                        #   in Loop: Header=BB121_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB121_332
.LBB121_319:                            # %if.end3593
                                        #   in Loop: Header=BB121_219 Depth=3
	jmp	.LBB121_329
.LBB121_320:                            # %if.else3594
                                        #   in Loop: Header=BB121_219 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB121_321:                            # %for.cond3595
                                        #   Parent Loop BB121_212 Depth=1
                                        #     Parent Loop BB121_214 Depth=2
                                        #       Parent Loop BB121_219 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_323 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB121_328
# %bb.322:                              # %for.body3598
                                        #   in Loop: Header=BB121_321 Depth=4
	movl	$0, -96(%rbp)
.LBB121_323:                            # %for.cond3599
                                        #   Parent Loop BB121_212 Depth=1
                                        #     Parent Loop BB121_214 Depth=2
                                        #       Parent Loop BB121_219 Depth=3
                                        #         Parent Loop BB121_321 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB121_326
# %bb.324:                              # %for.body3602
                                        #   in Loop: Header=BB121_323 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.325:                              # %for.inc3613
                                        #   in Loop: Header=BB121_323 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB121_323
.LBB121_326:                            # %for.end3616
                                        #   in Loop: Header=BB121_321 Depth=4
	jmp	.LBB121_327
.LBB121_327:                            # %for.inc3617
                                        #   in Loop: Header=BB121_321 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB121_321
.LBB121_328:                            # %for.end3619
                                        #   in Loop: Header=BB121_219 Depth=3
	jmp	.LBB121_329
.LBB121_329:                            # %if.end3620
                                        #   in Loop: Header=BB121_219 Depth=3
	jmp	.LBB121_330
.LBB121_330:                            # %for.inc3621
                                        #   in Loop: Header=BB121_219 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB121_219
.LBB121_331:                            # %for.end3625.loopexit
                                        #   in Loop: Header=BB121_214 Depth=2
	jmp	.LBB121_332
.LBB121_332:                            # %for.end3625
                                        #   in Loop: Header=BB121_214 Depth=2
	jmp	.LBB121_352
.LBB121_333:                            # %if.else3626
                                        #   in Loop: Header=BB121_214 Depth=2
	movw	$0, -40(%rbp)
.LBB121_334:                            # %for.cond3627
                                        #   Parent Loop BB121_212 Depth=1
                                        #     Parent Loop BB121_214 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_340 Depth 4
                                        #           Child Loop BB121_342 Depth 5
	movswl	-40(%rbp), %eax
	movswl	-120(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_350
# %bb.335:                              # %for.body3632
                                        #   in Loop: Header=BB121_334 Depth=3
	leaq	-272(%rbp), %rax
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movq	48(%rbp), %rdx
	movswl	(%rdx), %edx
	addl	%edx, %ecx
	movw	%cx, -22(%rbp)
	movl	-128(%rbp), %ecx
	movswl	-40(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movswl	-110(%rbp), %edx
	addl	%edx, %ecx
	movw	%cx, -24(%rbp)
	movq	%rax, -64(%rbp)
	movw	-82(%rbp), %ax
	movw	%ax, -18(%rbp)
	movw	-86(%rbp), %ax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswq	-70(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$8, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movswl	-82(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -18(%rbp)
	movswl	-86(%rbp), %eax
	addl	$12, %eax
	movw	%ax, -20(%rbp)
	movq	-144(%rbp), %rax
	movswl	-70(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movswq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$4, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$8, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -64(%rbp)
	movl	%r14d, (%rax)
	movq	-80(%rbp), %rax
	movswl	-40(%rbp), %ecx
	addl	$3, %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %r14d
	movq	PelY_14b, %rax
	movq	-48(%rbp), %rdi
	movswl	-18(%rbp), %esi
	movswl	-22(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %ebx
	movq	PelY_14, %rax
	movq	-56(%rbp), %rdi
	movswl	-20(%rbp), %esi
	movswl	-24(%rbp), %edx
	addl	$12, %edx
	movl	-32(%rbp), %ecx
	movl	-28(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	addl	%eax, %ebx
	sarl	$1, %ebx
	subl	%ebx, %r14d
	movq	-64(%rbp), %rax
	movl	%r14d, (%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	jne	.LBB121_339
# %bb.336:                              # %if.then3967
                                        #   in Loop: Header=BB121_334 Depth=3
	leaq	-272(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
	movswl	%cx, %eax
	cmpl	80(%rbp), %eax
	jle	.LBB121_338
# %bb.337:                              # %if.then3977
                                        #   in Loop: Header=BB121_214 Depth=2
	movw	$1, -112(%rbp)
	jmp	.LBB121_351
.LBB121_338:                            # %if.end3978
                                        #   in Loop: Header=BB121_334 Depth=3
	jmp	.LBB121_348
.LBB121_339:                            # %if.else3979
                                        #   in Loop: Header=BB121_334 Depth=3
	movl	$0, -100(%rbp)
	movl	$0, -108(%rbp)
.LBB121_340:                            # %for.cond3980
                                        #   Parent Loop BB121_212 Depth=1
                                        #     Parent Loop BB121_214 Depth=2
                                        #       Parent Loop BB121_334 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB121_342 Depth 5
	cmpl	$4, -100(%rbp)
	jge	.LBB121_347
# %bb.341:                              # %for.body3983
                                        #   in Loop: Header=BB121_340 Depth=4
	movl	$0, -96(%rbp)
.LBB121_342:                            # %for.cond3984
                                        #   Parent Loop BB121_212 Depth=1
                                        #     Parent Loop BB121_214 Depth=2
                                        #       Parent Loop BB121_334 Depth=3
                                        #         Parent Loop BB121_340 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -96(%rbp)
	jge	.LBB121_345
# %bb.343:                              # %for.body3987
                                        #   in Loop: Header=BB121_342 Depth=5
	movslq	-108(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movswl	-70(%rbp), %ecx
	addl	-100(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	leaq	-1296(%rbp), %rdx
	addq	%rcx, %rdx
	movswl	-40(%rbp), %ecx
	addl	-96(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.344:                              # %for.inc3998
                                        #   in Loop: Header=BB121_342 Depth=5
	movl	-96(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -96(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB121_342
.LBB121_345:                            # %for.end4001
                                        #   in Loop: Header=BB121_340 Depth=4
	jmp	.LBB121_346
.LBB121_346:                            # %for.inc4002
                                        #   in Loop: Header=BB121_340 Depth=4
	movl	-100(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -100(%rbp)
	jmp	.LBB121_340
.LBB121_347:                            # %for.end4004
                                        #   in Loop: Header=BB121_334 Depth=3
	jmp	.LBB121_348
.LBB121_348:                            # %if.end4005
                                        #   in Loop: Header=BB121_334 Depth=3
	jmp	.LBB121_349
.LBB121_349:                            # %for.inc4006
                                        #   in Loop: Header=BB121_334 Depth=3
	movswl	-40(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -40(%rbp)
	jmp	.LBB121_334
.LBB121_350:                            # %for.end4010.loopexit
                                        #   in Loop: Header=BB121_214 Depth=2
	jmp	.LBB121_351
.LBB121_351:                            # %for.end4010
                                        #   in Loop: Header=BB121_214 Depth=2
	jmp	.LBB121_352
.LBB121_352:                            # %if.end4011
                                        #   in Loop: Header=BB121_214 Depth=2
	jmp	.LBB121_353
.LBB121_353:                            # %for.inc4012
                                        #   in Loop: Header=BB121_214 Depth=2
	movswl	-70(%rbp), %eax
	addl	$4, %eax
	movw	%ax, -70(%rbp)
	jmp	.LBB121_214
.LBB121_354:                            # %for.end4016
                                        #   in Loop: Header=BB121_212 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB121_356
# %bb.355:                              # %if.then4019
                                        #   in Loop: Header=BB121_212 Depth=1
	leaq	-1296(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	movl	-164(%rbp), %edx
	callq	find_SATD
	movswl	-84(%rbp), %ecx
	addl	%eax, %ecx
	movw	%cx, -84(%rbp)
.LBB121_356:                            # %if.end4026
                                        #   in Loop: Header=BB121_212 Depth=1
	movswl	-84(%rbp), %eax
	cmpl	80(%rbp), %eax
	jge	.LBB121_358
# %bb.357:                              # %if.then4030
                                        #   in Loop: Header=BB121_212 Depth=1
	movswl	-84(%rbp), %eax
	movl	%eax, 80(%rbp)
	movw	-88(%rbp), %ax
	movw	%ax, -102(%rbp)
.LBB121_358:                            # %if.end4032
                                        #   in Loop: Header=BB121_212 Depth=1
	jmp	.LBB121_359
.LBB121_359:                            # %for.inc4033
                                        #   in Loop: Header=BB121_212 Depth=1
	movw	-88(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -88(%rbp)
	jmp	.LBB121_212
.LBB121_360:                            # %for.end4035
	cmpw	$0, -102(%rbp)
	je	.LBB121_362
# %bb.361:                              # %if.then4037
	movq	spiral_search_x, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	32(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
	movq	spiral_search_y, %rax
	movswq	-102(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	40(%rbp), %rcx
	movswl	(%rcx), %edx
	addl	%eax, %edx
	movw	%dx, (%rcx)
.LBB121_362:                            # %if.end4048
	movl	80(%rbp), %ebx
	cmpl	$330743521, -196(%rbp)  # imm = 0x13B6BEE1
	jne	.LBB121_364
.LBB121_363:
	movl	%ebx, %eax
	addq	$1280, %rsp             # imm = 0x500
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_364:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_363
.Lfunc_end121:
	.size	SubPelBlockSearchBiPred.96, .Lfunc_end121-SubPelBlockSearchBiPred.96
	.cfi_endproc
                                        # -- End function
	.globl	find_SATD.97            # -- Begin function find_SATD.97
	.p2align	4, 0x90
	.type	find_SATD.97,@function
find_SATD.97:                           # @find_SATD.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$1080, %rsp             # imm = 0x438
	.cfi_offset %rbx, -24
	movl	$128102440, -52(%rbp)   # imm = 0x7A2B028
	movq	%rdi, -64(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -12(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	80(%rax,%rcx,8), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	84(%rax,%rcx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	$4, %eax
	movl	$4, %eax
	movl	$8, %ecx
	cmovgl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -24(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
                                        #       Child Loop BB122_5 Depth 3
                                        #         Child Loop BB122_7 Depth 4
	movl	-24(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB122_16
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	$0, -20(%rbp)
.LBB122_3:                              # %for.cond7
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB122_5 Depth 3
                                        #         Child Loop BB122_7 Depth 4
	movl	-20(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB122_14
# %bb.4:                                # %for.body9
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-24(%rbp), %eax
	movl	%eax, -32(%rbp)
.LBB122_5:                              # %for.cond10
                                        #   Parent Loop BB122_1 Depth=1
                                        #     Parent Loop BB122_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB122_7 Depth 4
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_12
# %bb.6:                                # %for.body12
                                        #   in Loop: Header=BB122_5 Depth=3
	movl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB122_7:                              # %for.cond13
                                        #   Parent Loop BB122_1 Depth=1
                                        #     Parent Loop BB122_3 Depth=2
                                        #       Parent Loop BB122_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_10
# %bb.8:                                # %for.body16
                                        #   in Loop: Header=BB122_7 Depth=4
	movq	-64(%rbp), %rax
	movslq	-32(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -1088(%rbp,%rcx,4)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB122_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB122_7
.LBB122_10:                             # %for.end
                                        #   in Loop: Header=BB122_5 Depth=3
	jmp	.LBB122_11
.LBB122_11:                             # %for.inc24
                                        #   in Loop: Header=BB122_5 Depth=3
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB122_5
.LBB122_12:                             # %for.end26
                                        #   in Loop: Header=BB122_3 Depth=2
	jmp	.LBB122_13
.LBB122_13:                             # %for.inc27
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_3
.LBB122_14:                             # %for.end29
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_15
.LBB122_15:                             # %for.inc30
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-28(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_1
.LBB122_16:                             # %for.end32
	cmpl	$0, -56(%rbp)
	je	.LBB122_26
# %bb.17:                               # %if.then
	movl	-36(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB122_24
# %bb.18:                               # %if.then
	movq	.LJTI122_0(,%rax,8), %rax
	jmpq	*%rax
.LBB122_19:                             # %sw.bb
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$512, %rdi              # imm = 0x200
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$768, %rdi              # imm = 0x300
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_20:                             # %sw.bb45
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$256, %rdi              # imm = 0x100
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_21:                             # %sw.bb53
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_22:                             # %sw.bb57
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	leaq	-1088(%rbp), %rdi
	addq	$64, %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_23:                             # %sw.bb65
	leaq	-1088(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	movl	%eax, -12(%rbp)
	jmp	.LBB122_25
.LBB122_24:                             # %sw.default
	movl	$-1, -12(%rbp)
.LBB122_25:                             # %sw.epilog
	jmp	.LBB122_31
.LBB122_26:                             # %if.else
	movl	$0, -16(%rbp)
.LBB122_27:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	imull	-48(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_30
# %bb.28:                               # %for.body71
                                        #   in Loop: Header=BB122_27 Depth=1
	movq	byte_abs, %rax
	movslq	-16(%rbp), %rcx
	movslq	-1088(%rbp,%rcx,4), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.29:                               # %for.inc77
                                        #   in Loop: Header=BB122_27 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB122_27
.LBB122_30:                             # %for.end79
	jmp	.LBB122_31
.LBB122_31:                             # %if.end
	movl	-12(%rbp), %ebx
	cmpl	$128102440, -52(%rbp)   # imm = 0x7A2B028
	jne	.LBB122_33
.LBB122_32:
	movl	%ebx, %eax
	addq	$1080, %rsp             # imm = 0x438
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_32
.Lfunc_end122:
	.size	find_SATD.97, .Lfunc_end122-find_SATD.97
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI122_0:
	.quad	.LBB122_19
	.quad	.LBB122_20
	.quad	.LBB122_20
	.quad	.LBB122_21
	.quad	.LBB122_22
	.quad	.LBB122_22
	.quad	.LBB122_23
                                        # -- End function
	.text
	.globl	PartitionMotionSearch.98 # -- Begin function PartitionMotionSearch.98
	.p2align	4, 0x90
	.type	PartitionMotionSearch.98,@function
PartitionMotionSearch.98:               # @PartitionMotionSearch.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1612634401, -80(%rbp)  # imm = 0x601ED921
	movl	%edi, -12(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -104(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	cmpl	$4, -12(%rbp)
	jge	.LBB123_2
# %bb.1:                                # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB123_3
.LBB123_2:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB123_3
.LBB123_3:                              # %cond.end
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	-36(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -60(%rbp)
	movq	input, %rax
	movslq	-12(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB123_8
# %bb.4:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB123_6
# %bb.5:                                # %if.then20
	movl	$4, -40(%rbp)
	jmp	.LBB123_7
.LBB123_6:                              # %if.else
	movl	$2, -40(%rbp)
.LBB123_7:                              # %if.end
	jmp	.LBB123_9
.LBB123_8:                              # %if.else21
	movl	$0, -40(%rbp)
.LBB123_9:                              # %if.end22
	movl	-64(%rbp), %eax
	cmpl	$0, %eax
	movl	$2, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -8(%rbp)
.LBB123_10:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_12 Depth 2
                                        #       Child Loop BB123_29 Depth 3
                                        #         Child Loop BB123_31 Depth 4
                                        #           Child Loop BB123_33 Depth 5
                                        #             Child Loop BB123_35 Depth 6
	movl	-8(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB123_48
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB123_10 Depth=1
	movw	$0, -2(%rbp)
.LBB123_12:                             # %for.cond27
                                        #   Parent Loop BB123_10 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_29 Depth 3
                                        #         Child Loop BB123_31 Depth 4
                                        #           Child Loop BB123_33 Depth 5
                                        #             Child Loop BB123_35 Depth 6
	movswl	-2(%rbp), %eax
	movl	-8(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB123_46
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB123_12 Depth=2
	movq	input, %rax
	cmpl	$2, 2436(%rax)
	jne	.LBB123_15
# %bb.14:                               # %if.then36
                                        #   in Loop: Header=BB123_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB123_28
.LBB123_15:                             # %if.else38
                                        #   in Loop: Header=BB123_12 Depth=2
	movq	input, %rax
	cmpl	$1, 2436(%rax)
	jne	.LBB123_20
# %bb.16:                               # %if.then42
                                        #   in Loop: Header=BB123_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB123_18
# %bb.17:                               # %cond.true47
                                        #   in Loop: Header=BB123_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB123_19
.LBB123_18:                             # %cond.false49
                                        #   in Loop: Header=BB123_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB123_19
.LBB123_19:                             # %cond.end50
                                        #   in Loop: Header=BB123_12 Depth=2
	addl	$1, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
	jmp	.LBB123_27
.LBB123_20:                             # %if.else53
                                        #   in Loop: Header=BB123_12 Depth=2
	movq	input, %rax
	movl	32(%rax), %eax
	movswl	-2(%rbp), %ecx
	cmpl	$1, %ecx
	jge	.LBB123_22
# %bb.21:                               # %cond.true58
                                        #   in Loop: Header=BB123_12 Depth=2
	movswl	-2(%rbp), %ecx
	jmp	.LBB123_23
.LBB123_22:                             # %cond.false60
                                        #   in Loop: Header=BB123_12 Depth=2
	movl	$1, %ecx
	jmp	.LBB123_23
.LBB123_23:                             # %cond.end61
                                        #   in Loop: Header=BB123_12 Depth=2
	addl	$1, %ecx
	movl	$2, %edx
	cmpl	-12(%rbp), %edx
	jge	.LBB123_25
# %bb.24:                               # %cond.true66
                                        #   in Loop: Header=BB123_12 Depth=2
	movl	$2, %edx
	jmp	.LBB123_26
.LBB123_25:                             # %cond.false67
                                        #   in Loop: Header=BB123_12 Depth=2
	movl	-12(%rbp), %edx
.LBB123_26:                             # %cond.end68
                                        #   in Loop: Header=BB123_12 Depth=2
	imull	%edx, %ecx
	cltd
	idivl	%ecx
	movl	%eax, -52(%rbp)
.LBB123_27:                             # %if.end71
                                        #   in Loop: Header=BB123_12 Depth=2
	jmp	.LBB123_28
.LBB123_28:                             # %if.end72
                                        #   in Loop: Header=BB123_12 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -112(%rbp)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -96(%rbp)
	movq	motion_cost, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.by0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -16(%rbp)
.LBB123_29:                             # %for.cond89
                                        #   Parent Loop BB123_10 Depth=1
                                        #     Parent Loop BB123_12 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_31 Depth 4
                                        #           Child Loop BB123_33 Depth 5
                                        #             Child Loop BB123_35 Depth 6
	movl	-16(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.by0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-72(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_44
# %bb.30:                               # %for.body97
                                        #   in Loop: Header=BB123_29 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	movslq	-36(%rbp), %rax
	shlq	$4, %rax
	movabsq	$PartitionMotionSearch.bx0, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -20(%rbp)
.LBB123_31:                             # %for.cond103
                                        #   Parent Loop BB123_10 Depth=1
                                        #     Parent Loop BB123_12 Depth=2
                                        #       Parent Loop BB123_29 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB123_33 Depth 5
                                        #             Child Loop BB123_35 Depth 6
	movl	-20(%rbp), %eax
	movslq	-36(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$PartitionMotionSearch.bx0, %rdx
	addq	%rcx, %rdx
	movslq	-32(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_42
# %bb.32:                               # %for.body111
                                        #   in Loop: Header=BB123_31 Depth=4
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
	movw	-2(%rbp), %ax
	movl	-8(%rbp), %esi
	movl	-20(%rbp), %edx
	shll	$2, %edx
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-12(%rbp), %r8d
	movl	-52(%rbp), %r9d
	vmovsd	-104(%rbp), %xmm0       # xmm0 = mem[0],zero
	movswl	%ax, %edi
	callq	BlockMotionSearch
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	movq	motion_cost, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswq	-2(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movl	$0, -24(%rbp)
.LBB123_33:                             # %for.cond123
                                        #   Parent Loop BB123_10 Depth=1
                                        #     Parent Loop BB123_12 Depth=2
                                        #       Parent Loop BB123_29 Depth=3
                                        #         Parent Loop BB123_31 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB123_35 Depth 6
	movl	-24(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB123_40
# %bb.34:                               # %for.body126
                                        #   in Loop: Header=BB123_33 Depth=5
	movl	$0, -28(%rbp)
.LBB123_35:                             # %for.cond127
                                        #   Parent Loop BB123_10 Depth=1
                                        #     Parent Loop BB123_12 Depth=2
                                        #       Parent Loop BB123_29 Depth=3
                                        #         Parent Loop BB123_31 Depth=4
                                        #           Parent Loop BB123_33 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-28(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB123_38
# %bb.36:                               # %for.body130
                                        #   in Loop: Header=BB123_35 Depth=6
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-2(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-96(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movw	-2(%rbp), %ax
	movq	-112(%rbp), %rcx
	movl	-48(%rbp), %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.37:                               # %for.inc
                                        #   in Loop: Header=BB123_35 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB123_35
.LBB123_38:                             # %for.end
                                        #   in Loop: Header=BB123_33 Depth=5
	jmp	.LBB123_39
.LBB123_39:                             # %for.inc174
                                        #   in Loop: Header=BB123_33 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB123_33
.LBB123_40:                             # %for.end176
                                        #   in Loop: Header=BB123_31 Depth=4
	jmp	.LBB123_41
.LBB123_41:                             # %for.inc177
                                        #   in Loop: Header=BB123_31 Depth=4
	movl	-60(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_31
.LBB123_42:                             # %for.end179
                                        #   in Loop: Header=BB123_29 Depth=3
	jmp	.LBB123_43
.LBB123_43:                             # %for.inc180
                                        #   in Loop: Header=BB123_29 Depth=3
	movl	-56(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_29
.LBB123_44:                             # %for.end182
                                        #   in Loop: Header=BB123_12 Depth=2
	jmp	.LBB123_45
.LBB123_45:                             # %for.inc183
                                        #   in Loop: Header=BB123_12 Depth=2
	movw	-2(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -2(%rbp)
	jmp	.LBB123_12
.LBB123_46:                             # %for.end185
                                        #   in Loop: Header=BB123_10 Depth=1
	jmp	.LBB123_47
.LBB123_47:                             # %for.inc186
                                        #   in Loop: Header=BB123_10 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_10
.LBB123_48:                             # %for.end188
	cmpl	$1612634401, -80(%rbp)  # imm = 0x601ED921
	jne	.LBB123_50
.LBB123_49:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_50:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_49
.Lfunc_end123:
	.size	PartitionMotionSearch.98, .Lfunc_end123-PartitionMotionSearch.98
	.cfi_endproc
                                        # -- End function
	.type	QP2QUANT,@object        # @QP2QUANT
	.section	.rodata,"a",@progbits
	.globl	QP2QUANT
	.p2align	4
QP2QUANT:
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	8                       # 0x8
	.long	9                       # 0x9
	.long	10                      # 0xa
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	14                      # 0xe
	.long	16                      # 0x10
	.long	18                      # 0x12
	.long	20                      # 0x14
	.long	23                      # 0x17
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	32                      # 0x20
	.long	36                      # 0x24
	.long	40                      # 0x28
	.long	45                      # 0x2d
	.long	51                      # 0x33
	.long	57                      # 0x39
	.long	64                      # 0x40
	.long	72                      # 0x48
	.long	81                      # 0x51
	.long	91                      # 0x5b
	.size	QP2QUANT, 160

	.type	BlockSAD,@object        # @BlockSAD
	.local	BlockSAD
	.comm	BlockSAD,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"InitializeFastFullIntegerSearch: BlockSAD"
	.size	.L.str, 42

	.type	search_setup_done,@object # @search_setup_done
	.local	search_setup_done
	.comm	search_setup_done,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"InitializeFastFullIntegerSearch: search_setup_done"
	.size	.L.str.1, 51

	.type	search_center_x,@object # @search_center_x
	.local	search_center_x
	.comm	search_center_x,8,8
	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"InitializeFastFullIntegerSearch: search_center_x"
	.size	.L.str.2, 49

	.type	search_center_y,@object # @search_center_y
	.local	search_center_y
	.comm	search_center_y,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"InitializeFastFullIntegerSearch: search_center_y"
	.size	.L.str.3, 49

	.type	pos_00,@object          # @pos_00
	.local	pos_00
	.comm	pos_00,8,8
	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"InitializeFastFullIntegerSearch: pos_00"
	.size	.L.str.4, 40

	.type	max_search_range,@object # @max_search_range
	.local	max_search_range
	.comm	max_search_range,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"InitializeFastFullIntegerSearch: max_search_range"
	.size	.L.str.5, 50

	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	PelYline_11,@object     # @PelYline_11
	.local	PelYline_11
	.comm	PelYline_11,8,8
	.type	spiral_search_x,@object # @spiral_search_x
	.comm	spiral_search_x,8,8
	.type	spiral_search_y,@object # @spiral_search_y
	.comm	spiral_search_y,8,8
	.type	byte_abs,@object        # @byte_abs
	.comm	byte_abs,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	max_mvd,@object         # @max_mvd
	.comm	max_mvd,4,4
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"Init_Motion_Search_Module: spiral_search_x"
	.size	.L.str.6, 43

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Init_Motion_Search_Module: spiral_search_y"
	.size	.L.str.7, 43

	.type	mvbits,@object          # @mvbits
	.comm	mvbits,8,8
	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"Init_Motion_Search_Module: mvbits"
	.size	.L.str.8, 34

	.type	refbits,@object         # @refbits
	.comm	refbits,8,8
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"Init_Motion_Search_Module: refbits"
	.size	.L.str.9, 35

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"Init_Motion_Search_Module: byte_abs"
	.size	.L.str.10, 36

	.type	motion_cost,@object     # @motion_cost
	.comm	motion_cost,8,8
	.type	PelY_14,@object         # @PelY_14
	.local	PelY_14
	.comm	PelY_14,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	PelY_14b,@object        # @PelY_14b
	.local	PelY_14b
	.comm	PelY_14b,8,8
	.type	BPredPartitionCost.bx0,@object # @BPredPartitionCost.bx0
	.data
	.p2align	4
BPredPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BPredPartitionCost.bx0, 80

	.type	BPredPartitionCost.by0,@object # @BPredPartitionCost.by0
	.p2align	4
BPredPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BPredPartitionCost.by0, 80

	.type	BlockMotionSearch.orig_val,@object # @BlockMotionSearch.orig_val
	.local	BlockMotionSearch.orig_val
	.comm	BlockMotionSearch.orig_val,512,16
	.type	BlockMotionSearch.orig_pic,@object # @BlockMotionSearch.orig_pic
	.p2align	4
BlockMotionSearch.orig_pic:
	.quad	BlockMotionSearch.orig_val
	.quad	BlockMotionSearch.orig_val+32
	.quad	BlockMotionSearch.orig_val+64
	.quad	BlockMotionSearch.orig_val+96
	.quad	BlockMotionSearch.orig_val+128
	.quad	BlockMotionSearch.orig_val+160
	.quad	BlockMotionSearch.orig_val+192
	.quad	BlockMotionSearch.orig_val+224
	.quad	BlockMotionSearch.orig_val+256
	.quad	BlockMotionSearch.orig_val+288
	.quad	BlockMotionSearch.orig_val+320
	.quad	BlockMotionSearch.orig_val+352
	.quad	BlockMotionSearch.orig_val+384
	.quad	BlockMotionSearch.orig_val+416
	.quad	BlockMotionSearch.orig_val+448
	.quad	BlockMotionSearch.orig_val+480
	.size	BlockMotionSearch.orig_pic, 128

	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	BIDPartitionCost.bx0,@object # @BIDPartitionCost.bx0
	.p2align	4
BIDPartitionCost.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	BIDPartitionCost.bx0, 80

	.type	BIDPartitionCost.by0,@object # @BIDPartitionCost.by0
	.p2align	4
BIDPartitionCost.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	BIDPartitionCost.by0, 80

	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	PartitionMotionSearch.bx0,@object # @PartitionMotionSearch.bx0
	.p2align	4
PartitionMotionSearch.bx0:
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	2                       # 0x2
	.size	PartitionMotionSearch.bx0, 80

	.type	PartitionMotionSearch.by0,@object # @PartitionMotionSearch.by0
	.p2align	4
PartitionMotionSearch.by0:
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	2                       # 0x2
	.size	PartitionMotionSearch.by0, 80

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
