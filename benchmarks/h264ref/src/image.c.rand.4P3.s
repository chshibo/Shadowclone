	.text
	.file	"image.c"
	.globl	MbAffPostProc           # -- Begin function MbAffPostProc
	.p2align	4, 0x90
	.type	MbAffPostProc,@function
MbAffPostProc:                          # @MbAffPostProc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_5
# %bb.1:                                # %func_MbAffPostProc.19
	callq	MbAffPostProc.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_MbAffPostProc.40
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_MbAffPostProc.52
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_MbAffPostProc.62
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
	jmp	.LBB0_4
.Lfunc_end0:
	.size	MbAffPostProc, .Lfunc_end0-MbAffPostProc
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture          # -- Begin function code_a_picture
	.p2align	4, 0x90
	.type	code_a_picture,@function
code_a_picture:                         # @code_a_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_5
# %bb.1:                                # %func_code_a_picture.1
	movq	%rbx, %rdi
	callq	code_a_picture.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_code_a_picture.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_code_a_picture.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_code_a_picture.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.104
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
	jmp	.LBB1_4
.Lfunc_end1:
	.size	code_a_picture, .Lfunc_end1-code_a_picture
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame        # -- Begin function encode_one_frame
	.p2align	4, 0x90
	.type	encode_one_frame,@function
encode_one_frame:                       # @encode_one_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_encode_one_frame.2
	callq	encode_one_frame.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_encode_one_frame.70
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_encode_one_frame.76
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.76
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_encode_one_frame.87
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	encode_one_frame, .Lfunc_end2-encode_one_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame
	.type	ReadOneFrame,@function
ReadOneFrame:                           # @ReadOneFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_ReadOneFrame.23
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	ReadOneFrame.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_ReadOneFrame.35
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_ReadOneFrame.96
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.96
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_ReadOneFrame.100
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.100
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	ReadOneFrame, .Lfunc_end3-ReadOneFrame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders
	.type	PaddAutoCropBorders,@function
PaddAutoCropBorders:                    # @PaddAutoCropBorders
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_PaddAutoCropBorders.38
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	PaddAutoCropBorders.38
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_PaddAutoCropBorders.54
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.54
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_PaddAutoCropBorders.57
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.57
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_PaddAutoCropBorders.89
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.89
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r11d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r11d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	PaddAutoCropBorders, .Lfunc_end4-PaddAutoCropBorders
	.cfi_endproc
                                        # -- End function
	.globl	field_picture           # -- Begin function field_picture
	.p2align	4, 0x90
	.type	field_picture,@function
field_picture:                          # @field_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_field_picture.11
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_field_picture.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_field_picture.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_field_picture.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.102
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	field_picture, .Lfunc_end5-field_picture
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture           # -- Begin function frame_picture
	.p2align	4, 0x90
	.type	frame_picture,@function
frame_picture:                          # @frame_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_2
# %bb.1:                                # %func_frame_picture.6
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.6
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_frame_picture.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end6:
	.size	frame_picture, .Lfunc_end6-frame_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function picture_structure_decision
	.type	picture_structure_decision,@function
picture_structure_decision:             # @picture_structure_decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_picture_structure_decision.17
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_picture_structure_decision.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_picture_structure_decision.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_picture_structure_decision.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	picture_structure_decision, .Lfunc_end7-picture_structure_decision
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer
	.type	field_mode_buffer,@function
field_mode_buffer:                      # @field_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_field_mode_buffer.58
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer.58
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_field_mode_buffer.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.72
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_field_mode_buffer.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.74
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_field_mode_buffer.99
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.99
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	field_mode_buffer, .Lfunc_end8-field_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture
	.type	writeout_picture,@function
writeout_picture:                       # @writeout_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_writeout_picture.64
	movq	%rbx, %rdi
	callq	writeout_picture.64
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_writeout_picture.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.88
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_writeout_picture.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_writeout_picture.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.106
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	writeout_picture, .Lfunc_end9-writeout_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer
	.type	frame_mode_buffer,@function
frame_mode_buffer:                      # @frame_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_5
# %bb.1:                                # %func_frame_mode_buffer.65
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer.65
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_frame_mode_buffer.80
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.80
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_frame_mode_buffer.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.86
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_frame_mode_buffer.94
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.94
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
	jmp	.LBB10_4
.Lfunc_end10:
	.size	frame_mode_buffer, .Lfunc_end10-frame_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits
	.type	ReportNALNonVLCBits,@function
ReportNALNonVLCBits:                    # @ReportNALNonVLCBits
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_2
# %bb.1:                                # %func_ReportNALNonVLCBits.43
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_ReportNALNonVLCBits.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end11:
	.size	ReportNALNonVLCBits, .Lfunc_end11-ReportNALNonVLCBits
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe
	.type	ReportFirstframe,@function
ReportFirstframe:                       # @ReportFirstframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_ReportFirstframe.18
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ReportFirstframe.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ReportFirstframe.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ReportFirstframe.91
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.91
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	ReportFirstframe, .Lfunc_end12-ReportFirstframe
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra
	.type	ReportIntra,@function
ReportIntra:                            # @ReportIntra
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_2
# %bb.1:                                # %func_ReportIntra.5
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_ReportIntra.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end13:
	.size	ReportIntra, .Lfunc_end13-ReportIntra
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP
	.type	ReportSP,@function
ReportSP:                               # @ReportSP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_2
# %bb.1:                                # %func_ReportSP.16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_ReportSP.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end14:
	.size	ReportSP, .Lfunc_end14-ReportSP
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB
	.type	ReportRB,@function
ReportRB:                               # @ReportRB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_2
# %bb.1:                                # %func_ReportRB.83
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.83
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_ReportRB.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.98
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end15:
	.size	ReportRB, .Lfunc_end15-ReportRB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB
	.type	ReportB,@function
ReportB:                                # @ReportB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_2
# %bb.1:                                # %func_ReportB.34
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.34
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_ReportB.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end16:
	.size	ReportB, .Lfunc_end16-ReportB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP
	.type	ReportP,@function
ReportP:                                # @ReportP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_2
# %bb.1:                                # %func_ReportP.26
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_ReportP.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end17:
	.size	ReportP, .Lfunc_end17-ReportP
	.cfi_endproc
                                        # -- End function
	.globl	copy_params             # -- Begin function copy_params
	.p2align	4, 0x90
	.type	copy_params,@function
copy_params:                            # @copy_params
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	active_sps, %rax
	movl	1148(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6556(%rcx)
	movq	active_sps, %rax
	movl	1160(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6560(%rcx)
	movq	active_sps, %rax
	movl	32(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6552(%rcx)
	movq	active_sps, %rax
	cmpl	$0, 1160(%rax)
	je	.LBB18_2
# %bb.1:                                # %if.then
	movq	active_sps, %rax
	movl	1164(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6564(%rcx)
	movq	active_sps, %rax
	movl	1168(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6568(%rcx)
	movq	active_sps, %rax
	movl	1172(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6572(%rcx)
	movq	active_sps, %rax
	movl	1176(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6576(%rcx)
	jmp	.LBB18_3
.LBB18_2:                               # %if.else
	movq	enc_picture, %rax
	movl	$0, 6564(%rax)
	movq	enc_picture, %rax
	movl	$0, 6568(%rax)
	movq	enc_picture, %rax
	movl	$0, 6572(%rax)
	movq	enc_picture, %rax
	movl	$0, 6576(%rax)
.LBB18_3:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end18:
	.size	copy_params, .Lfunc_end18-copy_params
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld
	.type	distortion_fld,@function
distortion_fld:                         # @distortion_fld
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_distortion_fld.9
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_distortion_fld.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_distortion_fld.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.21
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_distortion_fld.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.46
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	distortion_fld, .Lfunc_end19-distortion_fld
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix      # -- Begin function UnifiedOneForthPix
	.p2align	4, 0x90
	.type	UnifiedOneForthPix,@function
UnifiedOneForthPix:                     # @UnifiedOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_UnifiedOneForthPix.53
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_UnifiedOneForthPix.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.97
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_UnifiedOneForthPix.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.101
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_UnifiedOneForthPix.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.105
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	UnifiedOneForthPix, .Lfunc_end20-UnifiedOneForthPix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation
	.type	GenerateFullPelRepresentation,@function
GenerateFullPelRepresentation:          # @GenerateFullPelRepresentation
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_5
# %bb.1:                                # %func_GenerateFullPelRepresentation.42
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.42
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_GenerateFullPelRepresentation.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.84
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_GenerateFullPelRepresentation.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.92
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_GenerateFullPelRepresentation.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.95
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
	jmp	.LBB21_4
.Lfunc_end21:
	.size	GenerateFullPelRepresentation, .Lfunc_end21-GenerateFullPelRepresentation
	.cfi_endproc
                                        # -- End function
	.globl	dummy_slice_too_big     # -- Begin function dummy_slice_too_big
	.p2align	4, 0x90
	.type	dummy_slice_too_big,@function
dummy_slice_too_big:                    # @dummy_slice_too_big
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	xorl	%eax, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end22:
	.size	dummy_slice_too_big, .Lfunc_end22-dummy_slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data         # -- Begin function copy_rdopt_data
	.p2align	4, 0x90
	.type	copy_rdopt_data,@function
copy_rdopt_data:                        # @copy_rdopt_data
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_copy_rdopt_data.7
	movl	%ebx, %edi
	callq	copy_rdopt_data.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_copy_rdopt_data.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_copy_rdopt_data.51
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_copy_rdopt_data.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.68
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	copy_rdopt_data, .Lfunc_end23-copy_rdopt_data
	.cfi_endproc
                                        # -- End function
	.globl	buf2img                 # -- Begin function buf2img
	.p2align	4, 0x90
	.type	buf2img,@function
buf2img:                                # @buf2img
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_buf2img.8
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.8
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_buf2img.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_buf2img.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_buf2img.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	buf2img, .Lfunc_end24-buf2img
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit
	.type	writeUnit,@function
writeUnit:                              # @writeUnit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_writeUnit.30
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_writeUnit.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_writeUnit.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_writeUnit.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	writeUnit, .Lfunc_end25-writeUnit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_frame
	.type	init_frame,@function
init_frame:                             # @init_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_init_frame.3
	callq	init_frame.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_init_frame.28
	.cfi_def_cfa %rbp, 16
	callq	init_frame.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_init_frame.39
	.cfi_def_cfa %rbp, 16
	callq	init_frame.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_init_frame.61
	.cfi_def_cfa %rbp, 16
	callq	init_frame.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	init_frame, .Lfunc_end26-init_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_dec_ref_pic_marking_buffer
	.type	init_dec_ref_pic_marking_buffer,@function
init_dec_ref_pic_marking_buffer:        # @init_dec_ref_pic_marking_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	$0, 72512(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	init_dec_ref_pic_marking_buffer, .Lfunc_end27-init_dec_ref_pic_marking_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_field
	.type	init_field,@function
init_field:                             # @init_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB28_5
# %bb.1:                                # %func_init_field.10
	callq	init_field.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_init_field.13
	.cfi_def_cfa %rbp, 16
	callq	init_field.13
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_init_field.20
	.cfi_def_cfa %rbp, 16
	callq	init_field.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_init_field.22
	.cfi_def_cfa %rbp, 16
	callq	init_field.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
	jmp	.LBB28_4
.Lfunc_end28:
	.size	init_field, .Lfunc_end28-init_field
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_snr
	.type	find_snr,@function
find_snr:                               # @find_snr
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB29_5
# %bb.1:                                # %func_find_snr.29
	callq	find_snr.29
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_find_snr.31
	.cfi_def_cfa %rbp, 16
	callq	find_snr.31
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_3:                               # %func_find_snr.45
	.cfi_def_cfa %rbp, 16
	callq	find_snr.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_4:                               # %func_find_snr.48
	.cfi_def_cfa %rbp, 16
	callq	find_snr.48
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB29_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB29_3
	jmp	.LBB29_4
.Lfunc_end29:
	.size	find_snr, .Lfunc_end29-find_snr
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion
	.type	find_distortion,@function
find_distortion:                        # @find_distortion
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB30_5
# %bb.1:                                # %func_find_distortion.12
	callq	find_distortion.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_find_distortion.24
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_find_distortion.59
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_find_distortion.75
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
	jmp	.LBB30_4
.Lfunc_end30:
	.size	find_distortion, .Lfunc_end30-find_distortion
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB
	.type	copy_motion_vectors_MB,@function
copy_motion_vectors_MB:                 # @copy_motion_vectors_MB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB31_5
# %bb.1:                                # %func_copy_motion_vectors_MB.4
	callq	copy_motion_vectors_MB.4
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_copy_motion_vectors_MB.32
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_copy_motion_vectors_MB.73
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_copy_motion_vectors_MB.82
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
	jmp	.LBB31_4
.Lfunc_end31:
	.size	copy_motion_vectors_MB, .Lfunc_end31-copy_motion_vectors_MB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function CalculateFrameNumber
	.type	CalculateFrameNumber,@function
CalculateFrameNumber:                   # @CalculateFrameNumber
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	je	.LBB32_5
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB32_3
# %bb.2:                                # %if.then2
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	jmp	.LBB32_4
.LBB32_3:                               # %if.else
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
.LBB32_4:                               # %if.end
	jmp	.LBB32_9
.LBB32_5:                               # %if.else24
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB32_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB32_8
# %bb.7:                                # %if.then35
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, frame_no
.LBB32_8:                               # %if.end37
	jmp	.LBB32_9
.LBB32_9:                               # %if.end38
	movl	frame_no, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	CalculateFrameNumber, .Lfunc_end32-CalculateFrameNumber
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_frame
	.type	put_buffer_frame,@function
put_buffer_frame:                       # @put_buffer_frame
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	put_buffer_frame, .Lfunc_end33-put_buffer_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_top
	.type	put_buffer_top,@function
put_buffer_top:                         # @put_buffer_top
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$0, 71796(%rax)
	movq	imgY_org_top, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_top, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	put_buffer_top, .Lfunc_end34-put_buffer_top
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_bot
	.type	put_buffer_bot,@function
put_buffer_bot:                         # @put_buffer_bot
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$1, 71796(%rax)
	movq	imgY_org_bot, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_bot, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end35:
	.size	put_buffer_bot, .Lfunc_end35-put_buffer_bot
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding
	.type	rdPictureCoding,@function
rdPictureCoding:                        # @rdPictureCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB36_5
# %bb.1:                                # %func_rdPictureCoding.67
	callq	rdPictureCoding.67
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_rdPictureCoding.79
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_rdPictureCoding.81
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_rdPictureCoding.93
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.93
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
	jmp	.LBB36_4
.Lfunc_end36:
	.size	rdPictureCoding, .Lfunc_end36-rdPictureCoding
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.1        # -- Begin function code_a_picture.1
	.p2align	4, 0x90
	.type	code_a_picture.1,@function
code_a_picture.1:                       # @code_a_picture.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1651430453, -28(%rbp)  # imm = 0x626ED435
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB37_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB37_8
.LBB37_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB37_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB37_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB37_7
.LBB37_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB37_7:                               # %land.end
.LBB37_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB37_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB37_10:                              # %if.end
	jmp	.LBB37_11
.LBB37_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB37_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB37_11 Depth=1
	jmp	.LBB37_13
.LBB37_13:                              # %while.cond15
                                        #   Parent Loop BB37_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB37_14
	jmp	.LBB37_15
.LBB37_14:                              # %while.body19
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB37_13
.LBB37_15:                              # %while.end
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_11
.LBB37_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB37_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB37_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB37_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB37_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB37_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB37_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_19
.LBB37_22:                              # %for.end
	jmp	.LBB37_23
.LBB37_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB37_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB37_25:                              # %if.end34
	cmpl	$1651430453, -28(%rbp)  # imm = 0x626ED435
	jne	.LBB37_27
.LBB37_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_26
.Lfunc_end37:
	.size	code_a_picture.1, .Lfunc_end37-code_a_picture.1
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.2      # -- Begin function encode_one_frame.2
	.p2align	4, 0x90
	.type	encode_one_frame.2,@function
encode_one_frame.2:                     # @encode_one_frame.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$582148739, -24(%rbp)   # imm = 0x22B2E283
	movl	$0, -56(%rbp)
	movl	$0, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -60(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-80(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB38_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB38_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB38_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB38_9
.LBB38_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB38_8
.LBB38_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB38_8:                               # %if.end21
	jmp	.LBB38_9
.LBB38_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB38_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB38_38
.LBB38_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB38_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB38_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB38_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB38_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB38_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB38_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB38_20
.LBB38_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB38_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB38_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB38_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB38_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB38_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB38_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB38_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB38_29
.LBB38_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB38_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB38_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB38_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB38_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB38_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB38_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB38_35
.LBB38_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB38_35:                              # %if.end89
	jmp	.LBB38_37
.LBB38_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB38_37:                              # %if.end92
	jmp	.LBB38_38
.LBB38_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB38_41
.LBB38_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB38_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB38_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB38_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_45
# %bb.44:                               # %if.then109
	movl	-48(%rbp), %edi
	vmovss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB38_54
.LBB38_45:                              # %if.else112
	movl	-56(%rbp), %edi
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB38_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB38_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB38_53
.LBB38_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB38_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB38_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB38_52
.LBB38_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB38_52:                              # %if.end130
	jmp	.LBB38_53
.LBB38_53:                              # %if.end131
	jmp	.LBB38_54
.LBB38_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB38_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB38_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB38_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB38_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB38_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB38_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB38_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB38_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB38_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB38_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB38_66:                              # %if.end151
	callq	find_snr
	leaq	-88(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -88(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -80(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB38_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB38_70
.LBB38_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB38_70:                              # %if.end171
	jmp	.LBB38_81
.LBB38_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB38_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB38_80
.LBB38_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB38_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB38_79
.LBB38_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB38_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB38_78
.LBB38_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB38_78:                              # %if.end187
	jmp	.LBB38_79
.LBB38_79:                              # %if.end188
	jmp	.LBB38_80
.LBB38_80:                              # %if.end189
	jmp	.LBB38_81
.LBB38_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB38_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB38_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB38_85
.LBB38_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB38_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB38_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB38_88
.LBB38_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB38_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB38_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB38_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB38_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB38_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB38_110
.LBB38_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB38_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB38_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_98
.LBB38_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB38_98:                              # %if.end239
	jmp	.LBB38_99
.LBB38_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB38_104
	jmp	.LBB38_100
.LBB38_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB38_102
	jmp	.LBB38_101
.LBB38_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB38_103
	jmp	.LBB38_108
.LBB38_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB38_109
.LBB38_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB38_109
.LBB38_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB38_107
.LBB38_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB38_107:                             # %if.end261
	jmp	.LBB38_109
.LBB38_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB38_109:                             # %sw.epilog
	jmp	.LBB38_110
.LBB38_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB38_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB38_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB38_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB38_119
.LBB38_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB38_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB38_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB38_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB38_118:                             # %if.end292
	jmp	.LBB38_119
.LBB38_119:                             # %if.end293
	jmp	.LBB38_120
.LBB38_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB38_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB38_123
.LBB38_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB38_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$582148739, -24(%rbp)   # imm = 0x22B2E283
	jne	.LBB38_125
.LBB38_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_124
.Lfunc_end38:
	.size	encode_one_frame.2, .Lfunc_end38-encode_one_frame.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.3
.LCPI39_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.3,@function
init_frame.3:                           # @init_frame.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$169804040, -16(%rbp)   # imm = 0xA1F0108
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB39_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB39_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB39_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB39_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB39_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB39_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB39_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB39_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_17
.LBB39_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_17:                              # %if.end32
	jmp	.LBB39_25
.LBB39_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_22
.LBB39_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB39_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB39_24:                              # %if.end50
	jmp	.LBB39_25
.LBB39_25:                              # %if.end51
	jmp	.LBB39_26
.LBB39_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB39_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB39_28:                              # %if.end62
	jmp	.LBB39_72
.LBB39_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB39_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB39_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB39_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB39_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_30
.LBB39_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB39_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB39_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB39_36:                              # %if.end102
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB39_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB39_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB39_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB39_41
.LBB39_40:                              # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB39_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB39_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB39_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB39_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB39_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_49
.LBB39_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB39_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB39_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB39_58
.LBB39_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB39_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB39_57
.LBB39_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB39_57:                              # %cond.end
.LBB39_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_66
.LBB39_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB39_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB39_65
.LBB39_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB39_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB39_64
.LBB39_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB39_64:                              # %cond.end209
.LBB39_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_66:                              # %if.end214
	jmp	.LBB39_67
.LBB39_67:                              # %if.end215
	jmp	.LBB39_71
.LBB39_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB39_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_70:                              # %if.end226
	jmp	.LBB39_71
.LBB39_71:                              # %if.end227
	jmp	.LBB39_72
.LBB39_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$169804040, -16(%rbp)   # imm = 0xA1F0108
	jne	.LBB39_74
.LBB39_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_73
.Lfunc_end39:
	.size	init_frame.3, .Lfunc_end39-init_frame.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.4
	.type	copy_motion_vectors_MB.4,@function
copy_motion_vectors_MB.4:               # @copy_motion_vectors_MB.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$658765882, -20(%rbp)   # imm = 0x2743F83A
	movl	$0, -16(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
                                        #       Child Loop BB40_5 Depth 3
                                        #         Child Loop BB40_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB40_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -8(%rbp)
.LBB40_3:                               # %for.cond1
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_5 Depth 3
                                        #         Child Loop BB40_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB40_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	$0, -4(%rbp)
.LBB40_5:                               # %for.cond4
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB40_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB40_5 Depth=3
	movl	$0, -12(%rbp)
.LBB40_7:                               # %for.cond7
                                        #   Parent Loop BB40_1 Depth=1
                                        #     Parent Loop BB40_3 Depth=2
                                        #       Parent Loop BB40_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -12(%rbp)
	jge	.LBB40_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB40_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB40_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB40_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB40_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB40_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB40_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB40_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB40_12:                              # %if.end
                                        #   in Loop: Header=BB40_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB40_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_7
.LBB40_14:                              # %for.end
                                        #   in Loop: Header=BB40_5 Depth=3
	jmp	.LBB40_15
.LBB40_15:                              # %for.inc359
                                        #   in Loop: Header=BB40_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_5
.LBB40_16:                              # %for.end361
                                        #   in Loop: Header=BB40_3 Depth=2
	jmp	.LBB40_17
.LBB40_17:                              # %for.inc362
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_3
.LBB40_18:                              # %for.end364
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_19
.LBB40_19:                              # %for.inc365
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_1
.LBB40_20:                              # %for.end367
	cmpl	$658765882, -20(%rbp)   # imm = 0x2743F83A
	jne	.LBB40_22
.LBB40_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_21
.Lfunc_end40:
	.size	copy_motion_vectors_MB.4, .Lfunc_end40-copy_motion_vectors_MB.4
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.5
	.type	ReportIntra.5,@function
ReportIntra.5:                          # @ReportIntra.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1551747880, -12(%rbp)  # imm = 0x5C7DCB28
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB41_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB41_3
.LBB41_2:                               # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB41_3:                               # %if.end
	cmpl	$1551747880, -12(%rbp)  # imm = 0x5C7DCB28
	jne	.LBB41_5
.LBB41_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_4
.Lfunc_end41:
	.size	ReportIntra.5, .Lfunc_end41-ReportIntra.5
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.6         # -- Begin function frame_picture.6
	.p2align	4, 0x90
	.type	frame_picture.6,@function
frame_picture.6:                        # @frame_picture.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$640050903, -16(%rbp)   # imm = 0x262666D7
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB42_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB42_6
.LBB42_2:                               # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB42_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB42_5
.LBB42_4:                               # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB42_5:                               # %if.end
	jmp	.LBB42_6
.LBB42_6:                               # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB42_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB42_8:                               # %if.end67
	cmpl	$640050903, -16(%rbp)   # imm = 0x262666D7
	jne	.LBB42_10
.LBB42_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_9
.Lfunc_end42:
	.size	frame_picture.6, .Lfunc_end42-frame_picture.6
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.7       # -- Begin function copy_rdopt_data.7
	.p2align	4, 0x90
	.type	copy_rdopt_data.7,@function
copy_rdopt_data.7:                      # @copy_rdopt_data.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$565852001, -52(%rbp)   # imm = 0x21BA3761
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB43_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB43_4
.LBB43_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB43_4
.LBB43_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB43_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_7 Depth 2
                                        #       Child Loop BB43_9 Depth 3
                                        #         Child Loop BB43_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	$0, -8(%rbp)
.LBB43_7:                               # %for.cond17
                                        #   Parent Loop BB43_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_9 Depth 3
                                        #         Child Loop BB43_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB43_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB43_7 Depth=2
	movl	$0, -12(%rbp)
.LBB43_9:                               # %for.cond21
                                        #   Parent Loop BB43_5 Depth=1
                                        #     Parent Loop BB43_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB43_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB43_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB43_9 Depth=3
	movl	$0, -16(%rbp)
.LBB43_11:                              # %for.cond25
                                        #   Parent Loop BB43_5 Depth=1
                                        #     Parent Loop BB43_7 Depth=2
                                        #       Parent Loop BB43_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB43_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB43_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB43_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_11
.LBB43_14:                              # %for.end
                                        #   in Loop: Header=BB43_9 Depth=3
	jmp	.LBB43_15
.LBB43_15:                              # %for.inc46
                                        #   in Loop: Header=BB43_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_9
.LBB43_16:                              # %for.end48
                                        #   in Loop: Header=BB43_7 Depth=2
	jmp	.LBB43_17
.LBB43_17:                              # %for.inc49
                                        #   in Loop: Header=BB43_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_7
.LBB43_18:                              # %for.end51
                                        #   in Loop: Header=BB43_5 Depth=1
	jmp	.LBB43_19
.LBB43_19:                              # %for.inc52
                                        #   in Loop: Header=BB43_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_5
.LBB43_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB43_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_23 Depth 2
                                        #       Child Loop BB43_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB43_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB43_21 Depth=1
	movl	$0, -12(%rbp)
.LBB43_23:                              # %for.cond59
                                        #   Parent Loop BB43_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB43_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB43_23 Depth=2
	movl	$0, -16(%rbp)
.LBB43_25:                              # %for.cond63
                                        #   Parent Loop BB43_21 Depth=1
                                        #     Parent Loop BB43_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB43_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB43_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB43_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_25
.LBB43_28:                              # %for.end82
                                        #   in Loop: Header=BB43_23 Depth=2
	jmp	.LBB43_29
.LBB43_29:                              # %for.inc83
                                        #   in Loop: Header=BB43_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_23
.LBB43_30:                              # %for.end85
                                        #   in Loop: Header=BB43_21 Depth=1
	jmp	.LBB43_31
.LBB43_31:                              # %for.inc86
                                        #   in Loop: Header=BB43_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_21
.LBB43_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB43_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB43_33 Depth=1
	movl	$0, -4(%rbp)
.LBB43_35:                              # %for.cond93
                                        #   Parent Loop BB43_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB43_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB43_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB43_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB43_38:                              # %if.end
                                        #   in Loop: Header=BB43_35 Depth=2
	jmp	.LBB43_39
.LBB43_39:                              # %for.inc176
                                        #   in Loop: Header=BB43_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_35
.LBB43_40:                              # %for.end178
                                        #   in Loop: Header=BB43_33 Depth=1
	jmp	.LBB43_41
.LBB43_41:                              # %for.inc179
                                        #   in Loop: Header=BB43_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_33
.LBB43_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB43_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB43_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB43_43 Depth=1
	movl	$0, -4(%rbp)
.LBB43_45:                              # %for.cond186
                                        #   Parent Loop BB43_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB43_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB43_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB43_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_45
.LBB43_48:                              # %for.end203
                                        #   in Loop: Header=BB43_43 Depth=1
	jmp	.LBB43_49
.LBB43_49:                              # %for.inc204
                                        #   in Loop: Header=BB43_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_43
.LBB43_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB43_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB43_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB43_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB43_52 Depth=1
	movl	$0, -4(%rbp)
.LBB43_54:                              # %for.cond214
                                        #   Parent Loop BB43_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB43_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB43_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB43_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_54
.LBB43_57:                              # %for.end247
                                        #   in Loop: Header=BB43_52 Depth=1
	jmp	.LBB43_58
.LBB43_58:                              # %for.inc248
                                        #   in Loop: Header=BB43_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_52
.LBB43_59:                              # %for.end250
	jmp	.LBB43_60
.LBB43_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB43_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB43_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB43_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB43_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_61
.LBB43_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB43_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB43_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_68:                              # %for.cond283
                                        #   Parent Loop BB43_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB43_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB43_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_68
.LBB43_71:                              # %for.end306
                                        #   in Loop: Header=BB43_66 Depth=1
	jmp	.LBB43_72
.LBB43_72:                              # %for.inc307
                                        #   in Loop: Header=BB43_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_66
.LBB43_73:                              # %for.end309
	jmp	.LBB43_98
.LBB43_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB43_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB43_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB43_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_79:                              # %for.cond324
                                        #   Parent Loop BB43_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB43_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB43_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_79
.LBB43_82:                              # %for.end341
                                        #   in Loop: Header=BB43_77 Depth=1
	jmp	.LBB43_83
.LBB43_83:                              # %for.inc342
                                        #   in Loop: Header=BB43_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_77
.LBB43_84:                              # %for.end344
	jmp	.LBB43_97
.LBB43_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB43_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB43_96
.LBB43_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB43_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB43_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB43_90:                              # %for.cond359
                                        #   Parent Loop BB43_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB43_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB43_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_90
.LBB43_93:                              # %for.end384
                                        #   in Loop: Header=BB43_88 Depth=1
	jmp	.LBB43_94
.LBB43_94:                              # %for.inc385
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_88
.LBB43_95:                              # %for.end387
	jmp	.LBB43_96
.LBB43_96:                              # %if.end388
	jmp	.LBB43_97
.LBB43_97:                              # %if.end389
	jmp	.LBB43_98
.LBB43_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB43_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB43_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB43_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB43_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB43_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB43_103 Depth=1
	movl	$0, -4(%rbp)
.LBB43_105:                             # %for.cond410
                                        #   Parent Loop BB43_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB43_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB43_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB43_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB43_109
.LBB43_108:                             # %if.else483
                                        #   in Loop: Header=BB43_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB43_109:                             # %if.end506
                                        #   in Loop: Header=BB43_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB43_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB43_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB43_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB43_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB43_113
.LBB43_112:                             # %if.else568
                                        #   in Loop: Header=BB43_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB43_113:                             # %if.end591
                                        #   in Loop: Header=BB43_105 Depth=2
	jmp	.LBB43_114
.LBB43_114:                             # %if.end592
                                        #   in Loop: Header=BB43_105 Depth=2
	jmp	.LBB43_115
.LBB43_115:                             # %for.inc593
                                        #   in Loop: Header=BB43_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_105
.LBB43_116:                             # %for.end595
                                        #   in Loop: Header=BB43_103 Depth=1
	jmp	.LBB43_117
.LBB43_117:                             # %for.inc596
                                        #   in Loop: Header=BB43_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_103
.LBB43_118:                             # %for.end598
	jmp	.LBB43_130
.LBB43_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB43_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB43_120 Depth=1
	movl	$0, -4(%rbp)
.LBB43_122:                             # %for.cond604
                                        #   Parent Loop BB43_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB43_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB43_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB43_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB43_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB43_125:                             # %if.end654
                                        #   in Loop: Header=BB43_122 Depth=2
	jmp	.LBB43_126
.LBB43_126:                             # %for.inc655
                                        #   in Loop: Header=BB43_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_122
.LBB43_127:                             # %for.end657
                                        #   in Loop: Header=BB43_120 Depth=1
	jmp	.LBB43_128
.LBB43_128:                             # %for.inc658
                                        #   in Loop: Header=BB43_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_120
.LBB43_129:                             # %for.end660
	jmp	.LBB43_130
.LBB43_130:                             # %if.end661
	jmp	.LBB43_131
.LBB43_131:                             # %if.end662
	cmpl	$565852001, -52(%rbp)   # imm = 0x21BA3761
	jne	.LBB43_133
.LBB43_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_132
.Lfunc_end43:
	.size	copy_rdopt_data.7, .Lfunc_end43-copy_rdopt_data.7
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.8               # -- Begin function buf2img.8
	.p2align	4, 0x90
	.type	buf2img.8,@function
buf2img.8:                              # @buf2img.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$606073020, -60(%rbp)   # imm = 0x241FF0BC
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB44_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB44_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB44_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB44_6
	jmp	.LBB44_4
.LBB44_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB44_15
	jmp	.LBB44_5
.LBB44_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB44_24
	jmp	.LBB44_33
.LBB44_6:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB44_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	$0, -8(%rbp)
.LBB44_9:                               # %for.cond5
                                        #   Parent Loop BB44_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB44_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB44_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB44_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_9
.LBB44_12:                              # %for.end
                                        #   in Loop: Header=BB44_7 Depth=1
	jmp	.LBB44_13
.LBB44_13:                              # %for.inc14
                                        #   in Loop: Header=BB44_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_7
.LBB44_14:                              # %for.end16
	jmp	.LBB44_34
.LBB44_15:                              # %sw.bb17
	movl	$0, -4(%rbp)
.LBB44_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB44_16 Depth=1
	movl	$0, -8(%rbp)
.LBB44_18:                              # %for.cond22
                                        #   Parent Loop BB44_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB44_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB44_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB44_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_18
.LBB44_21:                              # %for.end38
                                        #   in Loop: Header=BB44_16 Depth=1
	jmp	.LBB44_22
.LBB44_22:                              # %for.inc39
                                        #   in Loop: Header=BB44_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_16
.LBB44_23:                              # %for.end41
	jmp	.LBB44_34
.LBB44_24:                              # %sw.bb42
	movl	$0, -4(%rbp)
.LBB44_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	$0, -8(%rbp)
.LBB44_27:                              # %for.cond47
                                        #   Parent Loop BB44_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB44_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB44_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB44_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_27
.LBB44_30:                              # %for.end74
                                        #   in Loop: Header=BB44_25 Depth=1
	jmp	.LBB44_31
.LBB44_31:                              # %for.inc75
                                        #   in Loop: Header=BB44_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_25
.LBB44_32:                              # %for.end77
	jmp	.LBB44_33
.LBB44_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB44_34:                              # %sw.epilog
	jmp	.LBB44_44
.LBB44_35:                              # %if.else
	movl	$0, -4(%rbp)
.LBB44_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB44_36 Depth=1
	movl	$0, -8(%rbp)
.LBB44_38:                              # %for.cond82
                                        #   Parent Loop BB44_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB44_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB44_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB44_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_38
.LBB44_41:                              # %for.end102
                                        #   in Loop: Header=BB44_36 Depth=1
	jmp	.LBB44_42
.LBB44_42:                              # %for.inc103
                                        #   in Loop: Header=BB44_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_36
.LBB44_43:                              # %for.end105
	jmp	.LBB44_44
.LBB44_44:                              # %if.end106
	cmpl	$606073020, -60(%rbp)   # imm = 0x241FF0BC
	jne	.LBB44_46
.LBB44_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_45
.Lfunc_end44:
	.size	buf2img.8, .Lfunc_end44-buf2img.8
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.9
	.type	distortion_fld.9,@function
distortion_fld.9:                       # @distortion_fld.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$788922304, -4(%rbp)    # imm = 0x2F05FFC0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$788922304, -4(%rbp)    # imm = 0x2F05FFC0
	jne	.LBB45_2
.LBB45_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_1
.Lfunc_end45:
	.size	distortion_fld.9, .Lfunc_end45-distortion_fld.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.10
.LCPI46_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.10,@function
init_field.10:                          # @init_field.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1086057215, -16(%rbp)  # imm = 0x40BBEAFF
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB46_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB46_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB46_3:                               # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB46_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB46_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB46_6:                               # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB46_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB46_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB46_9:                               # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB46_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB46_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB46_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB46_15
.LBB46_14:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB46_15:                              # %if.end38
	jmp	.LBB46_23
.LBB46_16:                              # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB46_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB46_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB46_20
.LBB46_19:                              # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB46_20:                              # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB46_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB46_22:                              # %if.end56
	jmp	.LBB46_23
.LBB46_23:                              # %if.end57
	jmp	.LBB46_24
.LBB46_24:                              # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB46_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB46_26:                              # %if.end66
	jmp	.LBB46_77
.LBB46_27:                              # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB46_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB46_29:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB46_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB46_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB46_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_29
.LBB46_32:                              # %for.end
	jmp	.LBB46_38
.LBB46_33:                              # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB46_34:                              # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB46_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB46_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_34
.LBB46_37:                              # %for.end134
	jmp	.LBB46_38
.LBB46_38:                              # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB46_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB46_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB46_41:                              # %if.end147
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB46_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB46_43:                              # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB46_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB46_46
.LBB46_45:                              # %if.else174
	vmovsd	.LCPI46_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB46_46:                              # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB46_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB46_48:                              # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB46_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB46_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB46_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB46_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB46_54
.LBB46_53:                              # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB46_54:                              # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB46_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB46_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB46_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB46_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB46_63
.LBB46_59:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB46_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB46_62
.LBB46_61:                              # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB46_62:                              # %cond.end
.LBB46_63:                              # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB46_71
.LBB46_64:                              # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB46_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB46_70
.LBB46_66:                              # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB46_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB46_69
.LBB46_68:                              # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB46_69:                              # %cond.end256
.LBB46_70:                              # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB46_71:                              # %if.end261
	jmp	.LBB46_72
.LBB46_72:                              # %if.end262
	jmp	.LBB46_76
.LBB46_73:                              # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB46_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB46_75:                              # %if.end273
	jmp	.LBB46_76
.LBB46_76:                              # %if.end274
	jmp	.LBB46_77
.LBB46_77:                              # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1086057215, -16(%rbp)  # imm = 0x40BBEAFF
	jne	.LBB46_79
.LBB46_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_79:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_78
.Lfunc_end46:
	.size	init_field.10, .Lfunc_end46-init_field.10
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.11        # -- Begin function field_picture.11
	.p2align	4, 0x90
	.type	field_picture.11,@function
field_picture.11:                       # @field_picture.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$215422275, -12(%rbp)   # imm = 0xCD71543
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB47_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB47_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB47_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB47_6
.LBB47_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB47_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB47_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB47_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB47_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB47_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB47_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB47_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB47_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB47_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB47_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$215422275, -12(%rbp)   # imm = 0xCD71543
	jne	.LBB47_18
.LBB47_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_17
.Lfunc_end47:
	.size	field_picture.11, .Lfunc_end47-field_picture.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.12
	.type	find_distortion.12,@function
find_distortion.12:                     # @find_distortion.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1180627624, -44(%rbp)  # imm = 0x465EF2A8
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB48_20
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB48_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	$0, -12(%rbp)
.LBB48_4:                               # %for.cond3
                                        #   Parent Loop BB48_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB48_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB48_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB48_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_4
.LBB48_7:                               # %for.end
                                        #   in Loop: Header=BB48_2 Depth=1
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc17
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_2
.LBB48_9:                               # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB48_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB48_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB48_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	$0, -12(%rbp)
.LBB48_13:                              # %for.cond27
                                        #   Parent Loop BB48_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB48_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB48_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB48_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_13
.LBB48_16:                              # %for.end71
                                        #   in Loop: Header=BB48_11 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc72
                                        #   in Loop: Header=BB48_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_11
.LBB48_18:                              # %for.end74
	jmp	.LBB48_19
.LBB48_19:                              # %if.end
	jmp	.LBB48_39
.LBB48_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB48_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB48_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	$0, -12(%rbp)
.LBB48_23:                              # %for.cond80
                                        #   Parent Loop BB48_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB48_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB48_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB48_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_23
.LBB48_26:                              # %for.end104
                                        #   in Loop: Header=BB48_21 Depth=1
	jmp	.LBB48_27
.LBB48_27:                              # %for.inc105
                                        #   in Loop: Header=BB48_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_21
.LBB48_28:                              # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB48_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB48_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB48_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	$0, -12(%rbp)
.LBB48_32:                              # %for.cond117
                                        #   Parent Loop BB48_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB48_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB48_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB48_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_32
.LBB48_35:                              # %for.end163
                                        #   in Loop: Header=BB48_30 Depth=1
	jmp	.LBB48_36
.LBB48_36:                              # %for.inc164
                                        #   in Loop: Header=BB48_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_30
.LBB48_37:                              # %for.end166
	jmp	.LBB48_38
.LBB48_38:                              # %if.end167
	jmp	.LBB48_39
.LBB48_39:                              # %if.end168
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1180627624, -44(%rbp)  # imm = 0x465EF2A8
	jne	.LBB48_41
.LBB48_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_40
.Lfunc_end48:
	.size	find_distortion.12, .Lfunc_end48-find_distortion.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.13
.LCPI49_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.13,@function
init_field.13:                          # @init_field.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$543763075, -16(%rbp)   # imm = 0x20692A83
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB49_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB49_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB49_3:                               # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB49_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB49_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB49_6:                               # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB49_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB49_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB49_9:                               # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB49_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB49_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB49_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB49_15
.LBB49_14:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB49_15:                              # %if.end38
	jmp	.LBB49_23
.LBB49_16:                              # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB49_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB49_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB49_20
.LBB49_19:                              # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB49_20:                              # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB49_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB49_22:                              # %if.end56
	jmp	.LBB49_23
.LBB49_23:                              # %if.end57
	jmp	.LBB49_24
.LBB49_24:                              # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB49_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB49_26:                              # %if.end66
	jmp	.LBB49_77
.LBB49_27:                              # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB49_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB49_29:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB49_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB49_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB49_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_29
.LBB49_32:                              # %for.end
	jmp	.LBB49_38
.LBB49_33:                              # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB49_34:                              # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB49_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB49_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB49_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_34
.LBB49_37:                              # %for.end134
	jmp	.LBB49_38
.LBB49_38:                              # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB49_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB49_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB49_41:                              # %if.end147
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB49_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB49_43:                              # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB49_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB49_46
.LBB49_45:                              # %if.else174
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB49_46:                              # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB49_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB49_48:                              # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB49_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB49_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB49_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB49_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB49_54
.LBB49_53:                              # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB49_54:                              # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB49_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB49_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB49_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB49_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB49_63
.LBB49_59:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB49_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB49_62
.LBB49_61:                              # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB49_62:                              # %cond.end
.LBB49_63:                              # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB49_71
.LBB49_64:                              # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB49_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB49_70
.LBB49_66:                              # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB49_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB49_69
.LBB49_68:                              # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB49_69:                              # %cond.end256
.LBB49_70:                              # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB49_71:                              # %if.end261
	jmp	.LBB49_72
.LBB49_72:                              # %if.end262
	jmp	.LBB49_76
.LBB49_73:                              # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB49_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB49_75:                              # %if.end273
	jmp	.LBB49_76
.LBB49_76:                              # %if.end274
	jmp	.LBB49_77
.LBB49_77:                              # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$543763075, -16(%rbp)   # imm = 0x20692A83
	jne	.LBB49_79
.LBB49_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_79:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_78
.Lfunc_end49:
	.size	init_field.13, .Lfunc_end49-init_field.13
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.14
	.type	distortion_fld.14,@function
distortion_fld.14:                      # @distortion_fld.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1910128041, -4(%rbp)   # imm = 0x71DA3DA9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1910128041, -4(%rbp)   # imm = 0x71DA3DA9
	jne	.LBB50_2
.LBB50_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_1
.Lfunc_end50:
	.size	distortion_fld.14, .Lfunc_end50-distortion_fld.14
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.15        # -- Begin function frame_picture.15
	.p2align	4, 0x90
	.type	frame_picture.15,@function
frame_picture.15:                       # @frame_picture.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$375552189, -16(%rbp)   # imm = 0x166278BD
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB51_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB51_6
.LBB51_2:                               # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB51_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB51_5
.LBB51_4:                               # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB51_5:                               # %if.end
	jmp	.LBB51_6
.LBB51_6:                               # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB51_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB51_8:                               # %if.end67
	cmpl	$375552189, -16(%rbp)   # imm = 0x166278BD
	jne	.LBB51_10
.LBB51_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_9
.Lfunc_end51:
	.size	frame_picture.15, .Lfunc_end51-frame_picture.15
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.16
	.type	ReportSP.16,@function
ReportSP.16:                            # @ReportSP.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1885890711, -12(%rbp)  # imm = 0x70686897
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1885890711, -12(%rbp)  # imm = 0x70686897
	jne	.LBB52_2
.LBB52_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_1
.Lfunc_end52:
	.size	ReportSP.16, .Lfunc_end52-ReportSP.16
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.17
.LCPI53_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI53_1:
	.quad	4611686018427387904     # double 2
.LCPI53_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.17,@function
picture_structure_decision.17:          # @picture_structure_decision.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI53_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI53_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$820103863, -36(%rbp)   # imm = 0x30E1CAB7
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI53_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$820103863, -36(%rbp)   # imm = 0x30E1CAB7
	jne	.LBB53_2
.LBB53_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_1
.Lfunc_end53:
	.size	picture_structure_decision.17, .Lfunc_end53-picture_structure_decision.17
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.18
	.type	ReportFirstframe.18,@function
ReportFirstframe.18:                    # @ReportFirstframe.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$975539931, -12(%rbp)   # imm = 0x3A258EDB
	movl	%edi, -8(%rbp)
	movl	%esi, -16(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-16(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB54_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB54_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB54_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_5
.LBB54_4:                               # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -4(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB54_5:                               # %if.end
	jmp	.LBB54_6
.LBB54_6:                               # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$975539931, -12(%rbp)   # imm = 0x3A258EDB
	jne	.LBB54_8
.LBB54_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_7
.Lfunc_end54:
	.size	ReportFirstframe.18, .Lfunc_end54-ReportFirstframe.18
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.19        # -- Begin function MbAffPostProc.19
	.p2align	4, 0x90
	.type	MbAffPostProc.19,@function
MbAffPostProc.19:                       # @MbAffPostProc.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1782474641, -44(%rbp)  # imm = 0x6A3E6791
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB55_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB55_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_5 Depth 2
                                        #       Child Loop BB55_7 Depth 3
                                        #     Child Loop BB55_13 Depth 2
                                        #       Child Loop BB55_15 Depth 3
                                        #     Child Loop BB55_21 Depth 2
                                        #       Child Loop BB55_23 Depth 3
                                        #         Child Loop BB55_25 Depth 4
                                        #       Child Loop BB55_31 Depth 3
                                        #         Child Loop BB55_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB55_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB55_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB55_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB55_5:                               # %for.cond5
                                        #   Parent Loop BB55_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB55_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB55_5 Depth=2
	movl	$0, -4(%rbp)
.LBB55_7:                               # %for.cond8
                                        #   Parent Loop BB55_2 Depth=1
                                        #     Parent Loop BB55_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB55_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB55_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB55_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_7
.LBB55_10:                              # %for.end
                                        #   in Loop: Header=BB55_5 Depth=2
	jmp	.LBB55_11
.LBB55_11:                              # %for.inc20
                                        #   in Loop: Header=BB55_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_5
.LBB55_12:                              # %for.end22
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	$0, -8(%rbp)
.LBB55_13:                              # %for.cond23
                                        #   Parent Loop BB55_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB55_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB55_13 Depth=2
	movl	$0, -4(%rbp)
.LBB55_15:                              # %for.cond26
                                        #   Parent Loop BB55_2 Depth=1
                                        #     Parent Loop BB55_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB55_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB55_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB55_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_15
.LBB55_18:                              # %for.end54
                                        #   in Loop: Header=BB55_13 Depth=2
	jmp	.LBB55_19
.LBB55_19:                              # %for.inc55
                                        #   in Loop: Header=BB55_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_13
.LBB55_20:                              # %for.end57
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB55_21:                              # %for.cond61
                                        #   Parent Loop BB55_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_23 Depth 3
                                        #         Child Loop BB55_25 Depth 4
                                        #       Child Loop BB55_31 Depth 3
                                        #         Child Loop BB55_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB55_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB55_21 Depth=2
	movl	$0, -8(%rbp)
.LBB55_23:                              # %for.cond64
                                        #   Parent Loop BB55_2 Depth=1
                                        #     Parent Loop BB55_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB55_23 Depth=3
	movl	$0, -4(%rbp)
.LBB55_25:                              # %for.cond69
                                        #   Parent Loop BB55_2 Depth=1
                                        #     Parent Loop BB55_21 Depth=2
                                        #       Parent Loop BB55_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB55_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB55_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB55_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_25
.LBB55_28:                              # %for.end87
                                        #   in Loop: Header=BB55_23 Depth=3
	jmp	.LBB55_29
.LBB55_29:                              # %for.inc88
                                        #   in Loop: Header=BB55_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_23
.LBB55_30:                              # %for.end90
                                        #   in Loop: Header=BB55_21 Depth=2
	movl	$0, -8(%rbp)
.LBB55_31:                              # %for.cond91
                                        #   Parent Loop BB55_2 Depth=1
                                        #     Parent Loop BB55_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB55_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB55_31 Depth=3
	movl	$0, -4(%rbp)
.LBB55_33:                              # %for.cond95
                                        #   Parent Loop BB55_2 Depth=1
                                        #     Parent Loop BB55_21 Depth=2
                                        #       Parent Loop BB55_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB55_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB55_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB55_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_33
.LBB55_36:                              # %for.end130
                                        #   in Loop: Header=BB55_31 Depth=3
	jmp	.LBB55_37
.LBB55_37:                              # %for.inc131
                                        #   in Loop: Header=BB55_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_31
.LBB55_38:                              # %for.end133
                                        #   in Loop: Header=BB55_21 Depth=2
	jmp	.LBB55_39
.LBB55_39:                              # %for.inc134
                                        #   in Loop: Header=BB55_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_21
.LBB55_40:                              # %for.end136
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_41
.LBB55_41:                              # %if.end
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_42
.LBB55_42:                              # %for.inc137
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_2
.LBB55_43:                              # %for.end139
	jmp	.LBB55_67
.LBB55_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB55_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_48 Depth 2
                                        #       Child Loop BB55_50 Depth 3
                                        #     Child Loop BB55_56 Depth 2
                                        #       Child Loop BB55_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB55_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB55_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB55_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB55_48:                              # %for.cond149
                                        #   Parent Loop BB55_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB55_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB55_48 Depth=2
	movl	$0, -4(%rbp)
.LBB55_50:                              # %for.cond152
                                        #   Parent Loop BB55_45 Depth=1
                                        #     Parent Loop BB55_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB55_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB55_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB55_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_50
.LBB55_53:                              # %for.end167
                                        #   in Loop: Header=BB55_48 Depth=2
	jmp	.LBB55_54
.LBB55_54:                              # %for.inc168
                                        #   in Loop: Header=BB55_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_48
.LBB55_55:                              # %for.end170
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	$0, -8(%rbp)
.LBB55_56:                              # %for.cond171
                                        #   Parent Loop BB55_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB55_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB55_56 Depth=2
	movl	$0, -4(%rbp)
.LBB55_58:                              # %for.cond174
                                        #   Parent Loop BB55_45 Depth=1
                                        #     Parent Loop BB55_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB55_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB55_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB55_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_58
.LBB55_61:                              # %for.end203
                                        #   in Loop: Header=BB55_56 Depth=2
	jmp	.LBB55_62
.LBB55_62:                              # %for.inc204
                                        #   in Loop: Header=BB55_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_56
.LBB55_63:                              # %for.end206
                                        #   in Loop: Header=BB55_45 Depth=1
	jmp	.LBB55_64
.LBB55_64:                              # %if.end207
                                        #   in Loop: Header=BB55_45 Depth=1
	jmp	.LBB55_65
.LBB55_65:                              # %for.inc208
                                        #   in Loop: Header=BB55_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_45
.LBB55_66:                              # %for.end210
	jmp	.LBB55_67
.LBB55_67:                              # %if.end211
	cmpl	$1782474641, -44(%rbp)  # imm = 0x6A3E6791
	jne	.LBB55_69
.LBB55_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_68
.Lfunc_end55:
	.size	MbAffPostProc.19, .Lfunc_end55-MbAffPostProc.19
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.20
.LCPI56_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.20,@function
init_field.20:                          # @init_field.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$54471679, -16(%rbp)    # imm = 0x33F2BFF
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB56_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB56_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB56_3:                               # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB56_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB56_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB56_6:                               # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB56_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB56_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB56_9:                               # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB56_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB56_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB56_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB56_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB56_15
.LBB56_14:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB56_15:                              # %if.end38
	jmp	.LBB56_23
.LBB56_16:                              # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB56_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB56_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB56_20
.LBB56_19:                              # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB56_20:                              # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB56_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB56_22:                              # %if.end56
	jmp	.LBB56_23
.LBB56_23:                              # %if.end57
	jmp	.LBB56_24
.LBB56_24:                              # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB56_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB56_26:                              # %if.end66
	jmp	.LBB56_77
.LBB56_27:                              # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB56_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB56_29:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB56_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB56_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB56_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_29
.LBB56_32:                              # %for.end
	jmp	.LBB56_38
.LBB56_33:                              # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB56_34:                              # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB56_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB56_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB56_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_34
.LBB56_37:                              # %for.end134
	jmp	.LBB56_38
.LBB56_38:                              # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB56_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB56_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB56_41:                              # %if.end147
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB56_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB56_43:                              # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB56_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB56_46
.LBB56_45:                              # %if.else174
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB56_46:                              # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB56_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB56_48:                              # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB56_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB56_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB56_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB56_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB56_54
.LBB56_53:                              # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB56_54:                              # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB56_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB56_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB56_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB56_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB56_63
.LBB56_59:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB56_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB56_62
.LBB56_61:                              # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB56_62:                              # %cond.end
.LBB56_63:                              # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB56_71
.LBB56_64:                              # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB56_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB56_70
.LBB56_66:                              # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB56_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB56_69
.LBB56_68:                              # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB56_69:                              # %cond.end256
.LBB56_70:                              # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB56_71:                              # %if.end261
	jmp	.LBB56_72
.LBB56_72:                              # %if.end262
	jmp	.LBB56_76
.LBB56_73:                              # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB56_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB56_75:                              # %if.end273
	jmp	.LBB56_76
.LBB56_76:                              # %if.end274
	jmp	.LBB56_77
.LBB56_77:                              # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$54471679, -16(%rbp)    # imm = 0x33F2BFF
	jne	.LBB56_79
.LBB56_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_79:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_78
.Lfunc_end56:
	.size	init_field.20, .Lfunc_end56-init_field.20
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.21
	.type	distortion_fld.21,@function
distortion_fld.21:                      # @distortion_fld.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1502597933, -4(%rbp)   # imm = 0x598FD32D
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1502597933, -4(%rbp)   # imm = 0x598FD32D
	jne	.LBB57_2
.LBB57_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_1
.Lfunc_end57:
	.size	distortion_fld.21, .Lfunc_end57-distortion_fld.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.22
.LCPI58_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.22,@function
init_field.22:                          # @init_field.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$649676560, -16(%rbp)   # imm = 0x26B94710
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB58_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB58_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB58_3:                               # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB58_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB58_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB58_6:                               # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB58_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB58_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB58_9:                               # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB58_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB58_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB58_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB58_15
.LBB58_14:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_15:                              # %if.end38
	jmp	.LBB58_23
.LBB58_16:                              # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB58_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB58_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB58_20
.LBB58_19:                              # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_20:                              # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB58_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB58_22:                              # %if.end56
	jmp	.LBB58_23
.LBB58_23:                              # %if.end57
	jmp	.LBB58_24
.LBB58_24:                              # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB58_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB58_26:                              # %if.end66
	jmp	.LBB58_77
.LBB58_27:                              # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB58_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB58_29:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB58_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB58_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB58_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_29
.LBB58_32:                              # %for.end
	jmp	.LBB58_38
.LBB58_33:                              # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB58_34:                              # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB58_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB58_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_34
.LBB58_37:                              # %for.end134
	jmp	.LBB58_38
.LBB58_38:                              # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB58_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB58_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB58_41:                              # %if.end147
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB58_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB58_43:                              # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB58_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB58_46
.LBB58_45:                              # %if.else174
	vmovsd	.LCPI58_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB58_46:                              # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB58_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB58_48:                              # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB58_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB58_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB58_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB58_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB58_54
.LBB58_53:                              # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_54:                              # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB58_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB58_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB58_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB58_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB58_63
.LBB58_59:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB58_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB58_62
.LBB58_61:                              # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB58_62:                              # %cond.end
.LBB58_63:                              # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB58_71
.LBB58_64:                              # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB58_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB58_70
.LBB58_66:                              # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB58_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB58_69
.LBB58_68:                              # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB58_69:                              # %cond.end256
.LBB58_70:                              # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_71:                              # %if.end261
	jmp	.LBB58_72
.LBB58_72:                              # %if.end262
	jmp	.LBB58_76
.LBB58_73:                              # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB58_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB58_75:                              # %if.end273
	jmp	.LBB58_76
.LBB58_76:                              # %if.end274
	jmp	.LBB58_77
.LBB58_77:                              # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$649676560, -16(%rbp)   # imm = 0x26B94710
	jne	.LBB58_79
.LBB58_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_79:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_78
.Lfunc_end58:
	.size	init_field.22, .Lfunc_end58-init_field.22
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.23
	.type	ReadOneFrame.23,@function
ReadOneFrame.23:                        # @ReadOneFrame.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1903950421, -68(%rbp)  # imm = 0x717BFA55
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -44(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -36(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-44(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB59_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB59_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -40(%rbp)
	movl	-44(%rbp), %eax
	imull	-28(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB59_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB59_4:                               # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB59_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB59_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB59_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB59_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB59_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB59_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB59_26
# %bb.11:                               # %if.then42
	cmpl	$0, -40(%rbp)
	je	.LBB59_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB59_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB59_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB59_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB59_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB59_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB59_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB59_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB59_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB59_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB59_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB59_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB59_24:                              # %if.end85
	jmp	.LBB59_25
.LBB59_25:                              # %if.end86
	jmp	.LBB59_27
.LBB59_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB59_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1903950421, -68(%rbp)  # imm = 0x717BFA55
	jne	.LBB59_29
.LBB59_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_28
.Lfunc_end59:
	.size	ReadOneFrame.23, .Lfunc_end59-ReadOneFrame.23
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.24
	.type	find_distortion.24,@function
find_distortion.24:                     # @find_distortion.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1682960475, -44(%rbp)  # imm = 0x644FF05B
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB60_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB60_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB60_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	$0, -12(%rbp)
.LBB60_4:                               # %for.cond3
                                        #   Parent Loop BB60_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB60_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB60_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB60_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_4
.LBB60_7:                               # %for.end
                                        #   in Loop: Header=BB60_2 Depth=1
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc17
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_2
.LBB60_9:                               # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB60_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB60_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB60_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	$0, -12(%rbp)
.LBB60_13:                              # %for.cond27
                                        #   Parent Loop BB60_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB60_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB60_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB60_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_13
.LBB60_16:                              # %for.end71
                                        #   in Loop: Header=BB60_11 Depth=1
	jmp	.LBB60_17
.LBB60_17:                              # %for.inc72
                                        #   in Loop: Header=BB60_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_11
.LBB60_18:                              # %for.end74
	jmp	.LBB60_19
.LBB60_19:                              # %if.end
	jmp	.LBB60_39
.LBB60_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB60_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB60_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	$0, -12(%rbp)
.LBB60_23:                              # %for.cond80
                                        #   Parent Loop BB60_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB60_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB60_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB60_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_23
.LBB60_26:                              # %for.end104
                                        #   in Loop: Header=BB60_21 Depth=1
	jmp	.LBB60_27
.LBB60_27:                              # %for.inc105
                                        #   in Loop: Header=BB60_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_21
.LBB60_28:                              # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB60_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB60_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB60_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB60_30 Depth=1
	movl	$0, -12(%rbp)
.LBB60_32:                              # %for.cond117
                                        #   Parent Loop BB60_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB60_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB60_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB60_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_32
.LBB60_35:                              # %for.end163
                                        #   in Loop: Header=BB60_30 Depth=1
	jmp	.LBB60_36
.LBB60_36:                              # %for.inc164
                                        #   in Loop: Header=BB60_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_30
.LBB60_37:                              # %for.end166
	jmp	.LBB60_38
.LBB60_38:                              # %if.end167
	jmp	.LBB60_39
.LBB60_39:                              # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1682960475, -44(%rbp)  # imm = 0x644FF05B
	jne	.LBB60_41
.LBB60_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_40
.Lfunc_end60:
	.size	find_distortion.24, .Lfunc_end60-find_distortion.24
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.25      # -- Begin function copy_rdopt_data.25
	.p2align	4, 0x90
	.type	copy_rdopt_data.25,@function
copy_rdopt_data.25:                     # @copy_rdopt_data.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1005040303, -52(%rbp)  # imm = 0x3BE7B2AF
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB61_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB61_4
.LBB61_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB61_4
.LBB61_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB61_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_7 Depth 2
                                        #       Child Loop BB61_9 Depth 3
                                        #         Child Loop BB61_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB61_5 Depth=1
	movl	$0, -8(%rbp)
.LBB61_7:                               # %for.cond17
                                        #   Parent Loop BB61_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_9 Depth 3
                                        #         Child Loop BB61_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB61_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB61_7 Depth=2
	movl	$0, -12(%rbp)
.LBB61_9:                               # %for.cond21
                                        #   Parent Loop BB61_5 Depth=1
                                        #     Parent Loop BB61_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB61_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB61_9 Depth=3
	movl	$0, -16(%rbp)
.LBB61_11:                              # %for.cond25
                                        #   Parent Loop BB61_5 Depth=1
                                        #     Parent Loop BB61_7 Depth=2
                                        #       Parent Loop BB61_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB61_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB61_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB61_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_11
.LBB61_14:                              # %for.end
                                        #   in Loop: Header=BB61_9 Depth=3
	jmp	.LBB61_15
.LBB61_15:                              # %for.inc46
                                        #   in Loop: Header=BB61_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_9
.LBB61_16:                              # %for.end48
                                        #   in Loop: Header=BB61_7 Depth=2
	jmp	.LBB61_17
.LBB61_17:                              # %for.inc49
                                        #   in Loop: Header=BB61_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_7
.LBB61_18:                              # %for.end51
                                        #   in Loop: Header=BB61_5 Depth=1
	jmp	.LBB61_19
.LBB61_19:                              # %for.inc52
                                        #   in Loop: Header=BB61_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_5
.LBB61_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB61_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_23 Depth 2
                                        #       Child Loop BB61_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB61_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB61_21 Depth=1
	movl	$0, -12(%rbp)
.LBB61_23:                              # %for.cond59
                                        #   Parent Loop BB61_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB61_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB61_23 Depth=2
	movl	$0, -16(%rbp)
.LBB61_25:                              # %for.cond63
                                        #   Parent Loop BB61_21 Depth=1
                                        #     Parent Loop BB61_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB61_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB61_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB61_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_25
.LBB61_28:                              # %for.end82
                                        #   in Loop: Header=BB61_23 Depth=2
	jmp	.LBB61_29
.LBB61_29:                              # %for.inc83
                                        #   in Loop: Header=BB61_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_23
.LBB61_30:                              # %for.end85
                                        #   in Loop: Header=BB61_21 Depth=1
	jmp	.LBB61_31
.LBB61_31:                              # %for.inc86
                                        #   in Loop: Header=BB61_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_21
.LBB61_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB61_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB61_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB61_33 Depth=1
	movl	$0, -4(%rbp)
.LBB61_35:                              # %for.cond93
                                        #   Parent Loop BB61_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB61_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB61_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB61_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB61_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB61_38:                              # %if.end
                                        #   in Loop: Header=BB61_35 Depth=2
	jmp	.LBB61_39
.LBB61_39:                              # %for.inc176
                                        #   in Loop: Header=BB61_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_35
.LBB61_40:                              # %for.end178
                                        #   in Loop: Header=BB61_33 Depth=1
	jmp	.LBB61_41
.LBB61_41:                              # %for.inc179
                                        #   in Loop: Header=BB61_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_33
.LBB61_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB61_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	$0, -4(%rbp)
.LBB61_45:                              # %for.cond186
                                        #   Parent Loop BB61_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB61_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB61_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_45
.LBB61_48:                              # %for.end203
                                        #   in Loop: Header=BB61_43 Depth=1
	jmp	.LBB61_49
.LBB61_49:                              # %for.inc204
                                        #   in Loop: Header=BB61_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_43
.LBB61_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB61_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB61_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB61_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	$0, -4(%rbp)
.LBB61_54:                              # %for.cond214
                                        #   Parent Loop BB61_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB61_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB61_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB61_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_54
.LBB61_57:                              # %for.end247
                                        #   in Loop: Header=BB61_52 Depth=1
	jmp	.LBB61_58
.LBB61_58:                              # %for.inc248
                                        #   in Loop: Header=BB61_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_52
.LBB61_59:                              # %for.end250
	jmp	.LBB61_60
.LBB61_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB61_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB61_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB61_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB61_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_61
.LBB61_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB61_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB61_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB61_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB61_68:                              # %for.cond283
                                        #   Parent Loop BB61_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB61_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB61_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_68
.LBB61_71:                              # %for.end306
                                        #   in Loop: Header=BB61_66 Depth=1
	jmp	.LBB61_72
.LBB61_72:                              # %for.inc307
                                        #   in Loop: Header=BB61_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_66
.LBB61_73:                              # %for.end309
	jmp	.LBB61_98
.LBB61_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB61_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB61_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB61_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB61_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB61_79:                              # %for.cond324
                                        #   Parent Loop BB61_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB61_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB61_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_79
.LBB61_82:                              # %for.end341
                                        #   in Loop: Header=BB61_77 Depth=1
	jmp	.LBB61_83
.LBB61_83:                              # %for.inc342
                                        #   in Loop: Header=BB61_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_77
.LBB61_84:                              # %for.end344
	jmp	.LBB61_97
.LBB61_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB61_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB61_96
.LBB61_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB61_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB61_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB61_90:                              # %for.cond359
                                        #   Parent Loop BB61_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB61_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB61_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_90
.LBB61_93:                              # %for.end384
                                        #   in Loop: Header=BB61_88 Depth=1
	jmp	.LBB61_94
.LBB61_94:                              # %for.inc385
                                        #   in Loop: Header=BB61_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_88
.LBB61_95:                              # %for.end387
	jmp	.LBB61_96
.LBB61_96:                              # %if.end388
	jmp	.LBB61_97
.LBB61_97:                              # %if.end389
	jmp	.LBB61_98
.LBB61_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB61_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB61_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB61_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB61_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB61_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB61_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB61_103 Depth=1
	movl	$0, -4(%rbp)
.LBB61_105:                             # %for.cond410
                                        #   Parent Loop BB61_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB61_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB61_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB61_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB61_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB61_109
.LBB61_108:                             # %if.else483
                                        #   in Loop: Header=BB61_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB61_109:                             # %if.end506
                                        #   in Loop: Header=BB61_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB61_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB61_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB61_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB61_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB61_113
.LBB61_112:                             # %if.else568
                                        #   in Loop: Header=BB61_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB61_113:                             # %if.end591
                                        #   in Loop: Header=BB61_105 Depth=2
	jmp	.LBB61_114
.LBB61_114:                             # %if.end592
                                        #   in Loop: Header=BB61_105 Depth=2
	jmp	.LBB61_115
.LBB61_115:                             # %for.inc593
                                        #   in Loop: Header=BB61_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_105
.LBB61_116:                             # %for.end595
                                        #   in Loop: Header=BB61_103 Depth=1
	jmp	.LBB61_117
.LBB61_117:                             # %for.inc596
                                        #   in Loop: Header=BB61_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_103
.LBB61_118:                             # %for.end598
	jmp	.LBB61_130
.LBB61_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB61_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB61_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB61_120 Depth=1
	movl	$0, -4(%rbp)
.LBB61_122:                             # %for.cond604
                                        #   Parent Loop BB61_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB61_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB61_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB61_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB61_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB61_125:                             # %if.end654
                                        #   in Loop: Header=BB61_122 Depth=2
	jmp	.LBB61_126
.LBB61_126:                             # %for.inc655
                                        #   in Loop: Header=BB61_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_122
.LBB61_127:                             # %for.end657
                                        #   in Loop: Header=BB61_120 Depth=1
	jmp	.LBB61_128
.LBB61_128:                             # %for.inc658
                                        #   in Loop: Header=BB61_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_120
.LBB61_129:                             # %for.end660
	jmp	.LBB61_130
.LBB61_130:                             # %if.end661
	jmp	.LBB61_131
.LBB61_131:                             # %if.end662
	cmpl	$1005040303, -52(%rbp)  # imm = 0x3BE7B2AF
	jne	.LBB61_133
.LBB61_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_132
.Lfunc_end61:
	.size	copy_rdopt_data.25, .Lfunc_end61-copy_rdopt_data.25
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.26
	.type	ReportP.26,@function
ReportP.26:                             # @ReportP.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$38207008, -8(%rbp)     # imm = 0x246FE20
	movl	%edi, -4(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$38207008, -8(%rbp)     # imm = 0x246FE20
	jne	.LBB62_2
.LBB62_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_1
.Lfunc_end62:
	.size	ReportP.26, .Lfunc_end62-ReportP.26
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.27              # -- Begin function buf2img.27
	.p2align	4, 0x90
	.type	buf2img.27,@function
buf2img.27:                             # @buf2img.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1605527645, -60(%rbp)  # imm = 0x5FB2685D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB63_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB63_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB63_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB63_6
	jmp	.LBB63_4
.LBB63_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB63_15
	jmp	.LBB63_5
.LBB63_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB63_24
	jmp	.LBB63_33
.LBB63_6:                               # %sw.bb
	movl	$0, -8(%rbp)
.LBB63_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB63_7 Depth=1
	movl	$0, -4(%rbp)
.LBB63_9:                               # %for.cond5
                                        #   Parent Loop BB63_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB63_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB63_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_9
.LBB63_12:                              # %for.end
                                        #   in Loop: Header=BB63_7 Depth=1
	jmp	.LBB63_13
.LBB63_13:                              # %for.inc14
                                        #   in Loop: Header=BB63_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_7
.LBB63_14:                              # %for.end16
	jmp	.LBB63_34
.LBB63_15:                              # %sw.bb17
	movl	$0, -8(%rbp)
.LBB63_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB63_16 Depth=1
	movl	$0, -4(%rbp)
.LBB63_18:                              # %for.cond22
                                        #   Parent Loop BB63_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB63_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB63_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_18
.LBB63_21:                              # %for.end38
                                        #   in Loop: Header=BB63_16 Depth=1
	jmp	.LBB63_22
.LBB63_22:                              # %for.inc39
                                        #   in Loop: Header=BB63_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_16
.LBB63_23:                              # %for.end41
	jmp	.LBB63_34
.LBB63_24:                              # %sw.bb42
	movl	$0, -8(%rbp)
.LBB63_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB63_25 Depth=1
	movl	$0, -4(%rbp)
.LBB63_27:                              # %for.cond47
                                        #   Parent Loop BB63_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB63_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB63_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_27
.LBB63_30:                              # %for.end74
                                        #   in Loop: Header=BB63_25 Depth=1
	jmp	.LBB63_31
.LBB63_31:                              # %for.inc75
                                        #   in Loop: Header=BB63_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_25
.LBB63_32:                              # %for.end77
	jmp	.LBB63_33
.LBB63_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB63_34:                              # %sw.epilog
	jmp	.LBB63_44
.LBB63_35:                              # %if.else
	movl	$0, -8(%rbp)
.LBB63_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB63_36 Depth=1
	movl	$0, -4(%rbp)
.LBB63_38:                              # %for.cond82
                                        #   Parent Loop BB63_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB63_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB63_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB63_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_38
.LBB63_41:                              # %for.end102
                                        #   in Loop: Header=BB63_36 Depth=1
	jmp	.LBB63_42
.LBB63_42:                              # %for.inc103
                                        #   in Loop: Header=BB63_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_36
.LBB63_43:                              # %for.end105
	jmp	.LBB63_44
.LBB63_44:                              # %if.end106
	cmpl	$1605527645, -60(%rbp)  # imm = 0x5FB2685D
	jne	.LBB63_46
.LBB63_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_45
.Lfunc_end63:
	.size	buf2img.27, .Lfunc_end63-buf2img.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.28
.LCPI64_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.28,@function
init_frame.28:                          # @init_frame.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$707534946, -16(%rbp)   # imm = 0x2A2C2062
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB64_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_1
.LBB64_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB64_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB64_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB64_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB64_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB64_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB64_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB64_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB64_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_17
.LBB64_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_17:                              # %if.end32
	jmp	.LBB64_25
.LBB64_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_22
.LBB64_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB64_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB64_24:                              # %if.end50
	jmp	.LBB64_25
.LBB64_25:                              # %if.end51
	jmp	.LBB64_26
.LBB64_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB64_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB64_28:                              # %if.end62
	jmp	.LBB64_72
.LBB64_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB64_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB64_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB64_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB64_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_30
.LBB64_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB64_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB64_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB64_36:                              # %if.end102
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB64_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI64_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB64_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB64_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB64_41
.LBB64_40:                              # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB64_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB64_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB64_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB64_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB64_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_49
.LBB64_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB64_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB64_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB64_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB64_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB64_58
.LBB64_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB64_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB64_57
.LBB64_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB64_57:                              # %cond.end
.LBB64_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB64_66
.LBB64_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB64_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB64_65
.LBB64_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB64_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB64_64
.LBB64_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB64_64:                              # %cond.end209
.LBB64_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_66:                              # %if.end214
	jmp	.LBB64_67
.LBB64_67:                              # %if.end215
	jmp	.LBB64_71
.LBB64_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB64_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB64_70:                              # %if.end226
	jmp	.LBB64_71
.LBB64_71:                              # %if.end227
	jmp	.LBB64_72
.LBB64_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$707534946, -16(%rbp)   # imm = 0x2A2C2062
	jne	.LBB64_74
.LBB64_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_73
.Lfunc_end64:
	.size	init_frame.28, .Lfunc_end64-init_frame.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.29
.LCPI65_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.29,@function
find_snr.29:                            # @find_snr.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$576237996, -48(%rbp)   # imm = 0x2258B1AC
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB65_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB65_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	$0, -4(%rbp)
.LBB65_4:                               # %for.cond8
                                        #   Parent Loop BB65_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB65_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB65_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB65_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_4
.LBB65_7:                               # %for.end
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc22
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_2
.LBB65_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB65_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB65_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB65_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	$0, -4(%rbp)
.LBB65_13:                              # %for.cond33
                                        #   Parent Loop BB65_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB65_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB65_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB65_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_13
.LBB65_16:                              # %for.end76
                                        #   in Loop: Header=BB65_11 Depth=1
	jmp	.LBB65_17
.LBB65_17:                              # %for.inc77
                                        #   in Loop: Header=BB65_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_11
.LBB65_18:                              # %for.end79
	jmp	.LBB65_19
.LBB65_19:                              # %if.end
	jmp	.LBB65_41
.LBB65_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB65_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB65_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB65_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB65_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	$0, -4(%rbp)
.LBB65_25:                              # %for.cond89
                                        #   Parent Loop BB65_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB65_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB65_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_25
.LBB65_28:                              # %for.end112
                                        #   in Loop: Header=BB65_23 Depth=1
	jmp	.LBB65_29
.LBB65_29:                              # %for.inc113
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_23
.LBB65_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB65_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB65_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB65_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	$0, -4(%rbp)
.LBB65_34:                              # %for.cond125
                                        #   Parent Loop BB65_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB65_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB65_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB65_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_34
.LBB65_37:                              # %for.end169
                                        #   in Loop: Header=BB65_32 Depth=1
	jmp	.LBB65_38
.LBB65_38:                              # %for.inc170
                                        #   in Loop: Header=BB65_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_32
.LBB65_39:                              # %for.end172
	jmp	.LBB65_40
.LBB65_40:                              # %if.end173
	jmp	.LBB65_41
.LBB65_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB65_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB65_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB65_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB65_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB65_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB65_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB65_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI65_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB65_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI65_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI65_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB65_51
.LBB65_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB65_51:                              # %if.end219
	jmp	.LBB65_52
.LBB65_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB65_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB65_55
.LBB65_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB65_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB65_61
.LBB65_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB65_60
.LBB65_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB65_60:                              # %if.end394
	jmp	.LBB65_61
.LBB65_61:                              # %if.end395
	cmpl	$576237996, -48(%rbp)   # imm = 0x2258B1AC
	jne	.LBB65_63
.LBB65_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_62
.Lfunc_end65:
	.size	find_snr.29, .Lfunc_end65-find_snr.29
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.30
	.type	writeUnit.30,@function
writeUnit.30:                           # @writeUnit.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$756393910, -16(%rbp)   # imm = 0x2D15A7B6
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB66_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB66_18
.LBB66_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB66_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB66_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB66_6
.LBB66_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB66_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB66_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB66_9
.LBB66_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB66_9:                               # %if.end21
	jmp	.LBB66_17
.LBB66_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB66_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB66_13
.LBB66_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB66_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB66_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB66_16
.LBB66_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB66_16:                              # %if.end39
	jmp	.LBB66_17
.LBB66_17:                              # %if.end40
	jmp	.LBB66_18
.LBB66_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$756393910, -16(%rbp)   # imm = 0x2D15A7B6
	jne	.LBB66_20
.LBB66_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_19
.Lfunc_end66:
	.size	writeUnit.30, .Lfunc_end66-writeUnit.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.31
.LCPI67_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.31,@function
find_snr.31:                            # @find_snr.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$546393607, -52(%rbp)   # imm = 0x20914E07
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB67_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB67_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB67_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	$0, -8(%rbp)
.LBB67_4:                               # %for.cond8
                                        #   Parent Loop BB67_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB67_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB67_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB67_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_4
.LBB67_7:                               # %for.end
                                        #   in Loop: Header=BB67_2 Depth=1
	jmp	.LBB67_8
.LBB67_8:                               # %for.inc22
                                        #   in Loop: Header=BB67_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_2
.LBB67_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB67_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB67_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB67_11 Depth=1
	movl	$0, -8(%rbp)
.LBB67_13:                              # %for.cond33
                                        #   Parent Loop BB67_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB67_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB67_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB67_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_13
.LBB67_16:                              # %for.end76
                                        #   in Loop: Header=BB67_11 Depth=1
	jmp	.LBB67_17
.LBB67_17:                              # %for.inc77
                                        #   in Loop: Header=BB67_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_11
.LBB67_18:                              # %for.end79
	jmp	.LBB67_19
.LBB67_19:                              # %if.end
	jmp	.LBB67_41
.LBB67_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB67_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB67_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB67_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB67_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	$0, -8(%rbp)
.LBB67_25:                              # %for.cond89
                                        #   Parent Loop BB67_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB67_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB67_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB67_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_25
.LBB67_28:                              # %for.end112
                                        #   in Loop: Header=BB67_23 Depth=1
	jmp	.LBB67_29
.LBB67_29:                              # %for.inc113
                                        #   in Loop: Header=BB67_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_23
.LBB67_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB67_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB67_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	$0, -8(%rbp)
.LBB67_34:                              # %for.cond125
                                        #   Parent Loop BB67_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB67_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB67_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB67_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_34
.LBB67_37:                              # %for.end169
                                        #   in Loop: Header=BB67_32 Depth=1
	jmp	.LBB67_38
.LBB67_38:                              # %for.inc170
                                        #   in Loop: Header=BB67_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_32
.LBB67_39:                              # %for.end172
	jmp	.LBB67_40
.LBB67_40:                              # %if.end173
	jmp	.LBB67_41
.LBB67_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB67_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB67_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB67_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB67_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB67_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB67_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB67_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI67_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB67_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI67_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI67_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB67_51
.LBB67_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB67_51:                              # %if.end219
	jmp	.LBB67_52
.LBB67_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB67_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB67_55
.LBB67_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB67_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB67_61
.LBB67_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB67_60
.LBB67_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB67_60:                              # %if.end394
	jmp	.LBB67_61
.LBB67_61:                              # %if.end395
	cmpl	$546393607, -52(%rbp)   # imm = 0x20914E07
	jne	.LBB67_63
.LBB67_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_62
.Lfunc_end67:
	.size	find_snr.31, .Lfunc_end67-find_snr.31
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.32
	.type	copy_motion_vectors_MB.32,@function
copy_motion_vectors_MB.32:              # @copy_motion_vectors_MB.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1361556317, -20(%rbp)  # imm = 0x5127B35D
	movl	$0, -12(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
                                        #       Child Loop BB68_5 Depth 3
                                        #         Child Loop BB68_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB68_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -16(%rbp)
.LBB68_3:                               # %for.cond1
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_5 Depth 3
                                        #         Child Loop BB68_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB68_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	$0, -4(%rbp)
.LBB68_5:                               # %for.cond4
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB68_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB68_5 Depth=3
	movl	$0, -8(%rbp)
.LBB68_7:                               # %for.cond7
                                        #   Parent Loop BB68_1 Depth=1
                                        #     Parent Loop BB68_3 Depth=2
                                        #       Parent Loop BB68_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB68_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB68_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB68_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB68_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB68_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB68_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB68_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB68_12:                              # %if.end
                                        #   in Loop: Header=BB68_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB68_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_7
.LBB68_14:                              # %for.end
                                        #   in Loop: Header=BB68_5 Depth=3
	jmp	.LBB68_15
.LBB68_15:                              # %for.inc359
                                        #   in Loop: Header=BB68_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_5
.LBB68_16:                              # %for.end361
                                        #   in Loop: Header=BB68_3 Depth=2
	jmp	.LBB68_17
.LBB68_17:                              # %for.inc362
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_3
.LBB68_18:                              # %for.end364
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_19
.LBB68_19:                              # %for.inc365
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_1
.LBB68_20:                              # %for.end367
	cmpl	$1361556317, -20(%rbp)  # imm = 0x5127B35D
	jne	.LBB68_22
.LBB68_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_21
.Lfunc_end68:
	.size	copy_motion_vectors_MB.32, .Lfunc_end68-copy_motion_vectors_MB.32
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.33
	.type	ReportP.33,@function
ReportP.33:                             # @ReportP.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1031893345, -12(%rbp)  # imm = 0x3D817161
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1031893345, -12(%rbp)  # imm = 0x3D817161
	jne	.LBB69_2
.LBB69_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_1
.Lfunc_end69:
	.size	ReportP.33, .Lfunc_end69-ReportP.33
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.34
	.type	ReportB.34,@function
ReportB.34:                             # @ReportB.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1619064115, -20(%rbp)  # imm = 0x6080F533
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1619064115, -20(%rbp)  # imm = 0x6080F533
	jne	.LBB70_2
.LBB70_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_1
.Lfunc_end70:
	.size	ReportB.34, .Lfunc_end70-ReportB.34
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.35
	.type	ReadOneFrame.35,@function
ReadOneFrame.35:                        # @ReadOneFrame.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1894051533, -72(%rbp)  # imm = 0x70E4EECD
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -40(%rbp)
	movl	%r9d, -44(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-40(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-76(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-68(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB71_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB71_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB71_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB71_4:                               # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB71_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB71_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB71_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB71_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB71_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB71_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB71_26
# %bb.11:                               # %if.then42
	cmpl	$0, -28(%rbp)
	je	.LBB71_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB71_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB71_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB71_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB71_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB71_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB71_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB71_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB71_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB71_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB71_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -28(%rbp)
	je	.LBB71_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB71_24:                              # %if.end85
	jmp	.LBB71_25
.LBB71_25:                              # %if.end86
	jmp	.LBB71_27
.LBB71_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB71_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1894051533, -72(%rbp)  # imm = 0x70E4EECD
	jne	.LBB71_29
.LBB71_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_28
.Lfunc_end71:
	.size	ReadOneFrame.35, .Lfunc_end71-ReadOneFrame.35
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.36
	.type	writeUnit.36,@function
writeUnit.36:                           # @writeUnit.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$802412421, -16(%rbp)   # imm = 0x2FD3D785
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB72_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB72_18
.LBB72_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB72_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB72_6
.LBB72_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB72_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB72_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB72_9
.LBB72_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB72_9:                               # %if.end21
	jmp	.LBB72_17
.LBB72_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB72_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB72_13
.LBB72_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB72_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB72_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB72_16
.LBB72_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB72_16:                              # %if.end39
	jmp	.LBB72_17
.LBB72_17:                              # %if.end40
	jmp	.LBB72_18
.LBB72_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$802412421, -16(%rbp)   # imm = 0x2FD3D785
	jne	.LBB72_20
.LBB72_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_19
.Lfunc_end72:
	.size	writeUnit.36, .Lfunc_end72-writeUnit.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.37
.LCPI73_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI73_1:
	.quad	4611686018427387904     # double 2
.LCPI73_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.37,@function
picture_structure_decision.37:          # @picture_structure_decision.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI73_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI73_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$501253353, -36(%rbp)   # imm = 0x1DE084E9
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI73_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -44(%rbp)
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$501253353, -36(%rbp)   # imm = 0x1DE084E9
	jne	.LBB73_2
.LBB73_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_1
.Lfunc_end73:
	.size	picture_structure_decision.37, .Lfunc_end73-picture_structure_decision.37
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.38
	.type	PaddAutoCropBorders.38,@function
PaddAutoCropBorders.38:                 # @PaddAutoCropBorders.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1647707535, -36(%rbp)  # imm = 0x6236058F
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB74_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_3:                               # %for.cond1
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB74_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_3
.LBB74_6:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_7
.LBB74_7:                               # %for.inc10
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_1
.LBB74_8:                               # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB74_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB74_9 Depth=1
	movl	$0, -8(%rbp)
.LBB74_11:                              # %for.cond16
                                        #   Parent Loop BB74_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB74_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB74_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB74_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_11
.LBB74_14:                              # %for.end30
                                        #   in Loop: Header=BB74_9 Depth=1
	jmp	.LBB74_15
.LBB74_15:                              # %for.inc31
                                        #   in Loop: Header=BB74_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_9
.LBB74_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB74_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB74_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB74_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB74_18 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB74_20:                              # %for.cond38
                                        #   Parent Loop BB74_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB74_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB74_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB74_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_20
.LBB74_23:                              # %for.end65
                                        #   in Loop: Header=BB74_18 Depth=1
	jmp	.LBB74_24
.LBB74_24:                              # %for.inc66
                                        #   in Loop: Header=BB74_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_18
.LBB74_25:                              # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB74_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB74_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB74_26 Depth=1
	movl	$0, -8(%rbp)
.LBB74_28:                              # %for.cond72
                                        #   Parent Loop BB74_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB74_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB74_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB74_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_28
.LBB74_31:                              # %for.end99
                                        #   in Loop: Header=BB74_26 Depth=1
	jmp	.LBB74_32
.LBB74_32:                              # %for.inc100
                                        #   in Loop: Header=BB74_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_26
.LBB74_33:                              # %for.end102
	jmp	.LBB74_34
.LBB74_34:                              # %if.end
	cmpl	$1647707535, -36(%rbp)  # imm = 0x6236058F
	jne	.LBB74_36
.LBB74_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_35
.Lfunc_end74:
	.size	PaddAutoCropBorders.38, .Lfunc_end74-PaddAutoCropBorders.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.39
.LCPI75_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.39,@function
init_frame.39:                          # @init_frame.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$262116110, -16(%rbp)   # imm = 0xF9F930E
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB75_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_1
.LBB75_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB75_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB75_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB75_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB75_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB75_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB75_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB75_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB75_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB75_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB75_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB75_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB75_17
.LBB75_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB75_17:                              # %if.end32
	jmp	.LBB75_25
.LBB75_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB75_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB75_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB75_22
.LBB75_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB75_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB75_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB75_24:                              # %if.end50
	jmp	.LBB75_25
.LBB75_25:                              # %if.end51
	jmp	.LBB75_26
.LBB75_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB75_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB75_28:                              # %if.end62
	jmp	.LBB75_72
.LBB75_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB75_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB75_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB75_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB75_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_30
.LBB75_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB75_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB75_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB75_36:                              # %if.end102
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB75_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB75_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB75_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB75_41
.LBB75_40:                              # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB75_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB75_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB75_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB75_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB75_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB75_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB75_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB75_49
.LBB75_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB75_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB75_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB75_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB75_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB75_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB75_58
.LBB75_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB75_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB75_57
.LBB75_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB75_57:                              # %cond.end
.LBB75_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB75_66
.LBB75_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB75_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB75_65
.LBB75_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB75_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB75_64
.LBB75_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB75_64:                              # %cond.end209
.LBB75_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB75_66:                              # %if.end214
	jmp	.LBB75_67
.LBB75_67:                              # %if.end215
	jmp	.LBB75_71
.LBB75_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB75_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB75_70:                              # %if.end226
	jmp	.LBB75_71
.LBB75_71:                              # %if.end227
	jmp	.LBB75_72
.LBB75_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$262116110, -16(%rbp)   # imm = 0xF9F930E
	jne	.LBB75_74
.LBB75_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_73
.Lfunc_end75:
	.size	init_frame.39, .Lfunc_end75-init_frame.39
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.40        # -- Begin function MbAffPostProc.40
	.p2align	4, 0x90
	.type	MbAffPostProc.40,@function
MbAffPostProc.40:                       # @MbAffPostProc.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$204695154, -44(%rbp)   # imm = 0xC336672
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB76_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB76_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_5 Depth 2
                                        #       Child Loop BB76_7 Depth 3
                                        #     Child Loop BB76_13 Depth 2
                                        #       Child Loop BB76_15 Depth 3
                                        #     Child Loop BB76_21 Depth 2
                                        #       Child Loop BB76_23 Depth 3
                                        #         Child Loop BB76_25 Depth 4
                                        #       Child Loop BB76_31 Depth 3
                                        #         Child Loop BB76_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB76_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB76_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB76_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB76_5:                               # %for.cond5
                                        #   Parent Loop BB76_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_7 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB76_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB76_5 Depth=2
	movl	$0, -8(%rbp)
.LBB76_7:                               # %for.cond8
                                        #   Parent Loop BB76_2 Depth=1
                                        #     Parent Loop BB76_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB76_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB76_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB76_7 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_7
.LBB76_10:                              # %for.end
                                        #   in Loop: Header=BB76_5 Depth=2
	jmp	.LBB76_11
.LBB76_11:                              # %for.inc20
                                        #   in Loop: Header=BB76_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_5
.LBB76_12:                              # %for.end22
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	$0, -4(%rbp)
.LBB76_13:                              # %for.cond23
                                        #   Parent Loop BB76_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_15 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB76_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB76_13 Depth=2
	movl	$0, -8(%rbp)
.LBB76_15:                              # %for.cond26
                                        #   Parent Loop BB76_2 Depth=1
                                        #     Parent Loop BB76_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB76_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB76_15 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB76_15 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_15
.LBB76_18:                              # %for.end54
                                        #   in Loop: Header=BB76_13 Depth=2
	jmp	.LBB76_19
.LBB76_19:                              # %for.inc55
                                        #   in Loop: Header=BB76_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_13
.LBB76_20:                              # %for.end57
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB76_21:                              # %for.cond61
                                        #   Parent Loop BB76_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_23 Depth 3
                                        #         Child Loop BB76_25 Depth 4
                                        #       Child Loop BB76_31 Depth 3
                                        #         Child Loop BB76_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB76_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB76_21 Depth=2
	movl	$0, -4(%rbp)
.LBB76_23:                              # %for.cond64
                                        #   Parent Loop BB76_2 Depth=1
                                        #     Parent Loop BB76_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_25 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB76_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB76_23 Depth=3
	movl	$0, -8(%rbp)
.LBB76_25:                              # %for.cond69
                                        #   Parent Loop BB76_2 Depth=1
                                        #     Parent Loop BB76_21 Depth=2
                                        #       Parent Loop BB76_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB76_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB76_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB76_25 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_25
.LBB76_28:                              # %for.end87
                                        #   in Loop: Header=BB76_23 Depth=3
	jmp	.LBB76_29
.LBB76_29:                              # %for.inc88
                                        #   in Loop: Header=BB76_23 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_23
.LBB76_30:                              # %for.end90
                                        #   in Loop: Header=BB76_21 Depth=2
	movl	$0, -4(%rbp)
.LBB76_31:                              # %for.cond91
                                        #   Parent Loop BB76_2 Depth=1
                                        #     Parent Loop BB76_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_33 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB76_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB76_31 Depth=3
	movl	$0, -8(%rbp)
.LBB76_33:                              # %for.cond95
                                        #   Parent Loop BB76_2 Depth=1
                                        #     Parent Loop BB76_21 Depth=2
                                        #       Parent Loop BB76_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB76_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB76_33 Depth=4
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB76_33 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_33
.LBB76_36:                              # %for.end130
                                        #   in Loop: Header=BB76_31 Depth=3
	jmp	.LBB76_37
.LBB76_37:                              # %for.inc131
                                        #   in Loop: Header=BB76_31 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_31
.LBB76_38:                              # %for.end133
                                        #   in Loop: Header=BB76_21 Depth=2
	jmp	.LBB76_39
.LBB76_39:                              # %for.inc134
                                        #   in Loop: Header=BB76_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB76_21
.LBB76_40:                              # %for.end136
                                        #   in Loop: Header=BB76_2 Depth=1
	jmp	.LBB76_41
.LBB76_41:                              # %if.end
                                        #   in Loop: Header=BB76_2 Depth=1
	jmp	.LBB76_42
.LBB76_42:                              # %for.inc137
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_2
.LBB76_43:                              # %for.end139
	jmp	.LBB76_67
.LBB76_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB76_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_48 Depth 2
                                        #       Child Loop BB76_50 Depth 3
                                        #     Child Loop BB76_56 Depth 2
                                        #       Child Loop BB76_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB76_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB76_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB76_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB76_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB76_48:                              # %for.cond149
                                        #   Parent Loop BB76_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_50 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB76_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB76_48 Depth=2
	movl	$0, -8(%rbp)
.LBB76_50:                              # %for.cond152
                                        #   Parent Loop BB76_45 Depth=1
                                        #     Parent Loop BB76_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB76_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB76_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB76_50 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_50
.LBB76_53:                              # %for.end167
                                        #   in Loop: Header=BB76_48 Depth=2
	jmp	.LBB76_54
.LBB76_54:                              # %for.inc168
                                        #   in Loop: Header=BB76_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_48
.LBB76_55:                              # %for.end170
                                        #   in Loop: Header=BB76_45 Depth=1
	movl	$0, -4(%rbp)
.LBB76_56:                              # %for.cond171
                                        #   Parent Loop BB76_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_58 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB76_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB76_56 Depth=2
	movl	$0, -8(%rbp)
.LBB76_58:                              # %for.cond174
                                        #   Parent Loop BB76_45 Depth=1
                                        #     Parent Loop BB76_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB76_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB76_58 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB76_58 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_58
.LBB76_61:                              # %for.end203
                                        #   in Loop: Header=BB76_56 Depth=2
	jmp	.LBB76_62
.LBB76_62:                              # %for.inc204
                                        #   in Loop: Header=BB76_56 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_56
.LBB76_63:                              # %for.end206
                                        #   in Loop: Header=BB76_45 Depth=1
	jmp	.LBB76_64
.LBB76_64:                              # %if.end207
                                        #   in Loop: Header=BB76_45 Depth=1
	jmp	.LBB76_65
.LBB76_65:                              # %for.inc208
                                        #   in Loop: Header=BB76_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_45
.LBB76_66:                              # %for.end210
	jmp	.LBB76_67
.LBB76_67:                              # %if.end211
	cmpl	$204695154, -44(%rbp)   # imm = 0xC336672
	jne	.LBB76_69
.LBB76_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_68
.Lfunc_end76:
	.size	MbAffPostProc.40, .Lfunc_end76-MbAffPostProc.40
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.41       # -- Begin function code_a_picture.41
	.p2align	4, 0x90
	.type	code_a_picture.41,@function
code_a_picture.41:                      # @code_a_picture.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$332063224, -28(%rbp)   # imm = 0x13CAE1F8
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB77_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB77_8
.LBB77_2:                               # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB77_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB77_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB77_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB77_7
.LBB77_6:                               # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB77_7:                               # %land.end
.LBB77_8:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB77_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB77_10:                              # %if.end
	jmp	.LBB77_11
.LBB77_11:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB77_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB77_11 Depth=1
	jmp	.LBB77_13
.LBB77_13:                              # %while.cond15
                                        #   Parent Loop BB77_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB77_14
	jmp	.LBB77_15
.LBB77_14:                              # %while.body19
                                        #   in Loop: Header=BB77_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB77_13
.LBB77_15:                              # %while.end
                                        #   in Loop: Header=BB77_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_11
.LBB77_16:                              # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB77_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB77_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB77_19:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB77_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB77_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB77_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_19
.LBB77_22:                              # %for.end
	jmp	.LBB77_23
.LBB77_23:                              # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB77_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB77_25:                              # %if.end34
	cmpl	$332063224, -28(%rbp)   # imm = 0x13CAE1F8
	jne	.LBB77_27
.LBB77_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_26
.Lfunc_end77:
	.size	code_a_picture.41, .Lfunc_end77-code_a_picture.41
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.42
	.type	GenerateFullPelRepresentation.42,@function
GenerateFullPelRepresentation.42:       # @GenerateFullPelRepresentation.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1954158658, -44(%rbp)  # imm = 0x747A1842
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB78_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -28(%rbp)
.LBB78_3:                               # %for.cond1
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB78_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_3
.LBB78_6:                               # %for.end
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_7
.LBB78_7:                               # %for.inc5
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB78_1
.LBB78_8:                               # %for.end7
	cmpl	$1954158658, -44(%rbp)  # imm = 0x747A1842
	jne	.LBB78_10
.LBB78_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_9
.Lfunc_end78:
	.size	GenerateFullPelRepresentation.42, .Lfunc_end78-GenerateFullPelRepresentation.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.43
	.type	ReportNALNonVLCBits.43,@function
ReportNALNonVLCBits.43:                 # @ReportNALNonVLCBits.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1714531771, -4(%rbp)   # imm = 0x6631ADBB
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$1714531771, -4(%rbp)   # imm = 0x6631ADBB
	jne	.LBB79_2
.LBB79_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_1
.Lfunc_end79:
	.size	ReportNALNonVLCBits.43, .Lfunc_end79-ReportNALNonVLCBits.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.44
.LCPI80_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI80_1:
	.quad	4611686018427387904     # double 2
.LCPI80_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.44,@function
picture_structure_decision.44:          # @picture_structure_decision.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI80_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI80_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$385944094, -44(%rbp)   # imm = 0x17010A1E
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI80_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$385944094, -44(%rbp)   # imm = 0x17010A1E
	jne	.LBB80_2
.LBB80_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_1
.Lfunc_end80:
	.size	picture_structure_decision.44, .Lfunc_end80-picture_structure_decision.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.45
.LCPI81_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.45,@function
find_snr.45:                            # @find_snr.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1608380383, -52(%rbp)  # imm = 0x5FDDEFDF
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB81_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB81_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB81_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	$0, -8(%rbp)
.LBB81_4:                               # %for.cond8
                                        #   Parent Loop BB81_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB81_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB81_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB81_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_4
.LBB81_7:                               # %for.end
                                        #   in Loop: Header=BB81_2 Depth=1
	jmp	.LBB81_8
.LBB81_8:                               # %for.inc22
                                        #   in Loop: Header=BB81_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_2
.LBB81_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB81_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB81_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB81_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	$0, -8(%rbp)
.LBB81_13:                              # %for.cond33
                                        #   Parent Loop BB81_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB81_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB81_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB81_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_13
.LBB81_16:                              # %for.end76
                                        #   in Loop: Header=BB81_11 Depth=1
	jmp	.LBB81_17
.LBB81_17:                              # %for.inc77
                                        #   in Loop: Header=BB81_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_11
.LBB81_18:                              # %for.end79
	jmp	.LBB81_19
.LBB81_19:                              # %if.end
	jmp	.LBB81_41
.LBB81_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB81_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB81_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB81_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB81_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	$0, -8(%rbp)
.LBB81_25:                              # %for.cond89
                                        #   Parent Loop BB81_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB81_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB81_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB81_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_25
.LBB81_28:                              # %for.end112
                                        #   in Loop: Header=BB81_23 Depth=1
	jmp	.LBB81_29
.LBB81_29:                              # %for.inc113
                                        #   in Loop: Header=BB81_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_23
.LBB81_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB81_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB81_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB81_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	$0, -8(%rbp)
.LBB81_34:                              # %for.cond125
                                        #   Parent Loop BB81_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB81_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB81_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB81_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_34
.LBB81_37:                              # %for.end169
                                        #   in Loop: Header=BB81_32 Depth=1
	jmp	.LBB81_38
.LBB81_38:                              # %for.inc170
                                        #   in Loop: Header=BB81_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_32
.LBB81_39:                              # %for.end172
	jmp	.LBB81_40
.LBB81_40:                              # %if.end173
	jmp	.LBB81_41
.LBB81_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB81_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB81_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB81_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB81_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB81_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB81_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB81_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI81_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB81_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI81_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI81_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB81_51
.LBB81_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB81_51:                              # %if.end219
	jmp	.LBB81_52
.LBB81_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB81_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB81_55
.LBB81_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB81_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB81_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB81_61
.LBB81_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB81_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB81_60
.LBB81_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB81_60:                              # %if.end394
	jmp	.LBB81_61
.LBB81_61:                              # %if.end395
	cmpl	$1608380383, -52(%rbp)  # imm = 0x5FDDEFDF
	jne	.LBB81_63
.LBB81_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_62
.Lfunc_end81:
	.size	find_snr.45, .Lfunc_end81-find_snr.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.46
	.type	distortion_fld.46,@function
distortion_fld.46:                      # @distortion_fld.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$909727834, -4(%rbp)    # imm = 0x3639585A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$909727834, -4(%rbp)    # imm = 0x3639585A
	jne	.LBB82_2
.LBB82_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_1
.Lfunc_end82:
	.size	distortion_fld.46, .Lfunc_end82-distortion_fld.46
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.47
	.type	ReportNALNonVLCBits.47,@function
ReportNALNonVLCBits.47:                 # @ReportNALNonVLCBits.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1215237200, -4(%rbp)   # imm = 0x486F0C50
	movl	%edi, -12(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$1215237200, -4(%rbp)   # imm = 0x486F0C50
	jne	.LBB83_2
.LBB83_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_1
.Lfunc_end83:
	.size	ReportNALNonVLCBits.47, .Lfunc_end83-ReportNALNonVLCBits.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.48
.LCPI84_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.48,@function
find_snr.48:                            # @find_snr.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$95696911, -52(%rbp)    # imm = 0x5B4380F
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB84_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB84_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB84_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	$0, -4(%rbp)
.LBB84_4:                               # %for.cond8
                                        #   Parent Loop BB84_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB84_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB84_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB84_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_4
.LBB84_7:                               # %for.end
                                        #   in Loop: Header=BB84_2 Depth=1
	jmp	.LBB84_8
.LBB84_8:                               # %for.inc22
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_2
.LBB84_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB84_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB84_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB84_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB84_11 Depth=1
	movl	$0, -4(%rbp)
.LBB84_13:                              # %for.cond33
                                        #   Parent Loop BB84_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB84_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB84_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB84_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_13
.LBB84_16:                              # %for.end76
                                        #   in Loop: Header=BB84_11 Depth=1
	jmp	.LBB84_17
.LBB84_17:                              # %for.inc77
                                        #   in Loop: Header=BB84_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_11
.LBB84_18:                              # %for.end79
	jmp	.LBB84_19
.LBB84_19:                              # %if.end
	jmp	.LBB84_41
.LBB84_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB84_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB84_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB84_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB84_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	$0, -4(%rbp)
.LBB84_25:                              # %for.cond89
                                        #   Parent Loop BB84_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB84_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB84_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB84_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_25
.LBB84_28:                              # %for.end112
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_29
.LBB84_29:                              # %for.inc113
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_23
.LBB84_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB84_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB84_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB84_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB84_32 Depth=1
	movl	$0, -4(%rbp)
.LBB84_34:                              # %for.cond125
                                        #   Parent Loop BB84_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB84_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB84_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB84_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_34
.LBB84_37:                              # %for.end169
                                        #   in Loop: Header=BB84_32 Depth=1
	jmp	.LBB84_38
.LBB84_38:                              # %for.inc170
                                        #   in Loop: Header=BB84_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_32
.LBB84_39:                              # %for.end172
	jmp	.LBB84_40
.LBB84_40:                              # %if.end173
	jmp	.LBB84_41
.LBB84_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB84_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB84_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB84_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB84_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB84_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB84_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB84_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI84_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB84_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI84_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI84_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB84_51
.LBB84_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB84_51:                              # %if.end219
	jmp	.LBB84_52
.LBB84_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB84_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB84_55
.LBB84_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB84_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB84_61
.LBB84_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB84_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB84_60
.LBB84_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB84_60:                              # %if.end394
	jmp	.LBB84_61
.LBB84_61:                              # %if.end395
	cmpl	$95696911, -52(%rbp)    # imm = 0x5B4380F
	jne	.LBB84_63
.LBB84_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_62
.Lfunc_end84:
	.size	find_snr.48, .Lfunc_end84-find_snr.48
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.49        # -- Begin function field_picture.49
	.p2align	4, 0x90
	.type	field_picture.49,@function
field_picture.49:                       # @field_picture.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1098996581, -12(%rbp)  # imm = 0x41815B65
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB85_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB85_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB85_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB85_6
.LBB85_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB85_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB85_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB85_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB85_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB85_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB85_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB85_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB85_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$1098996581, -12(%rbp)  # imm = 0x41815B65
	jne	.LBB85_18
.LBB85_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_17
.Lfunc_end85:
	.size	field_picture.49, .Lfunc_end85-field_picture.49
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.50              # -- Begin function buf2img.50
	.p2align	4, 0x90
	.type	buf2img.50,@function
buf2img.50:                             # @buf2img.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1714481705, -60(%rbp)  # imm = 0x6630EA29
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB86_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB86_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB86_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB86_6
	jmp	.LBB86_4
.LBB86_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB86_15
	jmp	.LBB86_5
.LBB86_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB86_24
	jmp	.LBB86_33
.LBB86_6:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB86_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB86_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB86_7 Depth=1
	movl	$0, -8(%rbp)
.LBB86_9:                               # %for.cond5
                                        #   Parent Loop BB86_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB86_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB86_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_9
.LBB86_12:                              # %for.end
                                        #   in Loop: Header=BB86_7 Depth=1
	jmp	.LBB86_13
.LBB86_13:                              # %for.inc14
                                        #   in Loop: Header=BB86_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_7
.LBB86_14:                              # %for.end16
	jmp	.LBB86_34
.LBB86_15:                              # %sw.bb17
	movl	$0, -4(%rbp)
.LBB86_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB86_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB86_16 Depth=1
	movl	$0, -8(%rbp)
.LBB86_18:                              # %for.cond22
                                        #   Parent Loop BB86_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB86_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB86_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_18
.LBB86_21:                              # %for.end38
                                        #   in Loop: Header=BB86_16 Depth=1
	jmp	.LBB86_22
.LBB86_22:                              # %for.inc39
                                        #   in Loop: Header=BB86_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_16
.LBB86_23:                              # %for.end41
	jmp	.LBB86_34
.LBB86_24:                              # %sw.bb42
	movl	$0, -4(%rbp)
.LBB86_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB86_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB86_25 Depth=1
	movl	$0, -8(%rbp)
.LBB86_27:                              # %for.cond47
                                        #   Parent Loop BB86_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB86_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB86_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_27
.LBB86_30:                              # %for.end74
                                        #   in Loop: Header=BB86_25 Depth=1
	jmp	.LBB86_31
.LBB86_31:                              # %for.inc75
                                        #   in Loop: Header=BB86_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_25
.LBB86_32:                              # %for.end77
	jmp	.LBB86_33
.LBB86_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB86_34:                              # %sw.epilog
	jmp	.LBB86_44
.LBB86_35:                              # %if.else
	movl	$0, -4(%rbp)
.LBB86_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB86_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB86_36 Depth=1
	movl	$0, -8(%rbp)
.LBB86_38:                              # %for.cond82
                                        #   Parent Loop BB86_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB86_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB86_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB86_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_38
.LBB86_41:                              # %for.end102
                                        #   in Loop: Header=BB86_36 Depth=1
	jmp	.LBB86_42
.LBB86_42:                              # %for.inc103
                                        #   in Loop: Header=BB86_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_36
.LBB86_43:                              # %for.end105
	jmp	.LBB86_44
.LBB86_44:                              # %if.end106
	cmpl	$1714481705, -60(%rbp)  # imm = 0x6630EA29
	jne	.LBB86_46
.LBB86_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_45
.Lfunc_end86:
	.size	buf2img.50, .Lfunc_end86-buf2img.50
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.51      # -- Begin function copy_rdopt_data.51
	.p2align	4, 0x90
	.type	copy_rdopt_data.51,@function
copy_rdopt_data.51:                     # @copy_rdopt_data.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$138981277, -52(%rbp)   # imm = 0x848AF9D
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB87_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB87_4
.LBB87_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_4
.LBB87_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB87_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_7 Depth 2
                                        #       Child Loop BB87_9 Depth 3
                                        #         Child Loop BB87_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB87_5 Depth=1
	movl	$0, -8(%rbp)
.LBB87_7:                               # %for.cond17
                                        #   Parent Loop BB87_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_9 Depth 3
                                        #         Child Loop BB87_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB87_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB87_7 Depth=2
	movl	$0, -12(%rbp)
.LBB87_9:                               # %for.cond21
                                        #   Parent Loop BB87_5 Depth=1
                                        #     Parent Loop BB87_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB87_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB87_9 Depth=3
	movl	$0, -16(%rbp)
.LBB87_11:                              # %for.cond25
                                        #   Parent Loop BB87_5 Depth=1
                                        #     Parent Loop BB87_7 Depth=2
                                        #       Parent Loop BB87_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB87_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB87_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB87_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_11
.LBB87_14:                              # %for.end
                                        #   in Loop: Header=BB87_9 Depth=3
	jmp	.LBB87_15
.LBB87_15:                              # %for.inc46
                                        #   in Loop: Header=BB87_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_9
.LBB87_16:                              # %for.end48
                                        #   in Loop: Header=BB87_7 Depth=2
	jmp	.LBB87_17
.LBB87_17:                              # %for.inc49
                                        #   in Loop: Header=BB87_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_7
.LBB87_18:                              # %for.end51
                                        #   in Loop: Header=BB87_5 Depth=1
	jmp	.LBB87_19
.LBB87_19:                              # %for.inc52
                                        #   in Loop: Header=BB87_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_5
.LBB87_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB87_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_23 Depth 2
                                        #       Child Loop BB87_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB87_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB87_21 Depth=1
	movl	$0, -12(%rbp)
.LBB87_23:                              # %for.cond59
                                        #   Parent Loop BB87_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB87_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB87_23 Depth=2
	movl	$0, -16(%rbp)
.LBB87_25:                              # %for.cond63
                                        #   Parent Loop BB87_21 Depth=1
                                        #     Parent Loop BB87_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB87_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB87_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB87_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_25
.LBB87_28:                              # %for.end82
                                        #   in Loop: Header=BB87_23 Depth=2
	jmp	.LBB87_29
.LBB87_29:                              # %for.inc83
                                        #   in Loop: Header=BB87_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_23
.LBB87_30:                              # %for.end85
                                        #   in Loop: Header=BB87_21 Depth=1
	jmp	.LBB87_31
.LBB87_31:                              # %for.inc86
                                        #   in Loop: Header=BB87_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_21
.LBB87_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB87_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB87_33 Depth=1
	movl	$0, -4(%rbp)
.LBB87_35:                              # %for.cond93
                                        #   Parent Loop BB87_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB87_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB87_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB87_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB87_38:                              # %if.end
                                        #   in Loop: Header=BB87_35 Depth=2
	jmp	.LBB87_39
.LBB87_39:                              # %for.inc176
                                        #   in Loop: Header=BB87_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_35
.LBB87_40:                              # %for.end178
                                        #   in Loop: Header=BB87_33 Depth=1
	jmp	.LBB87_41
.LBB87_41:                              # %for.inc179
                                        #   in Loop: Header=BB87_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_33
.LBB87_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB87_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB87_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB87_43 Depth=1
	movl	$0, -4(%rbp)
.LBB87_45:                              # %for.cond186
                                        #   Parent Loop BB87_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB87_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB87_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB87_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_45
.LBB87_48:                              # %for.end203
                                        #   in Loop: Header=BB87_43 Depth=1
	jmp	.LBB87_49
.LBB87_49:                              # %for.inc204
                                        #   in Loop: Header=BB87_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_43
.LBB87_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB87_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB87_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB87_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB87_52 Depth=1
	movl	$0, -4(%rbp)
.LBB87_54:                              # %for.cond214
                                        #   Parent Loop BB87_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB87_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB87_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB87_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_54
.LBB87_57:                              # %for.end247
                                        #   in Loop: Header=BB87_52 Depth=1
	jmp	.LBB87_58
.LBB87_58:                              # %for.inc248
                                        #   in Loop: Header=BB87_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_52
.LBB87_59:                              # %for.end250
	jmp	.LBB87_60
.LBB87_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB87_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB87_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB87_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB87_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_61
.LBB87_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB87_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB87_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB87_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB87_68:                              # %for.cond283
                                        #   Parent Loop BB87_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB87_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB87_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_68
.LBB87_71:                              # %for.end306
                                        #   in Loop: Header=BB87_66 Depth=1
	jmp	.LBB87_72
.LBB87_72:                              # %for.inc307
                                        #   in Loop: Header=BB87_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_66
.LBB87_73:                              # %for.end309
	jmp	.LBB87_98
.LBB87_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB87_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB87_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB87_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB87_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB87_79:                              # %for.cond324
                                        #   Parent Loop BB87_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB87_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB87_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_79
.LBB87_82:                              # %for.end341
                                        #   in Loop: Header=BB87_77 Depth=1
	jmp	.LBB87_83
.LBB87_83:                              # %for.inc342
                                        #   in Loop: Header=BB87_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_77
.LBB87_84:                              # %for.end344
	jmp	.LBB87_97
.LBB87_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB87_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB87_96
.LBB87_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB87_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB87_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB87_90:                              # %for.cond359
                                        #   Parent Loop BB87_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB87_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB87_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_90
.LBB87_93:                              # %for.end384
                                        #   in Loop: Header=BB87_88 Depth=1
	jmp	.LBB87_94
.LBB87_94:                              # %for.inc385
                                        #   in Loop: Header=BB87_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_88
.LBB87_95:                              # %for.end387
	jmp	.LBB87_96
.LBB87_96:                              # %if.end388
	jmp	.LBB87_97
.LBB87_97:                              # %if.end389
	jmp	.LBB87_98
.LBB87_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB87_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB87_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB87_103 Depth=1
	movl	$0, -4(%rbp)
.LBB87_105:                             # %for.cond410
                                        #   Parent Loop BB87_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB87_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB87_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB87_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB87_109
.LBB87_108:                             # %if.else483
                                        #   in Loop: Header=BB87_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB87_109:                             # %if.end506
                                        #   in Loop: Header=BB87_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB87_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB87_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB87_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB87_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB87_113
.LBB87_112:                             # %if.else568
                                        #   in Loop: Header=BB87_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB87_113:                             # %if.end591
                                        #   in Loop: Header=BB87_105 Depth=2
	jmp	.LBB87_114
.LBB87_114:                             # %if.end592
                                        #   in Loop: Header=BB87_105 Depth=2
	jmp	.LBB87_115
.LBB87_115:                             # %for.inc593
                                        #   in Loop: Header=BB87_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_105
.LBB87_116:                             # %for.end595
                                        #   in Loop: Header=BB87_103 Depth=1
	jmp	.LBB87_117
.LBB87_117:                             # %for.inc596
                                        #   in Loop: Header=BB87_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_103
.LBB87_118:                             # %for.end598
	jmp	.LBB87_130
.LBB87_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB87_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB87_120 Depth=1
	movl	$0, -4(%rbp)
.LBB87_122:                             # %for.cond604
                                        #   Parent Loop BB87_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB87_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB87_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB87_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB87_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB87_125:                             # %if.end654
                                        #   in Loop: Header=BB87_122 Depth=2
	jmp	.LBB87_126
.LBB87_126:                             # %for.inc655
                                        #   in Loop: Header=BB87_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_122
.LBB87_127:                             # %for.end657
                                        #   in Loop: Header=BB87_120 Depth=1
	jmp	.LBB87_128
.LBB87_128:                             # %for.inc658
                                        #   in Loop: Header=BB87_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_120
.LBB87_129:                             # %for.end660
	jmp	.LBB87_130
.LBB87_130:                             # %if.end661
	jmp	.LBB87_131
.LBB87_131:                             # %if.end662
	cmpl	$138981277, -52(%rbp)   # imm = 0x848AF9D
	jne	.LBB87_133
.LBB87_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_132
.Lfunc_end87:
	.size	copy_rdopt_data.51, .Lfunc_end87-copy_rdopt_data.51
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.52        # -- Begin function MbAffPostProc.52
	.p2align	4, 0x90
	.type	MbAffPostProc.52,@function
MbAffPostProc.52:                       # @MbAffPostProc.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$328019767, -44(%rbp)   # imm = 0x138D2F37
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB88_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB88_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_5 Depth 2
                                        #       Child Loop BB88_7 Depth 3
                                        #     Child Loop BB88_13 Depth 2
                                        #       Child Loop BB88_15 Depth 3
                                        #     Child Loop BB88_21 Depth 2
                                        #       Child Loop BB88_23 Depth 3
                                        #         Child Loop BB88_25 Depth 4
                                        #       Child Loop BB88_31 Depth 3
                                        #         Child Loop BB88_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB88_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB88_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB88_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB88_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB88_5:                               # %for.cond5
                                        #   Parent Loop BB88_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_7 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB88_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB88_5 Depth=2
	movl	$0, -8(%rbp)
.LBB88_7:                               # %for.cond8
                                        #   Parent Loop BB88_2 Depth=1
                                        #     Parent Loop BB88_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB88_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB88_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB88_7 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_7
.LBB88_10:                              # %for.end
                                        #   in Loop: Header=BB88_5 Depth=2
	jmp	.LBB88_11
.LBB88_11:                              # %for.inc20
                                        #   in Loop: Header=BB88_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_5
.LBB88_12:                              # %for.end22
                                        #   in Loop: Header=BB88_2 Depth=1
	movl	$0, -4(%rbp)
.LBB88_13:                              # %for.cond23
                                        #   Parent Loop BB88_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_15 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB88_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB88_13 Depth=2
	movl	$0, -8(%rbp)
.LBB88_15:                              # %for.cond26
                                        #   Parent Loop BB88_2 Depth=1
                                        #     Parent Loop BB88_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB88_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB88_15 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB88_15 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_15
.LBB88_18:                              # %for.end54
                                        #   in Loop: Header=BB88_13 Depth=2
	jmp	.LBB88_19
.LBB88_19:                              # %for.inc55
                                        #   in Loop: Header=BB88_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_13
.LBB88_20:                              # %for.end57
                                        #   in Loop: Header=BB88_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB88_21:                              # %for.cond61
                                        #   Parent Loop BB88_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_23 Depth 3
                                        #         Child Loop BB88_25 Depth 4
                                        #       Child Loop BB88_31 Depth 3
                                        #         Child Loop BB88_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB88_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB88_21 Depth=2
	movl	$0, -4(%rbp)
.LBB88_23:                              # %for.cond64
                                        #   Parent Loop BB88_2 Depth=1
                                        #     Parent Loop BB88_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_25 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB88_23 Depth=3
	movl	$0, -8(%rbp)
.LBB88_25:                              # %for.cond69
                                        #   Parent Loop BB88_2 Depth=1
                                        #     Parent Loop BB88_21 Depth=2
                                        #       Parent Loop BB88_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB88_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB88_25 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_25
.LBB88_28:                              # %for.end87
                                        #   in Loop: Header=BB88_23 Depth=3
	jmp	.LBB88_29
.LBB88_29:                              # %for.inc88
                                        #   in Loop: Header=BB88_23 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_23
.LBB88_30:                              # %for.end90
                                        #   in Loop: Header=BB88_21 Depth=2
	movl	$0, -4(%rbp)
.LBB88_31:                              # %for.cond91
                                        #   Parent Loop BB88_2 Depth=1
                                        #     Parent Loop BB88_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_33 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB88_31 Depth=3
	movl	$0, -8(%rbp)
.LBB88_33:                              # %for.cond95
                                        #   Parent Loop BB88_2 Depth=1
                                        #     Parent Loop BB88_21 Depth=2
                                        #       Parent Loop BB88_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB88_33 Depth=4
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB88_33 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_33
.LBB88_36:                              # %for.end130
                                        #   in Loop: Header=BB88_31 Depth=3
	jmp	.LBB88_37
.LBB88_37:                              # %for.inc131
                                        #   in Loop: Header=BB88_31 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_31
.LBB88_38:                              # %for.end133
                                        #   in Loop: Header=BB88_21 Depth=2
	jmp	.LBB88_39
.LBB88_39:                              # %for.inc134
                                        #   in Loop: Header=BB88_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_21
.LBB88_40:                              # %for.end136
                                        #   in Loop: Header=BB88_2 Depth=1
	jmp	.LBB88_41
.LBB88_41:                              # %if.end
                                        #   in Loop: Header=BB88_2 Depth=1
	jmp	.LBB88_42
.LBB88_42:                              # %for.inc137
                                        #   in Loop: Header=BB88_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_2
.LBB88_43:                              # %for.end139
	jmp	.LBB88_67
.LBB88_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB88_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_48 Depth 2
                                        #       Child Loop BB88_50 Depth 3
                                        #     Child Loop BB88_56 Depth 2
                                        #       Child Loop BB88_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB88_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB88_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB88_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB88_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB88_48:                              # %for.cond149
                                        #   Parent Loop BB88_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_50 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB88_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB88_48 Depth=2
	movl	$0, -8(%rbp)
.LBB88_50:                              # %for.cond152
                                        #   Parent Loop BB88_45 Depth=1
                                        #     Parent Loop BB88_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB88_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB88_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB88_50 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_50
.LBB88_53:                              # %for.end167
                                        #   in Loop: Header=BB88_48 Depth=2
	jmp	.LBB88_54
.LBB88_54:                              # %for.inc168
                                        #   in Loop: Header=BB88_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_48
.LBB88_55:                              # %for.end170
                                        #   in Loop: Header=BB88_45 Depth=1
	movl	$0, -4(%rbp)
.LBB88_56:                              # %for.cond171
                                        #   Parent Loop BB88_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_58 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB88_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB88_56 Depth=2
	movl	$0, -8(%rbp)
.LBB88_58:                              # %for.cond174
                                        #   Parent Loop BB88_45 Depth=1
                                        #     Parent Loop BB88_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB88_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB88_58 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB88_58 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_58
.LBB88_61:                              # %for.end203
                                        #   in Loop: Header=BB88_56 Depth=2
	jmp	.LBB88_62
.LBB88_62:                              # %for.inc204
                                        #   in Loop: Header=BB88_56 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_56
.LBB88_63:                              # %for.end206
                                        #   in Loop: Header=BB88_45 Depth=1
	jmp	.LBB88_64
.LBB88_64:                              # %if.end207
                                        #   in Loop: Header=BB88_45 Depth=1
	jmp	.LBB88_65
.LBB88_65:                              # %for.inc208
                                        #   in Loop: Header=BB88_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_45
.LBB88_66:                              # %for.end210
	jmp	.LBB88_67
.LBB88_67:                              # %if.end211
	cmpl	$328019767, -44(%rbp)   # imm = 0x138D2F37
	jne	.LBB88_69
.LBB88_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_68
.Lfunc_end88:
	.size	MbAffPostProc.52, .Lfunc_end88-MbAffPostProc.52
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.53   # -- Begin function UnifiedOneForthPix.53
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.53,@function
UnifiedOneForthPix.53:                  # @UnifiedOneForthPix.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$782152543, -108(%rbp)  # imm = 0x2E9EB35F
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB89_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB89_3
.LBB89_2:                               # %if.then
	jmp	.LBB89_266
.LBB89_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB89_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB89_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB89_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB89_11
.LBB89_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB89_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB89_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB89_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB89_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB89_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB89_14:                              # %for.cond49
                                        #   Parent Loop BB89_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB89_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB89_18
.LBB89_17:                              # %cond.false
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-48(%rbp), %eax
.LBB89_18:                              # %cond.end
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_24
.LBB89_20:                              # %cond.false63
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB89_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB89_23
.LBB89_22:                              # %cond.false71
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-48(%rbp), %eax
.LBB89_23:                              # %cond.end72
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_24:                              # %cond.end74
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB89_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB89_27
.LBB89_26:                              # %cond.false83
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %edx
.LBB89_27:                              # %cond.end84
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB89_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB89_33
.LBB89_29:                              # %cond.false89
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB89_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB89_32
.LBB89_31:                              # %cond.false97
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %edx
.LBB89_32:                              # %cond.end98
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_33:                              # %cond.end100
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB89_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB89_36
.LBB89_35:                              # %cond.false115
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB89_36:                              # %cond.end117
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB89_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB89_42
.LBB89_38:                              # %cond.false122
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB89_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB89_41
.LBB89_40:                              # %cond.false131
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB89_41:                              # %cond.end133
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_42:                              # %cond.end135
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB89_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB89_45
.LBB89_44:                              # %cond.false152
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB89_45:                              # %cond.end154
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB89_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB89_51
.LBB89_47:                              # %cond.false159
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB89_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB89_50
.LBB89_49:                              # %cond.false168
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB89_50:                              # %cond.end170
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_51:                              # %cond.end172
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB89_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB89_54
.LBB89_53:                              # %cond.false187
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB89_54:                              # %cond.end189
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB89_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB89_60
.LBB89_56:                              # %cond.false194
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB89_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB89_59
.LBB89_58:                              # %cond.false203
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB89_59:                              # %cond.end205
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_60:                              # %cond.end207
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB89_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB89_63
.LBB89_62:                              # %cond.false225
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB89_63:                              # %cond.end227
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB89_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB89_69
.LBB89_65:                              # %cond.false232
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB89_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB89_68
.LBB89_67:                              # %cond.false241
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB89_68:                              # %cond.end243
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_69:                              # %cond.end245
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB89_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB89_72
.LBB89_71:                              # %cond.false260
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB89_72:                              # %cond.end262
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB89_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB89_78
.LBB89_74:                              # %cond.false267
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB89_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB89_77
.LBB89_76:                              # %cond.false276
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB89_77:                              # %cond.end278
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_78:                              # %cond.end280
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB89_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB89_81
.LBB89_80:                              # %cond.false297
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB89_81:                              # %cond.end298
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB89_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB89_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB89_87
.LBB89_83:                              # %cond.false303
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB89_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB89_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB89_86
.LBB89_85:                              # %cond.false311
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB89_86:                              # %cond.end312
                                        #   in Loop: Header=BB89_14 Depth=2
.LBB89_87:                              # %cond.end314
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_14
.LBB89_89:                              # %for.end
                                        #   in Loop: Header=BB89_12 Depth=1
	jmp	.LBB89_90
.LBB89_90:                              # %for.inc336
                                        #   in Loop: Header=BB89_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB89_12
.LBB89_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB89_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB89_92 Depth=1
	movl	$0, -48(%rbp)
.LBB89_94:                              # %for.cond346
                                        #   Parent Loop BB89_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB89_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB89_98
.LBB89_97:                              # %cond.false364
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB89_98:                              # %cond.end366
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB89_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB89_101
.LBB89_100:                             # %cond.false378
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB89_101:                             # %cond.end380
                                        #   in Loop: Header=BB89_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB89_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB89_104
.LBB89_103:                             # %cond.false390
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB89_104:                             # %cond.end392
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB89_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB89_107
.LBB89_106:                             # %cond.false405
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB89_107:                             # %cond.end407
                                        #   in Loop: Header=BB89_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB89_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB89_110
.LBB89_109:                             # %cond.false417
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB89_110:                             # %cond.end419
                                        #   in Loop: Header=BB89_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB89_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_113
.LBB89_112:                             # %cond.false442
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_113:                             # %cond.end449
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_119
.LBB89_115:                             # %cond.false454
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB89_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_118
.LBB89_117:                             # %cond.false466
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB89_118:                             # %cond.end473
                                        #   in Loop: Header=BB89_94 Depth=2
.LBB89_119:                             # %cond.end475
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB89_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_122
.LBB89_121:                             # %cond.false490
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB89_122:                             # %cond.end493
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB89_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB89_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_128
.LBB89_124:                             # %cond.false498
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB89_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB89_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_127
.LBB89_126:                             # %cond.false506
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB89_127:                             # %cond.end509
                                        #   in Loop: Header=BB89_94 Depth=2
.LBB89_128:                             # %cond.end511
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB89_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB89_94
.LBB89_130:                             # %for.end516
                                        #   in Loop: Header=BB89_92 Depth=1
	jmp	.LBB89_131
.LBB89_131:                             # %for.inc517
                                        #   in Loop: Header=BB89_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_92
.LBB89_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB89_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB89_133 Depth=1
	movl	$0, -44(%rbp)
.LBB89_135:                             # %for.cond533
                                        #   Parent Loop BB89_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB89_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_139
.LBB89_138:                             # %cond.false553
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB89_139:                             # %cond.end555
                                        #   in Loop: Header=BB89_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB89_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_145
.LBB89_141:                             # %cond.false567
                                        #   in Loop: Header=BB89_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_144
.LBB89_143:                             # %cond.false579
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB89_144:                             # %cond.end581
                                        #   in Loop: Header=BB89_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_145:                             # %cond.end589
                                        #   in Loop: Header=BB89_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB89_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_157
.LBB89_147:                             # %cond.false594
                                        #   in Loop: Header=BB89_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_150
.LBB89_149:                             # %cond.false607
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB89_150:                             # %cond.end609
                                        #   in Loop: Header=BB89_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB89_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_156
.LBB89_152:                             # %cond.false621
                                        #   in Loop: Header=BB89_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_155
.LBB89_154:                             # %cond.false633
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB89_155:                             # %cond.end635
                                        #   in Loop: Header=BB89_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_156:                             # %cond.end643
                                        #   in Loop: Header=BB89_135 Depth=2
.LBB89_157:                             # %cond.end645
                                        #   in Loop: Header=BB89_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB89_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_135
.LBB89_159:                             # %for.end650
                                        #   in Loop: Header=BB89_133 Depth=1
	jmp	.LBB89_160
.LBB89_160:                             # %for.inc651
                                        #   in Loop: Header=BB89_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB89_133
.LBB89_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB89_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB89_162 Depth=1
	movl	$0, -48(%rbp)
.LBB89_164:                             # %for.cond659
                                        #   Parent Loop BB89_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB89_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_169
.LBB89_168:                             # %cond.false681
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_169:                             # %cond.end683
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_175
.LBB89_171:                             # %cond.false696
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_174
.LBB89_173:                             # %cond.false707
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_174:                             # %cond.end709
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_175:                             # %cond.end718
                                        #   in Loop: Header=BB89_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB89_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_187
.LBB89_177:                             # %cond.false723
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_180
.LBB89_179:                             # %cond.false735
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_180:                             # %cond.end737
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_186
.LBB89_182:                             # %cond.false750
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_185
.LBB89_184:                             # %cond.false761
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_185:                             # %cond.end763
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_186:                             # %cond.end772
                                        #   in Loop: Header=BB89_164 Depth=2
.LBB89_187:                             # %cond.end774
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB89_261
.LBB89_188:                             # %if.else
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB89_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB89_192
.LBB89_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB89_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB89_226
.LBB89_192:                             # %if.then791
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_195
.LBB89_194:                             # %cond.false803
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_195:                             # %cond.end805
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_198
.LBB89_197:                             # %cond.false816
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_198:                             # %cond.end818
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_207
.LBB89_200:                             # %cond.false832
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_203
.LBB89_202:                             # %cond.false840
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_203:                             # %cond.end842
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_206
.LBB89_205:                             # %cond.false853
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_206:                             # %cond.end855
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_207:                             # %cond.end865
                                        #   in Loop: Header=BB89_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB89_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_225
.LBB89_209:                             # %cond.false870
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_212
.LBB89_211:                             # %cond.false879
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_212:                             # %cond.end881
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_215
.LBB89_214:                             # %cond.false892
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_215:                             # %cond.end894
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_224
.LBB89_217:                             # %cond.false908
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_220
.LBB89_219:                             # %cond.false916
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_220:                             # %cond.end918
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_223
.LBB89_222:                             # %cond.false929
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_223:                             # %cond.end931
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_224:                             # %cond.end941
                                        #   in Loop: Header=BB89_164 Depth=2
.LBB89_225:                             # %cond.end943
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB89_260
.LBB89_226:                             # %if.else946
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_229
.LBB89_228:                             # %cond.false962
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_229:                             # %cond.end964
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_232
.LBB89_231:                             # %cond.false973
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_232:                             # %cond.end975
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_241
.LBB89_234:                             # %cond.false987
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_237
.LBB89_236:                             # %cond.false999
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_237:                             # %cond.end1001
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_240
.LBB89_239:                             # %cond.false1010
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_240:                             # %cond.end1012
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_241:                             # %cond.end1020
                                        #   in Loop: Header=BB89_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB89_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB89_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_259
.LBB89_243:                             # %cond.false1025
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_246
.LBB89_245:                             # %cond.false1038
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_246:                             # %cond.end1040
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_249
.LBB89_248:                             # %cond.false1049
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_249:                             # %cond.end1051
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB89_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB89_258
.LBB89_251:                             # %cond.false1063
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB89_254
.LBB89_253:                             # %cond.false1075
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB89_254:                             # %cond.end1077
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB89_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB89_257
.LBB89_256:                             # %cond.false1086
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB89_257:                             # %cond.end1088
                                        #   in Loop: Header=BB89_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB89_258:                             # %cond.end1096
                                        #   in Loop: Header=BB89_164 Depth=2
.LBB89_259:                             # %cond.end1098
                                        #   in Loop: Header=BB89_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB89_260:                             # %if.end1101
                                        #   in Loop: Header=BB89_164 Depth=2
	jmp	.LBB89_261
.LBB89_261:                             # %if.end1102
                                        #   in Loop: Header=BB89_164 Depth=2
	jmp	.LBB89_262
.LBB89_262:                             # %for.inc1103
                                        #   in Loop: Header=BB89_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB89_164
.LBB89_263:                             # %for.end1105
                                        #   in Loop: Header=BB89_162 Depth=1
	jmp	.LBB89_264
.LBB89_264:                             # %for.inc1106
                                        #   in Loop: Header=BB89_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB89_162
.LBB89_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB89_266:                             # %return
	cmpl	$782152543, -108(%rbp)  # imm = 0x2E9EB35F
	jne	.LBB89_268
.LBB89_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_267
.Lfunc_end89:
	.size	UnifiedOneForthPix.53, .Lfunc_end89-UnifiedOneForthPix.53
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.54
	.type	PaddAutoCropBorders.54,@function
PaddAutoCropBorders.54:                 # @PaddAutoCropBorders.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$575551146, -28(%rbp)   # imm = 0x224E36AA
	movl	%edi, -32(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB90_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_3:                               # %for.cond1
                                        #   Parent Loop BB90_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB90_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB90_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_3
.LBB90_6:                               # %for.end
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_7
.LBB90_7:                               # %for.inc10
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_1
.LBB90_8:                               # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB90_9 Depth=1
	movl	$0, -4(%rbp)
.LBB90_11:                              # %for.cond16
                                        #   Parent Loop BB90_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB90_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB90_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB90_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_11
.LBB90_14:                              # %for.end30
                                        #   in Loop: Header=BB90_9 Depth=1
	jmp	.LBB90_15
.LBB90_15:                              # %for.inc31
                                        #   in Loop: Header=BB90_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_9
.LBB90_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB90_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB90_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB90_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_20:                              # %for.cond38
                                        #   Parent Loop BB90_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB90_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB90_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB90_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_20
.LBB90_23:                              # %for.end65
                                        #   in Loop: Header=BB90_18 Depth=1
	jmp	.LBB90_24
.LBB90_24:                              # %for.inc66
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_18
.LBB90_25:                              # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB90_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB90_26 Depth=1
	movl	$0, -4(%rbp)
.LBB90_28:                              # %for.cond72
                                        #   Parent Loop BB90_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB90_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB90_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB90_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_28
.LBB90_31:                              # %for.end99
                                        #   in Loop: Header=BB90_26 Depth=1
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc100
                                        #   in Loop: Header=BB90_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_26
.LBB90_33:                              # %for.end102
	jmp	.LBB90_34
.LBB90_34:                              # %if.end
	cmpl	$575551146, -28(%rbp)   # imm = 0x224E36AA
	jne	.LBB90_36
.LBB90_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_35
.Lfunc_end90:
	.size	PaddAutoCropBorders.54, .Lfunc_end90-PaddAutoCropBorders.54
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.55
	.type	ReportFirstframe.55,@function
ReportFirstframe.55:                    # @ReportFirstframe.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$168870429, -16(%rbp)   # imm = 0xA10C21D
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB91_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB91_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB91_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_5
.LBB91_4:                               # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -12(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB91_5:                               # %if.end
	jmp	.LBB91_6
.LBB91_6:                               # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$168870429, -16(%rbp)   # imm = 0xA10C21D
	jne	.LBB91_8
.LBB91_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_7
.Lfunc_end91:
	.size	ReportFirstframe.55, .Lfunc_end91-ReportFirstframe.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.56
.LCPI92_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI92_1:
	.quad	4611686018427387904     # double 2
.LCPI92_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.56,@function
picture_structure_decision.56:          # @picture_structure_decision.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI92_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI92_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1502891819, -44(%rbp)  # imm = 0x59944F2B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI92_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -28(%rbp)
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1502891819, -44(%rbp)  # imm = 0x59944F2B
	jne	.LBB92_2
.LBB92_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_1
.Lfunc_end92:
	.size	picture_structure_decision.56, .Lfunc_end92-picture_structure_decision.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.57
	.type	PaddAutoCropBorders.57,@function
PaddAutoCropBorders.57:                 # @PaddAutoCropBorders.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1427696011, -28(%rbp)  # imm = 0x5518E98B
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB93_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_3:                               # %for.cond1
                                        #   Parent Loop BB93_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB93_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB93_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_3
.LBB93_6:                               # %for.end
                                        #   in Loop: Header=BB93_1 Depth=1
	jmp	.LBB93_7
.LBB93_7:                               # %for.inc10
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_1
.LBB93_8:                               # %for.end12
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB93_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB93_9 Depth=1
	movl	$0, -8(%rbp)
.LBB93_11:                              # %for.cond16
                                        #   Parent Loop BB93_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB93_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB93_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_11
.LBB93_14:                              # %for.end30
                                        #   in Loop: Header=BB93_9 Depth=1
	jmp	.LBB93_15
.LBB93_15:                              # %for.inc31
                                        #   in Loop: Header=BB93_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_9
.LBB93_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB93_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB93_18 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB93_20:                              # %for.cond38
                                        #   Parent Loop BB93_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB93_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB93_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB93_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_20
.LBB93_23:                              # %for.end65
                                        #   in Loop: Header=BB93_18 Depth=1
	jmp	.LBB93_24
.LBB93_24:                              # %for.inc66
                                        #   in Loop: Header=BB93_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_18
.LBB93_25:                              # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB93_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB93_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB93_26 Depth=1
	movl	$0, -8(%rbp)
.LBB93_28:                              # %for.cond72
                                        #   Parent Loop BB93_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB93_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB93_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB93_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_28
.LBB93_31:                              # %for.end99
                                        #   in Loop: Header=BB93_26 Depth=1
	jmp	.LBB93_32
.LBB93_32:                              # %for.inc100
                                        #   in Loop: Header=BB93_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_26
.LBB93_33:                              # %for.end102
	jmp	.LBB93_34
.LBB93_34:                              # %if.end
	cmpl	$1427696011, -28(%rbp)  # imm = 0x5518E98B
	jne	.LBB93_36
.LBB93_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_35
.Lfunc_end93:
	.size	PaddAutoCropBorders.57, .Lfunc_end93-PaddAutoCropBorders.57
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.58
	.type	field_mode_buffer.58,@function
field_mode_buffer.58:                   # @field_mode_buffer.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1814474409, -16(%rbp)  # imm = 0x6C26AEA9
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1814474409, -16(%rbp)  # imm = 0x6C26AEA9
	jne	.LBB94_2
.LBB94_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_1
.Lfunc_end94:
	.size	field_mode_buffer.58, .Lfunc_end94-field_mode_buffer.58
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.59
	.type	find_distortion.59,@function
find_distortion.59:                     # @find_distortion.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2056675163, -44(%rbp)  # imm = 0x7A965F5B
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB95_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB95_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB95_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	$0, -16(%rbp)
.LBB95_4:                               # %for.cond3
                                        #   Parent Loop BB95_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB95_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB95_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB95_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_4
.LBB95_7:                               # %for.end
                                        #   in Loop: Header=BB95_2 Depth=1
	jmp	.LBB95_8
.LBB95_8:                               # %for.inc17
                                        #   in Loop: Header=BB95_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_2
.LBB95_9:                               # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB95_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB95_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB95_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB95_11 Depth=1
	movl	$0, -16(%rbp)
.LBB95_13:                              # %for.cond27
                                        #   Parent Loop BB95_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB95_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB95_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB95_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_13
.LBB95_16:                              # %for.end71
                                        #   in Loop: Header=BB95_11 Depth=1
	jmp	.LBB95_17
.LBB95_17:                              # %for.inc72
                                        #   in Loop: Header=BB95_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_11
.LBB95_18:                              # %for.end74
	jmp	.LBB95_19
.LBB95_19:                              # %if.end
	jmp	.LBB95_39
.LBB95_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB95_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB95_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB95_21 Depth=1
	movl	$0, -16(%rbp)
.LBB95_23:                              # %for.cond80
                                        #   Parent Loop BB95_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB95_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB95_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB95_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_23
.LBB95_26:                              # %for.end104
                                        #   in Loop: Header=BB95_21 Depth=1
	jmp	.LBB95_27
.LBB95_27:                              # %for.inc105
                                        #   in Loop: Header=BB95_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_21
.LBB95_28:                              # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB95_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB95_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB95_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB95_30 Depth=1
	movl	$0, -16(%rbp)
.LBB95_32:                              # %for.cond117
                                        #   Parent Loop BB95_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB95_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB95_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB95_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_32
.LBB95_35:                              # %for.end163
                                        #   in Loop: Header=BB95_30 Depth=1
	jmp	.LBB95_36
.LBB95_36:                              # %for.inc164
                                        #   in Loop: Header=BB95_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_30
.LBB95_37:                              # %for.end166
	jmp	.LBB95_38
.LBB95_38:                              # %if.end167
	jmp	.LBB95_39
.LBB95_39:                              # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$2056675163, -44(%rbp)  # imm = 0x7A965F5B
	jne	.LBB95_41
.LBB95_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_40
.Lfunc_end95:
	.size	find_distortion.59, .Lfunc_end95-find_distortion.59
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.60
	.type	ReportSP.60,@function
ReportSP.60:                            # @ReportSP.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1413025579, -12(%rbp)  # imm = 0x54390F2B
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1413025579, -12(%rbp)  # imm = 0x54390F2B
	jne	.LBB96_2
.LBB96_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_1
.Lfunc_end96:
	.size	ReportSP.60, .Lfunc_end96-ReportSP.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.61
.LCPI97_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.61,@function
init_frame.61:                          # @init_frame.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$617217371, -16(%rbp)   # imm = 0x24C9FD5B
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB97_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_1
.LBB97_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB97_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB97_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB97_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB97_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB97_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB97_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB97_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB97_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB97_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB97_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB97_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB97_17
.LBB97_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB97_17:                              # %if.end32
	jmp	.LBB97_25
.LBB97_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB97_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB97_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB97_22
.LBB97_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB97_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB97_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB97_24:                              # %if.end50
	jmp	.LBB97_25
.LBB97_25:                              # %if.end51
	jmp	.LBB97_26
.LBB97_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB97_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB97_28:                              # %if.end62
	jmp	.LBB97_72
.LBB97_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB97_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB97_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB97_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB97_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_30
.LBB97_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB97_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB97_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB97_36:                              # %if.end102
	vmovsd	.LCPI97_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB97_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI97_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB97_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB97_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB97_41
.LBB97_40:                              # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB97_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB97_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB97_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB97_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB97_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB97_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB97_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB97_49
.LBB97_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB97_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB97_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB97_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB97_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB97_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB97_58
.LBB97_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB97_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB97_57
.LBB97_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB97_57:                              # %cond.end
.LBB97_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB97_66
.LBB97_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB97_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB97_65
.LBB97_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB97_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB97_64
.LBB97_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB97_64:                              # %cond.end209
.LBB97_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB97_66:                              # %if.end214
	jmp	.LBB97_67
.LBB97_67:                              # %if.end215
	jmp	.LBB97_71
.LBB97_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB97_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB97_70:                              # %if.end226
	jmp	.LBB97_71
.LBB97_71:                              # %if.end227
	jmp	.LBB97_72
.LBB97_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$617217371, -16(%rbp)   # imm = 0x24C9FD5B
	jne	.LBB97_74
.LBB97_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_73
.Lfunc_end97:
	.size	init_frame.61, .Lfunc_end97-init_frame.61
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.62        # -- Begin function MbAffPostProc.62
	.p2align	4, 0x90
	.type	MbAffPostProc.62,@function
MbAffPostProc.62:                       # @MbAffPostProc.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$374569705, -44(%rbp)   # imm = 0x16537AE9
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB98_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_5 Depth 2
                                        #       Child Loop BB98_7 Depth 3
                                        #     Child Loop BB98_13 Depth 2
                                        #       Child Loop BB98_15 Depth 3
                                        #     Child Loop BB98_21 Depth 2
                                        #       Child Loop BB98_23 Depth 3
                                        #         Child Loop BB98_25 Depth 4
                                        #       Child Loop BB98_31 Depth 3
                                        #         Child Loop BB98_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB98_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB98_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB98_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB98_5:                               # %for.cond5
                                        #   Parent Loop BB98_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB98_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB98_5 Depth=2
	movl	$0, -4(%rbp)
.LBB98_7:                               # %for.cond8
                                        #   Parent Loop BB98_2 Depth=1
                                        #     Parent Loop BB98_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB98_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB98_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB98_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_7
.LBB98_10:                              # %for.end
                                        #   in Loop: Header=BB98_5 Depth=2
	jmp	.LBB98_11
.LBB98_11:                              # %for.inc20
                                        #   in Loop: Header=BB98_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_5
.LBB98_12:                              # %for.end22
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	$0, -8(%rbp)
.LBB98_13:                              # %for.cond23
                                        #   Parent Loop BB98_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB98_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB98_13 Depth=2
	movl	$0, -4(%rbp)
.LBB98_15:                              # %for.cond26
                                        #   Parent Loop BB98_2 Depth=1
                                        #     Parent Loop BB98_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB98_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB98_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB98_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_15
.LBB98_18:                              # %for.end54
                                        #   in Loop: Header=BB98_13 Depth=2
	jmp	.LBB98_19
.LBB98_19:                              # %for.inc55
                                        #   in Loop: Header=BB98_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_13
.LBB98_20:                              # %for.end57
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB98_21:                              # %for.cond61
                                        #   Parent Loop BB98_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_23 Depth 3
                                        #         Child Loop BB98_25 Depth 4
                                        #       Child Loop BB98_31 Depth 3
                                        #         Child Loop BB98_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB98_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB98_21 Depth=2
	movl	$0, -8(%rbp)
.LBB98_23:                              # %for.cond64
                                        #   Parent Loop BB98_2 Depth=1
                                        #     Parent Loop BB98_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB98_23 Depth=3
	movl	$0, -4(%rbp)
.LBB98_25:                              # %for.cond69
                                        #   Parent Loop BB98_2 Depth=1
                                        #     Parent Loop BB98_21 Depth=2
                                        #       Parent Loop BB98_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB98_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB98_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB98_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_25
.LBB98_28:                              # %for.end87
                                        #   in Loop: Header=BB98_23 Depth=3
	jmp	.LBB98_29
.LBB98_29:                              # %for.inc88
                                        #   in Loop: Header=BB98_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_23
.LBB98_30:                              # %for.end90
                                        #   in Loop: Header=BB98_21 Depth=2
	movl	$0, -8(%rbp)
.LBB98_31:                              # %for.cond91
                                        #   Parent Loop BB98_2 Depth=1
                                        #     Parent Loop BB98_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB98_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB98_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB98_31 Depth=3
	movl	$0, -4(%rbp)
.LBB98_33:                              # %for.cond95
                                        #   Parent Loop BB98_2 Depth=1
                                        #     Parent Loop BB98_21 Depth=2
                                        #       Parent Loop BB98_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB98_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB98_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB98_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_33
.LBB98_36:                              # %for.end130
                                        #   in Loop: Header=BB98_31 Depth=3
	jmp	.LBB98_37
.LBB98_37:                              # %for.inc131
                                        #   in Loop: Header=BB98_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_31
.LBB98_38:                              # %for.end133
                                        #   in Loop: Header=BB98_21 Depth=2
	jmp	.LBB98_39
.LBB98_39:                              # %for.inc134
                                        #   in Loop: Header=BB98_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB98_21
.LBB98_40:                              # %for.end136
                                        #   in Loop: Header=BB98_2 Depth=1
	jmp	.LBB98_41
.LBB98_41:                              # %if.end
                                        #   in Loop: Header=BB98_2 Depth=1
	jmp	.LBB98_42
.LBB98_42:                              # %for.inc137
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_2
.LBB98_43:                              # %for.end139
	jmp	.LBB98_67
.LBB98_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB98_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_48 Depth 2
                                        #       Child Loop BB98_50 Depth 3
                                        #     Child Loop BB98_56 Depth 2
                                        #       Child Loop BB98_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB98_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB98_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB98_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB98_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB98_48:                              # %for.cond149
                                        #   Parent Loop BB98_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB98_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB98_48 Depth=2
	movl	$0, -4(%rbp)
.LBB98_50:                              # %for.cond152
                                        #   Parent Loop BB98_45 Depth=1
                                        #     Parent Loop BB98_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB98_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB98_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB98_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_50
.LBB98_53:                              # %for.end167
                                        #   in Loop: Header=BB98_48 Depth=2
	jmp	.LBB98_54
.LBB98_54:                              # %for.inc168
                                        #   in Loop: Header=BB98_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_48
.LBB98_55:                              # %for.end170
                                        #   in Loop: Header=BB98_45 Depth=1
	movl	$0, -8(%rbp)
.LBB98_56:                              # %for.cond171
                                        #   Parent Loop BB98_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB98_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB98_56 Depth=2
	movl	$0, -4(%rbp)
.LBB98_58:                              # %for.cond174
                                        #   Parent Loop BB98_45 Depth=1
                                        #     Parent Loop BB98_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB98_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB98_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB98_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_58
.LBB98_61:                              # %for.end203
                                        #   in Loop: Header=BB98_56 Depth=2
	jmp	.LBB98_62
.LBB98_62:                              # %for.inc204
                                        #   in Loop: Header=BB98_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_56
.LBB98_63:                              # %for.end206
                                        #   in Loop: Header=BB98_45 Depth=1
	jmp	.LBB98_64
.LBB98_64:                              # %if.end207
                                        #   in Loop: Header=BB98_45 Depth=1
	jmp	.LBB98_65
.LBB98_65:                              # %for.inc208
                                        #   in Loop: Header=BB98_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_45
.LBB98_66:                              # %for.end210
	jmp	.LBB98_67
.LBB98_67:                              # %if.end211
	cmpl	$374569705, -44(%rbp)   # imm = 0x16537AE9
	jne	.LBB98_69
.LBB98_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_68
.Lfunc_end98:
	.size	MbAffPostProc.62, .Lfunc_end98-MbAffPostProc.62
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.63
	.type	writeUnit.63,@function
writeUnit.63:                           # @writeUnit.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1349529240, -16(%rbp)  # imm = 0x50702E98
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB99_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB99_18
.LBB99_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB99_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB99_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB99_6
.LBB99_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB99_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB99_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB99_9
.LBB99_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB99_9:                               # %if.end21
	jmp	.LBB99_17
.LBB99_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB99_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB99_13
.LBB99_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB99_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB99_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB99_16
.LBB99_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB99_16:                              # %if.end39
	jmp	.LBB99_17
.LBB99_17:                              # %if.end40
	jmp	.LBB99_18
.LBB99_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1349529240, -16(%rbp)  # imm = 0x50702E98
	jne	.LBB99_20
.LBB99_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_19
.Lfunc_end99:
	.size	writeUnit.63, .Lfunc_end99-writeUnit.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.64
	.type	writeout_picture.64,@function
writeout_picture.64:                    # @writeout_picture.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$109708172, -28(%rbp)   # imm = 0x68A038C
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB100_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB100_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB100_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB100_3:                              # %for.cond1
                                        #   Parent Loop BB100_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB100_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB100_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB100_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_3
.LBB100_6:                              # %for.end
                                        #   in Loop: Header=BB100_1 Depth=1
	jmp	.LBB100_7
.LBB100_7:                              # %for.inc10
                                        #   in Loop: Header=BB100_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_1
.LBB100_8:                              # %for.end12
	cmpl	$109708172, -28(%rbp)   # imm = 0x68A038C
	jne	.LBB100_10
.LBB100_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_9
.Lfunc_end100:
	.size	writeout_picture.64, .Lfunc_end100-writeout_picture.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.65
	.type	frame_mode_buffer.65,@function
frame_mode_buffer.65:                   # @frame_mode_buffer.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1985438748, -12(%rbp)  # imm = 0x7657641C
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB101_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB101_3
.LBB101_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB101_3:                              # %if.end
	cmpl	$1985438748, -12(%rbp)  # imm = 0x7657641C
	jne	.LBB101_5
.LBB101_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_4
.Lfunc_end101:
	.size	frame_mode_buffer.65, .Lfunc_end101-frame_mode_buffer.65
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.66        # -- Begin function field_picture.66
	.p2align	4, 0x90
	.type	field_picture.66,@function
field_picture.66:                       # @field_picture.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$797491297, -12(%rbp)   # imm = 0x2F88C061
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB102_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB102_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB102_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB102_6
.LBB102_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB102_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB102_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB102_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB102_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB102_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB102_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB102_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB102_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB102_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB102_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$797491297, -12(%rbp)   # imm = 0x2F88C061
	jne	.LBB102_18
.LBB102_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_17
.Lfunc_end102:
	.size	field_picture.66, .Lfunc_end102-field_picture.66
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.67
	.type	rdPictureCoding.67,@function
rdPictureCoding.67:                     # @rdPictureCoding.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1369708036, -24(%rbp)  # imm = 0x51A41604
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB103_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB103_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB103_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB103_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB103_6
.LBB103_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB103_6:                              # %if.end
	jmp	.LBB103_8
.LBB103_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB103_8:                              # %if.end10
	jmp	.LBB103_10
.LBB103_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB103_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB103_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB103_13
.LBB103_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB103_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB103_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB103_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB103_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB103_18
.LBB103_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB103_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB103_20
.LBB103_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB103_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB103_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB103_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB103_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB103_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB103_26
.LBB103_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB103_26:                             # %if.end53
	jmp	.LBB103_34
.LBB103_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB103_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB103_33
.LBB103_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB103_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB103_32
.LBB103_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB103_32:                             # %if.end66
	jmp	.LBB103_33
.LBB103_33:                             # %if.end67
	jmp	.LBB103_34
.LBB103_34:                             # %if.end68
	jmp	.LBB103_36
.LBB103_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB103_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB103_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB103_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB103_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB103_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB103_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB103_46
.LBB103_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB103_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB103_45
.LBB103_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB103_45:                             # %if.end98
	jmp	.LBB103_46
.LBB103_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB103_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB103_51
.LBB103_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB103_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB103_50:                             # %if.end111
	jmp	.LBB103_51
.LBB103_51:                             # %if.end112
	cmpl	$1369708036, -24(%rbp)  # imm = 0x51A41604
	jne	.LBB103_53
.LBB103_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_52
.Lfunc_end103:
	.size	rdPictureCoding.67, .Lfunc_end103-rdPictureCoding.67
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.68      # -- Begin function copy_rdopt_data.68
	.p2align	4, 0x90
	.type	copy_rdopt_data.68,@function
copy_rdopt_data.68:                     # @copy_rdopt_data.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2561851, -48(%rbp)     # imm = 0x27173B
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB104_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB104_4
.LBB104_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB104_4
.LBB104_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB104_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_7 Depth 2
                                        #       Child Loop BB104_9 Depth 3
                                        #         Child Loop BB104_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB104_5 Depth=1
	movl	$0, -8(%rbp)
.LBB104_7:                              # %for.cond17
                                        #   Parent Loop BB104_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_9 Depth 3
                                        #         Child Loop BB104_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB104_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB104_7 Depth=2
	movl	$0, -12(%rbp)
.LBB104_9:                              # %for.cond21
                                        #   Parent Loop BB104_5 Depth=1
                                        #     Parent Loop BB104_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB104_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB104_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB104_9 Depth=3
	movl	$0, -16(%rbp)
.LBB104_11:                             # %for.cond25
                                        #   Parent Loop BB104_5 Depth=1
                                        #     Parent Loop BB104_7 Depth=2
                                        #       Parent Loop BB104_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB104_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB104_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB104_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_11
.LBB104_14:                             # %for.end
                                        #   in Loop: Header=BB104_9 Depth=3
	jmp	.LBB104_15
.LBB104_15:                             # %for.inc46
                                        #   in Loop: Header=BB104_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_9
.LBB104_16:                             # %for.end48
                                        #   in Loop: Header=BB104_7 Depth=2
	jmp	.LBB104_17
.LBB104_17:                             # %for.inc49
                                        #   in Loop: Header=BB104_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_7
.LBB104_18:                             # %for.end51
                                        #   in Loop: Header=BB104_5 Depth=1
	jmp	.LBB104_19
.LBB104_19:                             # %for.inc52
                                        #   in Loop: Header=BB104_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_5
.LBB104_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB104_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_23 Depth 2
                                        #       Child Loop BB104_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB104_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB104_21 Depth=1
	movl	$0, -12(%rbp)
.LBB104_23:                             # %for.cond59
                                        #   Parent Loop BB104_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB104_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB104_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB104_23 Depth=2
	movl	$0, -16(%rbp)
.LBB104_25:                             # %for.cond63
                                        #   Parent Loop BB104_21 Depth=1
                                        #     Parent Loop BB104_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB104_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB104_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB104_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_25
.LBB104_28:                             # %for.end82
                                        #   in Loop: Header=BB104_23 Depth=2
	jmp	.LBB104_29
.LBB104_29:                             # %for.inc83
                                        #   in Loop: Header=BB104_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_23
.LBB104_30:                             # %for.end85
                                        #   in Loop: Header=BB104_21 Depth=1
	jmp	.LBB104_31
.LBB104_31:                             # %for.inc86
                                        #   in Loop: Header=BB104_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_21
.LBB104_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB104_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB104_33 Depth=1
	movl	$0, -4(%rbp)
.LBB104_35:                             # %for.cond93
                                        #   Parent Loop BB104_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB104_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB104_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB104_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB104_38:                             # %if.end
                                        #   in Loop: Header=BB104_35 Depth=2
	jmp	.LBB104_39
.LBB104_39:                             # %for.inc176
                                        #   in Loop: Header=BB104_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_35
.LBB104_40:                             # %for.end178
                                        #   in Loop: Header=BB104_33 Depth=1
	jmp	.LBB104_41
.LBB104_41:                             # %for.inc179
                                        #   in Loop: Header=BB104_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_33
.LBB104_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB104_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB104_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB104_43 Depth=1
	movl	$0, -4(%rbp)
.LBB104_45:                             # %for.cond186
                                        #   Parent Loop BB104_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB104_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB104_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB104_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_45
.LBB104_48:                             # %for.end203
                                        #   in Loop: Header=BB104_43 Depth=1
	jmp	.LBB104_49
.LBB104_49:                             # %for.inc204
                                        #   in Loop: Header=BB104_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_43
.LBB104_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB104_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB104_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB104_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB104_52 Depth=1
	movl	$0, -4(%rbp)
.LBB104_54:                             # %for.cond214
                                        #   Parent Loop BB104_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB104_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB104_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB104_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_54
.LBB104_57:                             # %for.end247
                                        #   in Loop: Header=BB104_52 Depth=1
	jmp	.LBB104_58
.LBB104_58:                             # %for.inc248
                                        #   in Loop: Header=BB104_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_52
.LBB104_59:                             # %for.end250
	jmp	.LBB104_60
.LBB104_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB104_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB104_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB104_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB104_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_61
.LBB104_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB104_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB104_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB104_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB104_68:                             # %for.cond283
                                        #   Parent Loop BB104_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB104_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB104_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_68
.LBB104_71:                             # %for.end306
                                        #   in Loop: Header=BB104_66 Depth=1
	jmp	.LBB104_72
.LBB104_72:                             # %for.inc307
                                        #   in Loop: Header=BB104_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_66
.LBB104_73:                             # %for.end309
	jmp	.LBB104_98
.LBB104_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB104_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB104_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB104_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB104_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB104_79:                             # %for.cond324
                                        #   Parent Loop BB104_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB104_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB104_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_79
.LBB104_82:                             # %for.end341
                                        #   in Loop: Header=BB104_77 Depth=1
	jmp	.LBB104_83
.LBB104_83:                             # %for.inc342
                                        #   in Loop: Header=BB104_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_77
.LBB104_84:                             # %for.end344
	jmp	.LBB104_97
.LBB104_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB104_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB104_96
.LBB104_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB104_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB104_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB104_90:                             # %for.cond359
                                        #   Parent Loop BB104_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB104_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB104_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB104_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_90
.LBB104_93:                             # %for.end384
                                        #   in Loop: Header=BB104_88 Depth=1
	jmp	.LBB104_94
.LBB104_94:                             # %for.inc385
                                        #   in Loop: Header=BB104_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_88
.LBB104_95:                             # %for.end387
	jmp	.LBB104_96
.LBB104_96:                             # %if.end388
	jmp	.LBB104_97
.LBB104_97:                             # %if.end389
	jmp	.LBB104_98
.LBB104_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB104_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB104_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB104_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB104_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB104_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB104_103 Depth=1
	movl	$0, -4(%rbp)
.LBB104_105:                            # %for.cond410
                                        #   Parent Loop BB104_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB104_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB104_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB104_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB104_109
.LBB104_108:                            # %if.else483
                                        #   in Loop: Header=BB104_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB104_109:                            # %if.end506
                                        #   in Loop: Header=BB104_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB104_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB104_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB104_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB104_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB104_113
.LBB104_112:                            # %if.else568
                                        #   in Loop: Header=BB104_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB104_113:                            # %if.end591
                                        #   in Loop: Header=BB104_105 Depth=2
	jmp	.LBB104_114
.LBB104_114:                            # %if.end592
                                        #   in Loop: Header=BB104_105 Depth=2
	jmp	.LBB104_115
.LBB104_115:                            # %for.inc593
                                        #   in Loop: Header=BB104_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_105
.LBB104_116:                            # %for.end595
                                        #   in Loop: Header=BB104_103 Depth=1
	jmp	.LBB104_117
.LBB104_117:                            # %for.inc596
                                        #   in Loop: Header=BB104_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_103
.LBB104_118:                            # %for.end598
	jmp	.LBB104_130
.LBB104_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB104_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB104_120 Depth=1
	movl	$0, -4(%rbp)
.LBB104_122:                            # %for.cond604
                                        #   Parent Loop BB104_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB104_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB104_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB104_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB104_125:                            # %if.end654
                                        #   in Loop: Header=BB104_122 Depth=2
	jmp	.LBB104_126
.LBB104_126:                            # %for.inc655
                                        #   in Loop: Header=BB104_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_122
.LBB104_127:                            # %for.end657
                                        #   in Loop: Header=BB104_120 Depth=1
	jmp	.LBB104_128
.LBB104_128:                            # %for.inc658
                                        #   in Loop: Header=BB104_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_120
.LBB104_129:                            # %for.end660
	jmp	.LBB104_130
.LBB104_130:                            # %if.end661
	jmp	.LBB104_131
.LBB104_131:                            # %if.end662
	cmpl	$2561851, -48(%rbp)     # imm = 0x27173B
	jne	.LBB104_133
.LBB104_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_132
.Lfunc_end104:
	.size	copy_rdopt_data.68, .Lfunc_end104-copy_rdopt_data.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.69
	.type	ReportFirstframe.69,@function
ReportFirstframe.69:                    # @ReportFirstframe.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1074460851, -16(%rbp)  # imm = 0x400AF8B3
	movl	%edi, -4(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB105_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB105_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB105_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB105_5
.LBB105_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -8(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB105_5:                              # %if.end
	jmp	.LBB105_6
.LBB105_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1074460851, -16(%rbp)  # imm = 0x400AF8B3
	jne	.LBB105_8
.LBB105_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_7
.Lfunc_end105:
	.size	ReportFirstframe.69, .Lfunc_end105-ReportFirstframe.69
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.70     # -- Begin function encode_one_frame.70
	.p2align	4, 0x90
	.type	encode_one_frame.70,@function
encode_one_frame.70:                    # @encode_one_frame.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$626935880, -44(%rbp)   # imm = 0x255E4848
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -64(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-80(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB106_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB106_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB106_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB106_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB106_9
.LBB106_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB106_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB106_8
.LBB106_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB106_8:                              # %if.end21
	jmp	.LBB106_9
.LBB106_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB106_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB106_38
.LBB106_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB106_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB106_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB106_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB106_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB106_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB106_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB106_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB106_20
.LBB106_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB106_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB106_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB106_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB106_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB106_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB106_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB106_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB106_29
.LBB106_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB106_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB106_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB106_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB106_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB106_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -68(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB106_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB106_35
.LBB106_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB106_35:                             # %if.end89
	jmp	.LBB106_37
.LBB106_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB106_37:                             # %if.end92
	jmp	.LBB106_38
.LBB106_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB106_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB106_41
.LBB106_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB106_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB106_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB106_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB106_45
# %bb.44:                               # %if.then109
	movl	-36(%rbp), %edi
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-52(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB106_54
.LBB106_45:                             # %if.else112
	movl	-28(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB106_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB106_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB106_53
.LBB106_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB106_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB106_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB106_52
.LBB106_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB106_52:                             # %if.end130
	jmp	.LBB106_53
.LBB106_53:                             # %if.end131
	jmp	.LBB106_54
.LBB106_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB106_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB106_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB106_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB106_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB106_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB106_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB106_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB106_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB106_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB106_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB106_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB106_66:                             # %if.end151
	callq	find_snr
	leaq	-88(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -88(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -80(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB106_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB106_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB106_70
.LBB106_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB106_70:                             # %if.end171
	jmp	.LBB106_81
.LBB106_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB106_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB106_80
.LBB106_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB106_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB106_79
.LBB106_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB106_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB106_78
.LBB106_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB106_78:                             # %if.end187
	jmp	.LBB106_79
.LBB106_79:                             # %if.end188
	jmp	.LBB106_80
.LBB106_80:                             # %if.end189
	jmp	.LBB106_81
.LBB106_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB106_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB106_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB106_85
.LBB106_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB106_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB106_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB106_88
.LBB106_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB106_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB106_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB106_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB106_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB106_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB106_110
.LBB106_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB106_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB106_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB106_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB106_98
.LBB106_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB106_98:                             # %if.end239
	jmp	.LBB106_99
.LBB106_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB106_104
	jmp	.LBB106_100
.LBB106_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB106_102
	jmp	.LBB106_101
.LBB106_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB106_103
	jmp	.LBB106_108
.LBB106_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB106_109
.LBB106_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB106_109
.LBB106_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB106_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB106_107
.LBB106_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB106_107:                            # %if.end261
	jmp	.LBB106_109
.LBB106_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB106_109:                            # %sw.epilog
	jmp	.LBB106_110
.LBB106_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB106_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB106_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB106_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB106_119
.LBB106_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB106_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB106_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB106_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB106_118:                            # %if.end292
	jmp	.LBB106_119
.LBB106_119:                            # %if.end293
	jmp	.LBB106_120
.LBB106_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB106_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB106_123
.LBB106_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB106_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$626935880, -44(%rbp)   # imm = 0x255E4848
	jne	.LBB106_125
.LBB106_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_124
.Lfunc_end106:
	.size	encode_one_frame.70, .Lfunc_end106-encode_one_frame.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.71
	.type	ReportB.71,@function
ReportB.71:                             # @ReportB.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1600525596, -20(%rbp)  # imm = 0x5F66151C
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-16(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1600525596, -20(%rbp)  # imm = 0x5F66151C
	jne	.LBB107_2
.LBB107_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_1
.Lfunc_end107:
	.size	ReportB.71, .Lfunc_end107-ReportB.71
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.72
	.type	field_mode_buffer.72,@function
field_mode_buffer.72:                   # @field_mode_buffer.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1436813026, -8(%rbp)   # imm = 0x55A406E2
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1436813026, -8(%rbp)   # imm = 0x55A406E2
	jne	.LBB108_2
.LBB108_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_1
.Lfunc_end108:
	.size	field_mode_buffer.72, .Lfunc_end108-field_mode_buffer.72
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.73
	.type	copy_motion_vectors_MB.73,@function
copy_motion_vectors_MB.73:              # @copy_motion_vectors_MB.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1706907739, -20(%rbp)  # imm = 0x65BD585B
	movl	$0, -8(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_3 Depth 2
                                        #       Child Loop BB109_5 Depth 3
                                        #         Child Loop BB109_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB109_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	$0, -12(%rbp)
.LBB109_3:                              # %for.cond1
                                        #   Parent Loop BB109_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_5 Depth 3
                                        #         Child Loop BB109_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB109_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	$0, -4(%rbp)
.LBB109_5:                              # %for.cond4
                                        #   Parent Loop BB109_1 Depth=1
                                        #     Parent Loop BB109_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB109_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB109_5 Depth=3
	movl	$0, -16(%rbp)
.LBB109_7:                              # %for.cond7
                                        #   Parent Loop BB109_1 Depth=1
                                        #     Parent Loop BB109_3 Depth=2
                                        #       Parent Loop BB109_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB109_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB109_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB109_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB109_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB109_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB109_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB109_12:                             # %if.end
                                        #   in Loop: Header=BB109_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB109_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB109_7
.LBB109_14:                             # %for.end
                                        #   in Loop: Header=BB109_5 Depth=3
	jmp	.LBB109_15
.LBB109_15:                             # %for.inc359
                                        #   in Loop: Header=BB109_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_5
.LBB109_16:                             # %for.end361
                                        #   in Loop: Header=BB109_3 Depth=2
	jmp	.LBB109_17
.LBB109_17:                             # %for.inc362
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_3
.LBB109_18:                             # %for.end364
                                        #   in Loop: Header=BB109_1 Depth=1
	jmp	.LBB109_19
.LBB109_19:                             # %for.inc365
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_1
.LBB109_20:                             # %for.end367
	cmpl	$1706907739, -20(%rbp)  # imm = 0x65BD585B
	jne	.LBB109_22
.LBB109_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_21
.Lfunc_end109:
	.size	copy_motion_vectors_MB.73, .Lfunc_end109-copy_motion_vectors_MB.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.74
	.type	field_mode_buffer.74,@function
field_mode_buffer.74:                   # @field_mode_buffer.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$963126804, -12(%rbp)   # imm = 0x39682614
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$963126804, -12(%rbp)   # imm = 0x39682614
	jne	.LBB110_2
.LBB110_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_1
.Lfunc_end110:
	.size	field_mode_buffer.74, .Lfunc_end110-field_mode_buffer.74
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.75
	.type	find_distortion.75,@function
find_distortion.75:                     # @find_distortion.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1890546863, -44(%rbp)  # imm = 0x70AF74AF
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB111_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB111_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB111_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	$0, -16(%rbp)
.LBB111_4:                              # %for.cond3
                                        #   Parent Loop BB111_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB111_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB111_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB111_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_4
.LBB111_7:                              # %for.end
                                        #   in Loop: Header=BB111_2 Depth=1
	jmp	.LBB111_8
.LBB111_8:                              # %for.inc17
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_2
.LBB111_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB111_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB111_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB111_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	$0, -16(%rbp)
.LBB111_13:                             # %for.cond27
                                        #   Parent Loop BB111_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB111_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB111_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB111_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_13
.LBB111_16:                             # %for.end71
                                        #   in Loop: Header=BB111_11 Depth=1
	jmp	.LBB111_17
.LBB111_17:                             # %for.inc72
                                        #   in Loop: Header=BB111_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_11
.LBB111_18:                             # %for.end74
	jmp	.LBB111_19
.LBB111_19:                             # %if.end
	jmp	.LBB111_39
.LBB111_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB111_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB111_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB111_21 Depth=1
	movl	$0, -16(%rbp)
.LBB111_23:                             # %for.cond80
                                        #   Parent Loop BB111_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB111_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB111_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB111_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_23
.LBB111_26:                             # %for.end104
                                        #   in Loop: Header=BB111_21 Depth=1
	jmp	.LBB111_27
.LBB111_27:                             # %for.inc105
                                        #   in Loop: Header=BB111_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_21
.LBB111_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB111_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB111_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB111_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB111_30 Depth=1
	movl	$0, -16(%rbp)
.LBB111_32:                             # %for.cond117
                                        #   Parent Loop BB111_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB111_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB111_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB111_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_32
.LBB111_35:                             # %for.end163
                                        #   in Loop: Header=BB111_30 Depth=1
	jmp	.LBB111_36
.LBB111_36:                             # %for.inc164
                                        #   in Loop: Header=BB111_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_30
.LBB111_37:                             # %for.end166
	jmp	.LBB111_38
.LBB111_38:                             # %if.end167
	jmp	.LBB111_39
.LBB111_39:                             # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1890546863, -44(%rbp)  # imm = 0x70AF74AF
	jne	.LBB111_41
.LBB111_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_40
.Lfunc_end111:
	.size	find_distortion.75, .Lfunc_end111-find_distortion.75
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.76     # -- Begin function encode_one_frame.76
	.p2align	4, 0x90
	.type	encode_one_frame.76,@function
encode_one_frame.76:                    # @encode_one_frame.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$2123429993, -52(%rbp)  # imm = 0x7E90F869
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -28(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-80(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB112_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB112_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB112_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB112_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB112_9
.LBB112_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB112_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB112_8
.LBB112_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB112_8:                              # %if.end21
	jmp	.LBB112_9
.LBB112_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB112_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB112_38
.LBB112_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB112_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB112_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB112_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB112_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB112_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB112_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB112_20
.LBB112_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB112_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB112_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB112_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB112_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB112_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB112_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB112_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB112_29
.LBB112_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB112_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB112_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB112_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB112_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB112_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB112_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB112_35
.LBB112_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB112_35:                             # %if.end89
	jmp	.LBB112_37
.LBB112_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB112_37:                             # %if.end92
	jmp	.LBB112_38
.LBB112_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB112_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB112_41
.LBB112_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB112_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB112_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB112_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB112_45
# %bb.44:                               # %if.then109
	movl	-48(%rbp), %edi
	vmovss	-68(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB112_54
.LBB112_45:                             # %if.else112
	movl	-24(%rbp), %edi
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB112_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB112_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB112_53
.LBB112_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB112_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB112_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB112_52
.LBB112_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB112_52:                             # %if.end130
	jmp	.LBB112_53
.LBB112_53:                             # %if.end131
	jmp	.LBB112_54
.LBB112_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB112_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB112_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB112_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB112_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB112_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB112_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB112_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB112_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB112_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB112_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB112_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB112_66:                             # %if.end151
	callq	find_snr
	leaq	-88(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -88(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -80(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB112_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB112_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB112_70
.LBB112_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB112_70:                             # %if.end171
	jmp	.LBB112_81
.LBB112_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB112_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB112_80
.LBB112_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB112_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB112_79
.LBB112_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB112_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB112_78
.LBB112_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB112_78:                             # %if.end187
	jmp	.LBB112_79
.LBB112_79:                             # %if.end188
	jmp	.LBB112_80
.LBB112_80:                             # %if.end189
	jmp	.LBB112_81
.LBB112_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB112_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB112_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB112_85
.LBB112_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB112_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB112_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB112_88
.LBB112_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB112_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB112_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB112_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB112_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB112_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB112_110
.LBB112_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB112_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB112_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB112_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB112_98
.LBB112_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB112_98:                             # %if.end239
	jmp	.LBB112_99
.LBB112_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB112_104
	jmp	.LBB112_100
.LBB112_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB112_102
	jmp	.LBB112_101
.LBB112_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB112_103
	jmp	.LBB112_108
.LBB112_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB112_109
.LBB112_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB112_109
.LBB112_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB112_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB112_107
.LBB112_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB112_107:                            # %if.end261
	jmp	.LBB112_109
.LBB112_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB112_109:                            # %sw.epilog
	jmp	.LBB112_110
.LBB112_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB112_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB112_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB112_119
.LBB112_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB112_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB112_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB112_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB112_118:                            # %if.end292
	jmp	.LBB112_119
.LBB112_119:                            # %if.end293
	jmp	.LBB112_120
.LBB112_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB112_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB112_123
.LBB112_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB112_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$2123429993, -52(%rbp)  # imm = 0x7E90F869
	jne	.LBB112_125
.LBB112_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_124
.Lfunc_end112:
	.size	encode_one_frame.76, .Lfunc_end112-encode_one_frame.76
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.77       # -- Begin function code_a_picture.77
	.p2align	4, 0x90
	.type	code_a_picture.77,@function
code_a_picture.77:                      # @code_a_picture.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1915176726, -28(%rbp)  # imm = 0x72274716
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB113_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB113_8
.LBB113_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB113_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB113_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB113_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB113_7
.LBB113_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB113_7:                              # %land.end
.LBB113_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB113_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB113_10:                             # %if.end
	jmp	.LBB113_11
.LBB113_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB113_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB113_11 Depth=1
	jmp	.LBB113_13
.LBB113_13:                             # %while.cond15
                                        #   Parent Loop BB113_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB113_14
	jmp	.LBB113_15
.LBB113_14:                             # %while.body19
                                        #   in Loop: Header=BB113_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB113_13
.LBB113_15:                             # %while.end
                                        #   in Loop: Header=BB113_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_11
.LBB113_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB113_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB113_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB113_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB113_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB113_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB113_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_19
.LBB113_22:                             # %for.end
	jmp	.LBB113_23
.LBB113_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB113_25:                             # %if.end34
	cmpl	$1915176726, -28(%rbp)  # imm = 0x72274716
	jne	.LBB113_27
.LBB113_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_26
.Lfunc_end113:
	.size	code_a_picture.77, .Lfunc_end113-code_a_picture.77
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.78
	.type	ReportIntra.78,@function
ReportIntra.78:                         # @ReportIntra.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1732227520, -12(%rbp)  # imm = 0x673FB1C0
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB114_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB114_3
.LBB114_2:                              # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB114_3:                              # %if.end
	cmpl	$1732227520, -12(%rbp)  # imm = 0x673FB1C0
	jne	.LBB114_5
.LBB114_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_4
.Lfunc_end114:
	.size	ReportIntra.78, .Lfunc_end114-ReportIntra.78
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.79
	.type	rdPictureCoding.79,@function
rdPictureCoding.79:                     # @rdPictureCoding.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1152945275, -24(%rbp)  # imm = 0x44B88C7B
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB115_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB115_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB115_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB115_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB115_6
.LBB115_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB115_6:                              # %if.end
	jmp	.LBB115_8
.LBB115_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB115_8:                              # %if.end10
	jmp	.LBB115_10
.LBB115_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB115_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB115_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB115_13
.LBB115_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB115_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB115_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB115_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB115_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB115_18
.LBB115_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB115_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB115_20
.LBB115_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB115_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB115_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB115_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB115_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB115_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB115_26
.LBB115_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB115_26:                             # %if.end53
	jmp	.LBB115_34
.LBB115_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB115_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB115_33
.LBB115_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB115_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB115_32
.LBB115_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB115_32:                             # %if.end66
	jmp	.LBB115_33
.LBB115_33:                             # %if.end67
	jmp	.LBB115_34
.LBB115_34:                             # %if.end68
	jmp	.LBB115_36
.LBB115_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB115_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB115_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB115_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB115_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB115_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB115_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB115_46
.LBB115_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB115_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB115_45
.LBB115_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB115_45:                             # %if.end98
	jmp	.LBB115_46
.LBB115_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB115_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB115_51
.LBB115_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB115_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB115_50:                             # %if.end111
	jmp	.LBB115_51
.LBB115_51:                             # %if.end112
	cmpl	$1152945275, -24(%rbp)  # imm = 0x44B88C7B
	jne	.LBB115_53
.LBB115_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_52
.Lfunc_end115:
	.size	rdPictureCoding.79, .Lfunc_end115-rdPictureCoding.79
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.80
	.type	frame_mode_buffer.80,@function
frame_mode_buffer.80:                   # @frame_mode_buffer.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1423581841, -12(%rbp)  # imm = 0x54DA2291
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB116_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB116_3
.LBB116_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB116_3:                              # %if.end
	cmpl	$1423581841, -12(%rbp)  # imm = 0x54DA2291
	jne	.LBB116_5
.LBB116_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_4
.Lfunc_end116:
	.size	frame_mode_buffer.80, .Lfunc_end116-frame_mode_buffer.80
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.81
	.type	rdPictureCoding.81,@function
rdPictureCoding.81:                     # @rdPictureCoding.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1534916241, -24(%rbp)  # imm = 0x5B7CF691
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB117_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB117_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB117_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB117_6
.LBB117_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB117_6:                              # %if.end
	jmp	.LBB117_8
.LBB117_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB117_8:                              # %if.end10
	jmp	.LBB117_10
.LBB117_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB117_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB117_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB117_13
.LBB117_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB117_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB117_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB117_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB117_18
.LBB117_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB117_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB117_20
.LBB117_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB117_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB117_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB117_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB117_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB117_26
.LBB117_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB117_26:                             # %if.end53
	jmp	.LBB117_34
.LBB117_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB117_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB117_33
.LBB117_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB117_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB117_32
.LBB117_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB117_32:                             # %if.end66
	jmp	.LBB117_33
.LBB117_33:                             # %if.end67
	jmp	.LBB117_34
.LBB117_34:                             # %if.end68
	jmp	.LBB117_36
.LBB117_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB117_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB117_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB117_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB117_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB117_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB117_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB117_46
.LBB117_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB117_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB117_45
.LBB117_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB117_45:                             # %if.end98
	jmp	.LBB117_46
.LBB117_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB117_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB117_51
.LBB117_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB117_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB117_50:                             # %if.end111
	jmp	.LBB117_51
.LBB117_51:                             # %if.end112
	cmpl	$1534916241, -24(%rbp)  # imm = 0x5B7CF691
	jne	.LBB117_53
.LBB117_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_52
.Lfunc_end117:
	.size	rdPictureCoding.81, .Lfunc_end117-rdPictureCoding.81
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.82
	.type	copy_motion_vectors_MB.82,@function
copy_motion_vectors_MB.82:              # @copy_motion_vectors_MB.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1664454805, -20(%rbp)  # imm = 0x63359095
	movl	$0, -16(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_3 Depth 2
                                        #       Child Loop BB118_5 Depth 3
                                        #         Child Loop BB118_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB118_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	$0, -8(%rbp)
.LBB118_3:                              # %for.cond1
                                        #   Parent Loop BB118_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_5 Depth 3
                                        #         Child Loop BB118_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB118_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	$0, -4(%rbp)
.LBB118_5:                              # %for.cond4
                                        #   Parent Loop BB118_1 Depth=1
                                        #     Parent Loop BB118_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB118_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB118_5 Depth=3
	movl	$0, -12(%rbp)
.LBB118_7:                              # %for.cond7
                                        #   Parent Loop BB118_1 Depth=1
                                        #     Parent Loop BB118_3 Depth=2
                                        #       Parent Loop BB118_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -12(%rbp)
	jge	.LBB118_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB118_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB118_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB118_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB118_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB118_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB118_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB118_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB118_12:                             # %if.end
                                        #   in Loop: Header=BB118_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB118_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_7
.LBB118_14:                             # %for.end
                                        #   in Loop: Header=BB118_5 Depth=3
	jmp	.LBB118_15
.LBB118_15:                             # %for.inc359
                                        #   in Loop: Header=BB118_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_5
.LBB118_16:                             # %for.end361
                                        #   in Loop: Header=BB118_3 Depth=2
	jmp	.LBB118_17
.LBB118_17:                             # %for.inc362
                                        #   in Loop: Header=BB118_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_3
.LBB118_18:                             # %for.end364
                                        #   in Loop: Header=BB118_1 Depth=1
	jmp	.LBB118_19
.LBB118_19:                             # %for.inc365
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_1
.LBB118_20:                             # %for.end367
	cmpl	$1664454805, -20(%rbp)  # imm = 0x63359095
	jne	.LBB118_22
.LBB118_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_21
.Lfunc_end118:
	.size	copy_motion_vectors_MB.82, .Lfunc_end118-copy_motion_vectors_MB.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.83
	.type	ReportRB.83,@function
ReportRB.83:                            # @ReportRB.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1950201998, -16(%rbp)  # imm = 0x743DB88E
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-20(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1950201998, -16(%rbp)  # imm = 0x743DB88E
	jne	.LBB119_2
.LBB119_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_1
.Lfunc_end119:
	.size	ReportRB.83, .Lfunc_end119-ReportRB.83
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.84
	.type	GenerateFullPelRepresentation.84,@function
GenerateFullPelRepresentation.84:       # @GenerateFullPelRepresentation.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$688568679, -44(%rbp)   # imm = 0x290AB967
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB120_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB120_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	$0, -28(%rbp)
.LBB120_3:                              # %for.cond1
                                        #   Parent Loop BB120_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB120_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB120_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB120_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB120_3
.LBB120_6:                              # %for.end
                                        #   in Loop: Header=BB120_1 Depth=1
	jmp	.LBB120_7
.LBB120_7:                              # %for.inc5
                                        #   in Loop: Header=BB120_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB120_1
.LBB120_8:                              # %for.end7
	cmpl	$688568679, -44(%rbp)   # imm = 0x290AB967
	jne	.LBB120_10
.LBB120_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_9
.Lfunc_end120:
	.size	GenerateFullPelRepresentation.84, .Lfunc_end120-GenerateFullPelRepresentation.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.85
	.type	writeUnit.85,@function
writeUnit.85:                           # @writeUnit.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1615782594, -16(%rbp)  # imm = 0x604EE2C2
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB121_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB121_18
.LBB121_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB121_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB121_6
.LBB121_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB121_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB121_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB121_9
.LBB121_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB121_9:                              # %if.end21
	jmp	.LBB121_17
.LBB121_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB121_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB121_13
.LBB121_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB121_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB121_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB121_16
.LBB121_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB121_16:                             # %if.end39
	jmp	.LBB121_17
.LBB121_17:                             # %if.end40
	jmp	.LBB121_18
.LBB121_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1615782594, -16(%rbp)  # imm = 0x604EE2C2
	jne	.LBB121_20
.LBB121_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_19
.Lfunc_end121:
	.size	writeUnit.85, .Lfunc_end121-writeUnit.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.86
	.type	frame_mode_buffer.86,@function
frame_mode_buffer.86:                   # @frame_mode_buffer.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$535738364, -16(%rbp)   # imm = 0x1FEEB7FC
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB122_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB122_3
.LBB122_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB122_3:                              # %if.end
	cmpl	$535738364, -16(%rbp)   # imm = 0x1FEEB7FC
	jne	.LBB122_5
.LBB122_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_4
.Lfunc_end122:
	.size	frame_mode_buffer.86, .Lfunc_end122-frame_mode_buffer.86
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.87     # -- Begin function encode_one_frame.87
	.p2align	4, 0x90
	.type	encode_one_frame.87,@function
encode_one_frame.87:                    # @encode_one_frame.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1804557895, -48(%rbp)  # imm = 0x6B8F5E47
	movl	$0, -40(%rbp)
	movl	$0, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -52(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB123_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB123_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB123_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB123_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB123_9
.LBB123_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB123_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB123_8
.LBB123_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB123_8:                              # %if.end21
	jmp	.LBB123_9
.LBB123_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB123_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB123_38
.LBB123_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB123_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB123_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB123_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB123_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB123_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB123_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB123_20
.LBB123_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB123_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB123_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB123_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB123_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB123_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB123_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB123_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB123_29
.LBB123_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB123_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB123_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB123_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB123_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB123_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -68(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB123_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB123_35
.LBB123_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB123_35:                             # %if.end89
	jmp	.LBB123_37
.LBB123_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB123_37:                             # %if.end92
	jmp	.LBB123_38
.LBB123_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB123_41
.LBB123_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB123_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB123_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB123_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_45
# %bb.44:                               # %if.then109
	movl	-60(%rbp), %edi
	vmovss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-52(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB123_54
.LBB123_45:                             # %if.else112
	movl	-40(%rbp), %edi
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB123_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB123_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB123_53
.LBB123_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB123_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB123_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB123_52
.LBB123_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB123_52:                             # %if.end130
	jmp	.LBB123_53
.LBB123_53:                             # %if.end131
	jmp	.LBB123_54
.LBB123_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB123_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB123_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB123_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB123_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB123_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB123_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB123_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB123_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB123_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB123_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB123_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB123_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB123_70
.LBB123_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB123_70:                             # %if.end171
	jmp	.LBB123_81
.LBB123_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB123_80
.LBB123_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB123_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB123_79
.LBB123_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB123_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB123_78
.LBB123_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB123_78:                             # %if.end187
	jmp	.LBB123_79
.LBB123_79:                             # %if.end188
	jmp	.LBB123_80
.LBB123_80:                             # %if.end189
	jmp	.LBB123_81
.LBB123_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB123_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB123_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB123_85
.LBB123_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB123_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB123_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB123_88
.LBB123_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB123_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB123_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB123_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB123_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB123_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB123_110
.LBB123_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB123_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB123_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_98
.LBB123_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB123_98:                             # %if.end239
	jmp	.LBB123_99
.LBB123_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB123_104
	jmp	.LBB123_100
.LBB123_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB123_102
	jmp	.LBB123_101
.LBB123_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB123_103
	jmp	.LBB123_108
.LBB123_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB123_109
.LBB123_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB123_109
.LBB123_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB123_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB123_107
.LBB123_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB123_107:                            # %if.end261
	jmp	.LBB123_109
.LBB123_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB123_109:                            # %sw.epilog
	jmp	.LBB123_110
.LBB123_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB123_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB123_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB123_119
.LBB123_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB123_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB123_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB123_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB123_118:                            # %if.end292
	jmp	.LBB123_119
.LBB123_119:                            # %if.end293
	jmp	.LBB123_120
.LBB123_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB123_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB123_123
.LBB123_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB123_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$1804557895, -48(%rbp)  # imm = 0x6B8F5E47
	jne	.LBB123_125
.LBB123_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_124
.Lfunc_end123:
	.size	encode_one_frame.87, .Lfunc_end123-encode_one_frame.87
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.88
	.type	writeout_picture.88,@function
writeout_picture.88:                    # @writeout_picture.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$169731317, -28(%rbp)   # imm = 0xA1DE4F5
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB124_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB124_3:                              # %for.cond1
                                        #   Parent Loop BB124_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB124_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB124_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB124_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_3
.LBB124_6:                              # %for.end
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_7
.LBB124_7:                              # %for.inc10
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_1
.LBB124_8:                              # %for.end12
	cmpl	$169731317, -28(%rbp)   # imm = 0xA1DE4F5
	jne	.LBB124_10
.LBB124_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_9
.Lfunc_end124:
	.size	writeout_picture.88, .Lfunc_end124-writeout_picture.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.89
	.type	PaddAutoCropBorders.89,@function
PaddAutoCropBorders.89:                 # @PaddAutoCropBorders.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$108406972, -36(%rbp)   # imm = 0x67628BC
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB125_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_3:                              # %for.cond1
                                        #   Parent Loop BB125_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB125_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_3
.LBB125_6:                              # %for.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_7
.LBB125_7:                              # %for.inc10
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_1
.LBB125_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB125_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB125_9 Depth=1
	movl	$0, -8(%rbp)
.LBB125_11:                             # %for.cond16
                                        #   Parent Loop BB125_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB125_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB125_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB125_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_11
.LBB125_14:                             # %for.end30
                                        #   in Loop: Header=BB125_9 Depth=1
	jmp	.LBB125_15
.LBB125_15:                             # %for.inc31
                                        #   in Loop: Header=BB125_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_9
.LBB125_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB125_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB125_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB125_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB125_18 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB125_20:                             # %for.cond38
                                        #   Parent Loop BB125_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB125_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB125_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB125_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_20
.LBB125_23:                             # %for.end65
                                        #   in Loop: Header=BB125_18 Depth=1
	jmp	.LBB125_24
.LBB125_24:                             # %for.inc66
                                        #   in Loop: Header=BB125_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_18
.LBB125_25:                             # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB125_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB125_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB125_26 Depth=1
	movl	$0, -8(%rbp)
.LBB125_28:                             # %for.cond72
                                        #   Parent Loop BB125_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB125_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB125_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB125_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_28
.LBB125_31:                             # %for.end99
                                        #   in Loop: Header=BB125_26 Depth=1
	jmp	.LBB125_32
.LBB125_32:                             # %for.inc100
                                        #   in Loop: Header=BB125_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_26
.LBB125_33:                             # %for.end102
	jmp	.LBB125_34
.LBB125_34:                             # %if.end
	cmpl	$108406972, -36(%rbp)   # imm = 0x67628BC
	jne	.LBB125_36
.LBB125_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_35
.Lfunc_end125:
	.size	PaddAutoCropBorders.89, .Lfunc_end125-PaddAutoCropBorders.89
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.90              # -- Begin function buf2img.90
	.p2align	4, 0x90
	.type	buf2img.90,@function
buf2img.90:                             # @buf2img.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1163918315, -60(%rbp)  # imm = 0x455FFBEB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB126_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB126_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB126_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB126_6
	jmp	.LBB126_4
.LBB126_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB126_15
	jmp	.LBB126_5
.LBB126_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB126_24
	jmp	.LBB126_33
.LBB126_6:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB126_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB126_7 Depth=1
	movl	$0, -8(%rbp)
.LBB126_9:                              # %for.cond5
                                        #   Parent Loop BB126_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB126_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB126_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_9
.LBB126_12:                             # %for.end
                                        #   in Loop: Header=BB126_7 Depth=1
	jmp	.LBB126_13
.LBB126_13:                             # %for.inc14
                                        #   in Loop: Header=BB126_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_7
.LBB126_14:                             # %for.end16
	jmp	.LBB126_34
.LBB126_15:                             # %sw.bb17
	movl	$0, -4(%rbp)
.LBB126_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB126_16 Depth=1
	movl	$0, -8(%rbp)
.LBB126_18:                             # %for.cond22
                                        #   Parent Loop BB126_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB126_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB126_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_18
.LBB126_21:                             # %for.end38
                                        #   in Loop: Header=BB126_16 Depth=1
	jmp	.LBB126_22
.LBB126_22:                             # %for.inc39
                                        #   in Loop: Header=BB126_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_16
.LBB126_23:                             # %for.end41
	jmp	.LBB126_34
.LBB126_24:                             # %sw.bb42
	movl	$0, -4(%rbp)
.LBB126_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB126_25 Depth=1
	movl	$0, -8(%rbp)
.LBB126_27:                             # %for.cond47
                                        #   Parent Loop BB126_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB126_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB126_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_27
.LBB126_30:                             # %for.end74
                                        #   in Loop: Header=BB126_25 Depth=1
	jmp	.LBB126_31
.LBB126_31:                             # %for.inc75
                                        #   in Loop: Header=BB126_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_25
.LBB126_32:                             # %for.end77
	jmp	.LBB126_33
.LBB126_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB126_34:                             # %sw.epilog
	jmp	.LBB126_44
.LBB126_35:                             # %if.else
	movl	$0, -4(%rbp)
.LBB126_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB126_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB126_36 Depth=1
	movl	$0, -8(%rbp)
.LBB126_38:                             # %for.cond82
                                        #   Parent Loop BB126_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB126_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB126_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB126_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB126_38
.LBB126_41:                             # %for.end102
                                        #   in Loop: Header=BB126_36 Depth=1
	jmp	.LBB126_42
.LBB126_42:                             # %for.inc103
                                        #   in Loop: Header=BB126_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_36
.LBB126_43:                             # %for.end105
	jmp	.LBB126_44
.LBB126_44:                             # %if.end106
	cmpl	$1163918315, -60(%rbp)  # imm = 0x455FFBEB
	jne	.LBB126_46
.LBB126_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_45
.Lfunc_end126:
	.size	buf2img.90, .Lfunc_end126-buf2img.90
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.91
	.type	ReportFirstframe.91,@function
ReportFirstframe.91:                    # @ReportFirstframe.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$369119529, -16(%rbp)   # imm = 0x16005129
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB127_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB127_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB127_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB127_5
.LBB127_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -12(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB127_5:                              # %if.end
	jmp	.LBB127_6
.LBB127_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$369119529, -16(%rbp)   # imm = 0x16005129
	jne	.LBB127_8
.LBB127_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_7
.Lfunc_end127:
	.size	ReportFirstframe.91, .Lfunc_end127-ReportFirstframe.91
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.92
	.type	GenerateFullPelRepresentation.92,@function
GenerateFullPelRepresentation.92:       # @GenerateFullPelRepresentation.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$303662734, -44(%rbp)   # imm = 0x1219868E
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB128_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	$0, -32(%rbp)
.LBB128_3:                              # %for.cond1
                                        #   Parent Loop BB128_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB128_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB128_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB128_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB128_3
.LBB128_6:                              # %for.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_7
.LBB128_7:                              # %for.inc5
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB128_1
.LBB128_8:                              # %for.end7
	cmpl	$303662734, -44(%rbp)   # imm = 0x1219868E
	jne	.LBB128_10
.LBB128_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_9
.Lfunc_end128:
	.size	GenerateFullPelRepresentation.92, .Lfunc_end128-GenerateFullPelRepresentation.92
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.93
	.type	rdPictureCoding.93,@function
rdPictureCoding.93:                     # @rdPictureCoding.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1669183844, -24(%rbp)  # imm = 0x637DB964
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB129_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB129_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB129_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB129_6
.LBB129_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB129_6:                              # %if.end
	jmp	.LBB129_8
.LBB129_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB129_8:                              # %if.end10
	jmp	.LBB129_10
.LBB129_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB129_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB129_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB129_13
.LBB129_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB129_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB129_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB129_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB129_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB129_18
.LBB129_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB129_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB129_20
.LBB129_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB129_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB129_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB129_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB129_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB129_26
.LBB129_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB129_26:                             # %if.end53
	jmp	.LBB129_34
.LBB129_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB129_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB129_33
.LBB129_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB129_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB129_32
.LBB129_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB129_32:                             # %if.end66
	jmp	.LBB129_33
.LBB129_33:                             # %if.end67
	jmp	.LBB129_34
.LBB129_34:                             # %if.end68
	jmp	.LBB129_36
.LBB129_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB129_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB129_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB129_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB129_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB129_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB129_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB129_46
.LBB129_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB129_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB129_45
.LBB129_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB129_45:                             # %if.end98
	jmp	.LBB129_46
.LBB129_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB129_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB129_51
.LBB129_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB129_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB129_50:                             # %if.end111
	jmp	.LBB129_51
.LBB129_51:                             # %if.end112
	cmpl	$1669183844, -24(%rbp)  # imm = 0x637DB964
	jne	.LBB129_53
.LBB129_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_52
.Lfunc_end129:
	.size	rdPictureCoding.93, .Lfunc_end129-rdPictureCoding.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.94
	.type	frame_mode_buffer.94,@function
frame_mode_buffer.94:                   # @frame_mode_buffer.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2085739758, -12(%rbp)  # imm = 0x7C51DCEE
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB130_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB130_3
.LBB130_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB130_3:                              # %if.end
	cmpl	$2085739758, -12(%rbp)  # imm = 0x7C51DCEE
	jne	.LBB130_5
.LBB130_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_4
.Lfunc_end130:
	.size	frame_mode_buffer.94, .Lfunc_end130-frame_mode_buffer.94
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.95
	.type	GenerateFullPelRepresentation.95,@function
GenerateFullPelRepresentation.95:       # @GenerateFullPelRepresentation.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$360626439, -44(%rbp)   # imm = 0x157EB907
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB131_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB131_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	$0, -32(%rbp)
.LBB131_3:                              # %for.cond1
                                        #   Parent Loop BB131_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB131_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB131_3
.LBB131_6:                              # %for.end
                                        #   in Loop: Header=BB131_1 Depth=1
	jmp	.LBB131_7
.LBB131_7:                              # %for.inc5
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB131_1
.LBB131_8:                              # %for.end7
	cmpl	$360626439, -44(%rbp)   # imm = 0x157EB907
	jne	.LBB131_10
.LBB131_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_9
.Lfunc_end131:
	.size	GenerateFullPelRepresentation.95, .Lfunc_end131-GenerateFullPelRepresentation.95
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.96
	.type	ReadOneFrame.96,@function
ReadOneFrame.96:                        # @ReadOneFrame.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$934982602, -68(%rbp)   # imm = 0x37BAB3CA
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-28(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB132_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB132_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB132_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB132_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB132_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB132_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB132_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB132_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB132_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB132_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB132_26
# %bb.11:                               # %if.then42
	cmpl	$0, -44(%rbp)
	je	.LBB132_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB132_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB132_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB132_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB132_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB132_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB132_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB132_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB132_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB132_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB132_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB132_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB132_24:                             # %if.end85
	jmp	.LBB132_25
.LBB132_25:                             # %if.end86
	jmp	.LBB132_27
.LBB132_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB132_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$934982602, -68(%rbp)   # imm = 0x37BAB3CA
	jne	.LBB132_29
.LBB132_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_28
.Lfunc_end132:
	.size	ReadOneFrame.96, .Lfunc_end132-ReadOneFrame.96
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.97   # -- Begin function UnifiedOneForthPix.97
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.97,@function
UnifiedOneForthPix.97:                  # @UnifiedOneForthPix.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$404240887, -108(%rbp)  # imm = 0x181839F7
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB133_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB133_3
.LBB133_2:                              # %if.then
	jmp	.LBB133_266
.LBB133_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB133_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB133_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB133_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB133_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB133_11
.LBB133_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB133_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB133_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB133_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB133_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB133_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB133_14:                             # %for.cond49
                                        #   Parent Loop BB133_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB133_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB133_18
.LBB133_17:                             # %cond.false
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-48(%rbp), %eax
.LBB133_18:                             # %cond.end
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB133_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_24
.LBB133_20:                             # %cond.false63
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB133_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB133_23
.LBB133_22:                             # %cond.false71
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-48(%rbp), %eax
.LBB133_23:                             # %cond.end72
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_24:                             # %cond.end74
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB133_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB133_27
.LBB133_26:                             # %cond.false83
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %edx
.LBB133_27:                             # %cond.end84
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB133_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB133_33
.LBB133_29:                             # %cond.false89
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB133_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB133_32
.LBB133_31:                             # %cond.false97
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %edx
.LBB133_32:                             # %cond.end98
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_33:                             # %cond.end100
                                        #   in Loop: Header=BB133_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB133_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB133_36
.LBB133_35:                             # %cond.false115
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB133_36:                             # %cond.end117
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB133_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB133_42
.LBB133_38:                             # %cond.false122
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB133_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB133_41
.LBB133_40:                             # %cond.false131
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB133_41:                             # %cond.end133
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_42:                             # %cond.end135
                                        #   in Loop: Header=BB133_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB133_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB133_45
.LBB133_44:                             # %cond.false152
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB133_45:                             # %cond.end154
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB133_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB133_51
.LBB133_47:                             # %cond.false159
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB133_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB133_50
.LBB133_49:                             # %cond.false168
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB133_50:                             # %cond.end170
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_51:                             # %cond.end172
                                        #   in Loop: Header=BB133_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB133_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB133_54
.LBB133_53:                             # %cond.false187
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB133_54:                             # %cond.end189
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB133_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB133_60
.LBB133_56:                             # %cond.false194
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB133_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB133_59
.LBB133_58:                             # %cond.false203
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB133_59:                             # %cond.end205
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_60:                             # %cond.end207
                                        #   in Loop: Header=BB133_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB133_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB133_63
.LBB133_62:                             # %cond.false225
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB133_63:                             # %cond.end227
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB133_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB133_69
.LBB133_65:                             # %cond.false232
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB133_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB133_68
.LBB133_67:                             # %cond.false241
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB133_68:                             # %cond.end243
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_69:                             # %cond.end245
                                        #   in Loop: Header=BB133_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB133_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB133_72
.LBB133_71:                             # %cond.false260
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB133_72:                             # %cond.end262
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB133_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB133_78
.LBB133_74:                             # %cond.false267
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB133_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB133_77
.LBB133_76:                             # %cond.false276
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB133_77:                             # %cond.end278
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_78:                             # %cond.end280
                                        #   in Loop: Header=BB133_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB133_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB133_81
.LBB133_80:                             # %cond.false297
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB133_81:                             # %cond.end298
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB133_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB133_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB133_87
.LBB133_83:                             # %cond.false303
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB133_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB133_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB133_86
.LBB133_85:                             # %cond.false311
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB133_86:                             # %cond.end312
                                        #   in Loop: Header=BB133_14 Depth=2
.LBB133_87:                             # %cond.end314
                                        #   in Loop: Header=BB133_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB133_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB133_14
.LBB133_89:                             # %for.end
                                        #   in Loop: Header=BB133_12 Depth=1
	jmp	.LBB133_90
.LBB133_90:                             # %for.inc336
                                        #   in Loop: Header=BB133_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB133_12
.LBB133_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB133_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB133_92 Depth=1
	movl	$0, -48(%rbp)
.LBB133_94:                             # %for.cond346
                                        #   Parent Loop BB133_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB133_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB133_98
.LBB133_97:                             # %cond.false364
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB133_98:                             # %cond.end366
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB133_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB133_101
.LBB133_100:                            # %cond.false378
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB133_101:                            # %cond.end380
                                        #   in Loop: Header=BB133_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB133_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB133_104
.LBB133_103:                            # %cond.false390
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB133_104:                            # %cond.end392
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB133_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB133_107
.LBB133_106:                            # %cond.false405
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB133_107:                            # %cond.end407
                                        #   in Loop: Header=BB133_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB133_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB133_110
.LBB133_109:                            # %cond.false417
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB133_110:                            # %cond.end419
                                        #   in Loop: Header=BB133_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB133_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_113
.LBB133_112:                            # %cond.false442
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB133_113:                            # %cond.end449
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB133_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_119
.LBB133_115:                            # %cond.false454
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB133_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_118
.LBB133_117:                            # %cond.false466
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB133_118:                            # %cond.end473
                                        #   in Loop: Header=BB133_94 Depth=2
.LBB133_119:                            # %cond.end475
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB133_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_122
.LBB133_121:                            # %cond.false490
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB133_122:                            # %cond.end493
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB133_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB133_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_128
.LBB133_124:                            # %cond.false498
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB133_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB133_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_127
.LBB133_126:                            # %cond.false506
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB133_127:                            # %cond.end509
                                        #   in Loop: Header=BB133_94 Depth=2
.LBB133_128:                            # %cond.end511
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB133_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB133_94
.LBB133_130:                            # %for.end516
                                        #   in Loop: Header=BB133_92 Depth=1
	jmp	.LBB133_131
.LBB133_131:                            # %for.inc517
                                        #   in Loop: Header=BB133_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB133_92
.LBB133_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -48(%rbp)
.LBB133_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB133_133 Depth=1
	movl	$0, -44(%rbp)
.LBB133_135:                            # %for.cond533
                                        #   Parent Loop BB133_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB133_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_139
.LBB133_138:                            # %cond.false553
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB133_139:                            # %cond.end555
                                        #   in Loop: Header=BB133_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB133_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_145
.LBB133_141:                            # %cond.false567
                                        #   in Loop: Header=BB133_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_144
.LBB133_143:                            # %cond.false579
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB133_144:                            # %cond.end581
                                        #   in Loop: Header=BB133_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_145:                            # %cond.end589
                                        #   in Loop: Header=BB133_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB133_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB133_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_157
.LBB133_147:                            # %cond.false594
                                        #   in Loop: Header=BB133_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_150
.LBB133_149:                            # %cond.false607
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB133_150:                            # %cond.end609
                                        #   in Loop: Header=BB133_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB133_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_156
.LBB133_152:                            # %cond.false621
                                        #   in Loop: Header=BB133_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_155
.LBB133_154:                            # %cond.false633
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB133_155:                            # %cond.end635
                                        #   in Loop: Header=BB133_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_156:                            # %cond.end643
                                        #   in Loop: Header=BB133_135 Depth=2
.LBB133_157:                            # %cond.end645
                                        #   in Loop: Header=BB133_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB133_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB133_135
.LBB133_159:                            # %for.end650
                                        #   in Loop: Header=BB133_133 Depth=1
	jmp	.LBB133_160
.LBB133_160:                            # %for.inc651
                                        #   in Loop: Header=BB133_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB133_133
.LBB133_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB133_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB133_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB133_162 Depth=1
	movl	$0, -48(%rbp)
.LBB133_164:                            # %for.cond659
                                        #   Parent Loop BB133_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB133_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_169
.LBB133_168:                            # %cond.false681
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_169:                            # %cond.end683
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_175
.LBB133_171:                            # %cond.false696
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_174
.LBB133_173:                            # %cond.false707
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_174:                            # %cond.end709
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_175:                            # %cond.end718
                                        #   in Loop: Header=BB133_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB133_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB133_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_187
.LBB133_177:                            # %cond.false723
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_180
.LBB133_179:                            # %cond.false735
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_180:                            # %cond.end737
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_186
.LBB133_182:                            # %cond.false750
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_185
.LBB133_184:                            # %cond.false761
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_185:                            # %cond.end763
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_186:                            # %cond.end772
                                        #   in Loop: Header=BB133_164 Depth=2
.LBB133_187:                            # %cond.end774
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB133_261
.LBB133_188:                            # %if.else
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB133_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB133_192
.LBB133_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB133_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB133_226
.LBB133_192:                            # %if.then791
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_195
.LBB133_194:                            # %cond.false803
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_195:                            # %cond.end805
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_198
.LBB133_197:                            # %cond.false816
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_198:                            # %cond.end818
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_207
.LBB133_200:                            # %cond.false832
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_203
.LBB133_202:                            # %cond.false840
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_203:                            # %cond.end842
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_206
.LBB133_205:                            # %cond.false853
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_206:                            # %cond.end855
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_207:                            # %cond.end865
                                        #   in Loop: Header=BB133_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB133_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB133_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_225
.LBB133_209:                            # %cond.false870
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_212
.LBB133_211:                            # %cond.false879
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_212:                            # %cond.end881
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_215
.LBB133_214:                            # %cond.false892
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_215:                            # %cond.end894
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_224
.LBB133_217:                            # %cond.false908
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_220
.LBB133_219:                            # %cond.false916
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_220:                            # %cond.end918
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_223
.LBB133_222:                            # %cond.false929
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_223:                            # %cond.end931
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_224:                            # %cond.end941
                                        #   in Loop: Header=BB133_164 Depth=2
.LBB133_225:                            # %cond.end943
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB133_260
.LBB133_226:                            # %if.else946
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_229
.LBB133_228:                            # %cond.false962
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_229:                            # %cond.end964
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_232
.LBB133_231:                            # %cond.false973
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_232:                            # %cond.end975
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_241
.LBB133_234:                            # %cond.false987
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_237
.LBB133_236:                            # %cond.false999
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_237:                            # %cond.end1001
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_240
.LBB133_239:                            # %cond.false1010
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_240:                            # %cond.end1012
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_241:                            # %cond.end1020
                                        #   in Loop: Header=BB133_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB133_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB133_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB133_259
.LBB133_243:                            # %cond.false1025
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_246
.LBB133_245:                            # %cond.false1038
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_246:                            # %cond.end1040
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_249
.LBB133_248:                            # %cond.false1049
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_249:                            # %cond.end1051
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB133_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB133_258
.LBB133_251:                            # %cond.false1063
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB133_254
.LBB133_253:                            # %cond.false1075
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB133_254:                            # %cond.end1077
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB133_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB133_257
.LBB133_256:                            # %cond.false1086
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB133_257:                            # %cond.end1088
                                        #   in Loop: Header=BB133_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB133_258:                            # %cond.end1096
                                        #   in Loop: Header=BB133_164 Depth=2
.LBB133_259:                            # %cond.end1098
                                        #   in Loop: Header=BB133_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB133_260:                            # %if.end1101
                                        #   in Loop: Header=BB133_164 Depth=2
	jmp	.LBB133_261
.LBB133_261:                            # %if.end1102
                                        #   in Loop: Header=BB133_164 Depth=2
	jmp	.LBB133_262
.LBB133_262:                            # %for.inc1103
                                        #   in Loop: Header=BB133_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB133_164
.LBB133_263:                            # %for.end1105
                                        #   in Loop: Header=BB133_162 Depth=1
	jmp	.LBB133_264
.LBB133_264:                            # %for.inc1106
                                        #   in Loop: Header=BB133_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB133_162
.LBB133_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB133_266:                            # %return
	cmpl	$404240887, -108(%rbp)  # imm = 0x181839F7
	jne	.LBB133_268
.LBB133_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_267
.Lfunc_end133:
	.size	UnifiedOneForthPix.97, .Lfunc_end133-UnifiedOneForthPix.97
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.98
	.type	ReportRB.98,@function
ReportRB.98:                            # @ReportRB.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$723491560, -16(%rbp)   # imm = 0x2B1F9AE8
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$723491560, -16(%rbp)   # imm = 0x2B1F9AE8
	jne	.LBB134_2
.LBB134_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_1
.Lfunc_end134:
	.size	ReportRB.98, .Lfunc_end134-ReportRB.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.99
	.type	field_mode_buffer.99,@function
field_mode_buffer.99:                   # @field_mode_buffer.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$8155400, -16(%rbp)     # imm = 0x7C7108
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$8155400, -16(%rbp)     # imm = 0x7C7108
	jne	.LBB135_2
.LBB135_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_1
.Lfunc_end135:
	.size	field_mode_buffer.99, .Lfunc_end135-field_mode_buffer.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.100
	.type	ReadOneFrame.100,@function
ReadOneFrame.100:                       # @ReadOneFrame.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$590545363, -68(%rbp)   # imm = 0x233301D3
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -36(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-28(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-32(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-76(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB136_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB136_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	imull	-44(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB136_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB136_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB136_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB136_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB136_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB136_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB136_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB136_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB136_26
# %bb.11:                               # %if.then42
	cmpl	$0, -40(%rbp)
	je	.LBB136_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB136_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB136_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB136_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB136_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB136_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB136_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB136_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB136_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB136_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB136_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB136_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB136_24:                             # %if.end85
	jmp	.LBB136_25
.LBB136_25:                             # %if.end86
	jmp	.LBB136_27
.LBB136_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB136_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$590545363, -68(%rbp)   # imm = 0x233301D3
	jne	.LBB136_29
.LBB136_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_28
.Lfunc_end136:
	.size	ReadOneFrame.100, .Lfunc_end136-ReadOneFrame.100
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.101  # -- Begin function UnifiedOneForthPix.101
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.101,@function
UnifiedOneForthPix.101:                 # @UnifiedOneForthPix.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$397586295, -108(%rbp)  # imm = 0x17B2AF77
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB137_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB137_3
.LBB137_2:                              # %if.then
	jmp	.LBB137_266
.LBB137_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB137_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB137_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB137_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB137_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB137_11
.LBB137_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB137_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB137_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB137_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB137_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB137_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB137_14:                             # %for.cond49
                                        #   Parent Loop BB137_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB137_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB137_18
.LBB137_17:                             # %cond.false
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-48(%rbp), %eax
.LBB137_18:                             # %cond.end
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_24
.LBB137_20:                             # %cond.false63
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB137_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB137_23
.LBB137_22:                             # %cond.false71
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-48(%rbp), %eax
.LBB137_23:                             # %cond.end72
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_24:                             # %cond.end74
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB137_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB137_27
.LBB137_26:                             # %cond.false83
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %edx
.LBB137_27:                             # %cond.end84
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB137_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB137_33
.LBB137_29:                             # %cond.false89
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB137_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB137_32
.LBB137_31:                             # %cond.false97
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %edx
.LBB137_32:                             # %cond.end98
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_33:                             # %cond.end100
                                        #   in Loop: Header=BB137_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB137_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB137_36
.LBB137_35:                             # %cond.false115
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB137_36:                             # %cond.end117
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB137_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB137_42
.LBB137_38:                             # %cond.false122
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB137_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB137_41
.LBB137_40:                             # %cond.false131
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB137_41:                             # %cond.end133
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_42:                             # %cond.end135
                                        #   in Loop: Header=BB137_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB137_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB137_45
.LBB137_44:                             # %cond.false152
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB137_45:                             # %cond.end154
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB137_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB137_51
.LBB137_47:                             # %cond.false159
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB137_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB137_50
.LBB137_49:                             # %cond.false168
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB137_50:                             # %cond.end170
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_51:                             # %cond.end172
                                        #   in Loop: Header=BB137_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB137_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB137_54
.LBB137_53:                             # %cond.false187
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB137_54:                             # %cond.end189
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB137_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB137_60
.LBB137_56:                             # %cond.false194
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB137_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB137_59
.LBB137_58:                             # %cond.false203
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB137_59:                             # %cond.end205
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_60:                             # %cond.end207
                                        #   in Loop: Header=BB137_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB137_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB137_63
.LBB137_62:                             # %cond.false225
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB137_63:                             # %cond.end227
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB137_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB137_69
.LBB137_65:                             # %cond.false232
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB137_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB137_68
.LBB137_67:                             # %cond.false241
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB137_68:                             # %cond.end243
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_69:                             # %cond.end245
                                        #   in Loop: Header=BB137_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB137_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB137_72
.LBB137_71:                             # %cond.false260
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB137_72:                             # %cond.end262
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB137_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB137_78
.LBB137_74:                             # %cond.false267
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB137_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB137_77
.LBB137_76:                             # %cond.false276
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB137_77:                             # %cond.end278
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_78:                             # %cond.end280
                                        #   in Loop: Header=BB137_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB137_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB137_81
.LBB137_80:                             # %cond.false297
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB137_81:                             # %cond.end298
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB137_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB137_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB137_87
.LBB137_83:                             # %cond.false303
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB137_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB137_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB137_86
.LBB137_85:                             # %cond.false311
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB137_86:                             # %cond.end312
                                        #   in Loop: Header=BB137_14 Depth=2
.LBB137_87:                             # %cond.end314
                                        #   in Loop: Header=BB137_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB137_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB137_14
.LBB137_89:                             # %for.end
                                        #   in Loop: Header=BB137_12 Depth=1
	jmp	.LBB137_90
.LBB137_90:                             # %for.inc336
                                        #   in Loop: Header=BB137_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB137_12
.LBB137_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB137_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB137_92 Depth=1
	movl	$0, -48(%rbp)
.LBB137_94:                             # %for.cond346
                                        #   Parent Loop BB137_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB137_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB137_98
.LBB137_97:                             # %cond.false364
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB137_98:                             # %cond.end366
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB137_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB137_101
.LBB137_100:                            # %cond.false378
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB137_101:                            # %cond.end380
                                        #   in Loop: Header=BB137_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB137_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB137_104
.LBB137_103:                            # %cond.false390
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB137_104:                            # %cond.end392
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB137_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB137_107
.LBB137_106:                            # %cond.false405
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB137_107:                            # %cond.end407
                                        #   in Loop: Header=BB137_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB137_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB137_110
.LBB137_109:                            # %cond.false417
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB137_110:                            # %cond.end419
                                        #   in Loop: Header=BB137_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB137_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_113
.LBB137_112:                            # %cond.false442
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_113:                            # %cond.end449
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_119
.LBB137_115:                            # %cond.false454
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB137_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_118
.LBB137_117:                            # %cond.false466
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB137_118:                            # %cond.end473
                                        #   in Loop: Header=BB137_94 Depth=2
.LBB137_119:                            # %cond.end475
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB137_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_122
.LBB137_121:                            # %cond.false490
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB137_122:                            # %cond.end493
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB137_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB137_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_128
.LBB137_124:                            # %cond.false498
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB137_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB137_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_127
.LBB137_126:                            # %cond.false506
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB137_127:                            # %cond.end509
                                        #   in Loop: Header=BB137_94 Depth=2
.LBB137_128:                            # %cond.end511
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB137_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB137_94
.LBB137_130:                            # %for.end516
                                        #   in Loop: Header=BB137_92 Depth=1
	jmp	.LBB137_131
.LBB137_131:                            # %for.inc517
                                        #   in Loop: Header=BB137_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB137_92
.LBB137_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB137_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB137_133 Depth=1
	movl	$0, -44(%rbp)
.LBB137_135:                            # %for.cond533
                                        #   Parent Loop BB137_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB137_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_139
.LBB137_138:                            # %cond.false553
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB137_139:                            # %cond.end555
                                        #   in Loop: Header=BB137_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB137_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_145
.LBB137_141:                            # %cond.false567
                                        #   in Loop: Header=BB137_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_144
.LBB137_143:                            # %cond.false579
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB137_144:                            # %cond.end581
                                        #   in Loop: Header=BB137_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_145:                            # %cond.end589
                                        #   in Loop: Header=BB137_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB137_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_157
.LBB137_147:                            # %cond.false594
                                        #   in Loop: Header=BB137_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_150
.LBB137_149:                            # %cond.false607
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB137_150:                            # %cond.end609
                                        #   in Loop: Header=BB137_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB137_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_156
.LBB137_152:                            # %cond.false621
                                        #   in Loop: Header=BB137_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_155
.LBB137_154:                            # %cond.false633
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB137_155:                            # %cond.end635
                                        #   in Loop: Header=BB137_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_156:                            # %cond.end643
                                        #   in Loop: Header=BB137_135 Depth=2
.LBB137_157:                            # %cond.end645
                                        #   in Loop: Header=BB137_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB137_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB137_135
.LBB137_159:                            # %for.end650
                                        #   in Loop: Header=BB137_133 Depth=1
	jmp	.LBB137_160
.LBB137_160:                            # %for.inc651
                                        #   in Loop: Header=BB137_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB137_133
.LBB137_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB137_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB137_162 Depth=1
	movl	$0, -48(%rbp)
.LBB137_164:                            # %for.cond659
                                        #   Parent Loop BB137_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB137_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_169
.LBB137_168:                            # %cond.false681
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_169:                            # %cond.end683
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_175
.LBB137_171:                            # %cond.false696
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_174
.LBB137_173:                            # %cond.false707
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_174:                            # %cond.end709
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_175:                            # %cond.end718
                                        #   in Loop: Header=BB137_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB137_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_187
.LBB137_177:                            # %cond.false723
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_180
.LBB137_179:                            # %cond.false735
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_180:                            # %cond.end737
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_186
.LBB137_182:                            # %cond.false750
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_185
.LBB137_184:                            # %cond.false761
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_185:                            # %cond.end763
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_186:                            # %cond.end772
                                        #   in Loop: Header=BB137_164 Depth=2
.LBB137_187:                            # %cond.end774
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB137_261
.LBB137_188:                            # %if.else
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB137_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB137_192
.LBB137_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB137_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB137_226
.LBB137_192:                            # %if.then791
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_195
.LBB137_194:                            # %cond.false803
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_195:                            # %cond.end805
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_198
.LBB137_197:                            # %cond.false816
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_198:                            # %cond.end818
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_207
.LBB137_200:                            # %cond.false832
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_203
.LBB137_202:                            # %cond.false840
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_203:                            # %cond.end842
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_206
.LBB137_205:                            # %cond.false853
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_206:                            # %cond.end855
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_207:                            # %cond.end865
                                        #   in Loop: Header=BB137_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB137_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_225
.LBB137_209:                            # %cond.false870
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_212
.LBB137_211:                            # %cond.false879
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_212:                            # %cond.end881
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_215
.LBB137_214:                            # %cond.false892
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_215:                            # %cond.end894
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_224
.LBB137_217:                            # %cond.false908
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_220
.LBB137_219:                            # %cond.false916
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_220:                            # %cond.end918
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_223
.LBB137_222:                            # %cond.false929
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_223:                            # %cond.end931
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_224:                            # %cond.end941
                                        #   in Loop: Header=BB137_164 Depth=2
.LBB137_225:                            # %cond.end943
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB137_260
.LBB137_226:                            # %if.else946
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_229
.LBB137_228:                            # %cond.false962
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_229:                            # %cond.end964
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_232
.LBB137_231:                            # %cond.false973
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_232:                            # %cond.end975
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_241
.LBB137_234:                            # %cond.false987
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_237
.LBB137_236:                            # %cond.false999
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_237:                            # %cond.end1001
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_240
.LBB137_239:                            # %cond.false1010
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_240:                            # %cond.end1012
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_241:                            # %cond.end1020
                                        #   in Loop: Header=BB137_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB137_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB137_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB137_259
.LBB137_243:                            # %cond.false1025
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_246
.LBB137_245:                            # %cond.false1038
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_246:                            # %cond.end1040
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_249
.LBB137_248:                            # %cond.false1049
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_249:                            # %cond.end1051
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB137_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB137_258
.LBB137_251:                            # %cond.false1063
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB137_254
.LBB137_253:                            # %cond.false1075
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB137_254:                            # %cond.end1077
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB137_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB137_257
.LBB137_256:                            # %cond.false1086
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB137_257:                            # %cond.end1088
                                        #   in Loop: Header=BB137_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB137_258:                            # %cond.end1096
                                        #   in Loop: Header=BB137_164 Depth=2
.LBB137_259:                            # %cond.end1098
                                        #   in Loop: Header=BB137_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB137_260:                            # %if.end1101
                                        #   in Loop: Header=BB137_164 Depth=2
	jmp	.LBB137_261
.LBB137_261:                            # %if.end1102
                                        #   in Loop: Header=BB137_164 Depth=2
	jmp	.LBB137_262
.LBB137_262:                            # %for.inc1103
                                        #   in Loop: Header=BB137_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB137_164
.LBB137_263:                            # %for.end1105
                                        #   in Loop: Header=BB137_162 Depth=1
	jmp	.LBB137_264
.LBB137_264:                            # %for.inc1106
                                        #   in Loop: Header=BB137_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB137_162
.LBB137_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB137_266:                            # %return
	cmpl	$397586295, -108(%rbp)  # imm = 0x17B2AF77
	jne	.LBB137_268
.LBB137_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_267
.Lfunc_end137:
	.size	UnifiedOneForthPix.101, .Lfunc_end137-UnifiedOneForthPix.101
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.102       # -- Begin function field_picture.102
	.p2align	4, 0x90
	.type	field_picture.102,@function
field_picture.102:                      # @field_picture.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$410130361, -12(%rbp)   # imm = 0x187217B9
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB138_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB138_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB138_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB138_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB138_6
.LBB138_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB138_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB138_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB138_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB138_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB138_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB138_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB138_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB138_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB138_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB138_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB138_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$410130361, -12(%rbp)   # imm = 0x187217B9
	jne	.LBB138_18
.LBB138_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_17
.Lfunc_end138:
	.size	field_picture.102, .Lfunc_end138-field_picture.102
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.103
	.type	writeout_picture.103,@function
writeout_picture.103:                   # @writeout_picture.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$510842853, -28(%rbp)   # imm = 0x1E72D7E5
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB139_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB139_3:                              # %for.cond1
                                        #   Parent Loop BB139_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB139_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_3
.LBB139_6:                              # %for.end
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_7
.LBB139_7:                              # %for.inc10
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_1
.LBB139_8:                              # %for.end12
	cmpl	$510842853, -28(%rbp)   # imm = 0x1E72D7E5
	jne	.LBB139_10
.LBB139_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_9
.Lfunc_end139:
	.size	writeout_picture.103, .Lfunc_end139-writeout_picture.103
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.104      # -- Begin function code_a_picture.104
	.p2align	4, 0x90
	.type	code_a_picture.104,@function
code_a_picture.104:                     # @code_a_picture.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1476682502, -28(%rbp)  # imm = 0x58046306
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB140_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB140_8
.LBB140_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB140_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB140_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB140_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB140_7
.LBB140_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB140_7:                              # %land.end
.LBB140_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB140_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB140_10:                             # %if.end
	jmp	.LBB140_11
.LBB140_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB140_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB140_11 Depth=1
	jmp	.LBB140_13
.LBB140_13:                             # %while.cond15
                                        #   Parent Loop BB140_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB140_14
	jmp	.LBB140_15
.LBB140_14:                             # %while.body19
                                        #   in Loop: Header=BB140_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB140_13
.LBB140_15:                             # %while.end
                                        #   in Loop: Header=BB140_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_11
.LBB140_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB140_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB140_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB140_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB140_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB140_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB140_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_19
.LBB140_22:                             # %for.end
	jmp	.LBB140_23
.LBB140_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB140_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB140_25:                             # %if.end34
	cmpl	$1476682502, -28(%rbp)  # imm = 0x58046306
	jne	.LBB140_27
.LBB140_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_26
.Lfunc_end140:
	.size	code_a_picture.104, .Lfunc_end140-code_a_picture.104
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.105  # -- Begin function UnifiedOneForthPix.105
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.105,@function
UnifiedOneForthPix.105:                 # @UnifiedOneForthPix.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1529544751, -108(%rbp) # imm = 0x5B2B002F
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB141_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB141_3
.LBB141_2:                              # %if.then
	jmp	.LBB141_266
.LBB141_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB141_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB141_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB141_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB141_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_11
.LBB141_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB141_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB141_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB141_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB141_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB141_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB141_14:                             # %for.cond49
                                        #   Parent Loop BB141_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB141_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB141_18
.LBB141_17:                             # %cond.false
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-48(%rbp), %eax
.LBB141_18:                             # %cond.end
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB141_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB141_24
.LBB141_20:                             # %cond.false63
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB141_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB141_23
.LBB141_22:                             # %cond.false71
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-48(%rbp), %eax
.LBB141_23:                             # %cond.end72
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_24:                             # %cond.end74
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB141_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB141_27
.LBB141_26:                             # %cond.false83
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %edx
.LBB141_27:                             # %cond.end84
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB141_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB141_33
.LBB141_29:                             # %cond.false89
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB141_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB141_32
.LBB141_31:                             # %cond.false97
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %edx
.LBB141_32:                             # %cond.end98
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_33:                             # %cond.end100
                                        #   in Loop: Header=BB141_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB141_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB141_36
.LBB141_35:                             # %cond.false115
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB141_36:                             # %cond.end117
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB141_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB141_42
.LBB141_38:                             # %cond.false122
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB141_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB141_41
.LBB141_40:                             # %cond.false131
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB141_41:                             # %cond.end133
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_42:                             # %cond.end135
                                        #   in Loop: Header=BB141_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB141_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB141_45
.LBB141_44:                             # %cond.false152
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB141_45:                             # %cond.end154
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB141_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB141_51
.LBB141_47:                             # %cond.false159
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB141_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB141_50
.LBB141_49:                             # %cond.false168
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB141_50:                             # %cond.end170
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_51:                             # %cond.end172
                                        #   in Loop: Header=BB141_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB141_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB141_54
.LBB141_53:                             # %cond.false187
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB141_54:                             # %cond.end189
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB141_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB141_60
.LBB141_56:                             # %cond.false194
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB141_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB141_59
.LBB141_58:                             # %cond.false203
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB141_59:                             # %cond.end205
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_60:                             # %cond.end207
                                        #   in Loop: Header=BB141_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB141_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB141_63
.LBB141_62:                             # %cond.false225
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB141_63:                             # %cond.end227
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB141_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB141_69
.LBB141_65:                             # %cond.false232
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB141_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB141_68
.LBB141_67:                             # %cond.false241
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB141_68:                             # %cond.end243
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_69:                             # %cond.end245
                                        #   in Loop: Header=BB141_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB141_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB141_72
.LBB141_71:                             # %cond.false260
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB141_72:                             # %cond.end262
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB141_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB141_78
.LBB141_74:                             # %cond.false267
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB141_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB141_77
.LBB141_76:                             # %cond.false276
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB141_77:                             # %cond.end278
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_78:                             # %cond.end280
                                        #   in Loop: Header=BB141_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB141_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB141_81
.LBB141_80:                             # %cond.false297
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB141_81:                             # %cond.end298
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB141_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB141_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB141_87
.LBB141_83:                             # %cond.false303
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB141_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB141_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB141_86
.LBB141_85:                             # %cond.false311
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB141_86:                             # %cond.end312
                                        #   in Loop: Header=BB141_14 Depth=2
.LBB141_87:                             # %cond.end314
                                        #   in Loop: Header=BB141_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB141_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB141_14
.LBB141_89:                             # %for.end
                                        #   in Loop: Header=BB141_12 Depth=1
	jmp	.LBB141_90
.LBB141_90:                             # %for.inc336
                                        #   in Loop: Header=BB141_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB141_12
.LBB141_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB141_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB141_92 Depth=1
	movl	$0, -48(%rbp)
.LBB141_94:                             # %for.cond346
                                        #   Parent Loop BB141_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB141_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB141_98
.LBB141_97:                             # %cond.false364
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB141_98:                             # %cond.end366
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB141_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB141_101
.LBB141_100:                            # %cond.false378
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB141_101:                            # %cond.end380
                                        #   in Loop: Header=BB141_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB141_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB141_104
.LBB141_103:                            # %cond.false390
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB141_104:                            # %cond.end392
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB141_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB141_107
.LBB141_106:                            # %cond.false405
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB141_107:                            # %cond.end407
                                        #   in Loop: Header=BB141_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB141_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB141_110
.LBB141_109:                            # %cond.false417
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB141_110:                            # %cond.end419
                                        #   in Loop: Header=BB141_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB141_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_113
.LBB141_112:                            # %cond.false442
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB141_113:                            # %cond.end449
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB141_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB141_119
.LBB141_115:                            # %cond.false454
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB141_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_118
.LBB141_117:                            # %cond.false466
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB141_118:                            # %cond.end473
                                        #   in Loop: Header=BB141_94 Depth=2
.LBB141_119:                            # %cond.end475
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB141_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_122
.LBB141_121:                            # %cond.false490
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB141_122:                            # %cond.end493
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB141_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB141_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB141_128
.LBB141_124:                            # %cond.false498
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB141_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB141_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_127
.LBB141_126:                            # %cond.false506
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB141_127:                            # %cond.end509
                                        #   in Loop: Header=BB141_94 Depth=2
.LBB141_128:                            # %cond.end511
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB141_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB141_94
.LBB141_130:                            # %for.end516
                                        #   in Loop: Header=BB141_92 Depth=1
	jmp	.LBB141_131
.LBB141_131:                            # %for.inc517
                                        #   in Loop: Header=BB141_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB141_92
.LBB141_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB141_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB141_133 Depth=1
	movl	$0, -44(%rbp)
.LBB141_135:                            # %for.cond533
                                        #   Parent Loop BB141_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB141_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_139
.LBB141_138:                            # %cond.false553
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB141_139:                            # %cond.end555
                                        #   in Loop: Header=BB141_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB141_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_145
.LBB141_141:                            # %cond.false567
                                        #   in Loop: Header=BB141_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_144
.LBB141_143:                            # %cond.false579
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB141_144:                            # %cond.end581
                                        #   in Loop: Header=BB141_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_145:                            # %cond.end589
                                        #   in Loop: Header=BB141_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB141_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB141_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB141_157
.LBB141_147:                            # %cond.false594
                                        #   in Loop: Header=BB141_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_150
.LBB141_149:                            # %cond.false607
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB141_150:                            # %cond.end609
                                        #   in Loop: Header=BB141_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB141_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_156
.LBB141_152:                            # %cond.false621
                                        #   in Loop: Header=BB141_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_155
.LBB141_154:                            # %cond.false633
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB141_155:                            # %cond.end635
                                        #   in Loop: Header=BB141_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_156:                            # %cond.end643
                                        #   in Loop: Header=BB141_135 Depth=2
.LBB141_157:                            # %cond.end645
                                        #   in Loop: Header=BB141_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB141_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB141_135
.LBB141_159:                            # %for.end650
                                        #   in Loop: Header=BB141_133 Depth=1
	jmp	.LBB141_160
.LBB141_160:                            # %for.inc651
                                        #   in Loop: Header=BB141_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB141_133
.LBB141_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB141_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB141_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB141_162 Depth=1
	movl	$0, -48(%rbp)
.LBB141_164:                            # %for.cond659
                                        #   Parent Loop BB141_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB141_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_169
.LBB141_168:                            # %cond.false681
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_169:                            # %cond.end683
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_175
.LBB141_171:                            # %cond.false696
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_174
.LBB141_173:                            # %cond.false707
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_174:                            # %cond.end709
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_175:                            # %cond.end718
                                        #   in Loop: Header=BB141_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB141_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB141_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB141_187
.LBB141_177:                            # %cond.false723
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_180
.LBB141_179:                            # %cond.false735
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_180:                            # %cond.end737
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_186
.LBB141_182:                            # %cond.false750
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_185
.LBB141_184:                            # %cond.false761
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_185:                            # %cond.end763
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_186:                            # %cond.end772
                                        #   in Loop: Header=BB141_164 Depth=2
.LBB141_187:                            # %cond.end774
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB141_261
.LBB141_188:                            # %if.else
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB141_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB141_192
.LBB141_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB141_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB141_226
.LBB141_192:                            # %if.then791
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_195
.LBB141_194:                            # %cond.false803
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_195:                            # %cond.end805
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_198
.LBB141_197:                            # %cond.false816
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_198:                            # %cond.end818
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_207
.LBB141_200:                            # %cond.false832
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_203
.LBB141_202:                            # %cond.false840
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_203:                            # %cond.end842
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_206
.LBB141_205:                            # %cond.false853
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_206:                            # %cond.end855
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_207:                            # %cond.end865
                                        #   in Loop: Header=BB141_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB141_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB141_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB141_225
.LBB141_209:                            # %cond.false870
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_212
.LBB141_211:                            # %cond.false879
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_212:                            # %cond.end881
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_215
.LBB141_214:                            # %cond.false892
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_215:                            # %cond.end894
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_224
.LBB141_217:                            # %cond.false908
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_220
.LBB141_219:                            # %cond.false916
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_220:                            # %cond.end918
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_223
.LBB141_222:                            # %cond.false929
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_223:                            # %cond.end931
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_224:                            # %cond.end941
                                        #   in Loop: Header=BB141_164 Depth=2
.LBB141_225:                            # %cond.end943
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB141_260
.LBB141_226:                            # %if.else946
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_229
.LBB141_228:                            # %cond.false962
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_229:                            # %cond.end964
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_232
.LBB141_231:                            # %cond.false973
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_232:                            # %cond.end975
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_241
.LBB141_234:                            # %cond.false987
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_237
.LBB141_236:                            # %cond.false999
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_237:                            # %cond.end1001
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_240
.LBB141_239:                            # %cond.false1010
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_240:                            # %cond.end1012
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_241:                            # %cond.end1020
                                        #   in Loop: Header=BB141_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB141_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB141_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB141_259
.LBB141_243:                            # %cond.false1025
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_246
.LBB141_245:                            # %cond.false1038
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_246:                            # %cond.end1040
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_249
.LBB141_248:                            # %cond.false1049
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_249:                            # %cond.end1051
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB141_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB141_258
.LBB141_251:                            # %cond.false1063
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB141_254
.LBB141_253:                            # %cond.false1075
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB141_254:                            # %cond.end1077
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB141_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB141_257
.LBB141_256:                            # %cond.false1086
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB141_257:                            # %cond.end1088
                                        #   in Loop: Header=BB141_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB141_258:                            # %cond.end1096
                                        #   in Loop: Header=BB141_164 Depth=2
.LBB141_259:                            # %cond.end1098
                                        #   in Loop: Header=BB141_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB141_260:                            # %if.end1101
                                        #   in Loop: Header=BB141_164 Depth=2
	jmp	.LBB141_261
.LBB141_261:                            # %if.end1102
                                        #   in Loop: Header=BB141_164 Depth=2
	jmp	.LBB141_262
.LBB141_262:                            # %for.inc1103
                                        #   in Loop: Header=BB141_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB141_164
.LBB141_263:                            # %for.end1105
                                        #   in Loop: Header=BB141_162 Depth=1
	jmp	.LBB141_264
.LBB141_264:                            # %for.inc1106
                                        #   in Loop: Header=BB141_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB141_162
.LBB141_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB141_266:                            # %return
	cmpl	$1529544751, -108(%rbp) # imm = 0x5B2B002F
	jne	.LBB141_268
.LBB141_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_267
.Lfunc_end141:
	.size	UnifiedOneForthPix.105, .Lfunc_end141-UnifiedOneForthPix.105
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.106
	.type	writeout_picture.106,@function
writeout_picture.106:                   # @writeout_picture.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$779774478, -28(%rbp)   # imm = 0x2E7A6A0E
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB142_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB142_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB142_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB142_3:                              # %for.cond1
                                        #   Parent Loop BB142_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB142_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB142_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB142_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_3
.LBB142_6:                              # %for.end
                                        #   in Loop: Header=BB142_1 Depth=1
	jmp	.LBB142_7
.LBB142_7:                              # %for.inc10
                                        #   in Loop: Header=BB142_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_1
.LBB142_8:                              # %for.end12
	cmpl	$779774478, -28(%rbp)   # imm = 0x2E7A6A0E
	jne	.LBB142_10
.LBB142_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_9
.Lfunc_end142:
	.size	writeout_picture.106, .Lfunc_end142-writeout_picture.106
	.cfi_endproc
                                        # -- End function
	.type	ONE_FOURTH_TAP,@object  # @ONE_FOURTH_TAP
	.section	.rodata,"a",@progbits
	.globl	ONE_FOURTH_TAP
	.p2align	4
ONE_FOURTH_TAP:
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	0                       # 0x0
	.size	ONE_FOURTH_TAP, 24

	.type	enc_picture,@object     # @enc_picture
	.comm	enc_picture,8,8
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	encode_one_frame.prev_frame_no,@object # @encode_one_frame.prev_frame_no
	.local	encode_one_frame.prev_frame_no
	.comm	encode_one_frame.prev_frame_no,4,4
	.type	encode_one_frame.consecutive_non_reference_pictures,@object # @encode_one_frame.consecutive_non_reference_pictures
	.local	encode_one_frame.consecutive_non_reference_pictures
	.comm	encode_one_frame.consecutive_non_reference_pictures,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	enc_frame_picture,@object # @enc_frame_picture
	.comm	enc_frame_picture,8,8
	.type	enc_frame_picture2,@object # @enc_frame_picture2
	.comm	enc_frame_picture2,8,8
	.type	enc_frame_picture3,@object # @enc_frame_picture3
	.comm	enc_frame_picture3,8,8
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	enc_bottom_picture,@object # @enc_bottom_picture
	.comm	enc_bottom_picture,8,8
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"POC type 2 cannot be applied for the coding pattern where the encoding /decoding order of pictures are different from the output order.\n"
	.size	.L.str, 137

	.type	enc_top_picture,@object # @enc_top_picture
	.comm	enc_top_picture,8,8
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"alloc_storable_picture: s->imgY_11"
	.size	.L.str.1, 35

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"alloc_storable_picture: s->imgY_11_w"
	.size	.L.str.2, 37

	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Source picture has higher bit depth than imgpel data type. Please recompile with larger data type for imgpel."
	.size	.L.str.3, 110

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"reading only from formats of 8, 16 or 32 bit allowed on big endian architecture"
	.size	.L.str.4, 80

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	seiHasUser_data_unregistered_info,@object # @seiHasUser_data_unregistered_info
	.comm	seiHasUser_data_unregistered_info,4,4
	.type	seiUser_data_unregistered,@object # @seiUser_data_unregistered
	.comm	seiUser_data_unregistered,32,8
	.type	seiHasUser_data_registered_itu_t_t35_info,@object # @seiHasUser_data_registered_itu_t_t35_info
	.comm	seiHasUser_data_registered_itu_t_t35_info,4,4
	.type	seiUser_data_registered_itu_t_t35,@object # @seiUser_data_registered_itu_t_t35
	.comm	seiUser_data_registered_itu_t_t35,40,8
	.type	seiHasRandomAccess_info,@object # @seiHasRandomAccess_info
	.comm	seiHasRandomAccess_info,4,4
	.type	seiRandomAccess,@object # @seiRandomAccess
	.comm	seiRandomAccess,24,8
	.type	WriteNALU,@object       # @WriteNALU
	.comm	WriteNALU,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	last_P_no,@object       # @last_P_no
	.comm	last_P_no,8,8
	.type	last_P_no_frm,@object   # @last_P_no_frm
	.comm	last_P_no_frm,8,8
	.type	last_P_no_fld,@object   # @last_P_no_fld
	.comm	last_P_no_fld,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"%04d(NVB)%8d \n"
	.size	.L.str.5, 15

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"%04d(IDR)%8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.6, 65

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"FLD"
	.size	.L.str.7, 4

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"FRM"
	.size	.L.str.8, 4

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"%04d(I)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.9, 65

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"%04d(SP) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.10, 65

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"%04d(RB) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.11, 69

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"%04d(B)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.12, 69

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"%04d(P)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.13, 65

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"ReadOneFrame: buf"
	.size	.L.str.14, 18

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"ReadOneFrame: cannot fseek to (Header size) in p_in"
	.size	.L.str.15, 52

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"ReadOneFrame: cannot advance file pointer in p_in beyond frame %d\n"
	.size	.L.str.16, 67

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"ReadOneFrame: cannot read %d bytes from input file, unexpected EOF?, exiting"
	.size	.L.str.17, 77

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"ReadOneFrame (NOT IMPLEMENTED): pic unit size on disk must be divided by 8"
	.size	.L.str.18, 75


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
