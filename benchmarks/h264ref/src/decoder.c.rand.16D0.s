	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_decode_one_b8block.18
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.38
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.43
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.67
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_decode_one_b8block.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_decode_one_b8block.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_decode_one_b8block.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_decode_one_b8block.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.87
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_decode_one_b8block.91
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_decode_one_b8block.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_decode_one_b8block.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.103
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_decode_one_b8block.111
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.111
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_17
# %bb.1:                                # %func_Get_Reference_Block.6
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.7
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %func_Get_Reference_Block.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_10:                               # %func_Get_Reference_Block.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_11:                               # %func_Get_Reference_Block.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.83
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_12:                               # %func_Get_Reference_Block.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_13:                               # %func_Get_Reference_Block.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_14:                               # %func_Get_Reference_Block.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	callq	Get_Reference_Block.96
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_15:                               # %func_Get_Reference_Block.99
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.99
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_16:                               # %func_Get_Reference_Block.106
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %ecx
	movl	%r11d, %r8d
	movq	%r10, %r9
	callq	Get_Reference_Block.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %r11d
	movq	-48(%rbp), %r10         # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	movq	%r10, %r9
	movl	%r11d, %r8d
	movl	%r13d, %r15d
	movl	%edx, %r12d
	movl	%esi, %r14d
	movq	%rdi, %rbx
	je	.LBB1_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB1_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB1_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB1_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB1_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB1_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB1_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB1_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB1_15
	jmp	.LBB1_16
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.19
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.19
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.26
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_Get_Reference_Pixel.1
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.1
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.4
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.4
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.12
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.20
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.21
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.31
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.37
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.42
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_Get_Reference_Pixel.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.45
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_Get_Reference_Pixel.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.46
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_Get_Reference_Pixel.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.56
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_Get_Reference_Pixel.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.70
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_Get_Reference_Pixel.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.80
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_Get_Reference_Pixel.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.82
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_Get_Reference_Pixel.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.95
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_Get_Reference_Pixel.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.98
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_Build_Status_Map.8
	movq	%rbx, %rdi
	callq	Build_Status_Map.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.14
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.39
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_Build_Status_Map.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_Build_Status_Map.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_Build_Status_Map.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_Build_Status_Map.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.63
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_Build_Status_Map.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.79
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_Build_Status_Map.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_Build_Status_Map.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.85
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_Build_Status_Map.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_17
# %bb.1:                                # %func_Error_Concealment.11
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.11
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.71
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %func_Error_Concealment.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.105
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_10:                               # %func_Error_Concealment.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_11:                               # %func_Error_Concealment.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.112
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_12:                               # %func_Error_Concealment.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.121
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_13:                               # %func_Error_Concealment.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.124
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_14:                               # %func_Error_Concealment.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.128
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_15:                               # %func_Error_Concealment.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.129
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_16:                               # %func_Error_Concealment.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.130
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB6_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB6_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB6_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB6_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB6_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB6_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB6_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB6_15
	jmp	.LBB6_16
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_17
# %bb.1:                                # %func_DecOneForthPix.29
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.48
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.113
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.116
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %func_DecOneForthPix.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.117
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_10:                               # %func_DecOneForthPix.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.119
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_11:                               # %func_DecOneForthPix.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.120
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_12:                               # %func_DecOneForthPix.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_13:                               # %func_DecOneForthPix.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.123
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_14:                               # %func_DecOneForthPix.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.125
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_15:                               # %func_DecOneForthPix.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.126
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_16:                               # %func_DecOneForthPix.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.127
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB7_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB7_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB7_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB7_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB7_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB7_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB7_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB7_15
	jmp	.LBB7_16
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_17
# %bb.1:                                # %func_compute_residue_b8block.2
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.3
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.10
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.53
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %func_compute_residue_b8block.60
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.60
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_10:                               # %func_compute_residue_b8block.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.73
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_11:                               # %func_compute_residue_b8block.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.81
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_12:                               # %func_compute_residue_b8block.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_13:                               # %func_compute_residue_b8block.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_14:                               # %func_compute_residue_b8block.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_15:                               # %func_compute_residue_b8block.102
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.102
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_16:                               # %func_compute_residue_b8block.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB8_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB8_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB8_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB8_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB8_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB8_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB8_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB8_15
	jmp	.LBB8_16
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_Conceal_Error.5
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.51
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.52
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.78
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_Conceal_Error.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_Conceal_Error.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.101
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_Conceal_Error.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.104
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_Conceal_Error.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.107
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_Conceal_Error.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.108
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_Conceal_Error.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.114
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_Conceal_Error.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_Conceal_Error.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.1   # -- Begin function Get_Reference_Pixel.1
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.1,@function
Get_Reference_Pixel.1:                  # @Get_Reference_Pixel.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$374410440, -104(%rbp)  # imm = 0x16510CC8
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB11_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB11_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB11_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB11_5
.LBB11_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB11_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB11_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB11_11
.LBB11_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB11_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB11_10
.LBB11_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB11_10:                              # %cond.end14
.LBB11_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB11_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB11_14
.LBB11_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB11_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB11_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB11_20
.LBB11_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB11_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB11_19
.LBB11_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB11_19:                              # %cond.end29
.LBB11_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB11_332
.LBB11_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB11_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB11_25
.LBB11_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB11_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB11_31
.LBB11_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB11_30
.LBB11_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB11_30:                              # %cond.end52
.LBB11_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB11_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_36
.LBB11_35:                              # %cond.false61
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_36:                              # %cond.end63
                                        #   in Loop: Header=BB11_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB11_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_42
.LBB11_38:                              # %cond.false68
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_41
.LBB11_40:                              # %cond.false73
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_41:                              # %cond.end75
                                        #   in Loop: Header=BB11_32 Depth=1
.LBB11_42:                              # %cond.end77
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB11_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_32
.LBB11_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_47
.LBB11_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB11_53
.LBB11_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_52
.LBB11_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_52:                              # %cond.end113
.LBB11_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB11_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB11_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB11_57
.LBB11_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB11_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB11_63
.LBB11_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB11_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB11_62
.LBB11_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB11_62:                              # %cond.end136
.LBB11_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_76
.LBB11_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB11_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB11_68
.LBB11_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB11_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB11_74
.LBB11_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB11_73
.LBB11_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB11_73:                              # %cond.end169
.LBB11_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_75:                              # %if.end
	jmp	.LBB11_76
.LBB11_76:                              # %if.end178
	jmp	.LBB11_331
.LBB11_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB11_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB11_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB11_81
.LBB11_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB11_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB11_87
.LBB11_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB11_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB11_86
.LBB11_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB11_86:                              # %cond.end197
.LBB11_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB11_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_92
.LBB11_91:                              # %cond.false209
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_92:                              # %cond.end211
                                        #   in Loop: Header=BB11_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB11_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_98
.LBB11_94:                              # %cond.false216
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_97
.LBB11_96:                              # %cond.false221
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_97:                              # %cond.end223
                                        #   in Loop: Header=BB11_88 Depth=1
.LBB11_98:                              # %cond.end225
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB11_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_88
.LBB11_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_103
.LBB11_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB11_109
.LBB11_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_108
.LBB11_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_108:                             # %cond.end266
.LBB11_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB11_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB11_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB11_113
.LBB11_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB11_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB11_119
.LBB11_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB11_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB11_118
.LBB11_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB11_118:                             # %cond.end287
.LBB11_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_132
.LBB11_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB11_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB11_124
.LBB11_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB11_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB11_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB11_130
.LBB11_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB11_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB11_129
.LBB11_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB11_129:                             # %cond.end320
.LBB11_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_131:                             # %if.end331
	jmp	.LBB11_132
.LBB11_132:                             # %if.end332
	jmp	.LBB11_330
.LBB11_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB11_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB11_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_139
.LBB11_138:                             # %cond.false345
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_139:                             # %cond.end347
                                        #   in Loop: Header=BB11_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB11_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_145
.LBB11_141:                             # %cond.false352
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_144
.LBB11_143:                             # %cond.false357
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_144:                             # %cond.end359
                                        #   in Loop: Header=BB11_135 Depth=1
.LBB11_145:                             # %cond.end361
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_146:                             # %for.cond363
                                        #   Parent Loop BB11_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB11_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB11_150
.LBB11_149:                             # %cond.false371
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_150:                             # %cond.end373
                                        #   in Loop: Header=BB11_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB11_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_156
.LBB11_152:                             # %cond.false378
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB11_155
.LBB11_154:                             # %cond.false383
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_155:                             # %cond.end385
                                        #   in Loop: Header=BB11_146 Depth=2
.LBB11_156:                             # %cond.end387
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB11_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_146
.LBB11_158:                             # %for.end401
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB11_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_135
.LBB11_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB11_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB11_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB11_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_161
.LBB11_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_167
.LBB11_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB11_173
.LBB11_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_172
.LBB11_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_172:                             # %cond.end449
.LBB11_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB11_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_177
.LBB11_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB11_183
.LBB11_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_182
.LBB11_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_182:                             # %cond.end486
.LBB11_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_196
.LBB11_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB11_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_188
.LBB11_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB11_194
.LBB11_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_193
.LBB11_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_193:                             # %cond.end526
.LBB11_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_195:                             # %if.end532
	jmp	.LBB11_196
.LBB11_196:                             # %if.end533
	jmp	.LBB11_329
.LBB11_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB11_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB11_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB11_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_203
.LBB11_202:                             # %cond.false546
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_203:                             # %cond.end548
                                        #   in Loop: Header=BB11_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB11_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_209
.LBB11_205:                             # %cond.false553
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_208
.LBB11_207:                             # %cond.false558
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_208:                             # %cond.end560
                                        #   in Loop: Header=BB11_199 Depth=1
.LBB11_209:                             # %cond.end562
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_210:                             # %for.cond564
                                        #   Parent Loop BB11_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB11_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB11_214
.LBB11_213:                             # %cond.false572
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_214:                             # %cond.end574
                                        #   in Loop: Header=BB11_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB11_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB11_220
.LBB11_216:                             # %cond.false579
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB11_219
.LBB11_218:                             # %cond.false584
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_219:                             # %cond.end586
                                        #   in Loop: Header=BB11_210 Depth=2
.LBB11_220:                             # %cond.end588
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB11_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_210
.LBB11_222:                             # %for.end602
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB11_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_199
.LBB11_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB11_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB11_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB11_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_225
.LBB11_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_231
.LBB11_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB11_237
.LBB11_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_236
.LBB11_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB11_236:                             # %cond.end650
.LBB11_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB11_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_241
.LBB11_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB11_247
.LBB11_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_246
.LBB11_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_246:                             # %cond.end687
.LBB11_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB11_258
.LBB11_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_251
.LBB11_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB11_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB11_257
.LBB11_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB11_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_256
.LBB11_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB11_256:                             # %cond.end724
.LBB11_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_258:                             # %if.end730
	jmp	.LBB11_328
.LBB11_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB11_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB11_262
.LBB11_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB11_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB11_265
.LBB11_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB11_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB11_271
.LBB11_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB11_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB11_270
.LBB11_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB11_270:                             # %cond.end753
.LBB11_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB11_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB11_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_276
.LBB11_275:                             # %cond.false765
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_276:                             # %cond.end767
                                        #   in Loop: Header=BB11_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB11_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_282
.LBB11_278:                             # %cond.false772
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB11_281
.LBB11_280:                             # %cond.false777
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB11_281:                             # %cond.end779
                                        #   in Loop: Header=BB11_272 Depth=1
.LBB11_282:                             # %cond.end781
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB11_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB11_272
.LBB11_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_287
.LBB11_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB11_293
.LBB11_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_292
.LBB11_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_292:                             # %cond.end822
.LBB11_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB11_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB11_296
.LBB11_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB11_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB11_299
.LBB11_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB11_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB11_305
.LBB11_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB11_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB11_304
.LBB11_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB11_304:                             # %cond.end847
.LBB11_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB11_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB11_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_310
.LBB11_309:                             # %cond.false859
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_310:                             # %cond.end861
                                        #   in Loop: Header=BB11_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB11_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB11_316
.LBB11_312:                             # %cond.false866
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB11_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB11_315
.LBB11_314:                             # %cond.false871
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB11_315:                             # %cond.end873
                                        #   in Loop: Header=BB11_306 Depth=1
.LBB11_316:                             # %cond.end875
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB11_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB11_306
.LBB11_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_321
.LBB11_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB11_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB11_327
.LBB11_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB11_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB11_326
.LBB11_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB11_326:                             # %cond.end916
.LBB11_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB11_328:                             # %if.end922
	jmp	.LBB11_329
.LBB11_329:                             # %if.end923
	jmp	.LBB11_330
.LBB11_330:                             # %if.end924
	jmp	.LBB11_331
.LBB11_331:                             # %if.end925
	jmp	.LBB11_332
.LBB11_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$374410440, -104(%rbp)  # imm = 0x16510CC8
	jne	.LBB11_334
.LBB11_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_333
.Lfunc_end11:
	.size	Get_Reference_Pixel.1, .Lfunc_end11-Get_Reference_Pixel.1
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.2 # -- Begin function compute_residue_b8block.2
	.p2align	4, 0x90
	.type	compute_residue_b8block.2,@function
compute_residue_b8block.2:              # @compute_residue_b8block.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2080016498, -36(%rbp)  # imm = 0x7BFA8872
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB12_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB12_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB12_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_4:                               # %for.cond4
                                        #   Parent Loop BB12_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB12_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB12_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB12_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_4
.LBB12_7:                               # %for.end
                                        #   in Loop: Header=BB12_2 Depth=1
	jmp	.LBB12_8
.LBB12_8:                               # %for.inc22
                                        #   in Loop: Header=BB12_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_2
.LBB12_9:                               # %for.end24
	jmp	.LBB12_19
.LBB12_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB12_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB12_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB12_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB12_13:                              # %for.cond29
                                        #   Parent Loop BB12_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB12_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB12_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB12_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_13
.LBB12_16:                              # %for.end56
                                        #   in Loop: Header=BB12_11 Depth=1
	jmp	.LBB12_17
.LBB12_17:                              # %for.inc57
                                        #   in Loop: Header=BB12_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_11
.LBB12_18:                              # %for.end59
	jmp	.LBB12_19
.LBB12_19:                              # %if.end
	cmpl	$2080016498, -36(%rbp)  # imm = 0x7BFA8872
	jne	.LBB12_21
.LBB12_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_20
.Lfunc_end12:
	.size	compute_residue_b8block.2, .Lfunc_end12-compute_residue_b8block.2
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.3 # -- Begin function compute_residue_b8block.3
	.p2align	4, 0x90
	.type	compute_residue_b8block.3,@function
compute_residue_b8block.3:              # @compute_residue_b8block.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1157314866, -36(%rbp)  # imm = 0x44FB3932
	movl	%edi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB13_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB13_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB13_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_4:                               # %for.cond4
                                        #   Parent Loop BB13_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB13_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB13_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB13_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_4
.LBB13_7:                               # %for.end
                                        #   in Loop: Header=BB13_2 Depth=1
	jmp	.LBB13_8
.LBB13_8:                               # %for.inc22
                                        #   in Loop: Header=BB13_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_2
.LBB13_9:                               # %for.end24
	jmp	.LBB13_19
.LBB13_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB13_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB13_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB13_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB13_13:                              # %for.cond29
                                        #   Parent Loop BB13_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB13_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB13_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB13_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_13
.LBB13_16:                              # %for.end56
                                        #   in Loop: Header=BB13_11 Depth=1
	jmp	.LBB13_17
.LBB13_17:                              # %for.inc57
                                        #   in Loop: Header=BB13_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_11
.LBB13_18:                              # %for.end59
	jmp	.LBB13_19
.LBB13_19:                              # %if.end
	cmpl	$1157314866, -36(%rbp)  # imm = 0x44FB3932
	jne	.LBB13_21
.LBB13_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_20
.Lfunc_end13:
	.size	compute_residue_b8block.3, .Lfunc_end13-compute_residue_b8block.3
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.4   # -- Begin function Get_Reference_Pixel.4
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.4,@function
Get_Reference_Pixel.4:                  # @Get_Reference_Pixel.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1188126080, -104(%rbp) # imm = 0x46D15D80
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB14_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB14_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB14_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB14_5
.LBB14_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB14_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB14_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB14_11
.LBB14_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB14_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB14_10
.LBB14_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB14_10:                              # %cond.end14
.LBB14_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB14_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB14_14
.LBB14_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB14_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB14_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB14_20
.LBB14_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB14_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB14_19
.LBB14_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB14_19:                              # %cond.end29
.LBB14_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB14_332
.LBB14_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB14_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB14_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB14_25
.LBB14_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB14_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB14_31
.LBB14_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB14_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB14_30
.LBB14_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB14_30:                              # %cond.end52
.LBB14_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_36
.LBB14_35:                              # %cond.false61
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_36:                              # %cond.end63
                                        #   in Loop: Header=BB14_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB14_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_42
.LBB14_38:                              # %cond.false68
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_41
.LBB14_40:                              # %cond.false73
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_41:                              # %cond.end75
                                        #   in Loop: Header=BB14_32 Depth=1
.LBB14_42:                              # %cond.end77
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB14_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_32
.LBB14_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_47
.LBB14_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB14_53
.LBB14_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_52
.LBB14_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_52:                              # %cond.end113
.LBB14_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB14_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB14_57
.LBB14_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB14_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB14_63
.LBB14_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB14_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB14_62
.LBB14_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB14_62:                              # %cond.end136
.LBB14_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_76
.LBB14_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB14_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB14_68
.LBB14_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB14_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB14_74
.LBB14_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB14_73
.LBB14_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB14_73:                              # %cond.end169
.LBB14_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_75:                              # %if.end
	jmp	.LBB14_76
.LBB14_76:                              # %if.end178
	jmp	.LBB14_331
.LBB14_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB14_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB14_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB14_81
.LBB14_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB14_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB14_87
.LBB14_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB14_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB14_86
.LBB14_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB14_86:                              # %cond.end197
.LBB14_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_92
.LBB14_91:                              # %cond.false209
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_92:                              # %cond.end211
                                        #   in Loop: Header=BB14_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB14_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_98
.LBB14_94:                              # %cond.false216
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_97
.LBB14_96:                              # %cond.false221
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_97:                              # %cond.end223
                                        #   in Loop: Header=BB14_88 Depth=1
.LBB14_98:                              # %cond.end225
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB14_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_88
.LBB14_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_103
.LBB14_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB14_109
.LBB14_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_108
.LBB14_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_108:                             # %cond.end266
.LBB14_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB14_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB14_113
.LBB14_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB14_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB14_119
.LBB14_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB14_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB14_118
.LBB14_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB14_118:                             # %cond.end287
.LBB14_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_132
.LBB14_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB14_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB14_124
.LBB14_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB14_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB14_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB14_130
.LBB14_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB14_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB14_129
.LBB14_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB14_129:                             # %cond.end320
.LBB14_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_131:                             # %if.end331
	jmp	.LBB14_132
.LBB14_132:                             # %if.end332
	jmp	.LBB14_330
.LBB14_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB14_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB14_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB14_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_139
.LBB14_138:                             # %cond.false345
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_139:                             # %cond.end347
                                        #   in Loop: Header=BB14_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB14_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_145
.LBB14_141:                             # %cond.false352
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_144
.LBB14_143:                             # %cond.false357
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_144:                             # %cond.end359
                                        #   in Loop: Header=BB14_135 Depth=1
.LBB14_145:                             # %cond.end361
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_146:                             # %for.cond363
                                        #   Parent Loop BB14_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB14_150
.LBB14_149:                             # %cond.false371
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_150:                             # %cond.end373
                                        #   in Loop: Header=BB14_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB14_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_156
.LBB14_152:                             # %cond.false378
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB14_155
.LBB14_154:                             # %cond.false383
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_155:                             # %cond.end385
                                        #   in Loop: Header=BB14_146 Depth=2
.LBB14_156:                             # %cond.end387
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB14_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_146
.LBB14_158:                             # %for.end401
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB14_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_135
.LBB14_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB14_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB14_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_161
.LBB14_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_167
.LBB14_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB14_173
.LBB14_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_172
.LBB14_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_172:                             # %cond.end449
.LBB14_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_177
.LBB14_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB14_183
.LBB14_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_182
.LBB14_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_182:                             # %cond.end486
.LBB14_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_196
.LBB14_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB14_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_188
.LBB14_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB14_194
.LBB14_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_193
.LBB14_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_193:                             # %cond.end526
.LBB14_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_195:                             # %if.end532
	jmp	.LBB14_196
.LBB14_196:                             # %if.end533
	jmp	.LBB14_329
.LBB14_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB14_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB14_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB14_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_203
.LBB14_202:                             # %cond.false546
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_203:                             # %cond.end548
                                        #   in Loop: Header=BB14_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB14_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_209
.LBB14_205:                             # %cond.false553
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_208
.LBB14_207:                             # %cond.false558
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_208:                             # %cond.end560
                                        #   in Loop: Header=BB14_199 Depth=1
.LBB14_209:                             # %cond.end562
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_210:                             # %for.cond564
                                        #   Parent Loop BB14_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB14_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB14_214
.LBB14_213:                             # %cond.false572
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_214:                             # %cond.end574
                                        #   in Loop: Header=BB14_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB14_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB14_220
.LBB14_216:                             # %cond.false579
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB14_219
.LBB14_218:                             # %cond.false584
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_219:                             # %cond.end586
                                        #   in Loop: Header=BB14_210 Depth=2
.LBB14_220:                             # %cond.end588
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB14_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_210
.LBB14_222:                             # %for.end602
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB14_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_199
.LBB14_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB14_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB14_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_225
.LBB14_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_231
.LBB14_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB14_237
.LBB14_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_236
.LBB14_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB14_236:                             # %cond.end650
.LBB14_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_241
.LBB14_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB14_247
.LBB14_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_246
.LBB14_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_246:                             # %cond.end687
.LBB14_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB14_258
.LBB14_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_251
.LBB14_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB14_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB14_257
.LBB14_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB14_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_256
.LBB14_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB14_256:                             # %cond.end724
.LBB14_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_258:                             # %if.end730
	jmp	.LBB14_328
.LBB14_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB14_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB14_262
.LBB14_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB14_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB14_265
.LBB14_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB14_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB14_271
.LBB14_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB14_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB14_270
.LBB14_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB14_270:                             # %cond.end753
.LBB14_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB14_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB14_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_276
.LBB14_275:                             # %cond.false765
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_276:                             # %cond.end767
                                        #   in Loop: Header=BB14_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB14_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_282
.LBB14_278:                             # %cond.false772
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB14_281
.LBB14_280:                             # %cond.false777
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB14_281:                             # %cond.end779
                                        #   in Loop: Header=BB14_272 Depth=1
.LBB14_282:                             # %cond.end781
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB14_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB14_272
.LBB14_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_287
.LBB14_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB14_293
.LBB14_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_292
.LBB14_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_292:                             # %cond.end822
.LBB14_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB14_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB14_296
.LBB14_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB14_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB14_299
.LBB14_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB14_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB14_305
.LBB14_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB14_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB14_304
.LBB14_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB14_304:                             # %cond.end847
.LBB14_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB14_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB14_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_310
.LBB14_309:                             # %cond.false859
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_310:                             # %cond.end861
                                        #   in Loop: Header=BB14_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB14_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB14_316
.LBB14_312:                             # %cond.false866
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB14_315
.LBB14_314:                             # %cond.false871
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB14_315:                             # %cond.end873
                                        #   in Loop: Header=BB14_306 Depth=1
.LBB14_316:                             # %cond.end875
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB14_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB14_306
.LBB14_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_321
.LBB14_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB14_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB14_327
.LBB14_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB14_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB14_326
.LBB14_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB14_326:                             # %cond.end916
.LBB14_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB14_328:                             # %if.end922
	jmp	.LBB14_329
.LBB14_329:                             # %if.end923
	jmp	.LBB14_330
.LBB14_330:                             # %if.end924
	jmp	.LBB14_331
.LBB14_331:                             # %if.end925
	jmp	.LBB14_332
.LBB14_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1188126080, -104(%rbp) # imm = 0x46D15D80
	jne	.LBB14_334
.LBB14_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_333
.Lfunc_end14:
	.size	Get_Reference_Pixel.4, .Lfunc_end14-Get_Reference_Pixel.4
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.5         # -- Begin function Conceal_Error.5
	.p2align	4, 0x90
	.type	Conceal_Error.5,@function
Conceal_Error.5:                        # @Conceal_Error.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1983178194, -68(%rbp)  # imm = 0x7634E5D2
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB15_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB15_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB15_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB15_4:                               # %land.end
.LBB15_5:                               # %lor.end
.LBB15_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB15_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB15_9
.LBB15_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB15_14
.LBB15_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB15_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB15_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB15_12:                              # %land.end51
.LBB15_13:                              # %lor.end53
.LBB15_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB15_180
# %bb.15:                               # %land.end54
	movq	.LJTI15_0(,%rax,8), %rax
	jmpq	*%rax
.LBB15_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB15_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB15_18 Depth=1
	movl	$0, -4(%rbp)
.LBB15_20:                              # %for.cond68
                                        #   Parent Loop BB15_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB15_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB15_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_20
.LBB15_23:                              # %for.end
                                        #   in Loop: Header=BB15_18 Depth=1
	jmp	.LBB15_24
.LBB15_24:                              # %for.inc85
                                        #   in Loop: Header=BB15_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_18
.LBB15_25:                              # %for.end87
	jmp	.LBB15_35
.LBB15_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB15_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB15_27 Depth=1
	movl	$0, -4(%rbp)
.LBB15_29:                              # %for.cond92
                                        #   Parent Loop BB15_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB15_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB15_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_29
.LBB15_32:                              # %for.end104
                                        #   in Loop: Header=BB15_27 Depth=1
	jmp	.LBB15_33
.LBB15_33:                              # %for.inc105
                                        #   in Loop: Header=BB15_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_27
.LBB15_34:                              # %for.end107
	jmp	.LBB15_35
.LBB15_35:                              # %if.end
	jmp	.LBB15_180
.LBB15_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB15_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_39 Depth 2
                                        #       Child Loop BB15_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB15_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB15_37 Depth=1
	movl	$0, -12(%rbp)
.LBB15_39:                              # %for.cond113
                                        #   Parent Loop BB15_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB15_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB15_39 Depth=2
	movl	$0, -4(%rbp)
.LBB15_41:                              # %for.cond117
                                        #   Parent Loop BB15_37 Depth=1
                                        #     Parent Loop BB15_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB15_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB15_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB15_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_41
.LBB15_44:                              # %for.end141
                                        #   in Loop: Header=BB15_39 Depth=2
	jmp	.LBB15_45
.LBB15_45:                              # %for.inc142
                                        #   in Loop: Header=BB15_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_39
.LBB15_46:                              # %for.end144
                                        #   in Loop: Header=BB15_37 Depth=1
	jmp	.LBB15_47
.LBB15_47:                              # %for.inc145
                                        #   in Loop: Header=BB15_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_37
.LBB15_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB15_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB15_49 Depth=1
	movl	$0, -8(%rbp)
.LBB15_51:                              # %for.cond152
                                        #   Parent Loop BB15_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB15_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB15_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_51
.LBB15_54:                              # %for.end162
                                        #   in Loop: Header=BB15_49 Depth=1
	jmp	.LBB15_55
.LBB15_55:                              # %for.inc163
                                        #   in Loop: Header=BB15_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_49
.LBB15_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB15_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB15_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB15_59 Depth=1
	movl	$0, -4(%rbp)
.LBB15_61:                              # %for.cond175
                                        #   Parent Loop BB15_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB15_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB15_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_61
.LBB15_64:                              # %for.end195
                                        #   in Loop: Header=BB15_59 Depth=1
	jmp	.LBB15_65
.LBB15_65:                              # %for.inc196
                                        #   in Loop: Header=BB15_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_59
.LBB15_66:                              # %for.end198
	jmp	.LBB15_95
.LBB15_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB15_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB15_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_71 Depth 2
                                        #       Child Loop BB15_73 Depth 3
                                        #         Child Loop BB15_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB15_71:                              # %for.cond210
                                        #   Parent Loop BB15_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_73 Depth 3
                                        #         Child Loop BB15_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB15_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB15_73:                              # %for.cond236
                                        #   Parent Loop BB15_69 Depth=1
                                        #     Parent Loop BB15_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB15_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB15_73 Depth=3
	movl	$0, -4(%rbp)
.LBB15_75:                              # %for.cond240
                                        #   Parent Loop BB15_69 Depth=1
                                        #     Parent Loop BB15_71 Depth=2
                                        #       Parent Loop BB15_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB15_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB15_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB15_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_75
.LBB15_78:                              # %for.end259
                                        #   in Loop: Header=BB15_73 Depth=3
	jmp	.LBB15_79
.LBB15_79:                              # %for.inc260
                                        #   in Loop: Header=BB15_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_73
.LBB15_80:                              # %for.end262
                                        #   in Loop: Header=BB15_71 Depth=2
	jmp	.LBB15_81
.LBB15_81:                              # %for.inc263
                                        #   in Loop: Header=BB15_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_71
.LBB15_82:                              # %for.end265
                                        #   in Loop: Header=BB15_69 Depth=1
	jmp	.LBB15_83
.LBB15_83:                              # %for.inc266
                                        #   in Loop: Header=BB15_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_69
.LBB15_84:                              # %for.end268
	jmp	.LBB15_94
.LBB15_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB15_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	$0, -4(%rbp)
.LBB15_88:                              # %for.cond274
                                        #   Parent Loop BB15_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB15_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB15_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_88
.LBB15_91:                              # %for.end294
                                        #   in Loop: Header=BB15_86 Depth=1
	jmp	.LBB15_92
.LBB15_92:                              # %for.inc295
                                        #   in Loop: Header=BB15_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_86
.LBB15_93:                              # %for.end297
	jmp	.LBB15_94
.LBB15_94:                              # %if.end298
	jmp	.LBB15_95
.LBB15_95:                              # %if.end299
	jmp	.LBB15_105
.LBB15_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB15_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB15_97 Depth=1
	movl	$0, -4(%rbp)
.LBB15_99:                              # %for.cond305
                                        #   Parent Loop BB15_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB15_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB15_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_99
.LBB15_102:                             # %for.end317
                                        #   in Loop: Header=BB15_97 Depth=1
	jmp	.LBB15_103
.LBB15_103:                             # %for.inc318
                                        #   in Loop: Header=BB15_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_97
.LBB15_104:                             # %for.end320
	jmp	.LBB15_105
.LBB15_105:                             # %if.end321
	jmp	.LBB15_180
.LBB15_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB15_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_110 Depth 2
                                        #       Child Loop BB15_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB15_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB15_108 Depth=1
	movl	$0, -12(%rbp)
.LBB15_110:                             # %for.cond331
                                        #   Parent Loop BB15_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB15_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB15_110 Depth=2
	movl	$0, -4(%rbp)
.LBB15_112:                             # %for.cond335
                                        #   Parent Loop BB15_108 Depth=1
                                        #     Parent Loop BB15_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB15_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB15_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB15_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_112
.LBB15_115:                             # %for.end359
                                        #   in Loop: Header=BB15_110 Depth=2
	jmp	.LBB15_116
.LBB15_116:                             # %for.inc360
                                        #   in Loop: Header=BB15_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_110
.LBB15_117:                             # %for.end362
                                        #   in Loop: Header=BB15_108 Depth=1
	jmp	.LBB15_118
.LBB15_118:                             # %for.inc363
                                        #   in Loop: Header=BB15_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_108
.LBB15_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB15_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB15_120 Depth=1
	movl	$0, -8(%rbp)
.LBB15_122:                             # %for.cond370
                                        #   Parent Loop BB15_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB15_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB15_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_122
.LBB15_125:                             # %for.end380
                                        #   in Loop: Header=BB15_120 Depth=1
	jmp	.LBB15_126
.LBB15_126:                             # %for.inc381
                                        #   in Loop: Header=BB15_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_120
.LBB15_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB15_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB15_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	$0, -4(%rbp)
.LBB15_131:                             # %for.cond390
                                        #   Parent Loop BB15_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB15_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB15_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_131
.LBB15_134:                             # %for.end410
                                        #   in Loop: Header=BB15_129 Depth=1
	jmp	.LBB15_135
.LBB15_135:                             # %for.inc411
                                        #   in Loop: Header=BB15_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_129
.LBB15_136:                             # %for.end413
	jmp	.LBB15_156
.LBB15_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB15_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB15_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_141 Depth 2
                                        #       Child Loop BB15_143 Depth 3
                                        #         Child Loop BB15_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB15_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB15_141:                             # %for.cond425
                                        #   Parent Loop BB15_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB15_143 Depth 3
                                        #         Child Loop BB15_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB15_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB15_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB15_143:                             # %for.cond452
                                        #   Parent Loop BB15_139 Depth=1
                                        #     Parent Loop BB15_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB15_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB15_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB15_143 Depth=3
	movl	$0, -4(%rbp)
.LBB15_145:                             # %for.cond456
                                        #   Parent Loop BB15_139 Depth=1
                                        #     Parent Loop BB15_141 Depth=2
                                        #       Parent Loop BB15_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB15_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB15_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB15_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_145
.LBB15_148:                             # %for.end475
                                        #   in Loop: Header=BB15_143 Depth=3
	jmp	.LBB15_149
.LBB15_149:                             # %for.inc476
                                        #   in Loop: Header=BB15_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_143
.LBB15_150:                             # %for.end478
                                        #   in Loop: Header=BB15_141 Depth=2
	jmp	.LBB15_151
.LBB15_151:                             # %for.inc479
                                        #   in Loop: Header=BB15_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB15_141
.LBB15_152:                             # %for.end481
                                        #   in Loop: Header=BB15_139 Depth=1
	jmp	.LBB15_153
.LBB15_153:                             # %for.inc482
                                        #   in Loop: Header=BB15_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB15_139
.LBB15_154:                             # %for.end484
	jmp	.LBB15_155
.LBB15_155:                             # %if.end485
	jmp	.LBB15_156
.LBB15_156:                             # %if.end486
	jmp	.LBB15_157
.LBB15_157:                             # %if.end487
	jmp	.LBB15_180
.LBB15_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB15_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB15_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB15_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB15_161 Depth=1
	movl	$0, -4(%rbp)
.LBB15_163:                             # %for.cond499
                                        #   Parent Loop BB15_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB15_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB15_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_163
.LBB15_166:                             # %for.end519
                                        #   in Loop: Header=BB15_161 Depth=1
	jmp	.LBB15_167
.LBB15_167:                             # %for.inc520
                                        #   in Loop: Header=BB15_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_161
.LBB15_168:                             # %for.end522
	jmp	.LBB15_169
.LBB15_169:                             # %if.end523
	jmp	.LBB15_179
.LBB15_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB15_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB15_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB15_171 Depth=1
	movl	$0, -4(%rbp)
.LBB15_173:                             # %for.cond529
                                        #   Parent Loop BB15_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB15_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB15_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB15_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_173
.LBB15_176:                             # %for.end541
                                        #   in Loop: Header=BB15_171 Depth=1
	jmp	.LBB15_177
.LBB15_177:                             # %for.inc542
                                        #   in Loop: Header=BB15_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_171
.LBB15_178:                             # %for.end544
	jmp	.LBB15_179
.LBB15_179:                             # %if.end545
	jmp	.LBB15_180
.LBB15_180:                             # %sw.epilog
	cmpl	$1983178194, -68(%rbp)  # imm = 0x7634E5D2
	jne	.LBB15_182
.LBB15_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_181
.Lfunc_end15:
	.size	Conceal_Error.5, .Lfunc_end15-Conceal_Error.5
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI15_0:
	.quad	.LBB15_16
	.quad	.LBB15_158
	.quad	.LBB15_106
	.quad	.LBB15_180
	.quad	.LBB15_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.6   # -- Begin function Get_Reference_Block.6
	.p2align	4, 0x90
	.type	Get_Reference_Block.6,@function
Get_Reference_Block.6:                  # @Get_Reference_Block.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1635085496, -24(%rbp)  # imm = 0x61756CB8
	movq	%rdi, -48(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -56(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -4(%rbp)
.LBB16_3:                               # %for.cond5
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_3
.LBB16_6:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_7
.LBB16_7:                               # %for.inc14
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_1
.LBB16_8:                               # %for.end16
	cmpl	$1635085496, -24(%rbp)  # imm = 0x61756CB8
	jne	.LBB16_10
.LBB16_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_9
.Lfunc_end16:
	.size	Get_Reference_Block.6, .Lfunc_end16-Get_Reference_Block.6
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.7   # -- Begin function Get_Reference_Block.7
	.p2align	4, 0x90
	.type	Get_Reference_Block.7,@function
Get_Reference_Block.7:                  # @Get_Reference_Block.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1304425860, -36(%rbp)  # imm = 0x4DBFF584
	movq	%rdi, -56(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB17_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB17_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB17_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	$0, -4(%rbp)
.LBB17_3:                               # %for.cond5
                                        #   Parent Loop BB17_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB17_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB17_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB17_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB17_3
.LBB17_6:                               # %for.end
                                        #   in Loop: Header=BB17_1 Depth=1
	jmp	.LBB17_7
.LBB17_7:                               # %for.inc14
                                        #   in Loop: Header=BB17_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB17_1
.LBB17_8:                               # %for.end16
	cmpl	$1304425860, -36(%rbp)  # imm = 0x4DBFF584
	jne	.LBB17_10
.LBB17_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_9
.Lfunc_end17:
	.size	Get_Reference_Block.7, .Lfunc_end17-Get_Reference_Block.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.8
.LCPI18_0:
	.quad	4636737291354636288     # double 100
.LCPI18_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.8
	.p2align	4, 0x90
	.type	Build_Status_Map.8,@function
Build_Status_Map.8:                     # @Build_Status_Map.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$87046087, -40(%rbp)    # imm = 0x53037C7
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB18_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -12(%rbp)
.LBB18_3:                               # %for.cond2
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB18_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB18_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB18_13
.LBB18_6:                               # %if.then
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI18_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB18_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB18_8:                               # %if.end
                                        #   in Loop: Header=BB18_3 Depth=2
	callq	rand
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI18_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB18_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB18_10:                              # %if.end20
                                        #   in Loop: Header=BB18_3 Depth=2
	callq	rand
	vmovsd	.LCPI18_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI18_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB18_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	$1, -4(%rbp)
.LBB18_12:                              # %if.end29
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB18_13:                              # %if.end30
                                        #   in Loop: Header=BB18_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB18_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB18_18
.LBB18_15:                              # %if.else
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB18_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB18_17:                              # %if.end49
                                        #   in Loop: Header=BB18_3 Depth=2
	jmp	.LBB18_18
.LBB18_18:                              # %if.end50
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB18_3
.LBB18_20:                              # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_21
.LBB18_21:                              # %for.inc53
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_1
.LBB18_22:                              # %for.end55
	cmpl	$87046087, -40(%rbp)    # imm = 0x53037C7
	jne	.LBB18_24
.LBB18_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_23
.Lfunc_end18:
	.size	Build_Status_Map.8, .Lfunc_end18-Build_Status_Map.8
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.9   # -- Begin function Get_Reference_Block.9
	.p2align	4, 0x90
	.type	Get_Reference_Block.9,@function
Get_Reference_Block.9:                  # @Get_Reference_Block.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1188048840, -36(%rbp)  # imm = 0x46D02FC8
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -20(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB19_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_3:                               # %for.cond5
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB19_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_3
.LBB19_6:                               # %for.end
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_7
.LBB19_7:                               # %for.inc14
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_1
.LBB19_8:                               # %for.end16
	cmpl	$1188048840, -36(%rbp)  # imm = 0x46D02FC8
	jne	.LBB19_10
.LBB19_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_9
.Lfunc_end19:
	.size	Get_Reference_Block.9, .Lfunc_end19-Get_Reference_Block.9
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.10 # -- Begin function compute_residue_b8block.10
	.p2align	4, 0x90
	.type	compute_residue_b8block.10,@function
compute_residue_b8block.10:             # @compute_residue_b8block.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$573431306, -36(%rbp)   # imm = 0x222DDE0A
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB20_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB20_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB20_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB20_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB20_4:                               # %for.cond4
                                        #   Parent Loop BB20_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB20_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB20_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB20_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_4
.LBB20_7:                               # %for.end
                                        #   in Loop: Header=BB20_2 Depth=1
	jmp	.LBB20_8
.LBB20_8:                               # %for.inc22
                                        #   in Loop: Header=BB20_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_2
.LBB20_9:                               # %for.end24
	jmp	.LBB20_19
.LBB20_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB20_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB20_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB20_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB20_13:                              # %for.cond29
                                        #   Parent Loop BB20_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB20_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB20_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB20_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_13
.LBB20_16:                              # %for.end56
                                        #   in Loop: Header=BB20_11 Depth=1
	jmp	.LBB20_17
.LBB20_17:                              # %for.inc57
                                        #   in Loop: Header=BB20_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB20_11
.LBB20_18:                              # %for.end59
	jmp	.LBB20_19
.LBB20_19:                              # %if.end
	cmpl	$573431306, -36(%rbp)   # imm = 0x222DDE0A
	jne	.LBB20_21
.LBB20_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_20
.Lfunc_end20:
	.size	compute_residue_b8block.10, .Lfunc_end20-compute_residue_b8block.10
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.11    # -- Begin function Error_Concealment.11
	.p2align	4, 0x90
	.type	Error_Concealment.11,@function
Error_Concealment.11:                   # @Error_Concealment.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$535809935, -16(%rbp)   # imm = 0x1FEFCF8F
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB21_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB21_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB21_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB21_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB21_6:                               # %if.end
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_7
.LBB21_7:                               # %for.inc
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_8:                               # %for.end
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_9
.LBB21_9:                               # %for.inc7
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_1
.LBB21_10:                              # %for.end9
	cmpl	$535809935, -16(%rbp)   # imm = 0x1FEFCF8F
	jne	.LBB21_12
.LBB21_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_11
.Lfunc_end21:
	.size	Error_Concealment.11, .Lfunc_end21-Error_Concealment.11
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.12  # -- Begin function Get_Reference_Pixel.12
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.12,@function
Get_Reference_Pixel.12:                 # @Get_Reference_Pixel.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$698737973, -100(%rbp)  # imm = 0x29A5E535
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB22_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB22_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB22_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB22_5
.LBB22_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB22_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB22_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB22_11
.LBB22_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB22_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB22_10
.LBB22_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB22_10:                              # %cond.end14
.LBB22_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB22_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB22_14
.LBB22_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB22_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB22_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB22_20
.LBB22_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB22_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB22_19
.LBB22_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB22_19:                              # %cond.end29
.LBB22_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_332
.LBB22_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB22_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB22_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB22_25
.LBB22_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB22_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB22_31
.LBB22_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB22_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB22_30
.LBB22_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB22_30:                              # %cond.end52
.LBB22_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_36
.LBB22_35:                              # %cond.false61
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_36:                              # %cond.end63
                                        #   in Loop: Header=BB22_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB22_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_42
.LBB22_38:                              # %cond.false68
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_41
.LBB22_40:                              # %cond.false73
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_41:                              # %cond.end75
                                        #   in Loop: Header=BB22_32 Depth=1
.LBB22_42:                              # %cond.end77
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB22_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_32
.LBB22_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_47
.LBB22_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB22_53
.LBB22_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_52
.LBB22_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_52:                              # %cond.end113
.LBB22_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB22_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB22_57
.LBB22_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB22_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB22_63
.LBB22_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB22_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB22_62
.LBB22_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB22_62:                              # %cond.end136
.LBB22_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_76
.LBB22_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB22_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB22_68
.LBB22_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB22_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB22_74
.LBB22_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB22_73
.LBB22_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB22_73:                              # %cond.end169
.LBB22_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_75:                              # %if.end
	jmp	.LBB22_76
.LBB22_76:                              # %if.end178
	jmp	.LBB22_331
.LBB22_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB22_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB22_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB22_81
.LBB22_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB22_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB22_87
.LBB22_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB22_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB22_86
.LBB22_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB22_86:                              # %cond.end197
.LBB22_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_92
.LBB22_91:                              # %cond.false209
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_92:                              # %cond.end211
                                        #   in Loop: Header=BB22_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB22_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_98
.LBB22_94:                              # %cond.false216
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_97
.LBB22_96:                              # %cond.false221
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_97:                              # %cond.end223
                                        #   in Loop: Header=BB22_88 Depth=1
.LBB22_98:                              # %cond.end225
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB22_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_88
.LBB22_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_103
.LBB22_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB22_109
.LBB22_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_108
.LBB22_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_108:                             # %cond.end266
.LBB22_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB22_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB22_113
.LBB22_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB22_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB22_119
.LBB22_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB22_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB22_118
.LBB22_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB22_118:                             # %cond.end287
.LBB22_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_132
.LBB22_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB22_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB22_124
.LBB22_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB22_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB22_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB22_130
.LBB22_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB22_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB22_129
.LBB22_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB22_129:                             # %cond.end320
.LBB22_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_131:                             # %if.end331
	jmp	.LBB22_132
.LBB22_132:                             # %if.end332
	jmp	.LBB22_330
.LBB22_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB22_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB22_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_139
.LBB22_138:                             # %cond.false345
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_139:                             # %cond.end347
                                        #   in Loop: Header=BB22_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB22_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_145
.LBB22_141:                             # %cond.false352
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_144
.LBB22_143:                             # %cond.false357
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_144:                             # %cond.end359
                                        #   in Loop: Header=BB22_135 Depth=1
.LBB22_145:                             # %cond.end361
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_146:                             # %for.cond363
                                        #   Parent Loop BB22_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB22_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB22_150
.LBB22_149:                             # %cond.false371
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_150:                             # %cond.end373
                                        #   in Loop: Header=BB22_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB22_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_156
.LBB22_152:                             # %cond.false378
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB22_155
.LBB22_154:                             # %cond.false383
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_155:                             # %cond.end385
                                        #   in Loop: Header=BB22_146 Depth=2
.LBB22_156:                             # %cond.end387
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB22_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_146
.LBB22_158:                             # %for.end401
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB22_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_135
.LBB22_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB22_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_161
.LBB22_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_167
.LBB22_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB22_173
.LBB22_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_172
.LBB22_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_172:                             # %cond.end449
.LBB22_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_177
.LBB22_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB22_183
.LBB22_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_182
.LBB22_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_182:                             # %cond.end486
.LBB22_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_196
.LBB22_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB22_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_188
.LBB22_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB22_194
.LBB22_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_193
.LBB22_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_193:                             # %cond.end526
.LBB22_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_195:                             # %if.end532
	jmp	.LBB22_196
.LBB22_196:                             # %if.end533
	jmp	.LBB22_329
.LBB22_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB22_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB22_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB22_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_203
.LBB22_202:                             # %cond.false546
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_203:                             # %cond.end548
                                        #   in Loop: Header=BB22_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB22_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_209
.LBB22_205:                             # %cond.false553
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_208
.LBB22_207:                             # %cond.false558
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_208:                             # %cond.end560
                                        #   in Loop: Header=BB22_199 Depth=1
.LBB22_209:                             # %cond.end562
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_210:                             # %for.cond564
                                        #   Parent Loop BB22_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB22_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB22_214
.LBB22_213:                             # %cond.false572
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_214:                             # %cond.end574
                                        #   in Loop: Header=BB22_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB22_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB22_220
.LBB22_216:                             # %cond.false579
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB22_219
.LBB22_218:                             # %cond.false584
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_219:                             # %cond.end586
                                        #   in Loop: Header=BB22_210 Depth=2
.LBB22_220:                             # %cond.end588
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB22_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_210
.LBB22_222:                             # %for.end602
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB22_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_199
.LBB22_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB22_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB22_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_225
.LBB22_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_231
.LBB22_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB22_237
.LBB22_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_236
.LBB22_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB22_236:                             # %cond.end650
.LBB22_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_241
.LBB22_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB22_247
.LBB22_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_246
.LBB22_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_246:                             # %cond.end687
.LBB22_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB22_258
.LBB22_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_251
.LBB22_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB22_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB22_257
.LBB22_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB22_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_256
.LBB22_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB22_256:                             # %cond.end724
.LBB22_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_258:                             # %if.end730
	jmp	.LBB22_328
.LBB22_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB22_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB22_262
.LBB22_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB22_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB22_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB22_265
.LBB22_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB22_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB22_271
.LBB22_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB22_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB22_270
.LBB22_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB22_270:                             # %cond.end753
.LBB22_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB22_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB22_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_276
.LBB22_275:                             # %cond.false765
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_276:                             # %cond.end767
                                        #   in Loop: Header=BB22_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB22_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_282
.LBB22_278:                             # %cond.false772
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB22_281
.LBB22_280:                             # %cond.false777
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB22_281:                             # %cond.end779
                                        #   in Loop: Header=BB22_272 Depth=1
.LBB22_282:                             # %cond.end781
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB22_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB22_272
.LBB22_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_287
.LBB22_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB22_293
.LBB22_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_292
.LBB22_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_292:                             # %cond.end822
.LBB22_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB22_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB22_296
.LBB22_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB22_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB22_299
.LBB22_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB22_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB22_305
.LBB22_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB22_304
.LBB22_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB22_304:                             # %cond.end847
.LBB22_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB22_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB22_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_310
.LBB22_309:                             # %cond.false859
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_310:                             # %cond.end861
                                        #   in Loop: Header=BB22_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB22_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB22_316
.LBB22_312:                             # %cond.false866
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB22_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB22_315
.LBB22_314:                             # %cond.false871
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB22_315:                             # %cond.end873
                                        #   in Loop: Header=BB22_306 Depth=1
.LBB22_316:                             # %cond.end875
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB22_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB22_306
.LBB22_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_321
.LBB22_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB22_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB22_327
.LBB22_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB22_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB22_326
.LBB22_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB22_326:                             # %cond.end916
.LBB22_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB22_328:                             # %if.end922
	jmp	.LBB22_329
.LBB22_329:                             # %if.end923
	jmp	.LBB22_330
.LBB22_330:                             # %if.end924
	jmp	.LBB22_331
.LBB22_331:                             # %if.end925
	jmp	.LBB22_332
.LBB22_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$698737973, -100(%rbp)  # imm = 0x29A5E535
	jne	.LBB22_334
.LBB22_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_333
.Lfunc_end22:
	.size	Get_Reference_Pixel.12, .Lfunc_end22-Get_Reference_Pixel.12
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.13  # -- Begin function Get_Reference_Block.13
	.p2align	4, 0x90
	.type	Get_Reference_Block.13,@function
Get_Reference_Block.13:                 # @Get_Reference_Block.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$489575814, -36(%rbp)   # imm = 0x1D2E5586
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -16(%rbp)
	movq	%r9, -56(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -8(%rbp)
.LBB23_3:                               # %for.cond5
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB23_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_3
.LBB23_6:                               # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_7
.LBB23_7:                               # %for.inc14
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_1
.LBB23_8:                               # %for.end16
	cmpl	$489575814, -36(%rbp)   # imm = 0x1D2E5586
	jne	.LBB23_10
.LBB23_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_9
.Lfunc_end23:
	.size	Get_Reference_Block.13, .Lfunc_end23-Get_Reference_Block.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.14
.LCPI24_0:
	.quad	4636737291354636288     # double 100
.LCPI24_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.14
	.p2align	4, 0x90
	.type	Build_Status_Map.14,@function
Build_Status_Map.14:                    # @Build_Status_Map.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2085505387, -36(%rbp)  # imm = 0x7C4E496B
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB24_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$0, -8(%rbp)
.LBB24_3:                               # %for.cond2
                                        #   Parent Loop BB24_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB24_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB24_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB24_13
.LBB24_6:                               # %if.then
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB24_8:                               # %if.end
                                        #   in Loop: Header=BB24_3 Depth=2
	callq	rand
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB24_10:                              # %if.end20
                                        #   in Loop: Header=BB24_3 Depth=2
	callq	rand
	vmovsd	.LCPI24_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI24_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB24_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	$1, -4(%rbp)
.LBB24_12:                              # %if.end29
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB24_13:                              # %if.end30
                                        #   in Loop: Header=BB24_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB24_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB24_18
.LBB24_15:                              # %if.else
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB24_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB24_17:                              # %if.end49
                                        #   in Loop: Header=BB24_3 Depth=2
	jmp	.LBB24_18
.LBB24_18:                              # %if.end50
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_3
.LBB24_20:                              # %for.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_21
.LBB24_21:                              # %for.inc53
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB24_1
.LBB24_22:                              # %for.end55
	cmpl	$2085505387, -36(%rbp)  # imm = 0x7C4E496B
	jne	.LBB24_24
.LBB24_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_23
.Lfunc_end24:
	.size	Build_Status_Map.14, .Lfunc_end24-Build_Status_Map.14
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.15 # -- Begin function compute_residue_b8block.15
	.p2align	4, 0x90
	.type	compute_residue_b8block.15,@function
compute_residue_b8block.15:             # @compute_residue_b8block.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$320153934, -36(%rbp)   # imm = 0x1315294E
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB25_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB25_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB25_4:                               # %for.cond4
                                        #   Parent Loop BB25_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB25_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB25_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB25_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_4
.LBB25_7:                               # %for.end
                                        #   in Loop: Header=BB25_2 Depth=1
	jmp	.LBB25_8
.LBB25_8:                               # %for.inc22
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_2
.LBB25_9:                               # %for.end24
	jmp	.LBB25_19
.LBB25_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB25_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB25_13:                              # %for.cond29
                                        #   Parent Loop BB25_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB25_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB25_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB25_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_13
.LBB25_16:                              # %for.end56
                                        #   in Loop: Header=BB25_11 Depth=1
	jmp	.LBB25_17
.LBB25_17:                              # %for.inc57
                                        #   in Loop: Header=BB25_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_11
.LBB25_18:                              # %for.end59
	jmp	.LBB25_19
.LBB25_19:                              # %if.end
	cmpl	$320153934, -36(%rbp)   # imm = 0x1315294E
	jne	.LBB25_21
.LBB25_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_20
.Lfunc_end25:
	.size	compute_residue_b8block.15, .Lfunc_end25-compute_residue_b8block.15
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.16
.LCPI26_0:
	.quad	4636737291354636288     # double 100
.LCPI26_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.16
	.p2align	4, 0x90
	.type	Build_Status_Map.16,@function
Build_Status_Map.16:                    # @Build_Status_Map.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1519819536, -40(%rbp)  # imm = 0x5A969B10
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB26_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -8(%rbp)
.LBB26_3:                               # %for.cond2
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB26_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB26_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB26_13
.LBB26_6:                               # %if.then
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB26_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB26_8:                               # %if.end
                                        #   in Loop: Header=BB26_3 Depth=2
	callq	rand
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB26_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB26_10:                              # %if.end20
                                        #   in Loop: Header=BB26_3 Depth=2
	callq	rand
	vmovsd	.LCPI26_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI26_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB26_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	$1, -4(%rbp)
.LBB26_12:                              # %if.end29
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB26_13:                              # %if.end30
                                        #   in Loop: Header=BB26_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB26_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB26_18
.LBB26_15:                              # %if.else
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB26_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB26_17:                              # %if.end49
                                        #   in Loop: Header=BB26_3 Depth=2
	jmp	.LBB26_18
.LBB26_18:                              # %if.end50
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_3
.LBB26_20:                              # %for.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_21
.LBB26_21:                              # %for.inc53
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB26_1
.LBB26_22:                              # %for.end55
	cmpl	$1519819536, -40(%rbp)  # imm = 0x5A969B10
	jne	.LBB26_24
.LBB26_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_23
.Lfunc_end26:
	.size	Build_Status_Map.16, .Lfunc_end26-Build_Status_Map.16
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.17 # -- Begin function compute_residue_b8block.17
	.p2align	4, 0x90
	.type	compute_residue_b8block.17,@function
compute_residue_b8block.17:             # @compute_residue_b8block.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$705235001, -36(%rbp)   # imm = 0x2A090839
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB27_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB27_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_4:                               # %for.cond4
                                        #   Parent Loop BB27_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB27_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB27_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-28(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB27_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_4
.LBB27_7:                               # %for.end
                                        #   in Loop: Header=BB27_2 Depth=1
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc22
                                        #   in Loop: Header=BB27_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_2
.LBB27_9:                               # %for.end24
	jmp	.LBB27_19
.LBB27_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB27_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB27_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB27_13:                              # %for.cond29
                                        #   Parent Loop BB27_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB27_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB27_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB27_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_13
.LBB27_16:                              # %for.end56
                                        #   in Loop: Header=BB27_11 Depth=1
	jmp	.LBB27_17
.LBB27_17:                              # %for.inc57
                                        #   in Loop: Header=BB27_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_11
.LBB27_18:                              # %for.end59
	jmp	.LBB27_19
.LBB27_19:                              # %if.end
	cmpl	$705235001, -36(%rbp)   # imm = 0x2A090839
	jne	.LBB27_21
.LBB27_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_20
.Lfunc_end27:
	.size	compute_residue_b8block.17, .Lfunc_end27-compute_residue_b8block.17
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.18   # -- Begin function decode_one_b8block.18
	.p2align	4, 0x90
	.type	decode_one_b8block.18,@function
decode_one_b8block.18:                  # @decode_one_b8block.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1913194601, -84(%rbp)  # imm = 0x72090869
	movl	%edi, -48(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB28_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_4:                               # %for.cond9
                                        #   Parent Loop BB28_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB28_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB28_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_4
.LBB28_7:                               # %for.end
                                        #   in Loop: Header=BB28_2 Depth=1
	jmp	.LBB28_8
.LBB28_8:                               # %for.inc26
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_2
.LBB28_9:                               # %for.end28
	jmp	.LBB28_96
.LBB28_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB28_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB28_31
.LBB28_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB28_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_17:                              # %for.cond40
                                        #   Parent Loop BB28_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB28_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB28_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_17
.LBB28_20:                              # %for.end49
                                        #   in Loop: Header=BB28_15 Depth=1
	jmp	.LBB28_21
.LBB28_21:                              # %for.inc50
                                        #   in Loop: Header=BB28_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_15
.LBB28_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_25:                              # %for.cond56
                                        #   Parent Loop BB28_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB28_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB28_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_25
.LBB28_28:                              # %for.end71
                                        #   in Loop: Header=BB28_23 Depth=1
	jmp	.LBB28_29
.LBB28_29:                              # %for.inc72
                                        #   in Loop: Header=BB28_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_23
.LBB28_30:                              # %for.end74
	jmp	.LBB28_60
.LBB28_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB28_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB28_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_36:                              # %for.cond83
                                        #   Parent Loop BB28_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB28_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB28_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_36
.LBB28_39:                              # %for.end120
                                        #   in Loop: Header=BB28_34 Depth=1
	jmp	.LBB28_40
.LBB28_40:                              # %for.inc121
                                        #   in Loop: Header=BB28_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_34
.LBB28_41:                              # %for.end123
	jmp	.LBB28_51
.LBB28_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB28_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_45:                              # %for.cond129
                                        #   Parent Loop BB28_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB28_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB28_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_45
.LBB28_48:                              # %for.end145
                                        #   in Loop: Header=BB28_43 Depth=1
	jmp	.LBB28_49
.LBB28_49:                              # %for.inc146
                                        #   in Loop: Header=BB28_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_43
.LBB28_50:                              # %for.end148
	jmp	.LBB28_51
.LBB28_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB28_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_54:                              # %for.cond153
                                        #   Parent Loop BB28_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB28_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB28_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_54
.LBB28_57:                              # %for.end167
                                        #   in Loop: Header=BB28_52 Depth=1
	jmp	.LBB28_58
.LBB28_58:                              # %for.inc168
                                        #   in Loop: Header=BB28_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_52
.LBB28_59:                              # %for.end170
	jmp	.LBB28_60
.LBB28_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB28_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB28_66
.LBB28_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB28_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB28_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB28_86
.LBB28_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB28_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_69 Depth 2
                                        #       Child Loop BB28_74 Depth 3
                                        #         Child Loop BB28_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB28_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB28_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB28_69:                              # %for.cond197
                                        #   Parent Loop BB28_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB28_74 Depth 3
                                        #         Child Loop BB28_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB28_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB28_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB28_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB28_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB28_73:                              # %if.end218
                                        #   in Loop: Header=BB28_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB28_74:                              # %for.cond233
                                        #   Parent Loop BB28_67 Depth=1
                                        #     Parent Loop BB28_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB28_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB28_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB28_74 Depth=3
	movl	$0, -8(%rbp)
.LBB28_76:                              # %for.cond237
                                        #   Parent Loop BB28_67 Depth=1
                                        #     Parent Loop BB28_69 Depth=2
                                        #       Parent Loop BB28_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB28_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB28_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB28_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_76
.LBB28_79:                              # %for.end269
                                        #   in Loop: Header=BB28_74 Depth=3
	jmp	.LBB28_80
.LBB28_80:                              # %for.inc270
                                        #   in Loop: Header=BB28_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_74
.LBB28_81:                              # %for.end272
                                        #   in Loop: Header=BB28_69 Depth=2
	jmp	.LBB28_82
.LBB28_82:                              # %for.inc273
                                        #   in Loop: Header=BB28_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB28_69
.LBB28_83:                              # %for.end275
                                        #   in Loop: Header=BB28_67 Depth=1
	jmp	.LBB28_84
.LBB28_84:                              # %for.inc276
                                        #   in Loop: Header=BB28_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB28_67
.LBB28_85:                              # %for.end278
	jmp	.LBB28_95
.LBB28_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB28_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB28_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB28_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB28_89:                              # %for.cond284
                                        #   Parent Loop BB28_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB28_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB28_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB28_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_89
.LBB28_92:                              # %for.end310
                                        #   in Loop: Header=BB28_87 Depth=1
	jmp	.LBB28_93
.LBB28_93:                              # %for.inc311
                                        #   in Loop: Header=BB28_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_87
.LBB28_94:                              # %for.end313
	jmp	.LBB28_95
.LBB28_95:                              # %if.end314
	jmp	.LBB28_96
.LBB28_96:                              # %if.end315
	cmpl	$1913194601, -84(%rbp)  # imm = 0x72090869
	jne	.LBB28_98
.LBB28_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_97
.Lfunc_end28:
	.size	decode_one_b8block.18, .Lfunc_end28-decode_one_b8block.18
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.19        # -- Begin function decode_one_mb.19
	.p2align	4, 0x90
	.type	decode_one_mb.19,@function
decode_one_mb.19:                       # @decode_one_mb.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2059643563, -4(%rbp)   # imm = 0x7AC3AAAB
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$2059643563, -4(%rbp)   # imm = 0x7AC3AAAB
	jne	.LBB29_2
.LBB29_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_1
.Lfunc_end29:
	.size	decode_one_mb.19, .Lfunc_end29-decode_one_mb.19
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.20  # -- Begin function Get_Reference_Pixel.20
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.20,@function
Get_Reference_Pixel.20:                 # @Get_Reference_Pixel.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1120211351, -108(%rbp) # imm = 0x42C51197
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB30_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB30_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB30_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB30_5
.LBB30_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB30_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB30_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB30_11
.LBB30_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB30_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB30_10
.LBB30_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB30_10:                              # %cond.end14
.LBB30_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB30_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB30_14
.LBB30_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB30_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB30_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB30_20
.LBB30_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB30_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB30_19
.LBB30_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB30_19:                              # %cond.end29
.LBB30_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB30_332
.LBB30_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB30_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB30_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB30_25
.LBB30_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB30_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB30_31
.LBB30_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB30_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB30_30
.LBB30_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB30_30:                              # %cond.end52
.LBB30_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB30_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_36
.LBB30_35:                              # %cond.false61
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_36:                              # %cond.end63
                                        #   in Loop: Header=BB30_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB30_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_42
.LBB30_38:                              # %cond.false68
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_41
.LBB30_40:                              # %cond.false73
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_41:                              # %cond.end75
                                        #   in Loop: Header=BB30_32 Depth=1
.LBB30_42:                              # %cond.end77
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_32
.LBB30_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_47
.LBB30_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB30_53
.LBB30_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_52
.LBB30_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_52:                              # %cond.end113
.LBB30_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB30_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB30_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB30_57
.LBB30_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB30_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB30_63
.LBB30_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB30_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB30_62
.LBB30_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB30_62:                              # %cond.end136
.LBB30_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_76
.LBB30_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB30_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB30_68
.LBB30_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB30_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB30_74
.LBB30_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB30_73
.LBB30_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB30_73:                              # %cond.end169
.LBB30_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_75:                              # %if.end
	jmp	.LBB30_76
.LBB30_76:                              # %if.end178
	jmp	.LBB30_331
.LBB30_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB30_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB30_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB30_81
.LBB30_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB30_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB30_87
.LBB30_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB30_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB30_86
.LBB30_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB30_86:                              # %cond.end197
.LBB30_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB30_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_92
.LBB30_91:                              # %cond.false209
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_92:                              # %cond.end211
                                        #   in Loop: Header=BB30_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB30_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_98
.LBB30_94:                              # %cond.false216
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_97
.LBB30_96:                              # %cond.false221
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_97:                              # %cond.end223
                                        #   in Loop: Header=BB30_88 Depth=1
.LBB30_98:                              # %cond.end225
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB30_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_88
.LBB30_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_103
.LBB30_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB30_109
.LBB30_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_108
.LBB30_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_108:                             # %cond.end266
.LBB30_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB30_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB30_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB30_113
.LBB30_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB30_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB30_119
.LBB30_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB30_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB30_118
.LBB30_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB30_118:                             # %cond.end287
.LBB30_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_132
.LBB30_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB30_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB30_124
.LBB30_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB30_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB30_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB30_130
.LBB30_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB30_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB30_129
.LBB30_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB30_129:                             # %cond.end320
.LBB30_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_131:                             # %if.end331
	jmp	.LBB30_132
.LBB30_132:                             # %if.end332
	jmp	.LBB30_330
.LBB30_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB30_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB30_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_139
.LBB30_138:                             # %cond.false345
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_139:                             # %cond.end347
                                        #   in Loop: Header=BB30_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB30_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_145
.LBB30_141:                             # %cond.false352
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_144
.LBB30_143:                             # %cond.false357
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_144:                             # %cond.end359
                                        #   in Loop: Header=BB30_135 Depth=1
.LBB30_145:                             # %cond.end361
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_146:                             # %for.cond363
                                        #   Parent Loop BB30_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB30_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB30_150
.LBB30_149:                             # %cond.false371
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_150:                             # %cond.end373
                                        #   in Loop: Header=BB30_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB30_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_156
.LBB30_152:                             # %cond.false378
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB30_155
.LBB30_154:                             # %cond.false383
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_155:                             # %cond.end385
                                        #   in Loop: Header=BB30_146 Depth=2
.LBB30_156:                             # %cond.end387
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB30_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_146
.LBB30_158:                             # %for.end401
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB30_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_135
.LBB30_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB30_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB30_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB30_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_161
.LBB30_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_167
.LBB30_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB30_173
.LBB30_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_172
.LBB30_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_172:                             # %cond.end449
.LBB30_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB30_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_177
.LBB30_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB30_183
.LBB30_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_182
.LBB30_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_182:                             # %cond.end486
.LBB30_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_196
.LBB30_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB30_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_188
.LBB30_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB30_194
.LBB30_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_193
.LBB30_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_193:                             # %cond.end526
.LBB30_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_195:                             # %if.end532
	jmp	.LBB30_196
.LBB30_196:                             # %if.end533
	jmp	.LBB30_329
.LBB30_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB30_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB30_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB30_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_203
.LBB30_202:                             # %cond.false546
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_203:                             # %cond.end548
                                        #   in Loop: Header=BB30_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB30_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_209
.LBB30_205:                             # %cond.false553
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_208
.LBB30_207:                             # %cond.false558
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_208:                             # %cond.end560
                                        #   in Loop: Header=BB30_199 Depth=1
.LBB30_209:                             # %cond.end562
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_210:                             # %for.cond564
                                        #   Parent Loop BB30_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB30_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB30_214
.LBB30_213:                             # %cond.false572
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_214:                             # %cond.end574
                                        #   in Loop: Header=BB30_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB30_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB30_220
.LBB30_216:                             # %cond.false579
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB30_219
.LBB30_218:                             # %cond.false584
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_219:                             # %cond.end586
                                        #   in Loop: Header=BB30_210 Depth=2
.LBB30_220:                             # %cond.end588
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB30_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_210
.LBB30_222:                             # %for.end602
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB30_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_199
.LBB30_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB30_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB30_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB30_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_225
.LBB30_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_231
.LBB30_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB30_237
.LBB30_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_236
.LBB30_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB30_236:                             # %cond.end650
.LBB30_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB30_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_241
.LBB30_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB30_247
.LBB30_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_246
.LBB30_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_246:                             # %cond.end687
.LBB30_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB30_258
.LBB30_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_251
.LBB30_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB30_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB30_257
.LBB30_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB30_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_256
.LBB30_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB30_256:                             # %cond.end724
.LBB30_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_258:                             # %if.end730
	jmp	.LBB30_328
.LBB30_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB30_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB30_262
.LBB30_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB30_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB30_265
.LBB30_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB30_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB30_271
.LBB30_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB30_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB30_270
.LBB30_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB30_270:                             # %cond.end753
.LBB30_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB30_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB30_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_276
.LBB30_275:                             # %cond.false765
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_276:                             # %cond.end767
                                        #   in Loop: Header=BB30_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB30_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_282
.LBB30_278:                             # %cond.false772
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB30_281
.LBB30_280:                             # %cond.false777
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB30_281:                             # %cond.end779
                                        #   in Loop: Header=BB30_272 Depth=1
.LBB30_282:                             # %cond.end781
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB30_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB30_272
.LBB30_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_287
.LBB30_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB30_293
.LBB30_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_292
.LBB30_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_292:                             # %cond.end822
.LBB30_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB30_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB30_296
.LBB30_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB30_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB30_299
.LBB30_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB30_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB30_305
.LBB30_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB30_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB30_304
.LBB30_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB30_304:                             # %cond.end847
.LBB30_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB30_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB30_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_310
.LBB30_309:                             # %cond.false859
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_310:                             # %cond.end861
                                        #   in Loop: Header=BB30_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB30_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB30_316
.LBB30_312:                             # %cond.false866
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB30_315
.LBB30_314:                             # %cond.false871
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB30_315:                             # %cond.end873
                                        #   in Loop: Header=BB30_306 Depth=1
.LBB30_316:                             # %cond.end875
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB30_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB30_306
.LBB30_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_321
.LBB30_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB30_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB30_327
.LBB30_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB30_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB30_326
.LBB30_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB30_326:                             # %cond.end916
.LBB30_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB30_328:                             # %if.end922
	jmp	.LBB30_329
.LBB30_329:                             # %if.end923
	jmp	.LBB30_330
.LBB30_330:                             # %if.end924
	jmp	.LBB30_331
.LBB30_331:                             # %if.end925
	jmp	.LBB30_332
.LBB30_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1120211351, -108(%rbp) # imm = 0x42C51197
	jne	.LBB30_334
.LBB30_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_333
.Lfunc_end30:
	.size	Get_Reference_Pixel.20, .Lfunc_end30-Get_Reference_Pixel.20
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.21  # -- Begin function Get_Reference_Pixel.21
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.21,@function
Get_Reference_Pixel.21:                 # @Get_Reference_Pixel.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$384745608, -108(%rbp)  # imm = 0x16EEC088
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB31_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB31_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB31_5
.LBB31_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB31_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB31_11
.LBB31_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB31_10
.LBB31_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB31_10:                              # %cond.end14
.LBB31_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB31_14
.LBB31_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB31_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB31_20
.LBB31_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB31_19
.LBB31_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB31_19:                              # %cond.end29
.LBB31_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_332
.LBB31_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB31_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB31_25
.LBB31_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB31_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB31_31
.LBB31_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB31_30
.LBB31_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB31_30:                              # %cond.end52
.LBB31_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_36
.LBB31_35:                              # %cond.false61
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_36:                              # %cond.end63
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_42
.LBB31_38:                              # %cond.false68
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_41
.LBB31_40:                              # %cond.false73
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_41:                              # %cond.end75
                                        #   in Loop: Header=BB31_32 Depth=1
.LBB31_42:                              # %cond.end77
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_32
.LBB31_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_47
.LBB31_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB31_53
.LBB31_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_52
.LBB31_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_52:                              # %cond.end113
.LBB31_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB31_57
.LBB31_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB31_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB31_63
.LBB31_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB31_62
.LBB31_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB31_62:                              # %cond.end136
.LBB31_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_76
.LBB31_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB31_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB31_68
.LBB31_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB31_74
.LBB31_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB31_73
.LBB31_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_73:                              # %cond.end169
.LBB31_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_75:                              # %if.end
	jmp	.LBB31_76
.LBB31_76:                              # %if.end178
	jmp	.LBB31_331
.LBB31_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB31_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB31_81
.LBB31_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB31_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB31_87
.LBB31_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB31_86
.LBB31_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB31_86:                              # %cond.end197
.LBB31_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_92
.LBB31_91:                              # %cond.false209
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_92:                              # %cond.end211
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_98
.LBB31_94:                              # %cond.false216
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_97
.LBB31_96:                              # %cond.false221
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_97:                              # %cond.end223
                                        #   in Loop: Header=BB31_88 Depth=1
.LBB31_98:                              # %cond.end225
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_88
.LBB31_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_103
.LBB31_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB31_109
.LBB31_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_108
.LBB31_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_108:                             # %cond.end266
.LBB31_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB31_113
.LBB31_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB31_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB31_119
.LBB31_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB31_118
.LBB31_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB31_118:                             # %cond.end287
.LBB31_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_132
.LBB31_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB31_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB31_124
.LBB31_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB31_130
.LBB31_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB31_129
.LBB31_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_129:                             # %cond.end320
.LBB31_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_131:                             # %if.end331
	jmp	.LBB31_132
.LBB31_132:                             # %if.end332
	jmp	.LBB31_330
.LBB31_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB31_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB31_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_139
.LBB31_138:                             # %cond.false345
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_139:                             # %cond.end347
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_145
.LBB31_141:                             # %cond.false352
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_144
.LBB31_143:                             # %cond.false357
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_144:                             # %cond.end359
                                        #   in Loop: Header=BB31_135 Depth=1
.LBB31_145:                             # %cond.end361
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_146:                             # %for.cond363
                                        #   Parent Loop BB31_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_150
.LBB31_149:                             # %cond.false371
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_150:                             # %cond.end373
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_156
.LBB31_152:                             # %cond.false378
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_155
.LBB31_154:                             # %cond.false383
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_155:                             # %cond.end385
                                        #   in Loop: Header=BB31_146 Depth=2
.LBB31_156:                             # %cond.end387
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_146
.LBB31_158:                             # %for.end401
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_135
.LBB31_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_161
.LBB31_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_167
.LBB31_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB31_173
.LBB31_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_172
.LBB31_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_172:                             # %cond.end449
.LBB31_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_177
.LBB31_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB31_183
.LBB31_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_182
.LBB31_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_182:                             # %cond.end486
.LBB31_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_196
.LBB31_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB31_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_188
.LBB31_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB31_194
.LBB31_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_193
.LBB31_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_193:                             # %cond.end526
.LBB31_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_195:                             # %if.end532
	jmp	.LBB31_196
.LBB31_196:                             # %if.end533
	jmp	.LBB31_329
.LBB31_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB31_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB31_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_203
.LBB31_202:                             # %cond.false546
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_203:                             # %cond.end548
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_209
.LBB31_205:                             # %cond.false553
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_208
.LBB31_207:                             # %cond.false558
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_208:                             # %cond.end560
                                        #   in Loop: Header=BB31_199 Depth=1
.LBB31_209:                             # %cond.end562
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_210:                             # %for.cond564
                                        #   Parent Loop BB31_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_214
.LBB31_213:                             # %cond.false572
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_214:                             # %cond.end574
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_220
.LBB31_216:                             # %cond.false579
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_219
.LBB31_218:                             # %cond.false584
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_219:                             # %cond.end586
                                        #   in Loop: Header=BB31_210 Depth=2
.LBB31_220:                             # %cond.end588
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_210
.LBB31_222:                             # %for.end602
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_199
.LBB31_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_225
.LBB31_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_231
.LBB31_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB31_237
.LBB31_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_236
.LBB31_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_236:                             # %cond.end650
.LBB31_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_241
.LBB31_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB31_247
.LBB31_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_246
.LBB31_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_246:                             # %cond.end687
.LBB31_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_258
.LBB31_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_251
.LBB31_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB31_257
.LBB31_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_256
.LBB31_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_256:                             # %cond.end724
.LBB31_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_258:                             # %if.end730
	jmp	.LBB31_328
.LBB31_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB31_262
.LBB31_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB31_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB31_265
.LBB31_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB31_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB31_271
.LBB31_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB31_270
.LBB31_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB31_270:                             # %cond.end753
.LBB31_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_276
.LBB31_275:                             # %cond.false765
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_276:                             # %cond.end767
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_282
.LBB31_278:                             # %cond.false772
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_281
.LBB31_280:                             # %cond.false777
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_281:                             # %cond.end779
                                        #   in Loop: Header=BB31_272 Depth=1
.LBB31_282:                             # %cond.end781
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_272
.LBB31_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_287
.LBB31_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB31_293
.LBB31_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_292
.LBB31_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_292:                             # %cond.end822
.LBB31_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB31_296
.LBB31_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB31_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB31_299
.LBB31_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB31_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB31_305
.LBB31_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB31_304
.LBB31_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB31_304:                             # %cond.end847
.LBB31_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_310
.LBB31_309:                             # %cond.false859
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_310:                             # %cond.end861
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_316
.LBB31_312:                             # %cond.false866
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_315
.LBB31_314:                             # %cond.false871
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_315:                             # %cond.end873
                                        #   in Loop: Header=BB31_306 Depth=1
.LBB31_316:                             # %cond.end875
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_306
.LBB31_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_321
.LBB31_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB31_327
.LBB31_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_326
.LBB31_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_326:                             # %cond.end916
.LBB31_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_328:                             # %if.end922
	jmp	.LBB31_329
.LBB31_329:                             # %if.end923
	jmp	.LBB31_330
.LBB31_330:                             # %if.end924
	jmp	.LBB31_331
.LBB31_331:                             # %if.end925
	jmp	.LBB31_332
.LBB31_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$384745608, -108(%rbp)  # imm = 0x16EEC088
	jne	.LBB31_334
.LBB31_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_333
.Lfunc_end31:
	.size	Get_Reference_Pixel.21, .Lfunc_end31-Get_Reference_Pixel.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.22
.LCPI32_0:
	.quad	4636737291354636288     # double 100
.LCPI32_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.22
	.p2align	4, 0x90
	.type	Build_Status_Map.22,@function
Build_Status_Map.22:                    # @Build_Status_Map.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$809614314, -36(%rbp)   # imm = 0x3041BBEA
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB32_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -12(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB32_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB32_13
.LBB32_6:                               # %if.then
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB32_8:                               # %if.end
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB32_10:                              # %if.end20
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$1, -4(%rbp)
.LBB32_12:                              # %if.end29
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB32_13:                              # %if.end30
                                        #   in Loop: Header=BB32_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB32_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB32_18
.LBB32_15:                              # %if.else
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB32_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB32_17:                              # %if.end49
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_18
.LBB32_18:                              # %if.end50
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_3
.LBB32_20:                              # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc53
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_1
.LBB32_22:                              # %for.end55
	cmpl	$809614314, -36(%rbp)   # imm = 0x3041BBEA
	jne	.LBB32_24
.LBB32_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_23
.Lfunc_end32:
	.size	Build_Status_Map.22, .Lfunc_end32-Build_Status_Map.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.23
.LCPI33_0:
	.quad	4636737291354636288     # double 100
.LCPI33_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.23
	.p2align	4, 0x90
	.type	Build_Status_Map.23,@function
Build_Status_Map.23:                    # @Build_Status_Map.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1437115720, -40(%rbp)  # imm = 0x55A8A548
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB33_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -12(%rbp)
.LBB33_3:                               # %for.cond2
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB33_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB33_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB33_13
.LBB33_6:                               # %if.then
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI33_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB33_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB33_8:                               # %if.end
                                        #   in Loop: Header=BB33_3 Depth=2
	callq	rand
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI33_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB33_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB33_10:                              # %if.end20
                                        #   in Loop: Header=BB33_3 Depth=2
	callq	rand
	vmovsd	.LCPI33_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI33_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB33_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	$1, -4(%rbp)
.LBB33_12:                              # %if.end29
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB33_13:                              # %if.end30
                                        #   in Loop: Header=BB33_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB33_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB33_18
.LBB33_15:                              # %if.else
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB33_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB33_17:                              # %if.end49
                                        #   in Loop: Header=BB33_3 Depth=2
	jmp	.LBB33_18
.LBB33_18:                              # %if.end50
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_3
.LBB33_20:                              # %for.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_21
.LBB33_21:                              # %for.inc53
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_1
.LBB33_22:                              # %for.end55
	cmpl	$1437115720, -40(%rbp)  # imm = 0x55A8A548
	jne	.LBB33_24
.LBB33_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_23
.Lfunc_end33:
	.size	Build_Status_Map.23, .Lfunc_end33-Build_Status_Map.23
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.24    # -- Begin function Error_Concealment.24
	.p2align	4, 0x90
	.type	Error_Concealment.24,@function
Error_Concealment.24:                   # @Error_Concealment.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1445094847, -20(%rbp)  # imm = 0x562265BF
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB34_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond2
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB34_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB34_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB34_6:                               # %if.end
                                        #   in Loop: Header=BB34_3 Depth=2
	jmp	.LBB34_7
.LBB34_7:                               # %for.inc
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_8:                               # %for.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_9
.LBB34_9:                               # %for.inc7
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_1
.LBB34_10:                              # %for.end9
	cmpl	$1445094847, -20(%rbp)  # imm = 0x562265BF
	jne	.LBB34_12
.LBB34_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_11
.Lfunc_end34:
	.size	Error_Concealment.24, .Lfunc_end34-Error_Concealment.24
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.25  # -- Begin function Get_Reference_Block.25
	.p2align	4, 0x90
	.type	Get_Reference_Block.25,@function
Get_Reference_Block.25:                 # @Get_Reference_Block.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$5242704, -16(%rbp)     # imm = 0x4FFF50
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB35_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	$0, -8(%rbp)
.LBB35_3:                               # %for.cond5
                                        #   Parent Loop BB35_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB35_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB35_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_3
.LBB35_6:                               # %for.end
                                        #   in Loop: Header=BB35_1 Depth=1
	jmp	.LBB35_7
.LBB35_7:                               # %for.inc14
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_8:                               # %for.end16
	cmpl	$5242704, -16(%rbp)     # imm = 0x4FFF50
	jne	.LBB35_10
.LBB35_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_9
.Lfunc_end35:
	.size	Get_Reference_Block.25, .Lfunc_end35-Get_Reference_Block.25
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.26        # -- Begin function decode_one_mb.26
	.p2align	4, 0x90
	.type	decode_one_mb.26,@function
decode_one_mb.26:                       # @decode_one_mb.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2063278373, -4(%rbp)   # imm = 0x7AFB2125
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$2063278373, -4(%rbp)   # imm = 0x7AFB2125
	jne	.LBB36_2
.LBB36_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_1
.Lfunc_end36:
	.size	decode_one_mb.26, .Lfunc_end36-decode_one_mb.26
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.27   # -- Begin function decode_one_b8block.27
	.p2align	4, 0x90
	.type	decode_one_b8block.27,@function
decode_one_b8block.27:                  # @decode_one_b8block.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1036313507, -84(%rbp)  # imm = 0x3DC4E3A3
	movl	%edi, -52(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_4:                               # %for.cond9
                                        #   Parent Loop BB37_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB37_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB37_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_4
.LBB37_7:                               # %for.end
                                        #   in Loop: Header=BB37_2 Depth=1
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc26
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_2
.LBB37_9:                               # %for.end28
	jmp	.LBB37_96
.LBB37_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB37_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB37_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB37_31
.LBB37_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB37_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_17:                              # %for.cond40
                                        #   Parent Loop BB37_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB37_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB37_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_17
.LBB37_20:                              # %for.end49
                                        #   in Loop: Header=BB37_15 Depth=1
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc50
                                        #   in Loop: Header=BB37_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_15
.LBB37_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB37_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_25:                              # %for.cond56
                                        #   Parent Loop BB37_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB37_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB37_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_25
.LBB37_28:                              # %for.end71
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_29
.LBB37_29:                              # %for.inc72
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_23
.LBB37_30:                              # %for.end74
	jmp	.LBB37_60
.LBB37_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB37_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB37_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB37_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_36:                              # %for.cond83
                                        #   Parent Loop BB37_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB37_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_36
.LBB37_39:                              # %for.end120
                                        #   in Loop: Header=BB37_34 Depth=1
	jmp	.LBB37_40
.LBB37_40:                              # %for.inc121
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_34
.LBB37_41:                              # %for.end123
	jmp	.LBB37_51
.LBB37_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB37_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB37_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_45:                              # %for.cond129
                                        #   Parent Loop BB37_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB37_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB37_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_45
.LBB37_48:                              # %for.end145
                                        #   in Loop: Header=BB37_43 Depth=1
	jmp	.LBB37_49
.LBB37_49:                              # %for.inc146
                                        #   in Loop: Header=BB37_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_43
.LBB37_50:                              # %for.end148
	jmp	.LBB37_51
.LBB37_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_54:                              # %for.cond153
                                        #   Parent Loop BB37_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB37_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB37_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_54
.LBB37_57:                              # %for.end167
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_58
.LBB37_58:                              # %for.inc168
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_52
.LBB37_59:                              # %for.end170
	jmp	.LBB37_60
.LBB37_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB37_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB37_66
.LBB37_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB37_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB37_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB37_86
.LBB37_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB37_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_69 Depth 2
                                        #       Child Loop BB37_74 Depth 3
                                        #         Child Loop BB37_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB37_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB37_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB37_69:                              # %for.cond197
                                        #   Parent Loop BB37_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_74 Depth 3
                                        #         Child Loop BB37_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB37_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB37_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB37_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB37_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB37_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB37_73:                              # %if.end218
                                        #   in Loop: Header=BB37_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_74:                              # %for.cond233
                                        #   Parent Loop BB37_67 Depth=1
                                        #     Parent Loop BB37_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB37_74 Depth=3
	movl	$0, -4(%rbp)
.LBB37_76:                              # %for.cond237
                                        #   Parent Loop BB37_67 Depth=1
                                        #     Parent Loop BB37_69 Depth=2
                                        #       Parent Loop BB37_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB37_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB37_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_76
.LBB37_79:                              # %for.end269
                                        #   in Loop: Header=BB37_74 Depth=3
	jmp	.LBB37_80
.LBB37_80:                              # %for.inc270
                                        #   in Loop: Header=BB37_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_74
.LBB37_81:                              # %for.end272
                                        #   in Loop: Header=BB37_69 Depth=2
	jmp	.LBB37_82
.LBB37_82:                              # %for.inc273
                                        #   in Loop: Header=BB37_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_69
.LBB37_83:                              # %for.end275
                                        #   in Loop: Header=BB37_67 Depth=1
	jmp	.LBB37_84
.LBB37_84:                              # %for.inc276
                                        #   in Loop: Header=BB37_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_67
.LBB37_85:                              # %for.end278
	jmp	.LBB37_95
.LBB37_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB37_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB37_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB37_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB37_89:                              # %for.cond284
                                        #   Parent Loop BB37_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB37_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB37_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB37_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_89
.LBB37_92:                              # %for.end310
                                        #   in Loop: Header=BB37_87 Depth=1
	jmp	.LBB37_93
.LBB37_93:                              # %for.inc311
                                        #   in Loop: Header=BB37_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_87
.LBB37_94:                              # %for.end313
	jmp	.LBB37_95
.LBB37_95:                              # %if.end314
	jmp	.LBB37_96
.LBB37_96:                              # %if.end315
	cmpl	$1036313507, -84(%rbp)  # imm = 0x3DC4E3A3
	jne	.LBB37_98
.LBB37_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_97
.Lfunc_end37:
	.size	decode_one_b8block.27, .Lfunc_end37-decode_one_b8block.27
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.28   # -- Begin function decode_one_b8block.28
	.p2align	4, 0x90
	.type	decode_one_b8block.28,@function
decode_one_b8block.28:                  # @decode_one_b8block.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1718088234, -84(%rbp)  # imm = 0x6667F22A
	movl	%edi, -52(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_4:                               # %for.cond9
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc26
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end28
	jmp	.LBB38_96
.LBB38_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB38_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_31
.LBB38_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_17:                              # %for.cond40
                                        #   Parent Loop BB38_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB38_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB38_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_17
.LBB38_20:                              # %for.end49
                                        #   in Loop: Header=BB38_15 Depth=1
	jmp	.LBB38_21
.LBB38_21:                              # %for.inc50
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_15
.LBB38_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_25:                              # %for.cond56
                                        #   Parent Loop BB38_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB38_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_25
.LBB38_28:                              # %for.end71
                                        #   in Loop: Header=BB38_23 Depth=1
	jmp	.LBB38_29
.LBB38_29:                              # %for.inc72
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_23
.LBB38_30:                              # %for.end74
	jmp	.LBB38_60
.LBB38_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB38_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB38_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_36:                              # %for.cond83
                                        #   Parent Loop BB38_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB38_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_36
.LBB38_39:                              # %for.end120
                                        #   in Loop: Header=BB38_34 Depth=1
	jmp	.LBB38_40
.LBB38_40:                              # %for.inc121
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_34
.LBB38_41:                              # %for.end123
	jmp	.LBB38_51
.LBB38_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_45:                              # %for.cond129
                                        #   Parent Loop BB38_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB38_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB38_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_45
.LBB38_48:                              # %for.end145
                                        #   in Loop: Header=BB38_43 Depth=1
	jmp	.LBB38_49
.LBB38_49:                              # %for.inc146
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_43
.LBB38_50:                              # %for.end148
	jmp	.LBB38_51
.LBB38_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_54:                              # %for.cond153
                                        #   Parent Loop BB38_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_54
.LBB38_57:                              # %for.end167
                                        #   in Loop: Header=BB38_52 Depth=1
	jmp	.LBB38_58
.LBB38_58:                              # %for.inc168
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_52
.LBB38_59:                              # %for.end170
	jmp	.LBB38_60
.LBB38_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB38_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB38_66
.LBB38_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB38_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_86
.LBB38_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_69 Depth 2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_69:                              # %for.cond197
                                        #   Parent Loop BB38_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB38_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB38_73:                              # %if.end218
                                        #   in Loop: Header=BB38_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB38_74:                              # %for.cond233
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	$0, -4(%rbp)
.LBB38_76:                              # %for.cond237
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        #       Parent Loop BB38_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB38_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_76
.LBB38_79:                              # %for.end269
                                        #   in Loop: Header=BB38_74 Depth=3
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc270
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_74
.LBB38_81:                              # %for.end272
                                        #   in Loop: Header=BB38_69 Depth=2
	jmp	.LBB38_82
.LBB38_82:                              # %for.inc273
                                        #   in Loop: Header=BB38_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_69
.LBB38_83:                              # %for.end275
                                        #   in Loop: Header=BB38_67 Depth=1
	jmp	.LBB38_84
.LBB38_84:                              # %for.inc276
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_67
.LBB38_85:                              # %for.end278
	jmp	.LBB38_95
.LBB38_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_89:                              # %for.cond284
                                        #   Parent Loop BB38_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB38_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB38_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB38_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_89
.LBB38_92:                              # %for.end310
                                        #   in Loop: Header=BB38_87 Depth=1
	jmp	.LBB38_93
.LBB38_93:                              # %for.inc311
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_87
.LBB38_94:                              # %for.end313
	jmp	.LBB38_95
.LBB38_95:                              # %if.end314
	jmp	.LBB38_96
.LBB38_96:                              # %if.end315
	cmpl	$1718088234, -84(%rbp)  # imm = 0x6667F22A
	jne	.LBB38_98
.LBB38_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_97
.Lfunc_end38:
	.size	decode_one_b8block.28, .Lfunc_end38-decode_one_b8block.28
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.29       # -- Begin function DecOneForthPix.29
	.p2align	4, 0x90
	.type	DecOneForthPix.29,@function
DecOneForthPix.29:                      # @DecOneForthPix.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$723447404, -8(%rbp)    # imm = 0x2B1EEE6C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	cmpl	$723447404, -8(%rbp)    # imm = 0x2B1EEE6C
	jne	.LBB39_6
.LBB39_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_5
.Lfunc_end39:
	.size	DecOneForthPix.29, .Lfunc_end39-DecOneForthPix.29
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.30    # -- Begin function Error_Concealment.30
	.p2align	4, 0x90
	.type	Error_Concealment.30,@function
Error_Concealment.30:                   # @Error_Concealment.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1705773745, -20(%rbp)  # imm = 0x65AC0AB1
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB40_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_3:                               # %for.cond2
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB40_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB40_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB40_6:                               # %if.end
                                        #   in Loop: Header=BB40_3 Depth=2
	jmp	.LBB40_7
.LBB40_7:                               # %for.inc
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_3
.LBB40_8:                               # %for.end
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_9
.LBB40_9:                               # %for.inc7
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_1
.LBB40_10:                              # %for.end9
	cmpl	$1705773745, -20(%rbp)  # imm = 0x65AC0AB1
	jne	.LBB40_12
.LBB40_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_11
.Lfunc_end40:
	.size	Error_Concealment.30, .Lfunc_end40-Error_Concealment.30
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.31  # -- Begin function Get_Reference_Pixel.31
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.31,@function
Get_Reference_Pixel.31:                 # @Get_Reference_Pixel.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$782188106, -108(%rbp)  # imm = 0x2E9F3E4A
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB41_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB41_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB41_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB41_5
.LBB41_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB41_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB41_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB41_11
.LBB41_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB41_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB41_10
.LBB41_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB41_10:                              # %cond.end14
.LBB41_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB41_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB41_14
.LBB41_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB41_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB41_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB41_20
.LBB41_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB41_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB41_19
.LBB41_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB41_19:                              # %cond.end29
.LBB41_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_332
.LBB41_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB41_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB41_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB41_25
.LBB41_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB41_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB41_31
.LBB41_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB41_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB41_30
.LBB41_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB41_30:                              # %cond.end52
.LBB41_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB41_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_36
.LBB41_35:                              # %cond.false61
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_36:                              # %cond.end63
                                        #   in Loop: Header=BB41_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB41_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_42
.LBB41_38:                              # %cond.false68
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_41
.LBB41_40:                              # %cond.false73
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_41:                              # %cond.end75
                                        #   in Loop: Header=BB41_32 Depth=1
.LBB41_42:                              # %cond.end77
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB41_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_32
.LBB41_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_47
.LBB41_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB41_53
.LBB41_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_52
.LBB41_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_52:                              # %cond.end113
.LBB41_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB41_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB41_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB41_57
.LBB41_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB41_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB41_63
.LBB41_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB41_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB41_62
.LBB41_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB41_62:                              # %cond.end136
.LBB41_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_76
.LBB41_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB41_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB41_68
.LBB41_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB41_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB41_74
.LBB41_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB41_73
.LBB41_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB41_73:                              # %cond.end169
.LBB41_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_75:                              # %if.end
	jmp	.LBB41_76
.LBB41_76:                              # %if.end178
	jmp	.LBB41_331
.LBB41_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB41_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB41_81
.LBB41_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB41_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB41_87
.LBB41_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB41_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB41_86
.LBB41_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB41_86:                              # %cond.end197
.LBB41_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB41_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_92
.LBB41_91:                              # %cond.false209
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_92:                              # %cond.end211
                                        #   in Loop: Header=BB41_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB41_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_98
.LBB41_94:                              # %cond.false216
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_97
.LBB41_96:                              # %cond.false221
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_97:                              # %cond.end223
                                        #   in Loop: Header=BB41_88 Depth=1
.LBB41_98:                              # %cond.end225
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB41_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_88
.LBB41_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_103
.LBB41_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB41_109
.LBB41_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_108
.LBB41_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_108:                             # %cond.end266
.LBB41_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB41_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB41_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB41_113
.LBB41_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB41_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB41_119
.LBB41_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB41_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB41_118
.LBB41_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB41_118:                             # %cond.end287
.LBB41_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_132
.LBB41_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB41_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB41_124
.LBB41_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB41_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB41_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB41_130
.LBB41_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB41_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB41_129
.LBB41_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB41_129:                             # %cond.end320
.LBB41_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_131:                             # %if.end331
	jmp	.LBB41_132
.LBB41_132:                             # %if.end332
	jmp	.LBB41_330
.LBB41_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB41_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB41_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_139
.LBB41_138:                             # %cond.false345
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_139:                             # %cond.end347
                                        #   in Loop: Header=BB41_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB41_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_145
.LBB41_141:                             # %cond.false352
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_144
.LBB41_143:                             # %cond.false357
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_144:                             # %cond.end359
                                        #   in Loop: Header=BB41_135 Depth=1
.LBB41_145:                             # %cond.end361
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_146:                             # %for.cond363
                                        #   Parent Loop BB41_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB41_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB41_150
.LBB41_149:                             # %cond.false371
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_150:                             # %cond.end373
                                        #   in Loop: Header=BB41_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB41_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_156
.LBB41_152:                             # %cond.false378
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB41_155
.LBB41_154:                             # %cond.false383
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_155:                             # %cond.end385
                                        #   in Loop: Header=BB41_146 Depth=2
.LBB41_156:                             # %cond.end387
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB41_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_146
.LBB41_158:                             # %for.end401
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_135
.LBB41_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB41_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB41_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_161
.LBB41_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_167
.LBB41_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB41_173
.LBB41_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_172
.LBB41_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_172:                             # %cond.end449
.LBB41_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB41_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_177
.LBB41_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB41_183
.LBB41_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_182
.LBB41_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_182:                             # %cond.end486
.LBB41_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_196
.LBB41_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB41_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_188
.LBB41_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB41_194
.LBB41_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_193
.LBB41_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_193:                             # %cond.end526
.LBB41_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_195:                             # %if.end532
	jmp	.LBB41_196
.LBB41_196:                             # %if.end533
	jmp	.LBB41_329
.LBB41_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB41_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB41_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB41_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_203
.LBB41_202:                             # %cond.false546
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_203:                             # %cond.end548
                                        #   in Loop: Header=BB41_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB41_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_209
.LBB41_205:                             # %cond.false553
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_208
.LBB41_207:                             # %cond.false558
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_208:                             # %cond.end560
                                        #   in Loop: Header=BB41_199 Depth=1
.LBB41_209:                             # %cond.end562
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_210:                             # %for.cond564
                                        #   Parent Loop BB41_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB41_214
.LBB41_213:                             # %cond.false572
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_214:                             # %cond.end574
                                        #   in Loop: Header=BB41_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB41_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_220
.LBB41_216:                             # %cond.false579
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB41_219
.LBB41_218:                             # %cond.false584
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_219:                             # %cond.end586
                                        #   in Loop: Header=BB41_210 Depth=2
.LBB41_220:                             # %cond.end588
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB41_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_210
.LBB41_222:                             # %for.end602
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB41_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_199
.LBB41_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB41_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB41_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB41_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_225
.LBB41_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_231
.LBB41_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB41_237
.LBB41_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_236
.LBB41_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB41_236:                             # %cond.end650
.LBB41_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB41_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_241
.LBB41_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB41_247
.LBB41_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_246
.LBB41_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_246:                             # %cond.end687
.LBB41_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB41_258
.LBB41_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_251
.LBB41_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB41_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB41_257
.LBB41_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB41_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_256
.LBB41_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB41_256:                             # %cond.end724
.LBB41_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_258:                             # %if.end730
	jmp	.LBB41_328
.LBB41_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB41_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB41_262
.LBB41_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB41_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB41_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB41_265
.LBB41_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB41_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB41_271
.LBB41_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB41_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB41_270
.LBB41_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB41_270:                             # %cond.end753
.LBB41_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB41_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB41_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_276
.LBB41_275:                             # %cond.false765
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_276:                             # %cond.end767
                                        #   in Loop: Header=BB41_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB41_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_282
.LBB41_278:                             # %cond.false772
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB41_281
.LBB41_280:                             # %cond.false777
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB41_281:                             # %cond.end779
                                        #   in Loop: Header=BB41_272 Depth=1
.LBB41_282:                             # %cond.end781
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB41_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_272
.LBB41_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_287
.LBB41_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB41_293
.LBB41_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_292
.LBB41_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_292:                             # %cond.end822
.LBB41_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB41_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB41_296
.LBB41_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB41_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB41_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB41_299
.LBB41_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB41_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB41_305
.LBB41_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB41_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB41_304
.LBB41_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB41_304:                             # %cond.end847
.LBB41_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB41_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB41_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_310
.LBB41_309:                             # %cond.false859
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_310:                             # %cond.end861
                                        #   in Loop: Header=BB41_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB41_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_316
.LBB41_312:                             # %cond.false866
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB41_315
.LBB41_314:                             # %cond.false871
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB41_315:                             # %cond.end873
                                        #   in Loop: Header=BB41_306 Depth=1
.LBB41_316:                             # %cond.end875
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB41_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_306
.LBB41_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_321
.LBB41_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB41_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB41_327
.LBB41_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB41_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_326
.LBB41_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB41_326:                             # %cond.end916
.LBB41_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB41_328:                             # %if.end922
	jmp	.LBB41_329
.LBB41_329:                             # %if.end923
	jmp	.LBB41_330
.LBB41_330:                             # %if.end924
	jmp	.LBB41_331
.LBB41_331:                             # %if.end925
	jmp	.LBB41_332
.LBB41_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$782188106, -108(%rbp)  # imm = 0x2E9F3E4A
	jne	.LBB41_334
.LBB41_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_333
.Lfunc_end41:
	.size	Get_Reference_Pixel.31, .Lfunc_end41-Get_Reference_Pixel.31
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.32  # -- Begin function Get_Reference_Block.32
	.p2align	4, 0x90
	.type	Get_Reference_Block.32,@function
Get_Reference_Block.32:                 # @Get_Reference_Block.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$643784333, -20(%rbp)   # imm = 0x265F5E8D
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_3:                               # %for.cond5
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB42_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_3
.LBB42_6:                               # %for.end
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_7
.LBB42_7:                               # %for.inc14
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_1
.LBB42_8:                               # %for.end16
	cmpl	$643784333, -20(%rbp)   # imm = 0x265F5E8D
	jne	.LBB42_10
.LBB42_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_9
.Lfunc_end42:
	.size	Get_Reference_Block.32, .Lfunc_end42-Get_Reference_Block.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.33
.LCPI43_0:
	.quad	4636737291354636288     # double 100
.LCPI43_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.33
	.p2align	4, 0x90
	.type	Build_Status_Map.33,@function
Build_Status_Map.33:                    # @Build_Status_Map.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$593790262, -36(%rbp)   # imm = 0x23648536
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$0, -8(%rbp)
.LBB43_3:                               # %for.cond2
                                        #   Parent Loop BB43_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB43_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB43_13
.LBB43_6:                               # %if.then
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB43_8:                               # %if.end
                                        #   in Loop: Header=BB43_3 Depth=2
	callq	rand
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB43_10:                              # %if.end20
                                        #   in Loop: Header=BB43_3 Depth=2
	callq	rand
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB43_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	$1, -4(%rbp)
.LBB43_12:                              # %if.end29
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB43_13:                              # %if.end30
                                        #   in Loop: Header=BB43_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB43_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB43_18
.LBB43_15:                              # %if.else
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB43_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB43_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB43_17:                              # %if.end49
                                        #   in Loop: Header=BB43_3 Depth=2
	jmp	.LBB43_18
.LBB43_18:                              # %if.end50
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB43_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_3
.LBB43_20:                              # %for.end
                                        #   in Loop: Header=BB43_1 Depth=1
	jmp	.LBB43_21
.LBB43_21:                              # %for.inc53
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_1
.LBB43_22:                              # %for.end55
	cmpl	$593790262, -36(%rbp)   # imm = 0x23648536
	jne	.LBB43_24
.LBB43_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_23
.Lfunc_end43:
	.size	Build_Status_Map.33, .Lfunc_end43-Build_Status_Map.33
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.34  # -- Begin function Get_Reference_Block.34
	.p2align	4, 0x90
	.type	Get_Reference_Block.34,@function
Get_Reference_Block.34:                 # @Get_Reference_Block.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1240319269, -20(%rbp)  # imm = 0x49EDC525
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB44_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB44_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	$0, -4(%rbp)
.LBB44_3:                               # %for.cond5
                                        #   Parent Loop BB44_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB44_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB44_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB44_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_3
.LBB44_6:                               # %for.end
                                        #   in Loop: Header=BB44_1 Depth=1
	jmp	.LBB44_7
.LBB44_7:                               # %for.inc14
                                        #   in Loop: Header=BB44_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_1
.LBB44_8:                               # %for.end16
	cmpl	$1240319269, -20(%rbp)  # imm = 0x49EDC525
	jne	.LBB44_10
.LBB44_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_9
.Lfunc_end44:
	.size	Get_Reference_Block.34, .Lfunc_end44-Get_Reference_Block.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.35
.LCPI45_0:
	.quad	4636737291354636288     # double 100
.LCPI45_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.35
	.p2align	4, 0x90
	.type	Build_Status_Map.35,@function
Build_Status_Map.35:                    # @Build_Status_Map.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1006146373, -36(%rbp)  # imm = 0x3BF89345
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB45_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -12(%rbp)
.LBB45_3:                               # %for.cond2
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB45_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB45_13
.LBB45_6:                               # %if.then
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB45_8:                               # %if.end
                                        #   in Loop: Header=BB45_3 Depth=2
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB45_10:                              # %if.end20
                                        #   in Loop: Header=BB45_3 Depth=2
	callq	rand
	vmovsd	.LCPI45_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI45_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB45_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	$1, -4(%rbp)
.LBB45_12:                              # %if.end29
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB45_13:                              # %if.end30
                                        #   in Loop: Header=BB45_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB45_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB45_18
.LBB45_15:                              # %if.else
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB45_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB45_17:                              # %if.end49
                                        #   in Loop: Header=BB45_3 Depth=2
	jmp	.LBB45_18
.LBB45_18:                              # %if.end50
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_3
.LBB45_20:                              # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_21
.LBB45_21:                              # %for.inc53
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_1
.LBB45_22:                              # %for.end55
	cmpl	$1006146373, -36(%rbp)  # imm = 0x3BF89345
	jne	.LBB45_24
.LBB45_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_23
.Lfunc_end45:
	.size	Build_Status_Map.35, .Lfunc_end45-Build_Status_Map.35
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.36       # -- Begin function DecOneForthPix.36
	.p2align	4, 0x90
	.type	DecOneForthPix.36,@function
DecOneForthPix.36:                      # @DecOneForthPix.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1906448001, -12(%rbp)  # imm = 0x71A21681
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB46_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_4:                               # %for.end
	cmpl	$1906448001, -12(%rbp)  # imm = 0x71A21681
	jne	.LBB46_6
.LBB46_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_5
.Lfunc_end46:
	.size	DecOneForthPix.36, .Lfunc_end46-DecOneForthPix.36
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.37  # -- Begin function Get_Reference_Pixel.37
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.37,@function
Get_Reference_Pixel.37:                 # @Get_Reference_Pixel.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1572732864, -108(%rbp) # imm = 0x5DBDFFC0
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB47_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB47_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB47_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB47_5
.LBB47_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB47_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB47_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB47_11
.LBB47_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB47_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB47_10
.LBB47_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB47_10:                              # %cond.end14
.LBB47_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB47_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB47_14
.LBB47_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB47_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB47_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB47_20
.LBB47_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB47_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB47_19
.LBB47_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB47_19:                              # %cond.end29
.LBB47_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_332
.LBB47_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB47_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB47_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB47_25
.LBB47_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB47_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB47_31
.LBB47_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB47_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB47_30
.LBB47_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB47_30:                              # %cond.end52
.LBB47_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB47_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_36
.LBB47_35:                              # %cond.false61
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_36:                              # %cond.end63
                                        #   in Loop: Header=BB47_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB47_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_42
.LBB47_38:                              # %cond.false68
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_41
.LBB47_40:                              # %cond.false73
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_41:                              # %cond.end75
                                        #   in Loop: Header=BB47_32 Depth=1
.LBB47_42:                              # %cond.end77
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB47_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_32
.LBB47_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_47
.LBB47_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB47_53
.LBB47_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_52
.LBB47_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_52:                              # %cond.end113
.LBB47_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB47_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB47_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB47_57
.LBB47_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB47_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB47_63
.LBB47_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB47_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB47_62
.LBB47_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB47_62:                              # %cond.end136
.LBB47_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_76
.LBB47_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB47_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB47_68
.LBB47_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB47_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB47_74
.LBB47_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB47_73
.LBB47_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB47_73:                              # %cond.end169
.LBB47_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_75:                              # %if.end
	jmp	.LBB47_76
.LBB47_76:                              # %if.end178
	jmp	.LBB47_331
.LBB47_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB47_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB47_81
.LBB47_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB47_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB47_87
.LBB47_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB47_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB47_86
.LBB47_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB47_86:                              # %cond.end197
.LBB47_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB47_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_92
.LBB47_91:                              # %cond.false209
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_92:                              # %cond.end211
                                        #   in Loop: Header=BB47_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB47_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_98
.LBB47_94:                              # %cond.false216
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_97
.LBB47_96:                              # %cond.false221
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_97:                              # %cond.end223
                                        #   in Loop: Header=BB47_88 Depth=1
.LBB47_98:                              # %cond.end225
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB47_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_88
.LBB47_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_103
.LBB47_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB47_109
.LBB47_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_108
.LBB47_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_108:                             # %cond.end266
.LBB47_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB47_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB47_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB47_113
.LBB47_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB47_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB47_119
.LBB47_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB47_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB47_118
.LBB47_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB47_118:                             # %cond.end287
.LBB47_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_132
.LBB47_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB47_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB47_124
.LBB47_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB47_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB47_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB47_130
.LBB47_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB47_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB47_129
.LBB47_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB47_129:                             # %cond.end320
.LBB47_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_131:                             # %if.end331
	jmp	.LBB47_132
.LBB47_132:                             # %if.end332
	jmp	.LBB47_330
.LBB47_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB47_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB47_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB47_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_139
.LBB47_138:                             # %cond.false345
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_139:                             # %cond.end347
                                        #   in Loop: Header=BB47_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB47_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_145
.LBB47_141:                             # %cond.false352
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_144
.LBB47_143:                             # %cond.false357
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_144:                             # %cond.end359
                                        #   in Loop: Header=BB47_135 Depth=1
.LBB47_145:                             # %cond.end361
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_146:                             # %for.cond363
                                        #   Parent Loop BB47_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB47_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB47_150
.LBB47_149:                             # %cond.false371
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_150:                             # %cond.end373
                                        #   in Loop: Header=BB47_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB47_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_156
.LBB47_152:                             # %cond.false378
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB47_155
.LBB47_154:                             # %cond.false383
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_155:                             # %cond.end385
                                        #   in Loop: Header=BB47_146 Depth=2
.LBB47_156:                             # %cond.end387
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB47_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_146
.LBB47_158:                             # %for.end401
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_135
.LBB47_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB47_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB47_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB47_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_161
.LBB47_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_167
.LBB47_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB47_173
.LBB47_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_172
.LBB47_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_172:                             # %cond.end449
.LBB47_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB47_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_177
.LBB47_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB47_183
.LBB47_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_182
.LBB47_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_182:                             # %cond.end486
.LBB47_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_196
.LBB47_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB47_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_188
.LBB47_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB47_194
.LBB47_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_193
.LBB47_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_193:                             # %cond.end526
.LBB47_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_195:                             # %if.end532
	jmp	.LBB47_196
.LBB47_196:                             # %if.end533
	jmp	.LBB47_329
.LBB47_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB47_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB47_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB47_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_203
.LBB47_202:                             # %cond.false546
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_203:                             # %cond.end548
                                        #   in Loop: Header=BB47_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB47_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_209
.LBB47_205:                             # %cond.false553
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_208
.LBB47_207:                             # %cond.false558
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_208:                             # %cond.end560
                                        #   in Loop: Header=BB47_199 Depth=1
.LBB47_209:                             # %cond.end562
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_210:                             # %for.cond564
                                        #   Parent Loop BB47_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB47_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB47_214
.LBB47_213:                             # %cond.false572
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_214:                             # %cond.end574
                                        #   in Loop: Header=BB47_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB47_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB47_220
.LBB47_216:                             # %cond.false579
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB47_219
.LBB47_218:                             # %cond.false584
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_219:                             # %cond.end586
                                        #   in Loop: Header=BB47_210 Depth=2
.LBB47_220:                             # %cond.end588
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB47_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_210
.LBB47_222:                             # %for.end602
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB47_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_199
.LBB47_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB47_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB47_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB47_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_225
.LBB47_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_231
.LBB47_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB47_237
.LBB47_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_236
.LBB47_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB47_236:                             # %cond.end650
.LBB47_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB47_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_241
.LBB47_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB47_247
.LBB47_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_246
.LBB47_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_246:                             # %cond.end687
.LBB47_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB47_258
.LBB47_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_251
.LBB47_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB47_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB47_257
.LBB47_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB47_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_256
.LBB47_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB47_256:                             # %cond.end724
.LBB47_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_258:                             # %if.end730
	jmp	.LBB47_328
.LBB47_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB47_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB47_262
.LBB47_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB47_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB47_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB47_265
.LBB47_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB47_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB47_271
.LBB47_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB47_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB47_270
.LBB47_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB47_270:                             # %cond.end753
.LBB47_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB47_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB47_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_276
.LBB47_275:                             # %cond.false765
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_276:                             # %cond.end767
                                        #   in Loop: Header=BB47_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB47_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_282
.LBB47_278:                             # %cond.false772
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB47_281
.LBB47_280:                             # %cond.false777
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB47_281:                             # %cond.end779
                                        #   in Loop: Header=BB47_272 Depth=1
.LBB47_282:                             # %cond.end781
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB47_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB47_272
.LBB47_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_287
.LBB47_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB47_293
.LBB47_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_292
.LBB47_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_292:                             # %cond.end822
.LBB47_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB47_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB47_296
.LBB47_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB47_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB47_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB47_299
.LBB47_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB47_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB47_305
.LBB47_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB47_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB47_304
.LBB47_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB47_304:                             # %cond.end847
.LBB47_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB47_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB47_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_310
.LBB47_309:                             # %cond.false859
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_310:                             # %cond.end861
                                        #   in Loop: Header=BB47_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB47_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB47_316
.LBB47_312:                             # %cond.false866
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB47_315
.LBB47_314:                             # %cond.false871
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB47_315:                             # %cond.end873
                                        #   in Loop: Header=BB47_306 Depth=1
.LBB47_316:                             # %cond.end875
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB47_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB47_306
.LBB47_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_321
.LBB47_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB47_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB47_327
.LBB47_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB47_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB47_326
.LBB47_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB47_326:                             # %cond.end916
.LBB47_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB47_328:                             # %if.end922
	jmp	.LBB47_329
.LBB47_329:                             # %if.end923
	jmp	.LBB47_330
.LBB47_330:                             # %if.end924
	jmp	.LBB47_331
.LBB47_331:                             # %if.end925
	jmp	.LBB47_332
.LBB47_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1572732864, -108(%rbp) # imm = 0x5DBDFFC0
	jne	.LBB47_334
.LBB47_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_333
.Lfunc_end47:
	.size	Get_Reference_Pixel.37, .Lfunc_end47-Get_Reference_Pixel.37
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.38   # -- Begin function decode_one_b8block.38
	.p2align	4, 0x90
	.type	decode_one_b8block.38,@function
decode_one_b8block.38:                  # @decode_one_b8block.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$420886009, -84(%rbp)   # imm = 0x191635F9
	movl	%edi, -56(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB48_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB48_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_4:                               # %for.cond9
                                        #   Parent Loop BB48_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB48_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB48_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_4
.LBB48_7:                               # %for.end
                                        #   in Loop: Header=BB48_2 Depth=1
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc26
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_2
.LBB48_9:                               # %for.end28
	jmp	.LBB48_96
.LBB48_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB48_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB48_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB48_31
.LBB48_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB48_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB48_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_17:                              # %for.cond40
                                        #   Parent Loop BB48_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB48_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB48_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_17
.LBB48_20:                              # %for.end49
                                        #   in Loop: Header=BB48_15 Depth=1
	jmp	.LBB48_21
.LBB48_21:                              # %for.inc50
                                        #   in Loop: Header=BB48_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_15
.LBB48_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_25:                              # %for.cond56
                                        #   Parent Loop BB48_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB48_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB48_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_25
.LBB48_28:                              # %for.end71
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_29
.LBB48_29:                              # %for.inc72
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_23
.LBB48_30:                              # %for.end74
	jmp	.LBB48_60
.LBB48_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB48_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB48_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_36:                              # %for.cond83
                                        #   Parent Loop BB48_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB48_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB48_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_36
.LBB48_39:                              # %for.end120
                                        #   in Loop: Header=BB48_34 Depth=1
	jmp	.LBB48_40
.LBB48_40:                              # %for.inc121
                                        #   in Loop: Header=BB48_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_34
.LBB48_41:                              # %for.end123
	jmp	.LBB48_51
.LBB48_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB48_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_45:                              # %for.cond129
                                        #   Parent Loop BB48_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB48_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB48_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_45
.LBB48_48:                              # %for.end145
                                        #   in Loop: Header=BB48_43 Depth=1
	jmp	.LBB48_49
.LBB48_49:                              # %for.inc146
                                        #   in Loop: Header=BB48_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_43
.LBB48_50:                              # %for.end148
	jmp	.LBB48_51
.LBB48_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB48_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_54:                              # %for.cond153
                                        #   Parent Loop BB48_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB48_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_54
.LBB48_57:                              # %for.end167
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_58
.LBB48_58:                              # %for.inc168
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_52
.LBB48_59:                              # %for.end170
	jmp	.LBB48_60
.LBB48_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB48_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB48_66
.LBB48_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB48_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB48_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB48_86
.LBB48_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB48_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_69 Depth 2
                                        #       Child Loop BB48_74 Depth 3
                                        #         Child Loop BB48_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB48_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB48_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB48_69:                              # %for.cond197
                                        #   Parent Loop BB48_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_74 Depth 3
                                        #         Child Loop BB48_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB48_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB48_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB48_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB48_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB48_73:                              # %if.end218
                                        #   in Loop: Header=BB48_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB48_74:                              # %for.cond233
                                        #   Parent Loop BB48_67 Depth=1
                                        #     Parent Loop BB48_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB48_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB48_74 Depth=3
	movl	$0, -8(%rbp)
.LBB48_76:                              # %for.cond237
                                        #   Parent Loop BB48_67 Depth=1
                                        #     Parent Loop BB48_69 Depth=2
                                        #       Parent Loop BB48_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB48_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB48_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB48_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_76
.LBB48_79:                              # %for.end269
                                        #   in Loop: Header=BB48_74 Depth=3
	jmp	.LBB48_80
.LBB48_80:                              # %for.inc270
                                        #   in Loop: Header=BB48_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_74
.LBB48_81:                              # %for.end272
                                        #   in Loop: Header=BB48_69 Depth=2
	jmp	.LBB48_82
.LBB48_82:                              # %for.inc273
                                        #   in Loop: Header=BB48_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_69
.LBB48_83:                              # %for.end275
                                        #   in Loop: Header=BB48_67 Depth=1
	jmp	.LBB48_84
.LBB48_84:                              # %for.inc276
                                        #   in Loop: Header=BB48_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_67
.LBB48_85:                              # %for.end278
	jmp	.LBB48_95
.LBB48_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB48_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB48_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_89:                              # %for.cond284
                                        #   Parent Loop BB48_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB48_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB48_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_89
.LBB48_92:                              # %for.end310
                                        #   in Loop: Header=BB48_87 Depth=1
	jmp	.LBB48_93
.LBB48_93:                              # %for.inc311
                                        #   in Loop: Header=BB48_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_87
.LBB48_94:                              # %for.end313
	jmp	.LBB48_95
.LBB48_95:                              # %if.end314
	jmp	.LBB48_96
.LBB48_96:                              # %if.end315
	cmpl	$420886009, -84(%rbp)   # imm = 0x191635F9
	jne	.LBB48_98
.LBB48_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_97
.Lfunc_end48:
	.size	decode_one_b8block.38, .Lfunc_end48-decode_one_b8block.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.39
.LCPI49_0:
	.quad	4636737291354636288     # double 100
.LCPI49_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.39
	.p2align	4, 0x90
	.type	Build_Status_Map.39,@function
Build_Status_Map.39:                    # @Build_Status_Map.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1183532603, -36(%rbp)  # imm = 0x468B463B
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB49_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	$0, -8(%rbp)
.LBB49_3:                               # %for.cond2
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB49_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB49_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB49_13
.LBB49_6:                               # %if.then
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI49_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB49_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB49_8:                               # %if.end
                                        #   in Loop: Header=BB49_3 Depth=2
	callq	rand
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI49_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB49_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB49_10:                              # %if.end20
                                        #   in Loop: Header=BB49_3 Depth=2
	callq	rand
	vmovsd	.LCPI49_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI49_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB49_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	$1, -4(%rbp)
.LBB49_12:                              # %if.end29
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB49_13:                              # %if.end30
                                        #   in Loop: Header=BB49_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB49_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB49_18
.LBB49_15:                              # %if.else
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB49_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB49_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB49_17:                              # %if.end49
                                        #   in Loop: Header=BB49_3 Depth=2
	jmp	.LBB49_18
.LBB49_18:                              # %if.end50
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB49_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_3
.LBB49_20:                              # %for.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_21
.LBB49_21:                              # %for.inc53
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_1
.LBB49_22:                              # %for.end55
	cmpl	$1183532603, -36(%rbp)  # imm = 0x468B463B
	jne	.LBB49_24
.LBB49_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_23
.Lfunc_end49:
	.size	Build_Status_Map.39, .Lfunc_end49-Build_Status_Map.39
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.40  # -- Begin function Get_Reference_Block.40
	.p2align	4, 0x90
	.type	Get_Reference_Block.40,@function
Get_Reference_Block.40:                 # @Get_Reference_Block.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$761416106, -28(%rbp)   # imm = 0x2D6249AA
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -4(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB50_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	$0, -8(%rbp)
.LBB50_3:                               # %for.cond5
                                        #   Parent Loop BB50_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB50_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB50_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB50_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_3
.LBB50_6:                               # %for.end
                                        #   in Loop: Header=BB50_1 Depth=1
	jmp	.LBB50_7
.LBB50_7:                               # %for.inc14
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_1
.LBB50_8:                               # %for.end16
	cmpl	$761416106, -28(%rbp)   # imm = 0x2D6249AA
	jne	.LBB50_10
.LBB50_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_9
.Lfunc_end50:
	.size	Get_Reference_Block.40, .Lfunc_end50-Get_Reference_Block.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.41
.LCPI51_0:
	.quad	4636737291354636288     # double 100
.LCPI51_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.41
	.p2align	4, 0x90
	.type	Build_Status_Map.41,@function
Build_Status_Map.41:                    # @Build_Status_Map.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2104363028, -44(%rbp)  # imm = 0x7D6E0814
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB51_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB51_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	$0, -8(%rbp)
.LBB51_3:                               # %for.cond2
                                        #   Parent Loop BB51_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB51_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB51_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB51_13
.LBB51_6:                               # %if.then
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB51_8:                               # %if.end
                                        #   in Loop: Header=BB51_3 Depth=2
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB51_10:                              # %if.end20
                                        #   in Loop: Header=BB51_3 Depth=2
	callq	rand
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	$1, -4(%rbp)
.LBB51_12:                              # %if.end29
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB51_13:                              # %if.end30
                                        #   in Loop: Header=BB51_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB51_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB51_18
.LBB51_15:                              # %if.else
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB51_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB51_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB51_17:                              # %if.end49
                                        #   in Loop: Header=BB51_3 Depth=2
	jmp	.LBB51_18
.LBB51_18:                              # %if.end50
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB51_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_3
.LBB51_20:                              # %for.end
                                        #   in Loop: Header=BB51_1 Depth=1
	jmp	.LBB51_21
.LBB51_21:                              # %for.inc53
                                        #   in Loop: Header=BB51_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_1
.LBB51_22:                              # %for.end55
	cmpl	$2104363028, -44(%rbp)  # imm = 0x7D6E0814
	jne	.LBB51_24
.LBB51_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_23
.Lfunc_end51:
	.size	Build_Status_Map.41, .Lfunc_end51-Build_Status_Map.41
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.42  # -- Begin function Get_Reference_Pixel.42
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.42,@function
Get_Reference_Pixel.42:                 # @Get_Reference_Pixel.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1839909341, -104(%rbp) # imm = 0x6DAAC9DD
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB52_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB52_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB52_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB52_5
.LBB52_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB52_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB52_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB52_11
.LBB52_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB52_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB52_10
.LBB52_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB52_10:                              # %cond.end14
.LBB52_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB52_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB52_14
.LBB52_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB52_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB52_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB52_20
.LBB52_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB52_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB52_19
.LBB52_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB52_19:                              # %cond.end29
.LBB52_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_332
.LBB52_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB52_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB52_25
.LBB52_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB52_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB52_31
.LBB52_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB52_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB52_30
.LBB52_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB52_30:                              # %cond.end52
.LBB52_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB52_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_36
.LBB52_35:                              # %cond.false61
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_36:                              # %cond.end63
                                        #   in Loop: Header=BB52_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB52_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_42
.LBB52_38:                              # %cond.false68
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_41
.LBB52_40:                              # %cond.false73
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_41:                              # %cond.end75
                                        #   in Loop: Header=BB52_32 Depth=1
.LBB52_42:                              # %cond.end77
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB52_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_32
.LBB52_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_47
.LBB52_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB52_53
.LBB52_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_52
.LBB52_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_52:                              # %cond.end113
.LBB52_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB52_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB52_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB52_57
.LBB52_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB52_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB52_63
.LBB52_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB52_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB52_62
.LBB52_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB52_62:                              # %cond.end136
.LBB52_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_76
.LBB52_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB52_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB52_68
.LBB52_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB52_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB52_74
.LBB52_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB52_73
.LBB52_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB52_73:                              # %cond.end169
.LBB52_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_75:                              # %if.end
	jmp	.LBB52_76
.LBB52_76:                              # %if.end178
	jmp	.LBB52_331
.LBB52_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB52_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB52_81
.LBB52_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB52_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB52_87
.LBB52_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB52_86
.LBB52_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB52_86:                              # %cond.end197
.LBB52_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB52_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_92
.LBB52_91:                              # %cond.false209
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_92:                              # %cond.end211
                                        #   in Loop: Header=BB52_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB52_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_98
.LBB52_94:                              # %cond.false216
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_97
.LBB52_96:                              # %cond.false221
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_97:                              # %cond.end223
                                        #   in Loop: Header=BB52_88 Depth=1
.LBB52_98:                              # %cond.end225
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB52_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_88
.LBB52_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_103
.LBB52_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB52_109
.LBB52_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_108
.LBB52_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_108:                             # %cond.end266
.LBB52_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB52_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB52_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB52_113
.LBB52_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB52_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB52_119
.LBB52_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB52_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB52_118
.LBB52_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB52_118:                             # %cond.end287
.LBB52_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_132
.LBB52_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB52_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB52_124
.LBB52_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB52_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB52_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB52_130
.LBB52_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB52_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB52_129
.LBB52_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB52_129:                             # %cond.end320
.LBB52_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_131:                             # %if.end331
	jmp	.LBB52_132
.LBB52_132:                             # %if.end332
	jmp	.LBB52_330
.LBB52_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB52_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB52_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB52_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_139
.LBB52_138:                             # %cond.false345
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_139:                             # %cond.end347
                                        #   in Loop: Header=BB52_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB52_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_145
.LBB52_141:                             # %cond.false352
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_144
.LBB52_143:                             # %cond.false357
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_144:                             # %cond.end359
                                        #   in Loop: Header=BB52_135 Depth=1
.LBB52_145:                             # %cond.end361
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_146:                             # %for.cond363
                                        #   Parent Loop BB52_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB52_150
.LBB52_149:                             # %cond.false371
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_150:                             # %cond.end373
                                        #   in Loop: Header=BB52_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB52_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_156
.LBB52_152:                             # %cond.false378
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB52_155
.LBB52_154:                             # %cond.false383
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_155:                             # %cond.end385
                                        #   in Loop: Header=BB52_146 Depth=2
.LBB52_156:                             # %cond.end387
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB52_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_146
.LBB52_158:                             # %for.end401
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB52_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_135
.LBB52_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB52_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB52_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB52_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_161
.LBB52_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_167
.LBB52_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB52_173
.LBB52_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_172
.LBB52_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_172:                             # %cond.end449
.LBB52_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB52_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_177
.LBB52_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB52_183
.LBB52_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_182
.LBB52_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_182:                             # %cond.end486
.LBB52_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_196
.LBB52_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB52_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_188
.LBB52_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB52_194
.LBB52_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_193
.LBB52_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_193:                             # %cond.end526
.LBB52_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_195:                             # %if.end532
	jmp	.LBB52_196
.LBB52_196:                             # %if.end533
	jmp	.LBB52_329
.LBB52_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB52_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB52_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB52_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_203
.LBB52_202:                             # %cond.false546
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_203:                             # %cond.end548
                                        #   in Loop: Header=BB52_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB52_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_209
.LBB52_205:                             # %cond.false553
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_208
.LBB52_207:                             # %cond.false558
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_208:                             # %cond.end560
                                        #   in Loop: Header=BB52_199 Depth=1
.LBB52_209:                             # %cond.end562
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_210:                             # %for.cond564
                                        #   Parent Loop BB52_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB52_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB52_214
.LBB52_213:                             # %cond.false572
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_214:                             # %cond.end574
                                        #   in Loop: Header=BB52_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB52_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB52_220
.LBB52_216:                             # %cond.false579
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB52_219
.LBB52_218:                             # %cond.false584
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_219:                             # %cond.end586
                                        #   in Loop: Header=BB52_210 Depth=2
.LBB52_220:                             # %cond.end588
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB52_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_210
.LBB52_222:                             # %for.end602
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB52_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_199
.LBB52_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB52_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB52_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB52_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_225
.LBB52_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_231
.LBB52_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB52_237
.LBB52_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_236
.LBB52_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB52_236:                             # %cond.end650
.LBB52_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB52_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_241
.LBB52_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB52_247
.LBB52_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_246
.LBB52_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_246:                             # %cond.end687
.LBB52_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB52_258
.LBB52_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_251
.LBB52_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB52_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB52_257
.LBB52_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB52_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_256
.LBB52_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB52_256:                             # %cond.end724
.LBB52_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_258:                             # %if.end730
	jmp	.LBB52_328
.LBB52_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB52_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB52_262
.LBB52_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB52_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB52_265
.LBB52_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB52_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB52_271
.LBB52_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB52_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB52_270
.LBB52_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB52_270:                             # %cond.end753
.LBB52_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB52_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB52_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_276
.LBB52_275:                             # %cond.false765
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_276:                             # %cond.end767
                                        #   in Loop: Header=BB52_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB52_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_282
.LBB52_278:                             # %cond.false772
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB52_281
.LBB52_280:                             # %cond.false777
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB52_281:                             # %cond.end779
                                        #   in Loop: Header=BB52_272 Depth=1
.LBB52_282:                             # %cond.end781
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB52_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB52_272
.LBB52_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_287
.LBB52_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB52_293
.LBB52_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_292
.LBB52_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_292:                             # %cond.end822
.LBB52_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB52_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB52_296
.LBB52_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB52_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB52_299
.LBB52_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB52_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB52_305
.LBB52_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB52_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB52_304
.LBB52_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB52_304:                             # %cond.end847
.LBB52_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB52_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB52_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_310
.LBB52_309:                             # %cond.false859
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_310:                             # %cond.end861
                                        #   in Loop: Header=BB52_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB52_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB52_316
.LBB52_312:                             # %cond.false866
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB52_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB52_315
.LBB52_314:                             # %cond.false871
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB52_315:                             # %cond.end873
                                        #   in Loop: Header=BB52_306 Depth=1
.LBB52_316:                             # %cond.end875
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB52_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB52_306
.LBB52_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_321
.LBB52_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB52_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB52_327
.LBB52_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB52_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB52_326
.LBB52_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB52_326:                             # %cond.end916
.LBB52_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB52_328:                             # %if.end922
	jmp	.LBB52_329
.LBB52_329:                             # %if.end923
	jmp	.LBB52_330
.LBB52_330:                             # %if.end924
	jmp	.LBB52_331
.LBB52_331:                             # %if.end925
	jmp	.LBB52_332
.LBB52_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1839909341, -104(%rbp) # imm = 0x6DAAC9DD
	jne	.LBB52_334
.LBB52_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_333
.Lfunc_end52:
	.size	Get_Reference_Pixel.42, .Lfunc_end52-Get_Reference_Pixel.42
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.43   # -- Begin function decode_one_b8block.43
	.p2align	4, 0x90
	.type	decode_one_b8block.43,@function
decode_one_b8block.43:                  # @decode_one_b8block.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1193149420, -84(%rbp)  # imm = 0x471E03EC
	movl	%edi, -44(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_4:                               # %for.cond9
                                        #   Parent Loop BB53_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB53_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB53_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_4
.LBB53_7:                               # %for.end
                                        #   in Loop: Header=BB53_2 Depth=1
	jmp	.LBB53_8
.LBB53_8:                               # %for.inc26
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_2
.LBB53_9:                               # %for.end28
	jmp	.LBB53_96
.LBB53_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB53_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB53_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB53_31
.LBB53_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_17:                              # %for.cond40
                                        #   Parent Loop BB53_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB53_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB53_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_17
.LBB53_20:                              # %for.end49
                                        #   in Loop: Header=BB53_15 Depth=1
	jmp	.LBB53_21
.LBB53_21:                              # %for.inc50
                                        #   in Loop: Header=BB53_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_15
.LBB53_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_25:                              # %for.cond56
                                        #   Parent Loop BB53_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB53_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB53_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_25
.LBB53_28:                              # %for.end71
                                        #   in Loop: Header=BB53_23 Depth=1
	jmp	.LBB53_29
.LBB53_29:                              # %for.inc72
                                        #   in Loop: Header=BB53_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_23
.LBB53_30:                              # %for.end74
	jmp	.LBB53_60
.LBB53_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB53_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB53_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_36:                              # %for.cond83
                                        #   Parent Loop BB53_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB53_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB53_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_36
.LBB53_39:                              # %for.end120
                                        #   in Loop: Header=BB53_34 Depth=1
	jmp	.LBB53_40
.LBB53_40:                              # %for.inc121
                                        #   in Loop: Header=BB53_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_34
.LBB53_41:                              # %for.end123
	jmp	.LBB53_51
.LBB53_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_45:                              # %for.cond129
                                        #   Parent Loop BB53_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB53_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB53_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_45
.LBB53_48:                              # %for.end145
                                        #   in Loop: Header=BB53_43 Depth=1
	jmp	.LBB53_49
.LBB53_49:                              # %for.inc146
                                        #   in Loop: Header=BB53_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_43
.LBB53_50:                              # %for.end148
	jmp	.LBB53_51
.LBB53_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_54:                              # %for.cond153
                                        #   Parent Loop BB53_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB53_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB53_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_54
.LBB53_57:                              # %for.end167
                                        #   in Loop: Header=BB53_52 Depth=1
	jmp	.LBB53_58
.LBB53_58:                              # %for.inc168
                                        #   in Loop: Header=BB53_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_52
.LBB53_59:                              # %for.end170
	jmp	.LBB53_60
.LBB53_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB53_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB53_66
.LBB53_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB53_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB53_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB53_86
.LBB53_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB53_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_69 Depth 2
                                        #       Child Loop BB53_74 Depth 3
                                        #         Child Loop BB53_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB53_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB53_69:                              # %for.cond197
                                        #   Parent Loop BB53_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_74 Depth 3
                                        #         Child Loop BB53_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB53_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB53_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB53_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB53_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB53_73:                              # %if.end218
                                        #   in Loop: Header=BB53_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB53_74:                              # %for.cond233
                                        #   Parent Loop BB53_67 Depth=1
                                        #     Parent Loop BB53_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB53_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB53_74 Depth=3
	movl	$0, -4(%rbp)
.LBB53_76:                              # %for.cond237
                                        #   Parent Loop BB53_67 Depth=1
                                        #     Parent Loop BB53_69 Depth=2
                                        #       Parent Loop BB53_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB53_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB53_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB53_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_76
.LBB53_79:                              # %for.end269
                                        #   in Loop: Header=BB53_74 Depth=3
	jmp	.LBB53_80
.LBB53_80:                              # %for.inc270
                                        #   in Loop: Header=BB53_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_74
.LBB53_81:                              # %for.end272
                                        #   in Loop: Header=BB53_69 Depth=2
	jmp	.LBB53_82
.LBB53_82:                              # %for.inc273
                                        #   in Loop: Header=BB53_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB53_69
.LBB53_83:                              # %for.end275
                                        #   in Loop: Header=BB53_67 Depth=1
	jmp	.LBB53_84
.LBB53_84:                              # %for.inc276
                                        #   in Loop: Header=BB53_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_67
.LBB53_85:                              # %for.end278
	jmp	.LBB53_95
.LBB53_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB53_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB53_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_89:                              # %for.cond284
                                        #   Parent Loop BB53_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB53_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB53_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB53_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_89
.LBB53_92:                              # %for.end310
                                        #   in Loop: Header=BB53_87 Depth=1
	jmp	.LBB53_93
.LBB53_93:                              # %for.inc311
                                        #   in Loop: Header=BB53_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_87
.LBB53_94:                              # %for.end313
	jmp	.LBB53_95
.LBB53_95:                              # %if.end314
	jmp	.LBB53_96
.LBB53_96:                              # %if.end315
	cmpl	$1193149420, -84(%rbp)  # imm = 0x471E03EC
	jne	.LBB53_98
.LBB53_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_97
.Lfunc_end53:
	.size	decode_one_b8block.43, .Lfunc_end53-decode_one_b8block.43
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.44       # -- Begin function DecOneForthPix.44
	.p2align	4, 0x90
	.type	DecOneForthPix.44,@function
DecOneForthPix.44:                      # @DecOneForthPix.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1832683394, -12(%rbp)  # imm = 0x6D3C8782
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB54_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_1
.LBB54_4:                               # %for.end
	cmpl	$1832683394, -12(%rbp)  # imm = 0x6D3C8782
	jne	.LBB54_6
.LBB54_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_5
.Lfunc_end54:
	.size	DecOneForthPix.44, .Lfunc_end54-DecOneForthPix.44
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.45  # -- Begin function Get_Reference_Pixel.45
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.45,@function
Get_Reference_Pixel.45:                 # @Get_Reference_Pixel.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$472279342, -108(%rbp)  # imm = 0x1C26692E
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB55_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB55_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB55_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB55_5
.LBB55_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB55_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB55_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB55_11
.LBB55_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB55_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB55_10
.LBB55_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB55_10:                              # %cond.end14
.LBB55_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB55_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB55_14
.LBB55_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB55_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB55_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB55_20
.LBB55_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB55_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB55_19
.LBB55_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB55_19:                              # %cond.end29
.LBB55_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_332
.LBB55_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB55_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB55_25
.LBB55_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB55_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB55_31
.LBB55_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB55_30
.LBB55_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB55_30:                              # %cond.end52
.LBB55_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB55_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB55_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB55_36
.LBB55_35:                              # %cond.false61
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_36:                              # %cond.end63
                                        #   in Loop: Header=BB55_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB55_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_42
.LBB55_38:                              # %cond.false68
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB55_41
.LBB55_40:                              # %cond.false73
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_41:                              # %cond.end75
                                        #   in Loop: Header=BB55_32 Depth=1
.LBB55_42:                              # %cond.end77
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB55_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_32
.LBB55_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_47
.LBB55_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB55_53
.LBB55_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_52
.LBB55_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_52:                              # %cond.end113
.LBB55_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB55_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB55_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB55_57
.LBB55_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB55_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB55_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB55_63
.LBB55_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB55_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB55_62
.LBB55_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB55_62:                              # %cond.end136
.LBB55_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB55_76
.LBB55_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB55_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB55_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB55_68
.LBB55_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB55_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB55_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB55_74
.LBB55_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB55_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB55_73
.LBB55_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB55_73:                              # %cond.end169
.LBB55_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB55_75:                              # %if.end
	jmp	.LBB55_76
.LBB55_76:                              # %if.end178
	jmp	.LBB55_331
.LBB55_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB55_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB55_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB55_81
.LBB55_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB55_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB55_87
.LBB55_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB55_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB55_86
.LBB55_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB55_86:                              # %cond.end197
.LBB55_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB55_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB55_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB55_92
.LBB55_91:                              # %cond.false209
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_92:                              # %cond.end211
                                        #   in Loop: Header=BB55_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB55_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_98
.LBB55_94:                              # %cond.false216
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB55_97
.LBB55_96:                              # %cond.false221
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_97:                              # %cond.end223
                                        #   in Loop: Header=BB55_88 Depth=1
.LBB55_98:                              # %cond.end225
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB55_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_88
.LBB55_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_103
.LBB55_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB55_109
.LBB55_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_108
.LBB55_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_108:                             # %cond.end266
.LBB55_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB55_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB55_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB55_113
.LBB55_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB55_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB55_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB55_119
.LBB55_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB55_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB55_118
.LBB55_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB55_118:                             # %cond.end287
.LBB55_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB55_132
.LBB55_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB55_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB55_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB55_124
.LBB55_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB55_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB55_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB55_130
.LBB55_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB55_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB55_129
.LBB55_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB55_129:                             # %cond.end320
.LBB55_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB55_131:                             # %if.end331
	jmp	.LBB55_132
.LBB55_132:                             # %if.end332
	jmp	.LBB55_330
.LBB55_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB55_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB55_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB55_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB55_139
.LBB55_138:                             # %cond.false345
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_139:                             # %cond.end347
                                        #   in Loop: Header=BB55_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB55_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_145
.LBB55_141:                             # %cond.false352
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB55_144
.LBB55_143:                             # %cond.false357
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_144:                             # %cond.end359
                                        #   in Loop: Header=BB55_135 Depth=1
.LBB55_145:                             # %cond.end361
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB55_146:                             # %for.cond363
                                        #   Parent Loop BB55_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB55_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB55_150
.LBB55_149:                             # %cond.false371
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_150:                             # %cond.end373
                                        #   in Loop: Header=BB55_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB55_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB55_156
.LBB55_152:                             # %cond.false378
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB55_155
.LBB55_154:                             # %cond.false383
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_155:                             # %cond.end385
                                        #   in Loop: Header=BB55_146 Depth=2
.LBB55_156:                             # %cond.end387
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB55_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_146
.LBB55_158:                             # %for.end401
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB55_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_135
.LBB55_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB55_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB55_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB55_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB55_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_161
.LBB55_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_167
.LBB55_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB55_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB55_173
.LBB55_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_172
.LBB55_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB55_172:                             # %cond.end449
.LBB55_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB55_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_177
.LBB55_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB55_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB55_183
.LBB55_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_182
.LBB55_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_182:                             # %cond.end486
.LBB55_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB55_196
.LBB55_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB55_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_188
.LBB55_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB55_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB55_194
.LBB55_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_193
.LBB55_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_193:                             # %cond.end526
.LBB55_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB55_195:                             # %if.end532
	jmp	.LBB55_196
.LBB55_196:                             # %if.end533
	jmp	.LBB55_329
.LBB55_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB55_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB55_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB55_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB55_203
.LBB55_202:                             # %cond.false546
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_203:                             # %cond.end548
                                        #   in Loop: Header=BB55_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB55_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_209
.LBB55_205:                             # %cond.false553
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB55_208
.LBB55_207:                             # %cond.false558
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_208:                             # %cond.end560
                                        #   in Loop: Header=BB55_199 Depth=1
.LBB55_209:                             # %cond.end562
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB55_210:                             # %for.cond564
                                        #   Parent Loop BB55_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB55_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB55_214
.LBB55_213:                             # %cond.false572
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_214:                             # %cond.end574
                                        #   in Loop: Header=BB55_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB55_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB55_220
.LBB55_216:                             # %cond.false579
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB55_219
.LBB55_218:                             # %cond.false584
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_219:                             # %cond.end586
                                        #   in Loop: Header=BB55_210 Depth=2
.LBB55_220:                             # %cond.end588
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB55_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_210
.LBB55_222:                             # %for.end602
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB55_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_199
.LBB55_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB55_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB55_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB55_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB55_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_225
.LBB55_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_231
.LBB55_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB55_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB55_237
.LBB55_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_236
.LBB55_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB55_236:                             # %cond.end650
.LBB55_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB55_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_241
.LBB55_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB55_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB55_247
.LBB55_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_246
.LBB55_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_246:                             # %cond.end687
.LBB55_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB55_258
.LBB55_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_251
.LBB55_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB55_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB55_257
.LBB55_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB55_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_256
.LBB55_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB55_256:                             # %cond.end724
.LBB55_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB55_258:                             # %if.end730
	jmp	.LBB55_328
.LBB55_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB55_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB55_262
.LBB55_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB55_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB55_265
.LBB55_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB55_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB55_271
.LBB55_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB55_270
.LBB55_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB55_270:                             # %cond.end753
.LBB55_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB55_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB55_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB55_276
.LBB55_275:                             # %cond.false765
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_276:                             # %cond.end767
                                        #   in Loop: Header=BB55_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB55_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_282
.LBB55_278:                             # %cond.false772
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB55_281
.LBB55_280:                             # %cond.false777
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB55_281:                             # %cond.end779
                                        #   in Loop: Header=BB55_272 Depth=1
.LBB55_282:                             # %cond.end781
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB55_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB55_272
.LBB55_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_287
.LBB55_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB55_293
.LBB55_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_292
.LBB55_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_292:                             # %cond.end822
.LBB55_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB55_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB55_296
.LBB55_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB55_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB55_299
.LBB55_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB55_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB55_305
.LBB55_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB55_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB55_304
.LBB55_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB55_304:                             # %cond.end847
.LBB55_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB55_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB55_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB55_310
.LBB55_309:                             # %cond.false859
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_310:                             # %cond.end861
                                        #   in Loop: Header=BB55_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB55_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB55_316
.LBB55_312:                             # %cond.false866
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB55_315
.LBB55_314:                             # %cond.false871
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB55_315:                             # %cond.end873
                                        #   in Loop: Header=BB55_306 Depth=1
.LBB55_316:                             # %cond.end875
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB55_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_306
.LBB55_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_321
.LBB55_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB55_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB55_327
.LBB55_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB55_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB55_326
.LBB55_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB55_326:                             # %cond.end916
.LBB55_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB55_328:                             # %if.end922
	jmp	.LBB55_329
.LBB55_329:                             # %if.end923
	jmp	.LBB55_330
.LBB55_330:                             # %if.end924
	jmp	.LBB55_331
.LBB55_331:                             # %if.end925
	jmp	.LBB55_332
.LBB55_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$472279342, -108(%rbp)  # imm = 0x1C26692E
	jne	.LBB55_334
.LBB55_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_333
.Lfunc_end55:
	.size	Get_Reference_Pixel.45, .Lfunc_end55-Get_Reference_Pixel.45
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.46  # -- Begin function Get_Reference_Pixel.46
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.46,@function
Get_Reference_Pixel.46:                 # @Get_Reference_Pixel.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1350031196, -100(%rbp) # imm = 0x5077D75C
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB56_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB56_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB56_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB56_5
.LBB56_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB56_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB56_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB56_11
.LBB56_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB56_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB56_10
.LBB56_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB56_10:                              # %cond.end14
.LBB56_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB56_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB56_14
.LBB56_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB56_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB56_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB56_20
.LBB56_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB56_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB56_19
.LBB56_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB56_19:                              # %cond.end29
.LBB56_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_332
.LBB56_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB56_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB56_25
.LBB56_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB56_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB56_31
.LBB56_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB56_30
.LBB56_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB56_30:                              # %cond.end52
.LBB56_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_36
.LBB56_35:                              # %cond.false61
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_36:                              # %cond.end63
                                        #   in Loop: Header=BB56_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB56_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_42
.LBB56_38:                              # %cond.false68
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_41
.LBB56_40:                              # %cond.false73
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_41:                              # %cond.end75
                                        #   in Loop: Header=BB56_32 Depth=1
.LBB56_42:                              # %cond.end77
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_32
.LBB56_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_47
.LBB56_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB56_53
.LBB56_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_52
.LBB56_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_52:                              # %cond.end113
.LBB56_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB56_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB56_57
.LBB56_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB56_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB56_63
.LBB56_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB56_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB56_62
.LBB56_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB56_62:                              # %cond.end136
.LBB56_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_76
.LBB56_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB56_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB56_68
.LBB56_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB56_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB56_74
.LBB56_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB56_73
.LBB56_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB56_73:                              # %cond.end169
.LBB56_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_75:                              # %if.end
	jmp	.LBB56_76
.LBB56_76:                              # %if.end178
	jmp	.LBB56_331
.LBB56_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB56_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB56_81
.LBB56_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB56_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB56_87
.LBB56_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB56_86
.LBB56_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB56_86:                              # %cond.end197
.LBB56_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_92
.LBB56_91:                              # %cond.false209
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_92:                              # %cond.end211
                                        #   in Loop: Header=BB56_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB56_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_98
.LBB56_94:                              # %cond.false216
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_97
.LBB56_96:                              # %cond.false221
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_97:                              # %cond.end223
                                        #   in Loop: Header=BB56_88 Depth=1
.LBB56_98:                              # %cond.end225
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_88
.LBB56_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_103
.LBB56_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB56_109
.LBB56_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_108
.LBB56_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_108:                             # %cond.end266
.LBB56_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB56_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB56_113
.LBB56_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB56_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB56_119
.LBB56_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB56_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB56_118
.LBB56_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB56_118:                             # %cond.end287
.LBB56_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_132
.LBB56_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB56_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB56_124
.LBB56_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB56_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB56_130
.LBB56_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB56_129
.LBB56_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB56_129:                             # %cond.end320
.LBB56_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_131:                             # %if.end331
	jmp	.LBB56_132
.LBB56_132:                             # %if.end332
	jmp	.LBB56_330
.LBB56_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB56_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB56_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB56_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_139
.LBB56_138:                             # %cond.false345
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_139:                             # %cond.end347
                                        #   in Loop: Header=BB56_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB56_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_145
.LBB56_141:                             # %cond.false352
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_144
.LBB56_143:                             # %cond.false357
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_144:                             # %cond.end359
                                        #   in Loop: Header=BB56_135 Depth=1
.LBB56_145:                             # %cond.end361
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_146:                             # %for.cond363
                                        #   Parent Loop BB56_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB56_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB56_150
.LBB56_149:                             # %cond.false371
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_150:                             # %cond.end373
                                        #   in Loop: Header=BB56_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB56_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_156
.LBB56_152:                             # %cond.false378
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB56_155
.LBB56_154:                             # %cond.false383
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_155:                             # %cond.end385
                                        #   in Loop: Header=BB56_146 Depth=2
.LBB56_156:                             # %cond.end387
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_146
.LBB56_158:                             # %for.end401
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_135
.LBB56_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_161
.LBB56_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_167
.LBB56_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB56_173
.LBB56_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_172
.LBB56_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_172:                             # %cond.end449
.LBB56_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_177
.LBB56_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB56_183
.LBB56_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_182
.LBB56_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_182:                             # %cond.end486
.LBB56_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_196
.LBB56_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB56_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_188
.LBB56_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB56_194
.LBB56_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_193
.LBB56_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_193:                             # %cond.end526
.LBB56_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_195:                             # %if.end532
	jmp	.LBB56_196
.LBB56_196:                             # %if.end533
	jmp	.LBB56_329
.LBB56_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB56_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB56_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB56_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_203
.LBB56_202:                             # %cond.false546
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_203:                             # %cond.end548
                                        #   in Loop: Header=BB56_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB56_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_209
.LBB56_205:                             # %cond.false553
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_208
.LBB56_207:                             # %cond.false558
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_208:                             # %cond.end560
                                        #   in Loop: Header=BB56_199 Depth=1
.LBB56_209:                             # %cond.end562
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_210:                             # %for.cond564
                                        #   Parent Loop BB56_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB56_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB56_214
.LBB56_213:                             # %cond.false572
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_214:                             # %cond.end574
                                        #   in Loop: Header=BB56_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB56_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_220
.LBB56_216:                             # %cond.false579
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB56_219
.LBB56_218:                             # %cond.false584
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_219:                             # %cond.end586
                                        #   in Loop: Header=BB56_210 Depth=2
.LBB56_220:                             # %cond.end588
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_210
.LBB56_222:                             # %for.end602
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_199
.LBB56_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB56_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB56_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_225
.LBB56_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_231
.LBB56_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB56_237
.LBB56_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_236
.LBB56_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_236:                             # %cond.end650
.LBB56_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_241
.LBB56_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB56_247
.LBB56_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_246
.LBB56_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_246:                             # %cond.end687
.LBB56_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_258
.LBB56_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_251
.LBB56_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB56_257
.LBB56_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_256
.LBB56_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_256:                             # %cond.end724
.LBB56_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_258:                             # %if.end730
	jmp	.LBB56_328
.LBB56_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB56_262
.LBB56_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB56_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB56_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB56_265
.LBB56_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB56_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB56_271
.LBB56_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB56_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB56_270
.LBB56_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB56_270:                             # %cond.end753
.LBB56_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_276
.LBB56_275:                             # %cond.false765
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_276:                             # %cond.end767
                                        #   in Loop: Header=BB56_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB56_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_282
.LBB56_278:                             # %cond.false772
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_281
.LBB56_280:                             # %cond.false777
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_281:                             # %cond.end779
                                        #   in Loop: Header=BB56_272 Depth=1
.LBB56_282:                             # %cond.end781
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_272
.LBB56_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_287
.LBB56_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB56_293
.LBB56_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_292
.LBB56_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_292:                             # %cond.end822
.LBB56_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB56_296
.LBB56_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB56_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB56_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB56_299
.LBB56_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB56_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB56_305
.LBB56_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB56_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB56_304
.LBB56_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB56_304:                             # %cond.end847
.LBB56_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_310
.LBB56_309:                             # %cond.false859
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_310:                             # %cond.end861
                                        #   in Loop: Header=BB56_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB56_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_316
.LBB56_312:                             # %cond.false866
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_315
.LBB56_314:                             # %cond.false871
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_315:                             # %cond.end873
                                        #   in Loop: Header=BB56_306 Depth=1
.LBB56_316:                             # %cond.end875
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_306
.LBB56_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_321
.LBB56_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB56_327
.LBB56_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_326
.LBB56_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_326:                             # %cond.end916
.LBB56_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_328:                             # %if.end922
	jmp	.LBB56_329
.LBB56_329:                             # %if.end923
	jmp	.LBB56_330
.LBB56_330:                             # %if.end924
	jmp	.LBB56_331
.LBB56_331:                             # %if.end925
	jmp	.LBB56_332
.LBB56_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1350031196, -100(%rbp) # imm = 0x5077D75C
	jne	.LBB56_334
.LBB56_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_333
.Lfunc_end56:
	.size	Get_Reference_Pixel.46, .Lfunc_end56-Get_Reference_Pixel.46
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.47        # -- Begin function Conceal_Error.47
	.p2align	4, 0x90
	.type	Conceal_Error.47,@function
Conceal_Error.47:                       # @Conceal_Error.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$395307898, -68(%rbp)   # imm = 0x178FEB7A
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB57_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB57_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB57_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB57_4:                               # %land.end
.LBB57_5:                               # %lor.end
.LBB57_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB57_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB57_9
.LBB57_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB57_14
.LBB57_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB57_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB57_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB57_12:                              # %land.end51
.LBB57_13:                              # %lor.end53
.LBB57_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB57_180
# %bb.15:                               # %land.end54
	movq	.LJTI57_0(,%rax,8), %rax
	jmpq	*%rax
.LBB57_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB57_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB57_18 Depth=1
	movl	$0, -4(%rbp)
.LBB57_20:                              # %for.cond68
                                        #   Parent Loop BB57_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB57_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB57_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_20
.LBB57_23:                              # %for.end
                                        #   in Loop: Header=BB57_18 Depth=1
	jmp	.LBB57_24
.LBB57_24:                              # %for.inc85
                                        #   in Loop: Header=BB57_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_18
.LBB57_25:                              # %for.end87
	jmp	.LBB57_35
.LBB57_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB57_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	$0, -4(%rbp)
.LBB57_29:                              # %for.cond92
                                        #   Parent Loop BB57_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB57_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB57_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_29
.LBB57_32:                              # %for.end104
                                        #   in Loop: Header=BB57_27 Depth=1
	jmp	.LBB57_33
.LBB57_33:                              # %for.inc105
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_27
.LBB57_34:                              # %for.end107
	jmp	.LBB57_35
.LBB57_35:                              # %if.end
	jmp	.LBB57_180
.LBB57_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB57_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_39 Depth 2
                                        #       Child Loop BB57_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB57_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	$0, -12(%rbp)
.LBB57_39:                              # %for.cond113
                                        #   Parent Loop BB57_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB57_39 Depth=2
	movl	$0, -4(%rbp)
.LBB57_41:                              # %for.cond117
                                        #   Parent Loop BB57_37 Depth=1
                                        #     Parent Loop BB57_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB57_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB57_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB57_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_41
.LBB57_44:                              # %for.end141
                                        #   in Loop: Header=BB57_39 Depth=2
	jmp	.LBB57_45
.LBB57_45:                              # %for.inc142
                                        #   in Loop: Header=BB57_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_39
.LBB57_46:                              # %for.end144
                                        #   in Loop: Header=BB57_37 Depth=1
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc145
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_37
.LBB57_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB57_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	$0, -8(%rbp)
.LBB57_51:                              # %for.cond152
                                        #   Parent Loop BB57_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB57_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB57_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_51
.LBB57_54:                              # %for.end162
                                        #   in Loop: Header=BB57_49 Depth=1
	jmp	.LBB57_55
.LBB57_55:                              # %for.inc163
                                        #   in Loop: Header=BB57_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_49
.LBB57_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB57_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB57_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	$0, -4(%rbp)
.LBB57_61:                              # %for.cond175
                                        #   Parent Loop BB57_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB57_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB57_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_61
.LBB57_64:                              # %for.end195
                                        #   in Loop: Header=BB57_59 Depth=1
	jmp	.LBB57_65
.LBB57_65:                              # %for.inc196
                                        #   in Loop: Header=BB57_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_59
.LBB57_66:                              # %for.end198
	jmp	.LBB57_95
.LBB57_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB57_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB57_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_71 Depth 2
                                        #       Child Loop BB57_73 Depth 3
                                        #         Child Loop BB57_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB57_71:                              # %for.cond210
                                        #   Parent Loop BB57_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_73 Depth 3
                                        #         Child Loop BB57_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB57_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB57_73:                              # %for.cond236
                                        #   Parent Loop BB57_69 Depth=1
                                        #     Parent Loop BB57_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB57_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB57_73 Depth=3
	movl	$0, -4(%rbp)
.LBB57_75:                              # %for.cond240
                                        #   Parent Loop BB57_69 Depth=1
                                        #     Parent Loop BB57_71 Depth=2
                                        #       Parent Loop BB57_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB57_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB57_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB57_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_75
.LBB57_78:                              # %for.end259
                                        #   in Loop: Header=BB57_73 Depth=3
	jmp	.LBB57_79
.LBB57_79:                              # %for.inc260
                                        #   in Loop: Header=BB57_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_73
.LBB57_80:                              # %for.end262
                                        #   in Loop: Header=BB57_71 Depth=2
	jmp	.LBB57_81
.LBB57_81:                              # %for.inc263
                                        #   in Loop: Header=BB57_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_71
.LBB57_82:                              # %for.end265
                                        #   in Loop: Header=BB57_69 Depth=1
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc266
                                        #   in Loop: Header=BB57_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_69
.LBB57_84:                              # %for.end268
	jmp	.LBB57_94
.LBB57_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB57_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	$0, -4(%rbp)
.LBB57_88:                              # %for.cond274
                                        #   Parent Loop BB57_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB57_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB57_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_88
.LBB57_91:                              # %for.end294
                                        #   in Loop: Header=BB57_86 Depth=1
	jmp	.LBB57_92
.LBB57_92:                              # %for.inc295
                                        #   in Loop: Header=BB57_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_86
.LBB57_93:                              # %for.end297
	jmp	.LBB57_94
.LBB57_94:                              # %if.end298
	jmp	.LBB57_95
.LBB57_95:                              # %if.end299
	jmp	.LBB57_105
.LBB57_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB57_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB57_97 Depth=1
	movl	$0, -4(%rbp)
.LBB57_99:                              # %for.cond305
                                        #   Parent Loop BB57_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB57_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB57_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_99
.LBB57_102:                             # %for.end317
                                        #   in Loop: Header=BB57_97 Depth=1
	jmp	.LBB57_103
.LBB57_103:                             # %for.inc318
                                        #   in Loop: Header=BB57_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_97
.LBB57_104:                             # %for.end320
	jmp	.LBB57_105
.LBB57_105:                             # %if.end321
	jmp	.LBB57_180
.LBB57_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB57_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_110 Depth 2
                                        #       Child Loop BB57_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB57_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	$0, -12(%rbp)
.LBB57_110:                             # %for.cond331
                                        #   Parent Loop BB57_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB57_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	$0, -4(%rbp)
.LBB57_112:                             # %for.cond335
                                        #   Parent Loop BB57_108 Depth=1
                                        #     Parent Loop BB57_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB57_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB57_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB57_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_112
.LBB57_115:                             # %for.end359
                                        #   in Loop: Header=BB57_110 Depth=2
	jmp	.LBB57_116
.LBB57_116:                             # %for.inc360
                                        #   in Loop: Header=BB57_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_110
.LBB57_117:                             # %for.end362
                                        #   in Loop: Header=BB57_108 Depth=1
	jmp	.LBB57_118
.LBB57_118:                             # %for.inc363
                                        #   in Loop: Header=BB57_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_108
.LBB57_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB57_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	$0, -8(%rbp)
.LBB57_122:                             # %for.cond370
                                        #   Parent Loop BB57_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB57_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB57_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_122
.LBB57_125:                             # %for.end380
                                        #   in Loop: Header=BB57_120 Depth=1
	jmp	.LBB57_126
.LBB57_126:                             # %for.inc381
                                        #   in Loop: Header=BB57_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_120
.LBB57_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB57_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB57_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB57_129 Depth=1
	movl	$0, -4(%rbp)
.LBB57_131:                             # %for.cond390
                                        #   Parent Loop BB57_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB57_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB57_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_131
.LBB57_134:                             # %for.end410
                                        #   in Loop: Header=BB57_129 Depth=1
	jmp	.LBB57_135
.LBB57_135:                             # %for.inc411
                                        #   in Loop: Header=BB57_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_129
.LBB57_136:                             # %for.end413
	jmp	.LBB57_156
.LBB57_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB57_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB57_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_141 Depth 2
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB57_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB57_141:                             # %for.cond425
                                        #   Parent Loop BB57_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_143 Depth 3
                                        #         Child Loop BB57_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB57_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB57_143:                             # %for.cond452
                                        #   Parent Loop BB57_139 Depth=1
                                        #     Parent Loop BB57_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB57_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	$0, -4(%rbp)
.LBB57_145:                             # %for.cond456
                                        #   Parent Loop BB57_139 Depth=1
                                        #     Parent Loop BB57_141 Depth=2
                                        #       Parent Loop BB57_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB57_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB57_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB57_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_145
.LBB57_148:                             # %for.end475
                                        #   in Loop: Header=BB57_143 Depth=3
	jmp	.LBB57_149
.LBB57_149:                             # %for.inc476
                                        #   in Loop: Header=BB57_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_143
.LBB57_150:                             # %for.end478
                                        #   in Loop: Header=BB57_141 Depth=2
	jmp	.LBB57_151
.LBB57_151:                             # %for.inc479
                                        #   in Loop: Header=BB57_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_141
.LBB57_152:                             # %for.end481
                                        #   in Loop: Header=BB57_139 Depth=1
	jmp	.LBB57_153
.LBB57_153:                             # %for.inc482
                                        #   in Loop: Header=BB57_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_139
.LBB57_154:                             # %for.end484
	jmp	.LBB57_155
.LBB57_155:                             # %if.end485
	jmp	.LBB57_156
.LBB57_156:                             # %if.end486
	jmp	.LBB57_157
.LBB57_157:                             # %if.end487
	jmp	.LBB57_180
.LBB57_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB57_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB57_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB57_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB57_161 Depth=1
	movl	$0, -4(%rbp)
.LBB57_163:                             # %for.cond499
                                        #   Parent Loop BB57_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB57_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB57_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_163
.LBB57_166:                             # %for.end519
                                        #   in Loop: Header=BB57_161 Depth=1
	jmp	.LBB57_167
.LBB57_167:                             # %for.inc520
                                        #   in Loop: Header=BB57_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_161
.LBB57_168:                             # %for.end522
	jmp	.LBB57_169
.LBB57_169:                             # %if.end523
	jmp	.LBB57_179
.LBB57_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB57_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB57_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	$0, -4(%rbp)
.LBB57_173:                             # %for.cond529
                                        #   Parent Loop BB57_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB57_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB57_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB57_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_173
.LBB57_176:                             # %for.end541
                                        #   in Loop: Header=BB57_171 Depth=1
	jmp	.LBB57_177
.LBB57_177:                             # %for.inc542
                                        #   in Loop: Header=BB57_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_171
.LBB57_178:                             # %for.end544
	jmp	.LBB57_179
.LBB57_179:                             # %if.end545
	jmp	.LBB57_180
.LBB57_180:                             # %sw.epilog
	cmpl	$395307898, -68(%rbp)   # imm = 0x178FEB7A
	jne	.LBB57_182
.LBB57_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_181
.Lfunc_end57:
	.size	Conceal_Error.47, .Lfunc_end57-Conceal_Error.47
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI57_0:
	.quad	.LBB57_16
	.quad	.LBB57_158
	.quad	.LBB57_106
	.quad	.LBB57_180
	.quad	.LBB57_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.48       # -- Begin function DecOneForthPix.48
	.p2align	4, 0x90
	.type	DecOneForthPix.48,@function
DecOneForthPix.48:                      # @DecOneForthPix.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$105972105, -12(%rbp)   # imm = 0x6510189
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	cmpl	$105972105, -12(%rbp)   # imm = 0x6510189
	jne	.LBB58_6
.LBB58_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_5
.Lfunc_end58:
	.size	DecOneForthPix.48, .Lfunc_end58-DecOneForthPix.48
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.49        # -- Begin function Conceal_Error.49
	.p2align	4, 0x90
	.type	Conceal_Error.49,@function
Conceal_Error.49:                       # @Conceal_Error.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$132724741, -68(%rbp)   # imm = 0x7E93805
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB59_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB59_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB59_4:                               # %land.end
.LBB59_5:                               # %lor.end
.LBB59_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB59_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB59_9
.LBB59_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB59_14
.LBB59_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB59_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB59_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB59_12:                              # %land.end51
.LBB59_13:                              # %lor.end53
.LBB59_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB59_180
# %bb.15:                               # %land.end54
	movq	.LJTI59_0(,%rax,8), %rax
	jmpq	*%rax
.LBB59_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB59_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	$0, -4(%rbp)
.LBB59_20:                              # %for.cond68
                                        #   Parent Loop BB59_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB59_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB59_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_20
.LBB59_23:                              # %for.end
                                        #   in Loop: Header=BB59_18 Depth=1
	jmp	.LBB59_24
.LBB59_24:                              # %for.inc85
                                        #   in Loop: Header=BB59_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_18
.LBB59_25:                              # %for.end87
	jmp	.LBB59_35
.LBB59_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB59_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	$0, -4(%rbp)
.LBB59_29:                              # %for.cond92
                                        #   Parent Loop BB59_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB59_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB59_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_29
.LBB59_32:                              # %for.end104
                                        #   in Loop: Header=BB59_27 Depth=1
	jmp	.LBB59_33
.LBB59_33:                              # %for.inc105
                                        #   in Loop: Header=BB59_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_27
.LBB59_34:                              # %for.end107
	jmp	.LBB59_35
.LBB59_35:                              # %if.end
	jmp	.LBB59_180
.LBB59_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB59_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_39 Depth 2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	$0, -12(%rbp)
.LBB59_39:                              # %for.cond113
                                        #   Parent Loop BB59_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	$0, -4(%rbp)
.LBB59_41:                              # %for.cond117
                                        #   Parent Loop BB59_37 Depth=1
                                        #     Parent Loop BB59_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB59_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB59_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_41
.LBB59_44:                              # %for.end141
                                        #   in Loop: Header=BB59_39 Depth=2
	jmp	.LBB59_45
.LBB59_45:                              # %for.inc142
                                        #   in Loop: Header=BB59_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_39
.LBB59_46:                              # %for.end144
                                        #   in Loop: Header=BB59_37 Depth=1
	jmp	.LBB59_47
.LBB59_47:                              # %for.inc145
                                        #   in Loop: Header=BB59_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_37
.LBB59_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB59_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	$0, -8(%rbp)
.LBB59_51:                              # %for.cond152
                                        #   Parent Loop BB59_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB59_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB59_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_51
.LBB59_54:                              # %for.end162
                                        #   in Loop: Header=BB59_49 Depth=1
	jmp	.LBB59_55
.LBB59_55:                              # %for.inc163
                                        #   in Loop: Header=BB59_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_49
.LBB59_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB59_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB59_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	$0, -4(%rbp)
.LBB59_61:                              # %for.cond175
                                        #   Parent Loop BB59_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB59_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB59_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_61
.LBB59_64:                              # %for.end195
                                        #   in Loop: Header=BB59_59 Depth=1
	jmp	.LBB59_65
.LBB59_65:                              # %for.inc196
                                        #   in Loop: Header=BB59_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_59
.LBB59_66:                              # %for.end198
	jmp	.LBB59_95
.LBB59_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB59_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_71 Depth 2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_71:                              # %for.cond210
                                        #   Parent Loop BB59_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_73 Depth 3
                                        #         Child Loop BB59_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB59_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_73:                              # %for.cond236
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	$0, -4(%rbp)
.LBB59_75:                              # %for.cond240
                                        #   Parent Loop BB59_69 Depth=1
                                        #     Parent Loop BB59_71 Depth=2
                                        #       Parent Loop BB59_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB59_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB59_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_75
.LBB59_78:                              # %for.end259
                                        #   in Loop: Header=BB59_73 Depth=3
	jmp	.LBB59_79
.LBB59_79:                              # %for.inc260
                                        #   in Loop: Header=BB59_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_73
.LBB59_80:                              # %for.end262
                                        #   in Loop: Header=BB59_71 Depth=2
	jmp	.LBB59_81
.LBB59_81:                              # %for.inc263
                                        #   in Loop: Header=BB59_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_71
.LBB59_82:                              # %for.end265
                                        #   in Loop: Header=BB59_69 Depth=1
	jmp	.LBB59_83
.LBB59_83:                              # %for.inc266
                                        #   in Loop: Header=BB59_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_69
.LBB59_84:                              # %for.end268
	jmp	.LBB59_94
.LBB59_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB59_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	$0, -4(%rbp)
.LBB59_88:                              # %for.cond274
                                        #   Parent Loop BB59_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB59_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB59_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_88
.LBB59_91:                              # %for.end294
                                        #   in Loop: Header=BB59_86 Depth=1
	jmp	.LBB59_92
.LBB59_92:                              # %for.inc295
                                        #   in Loop: Header=BB59_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_86
.LBB59_93:                              # %for.end297
	jmp	.LBB59_94
.LBB59_94:                              # %if.end298
	jmp	.LBB59_95
.LBB59_95:                              # %if.end299
	jmp	.LBB59_105
.LBB59_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB59_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	$0, -4(%rbp)
.LBB59_99:                              # %for.cond305
                                        #   Parent Loop BB59_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB59_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB59_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_99
.LBB59_102:                             # %for.end317
                                        #   in Loop: Header=BB59_97 Depth=1
	jmp	.LBB59_103
.LBB59_103:                             # %for.inc318
                                        #   in Loop: Header=BB59_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_97
.LBB59_104:                             # %for.end320
	jmp	.LBB59_105
.LBB59_105:                             # %if.end321
	jmp	.LBB59_180
.LBB59_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB59_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_110 Depth 2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB59_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	$0, -12(%rbp)
.LBB59_110:                             # %for.cond331
                                        #   Parent Loop BB59_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB59_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	$0, -4(%rbp)
.LBB59_112:                             # %for.cond335
                                        #   Parent Loop BB59_108 Depth=1
                                        #     Parent Loop BB59_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB59_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB59_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB59_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_112
.LBB59_115:                             # %for.end359
                                        #   in Loop: Header=BB59_110 Depth=2
	jmp	.LBB59_116
.LBB59_116:                             # %for.inc360
                                        #   in Loop: Header=BB59_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_110
.LBB59_117:                             # %for.end362
                                        #   in Loop: Header=BB59_108 Depth=1
	jmp	.LBB59_118
.LBB59_118:                             # %for.inc363
                                        #   in Loop: Header=BB59_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_108
.LBB59_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB59_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	$0, -8(%rbp)
.LBB59_122:                             # %for.cond370
                                        #   Parent Loop BB59_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB59_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB59_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_122
.LBB59_125:                             # %for.end380
                                        #   in Loop: Header=BB59_120 Depth=1
	jmp	.LBB59_126
.LBB59_126:                             # %for.inc381
                                        #   in Loop: Header=BB59_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_120
.LBB59_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB59_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB59_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	$0, -4(%rbp)
.LBB59_131:                             # %for.cond390
                                        #   Parent Loop BB59_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB59_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB59_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_131
.LBB59_134:                             # %for.end410
                                        #   in Loop: Header=BB59_129 Depth=1
	jmp	.LBB59_135
.LBB59_135:                             # %for.inc411
                                        #   in Loop: Header=BB59_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_129
.LBB59_136:                             # %for.end413
	jmp	.LBB59_156
.LBB59_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB59_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB59_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_141 Depth 2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB59_141:                             # %for.cond425
                                        #   Parent Loop BB59_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB59_143 Depth 3
                                        #         Child Loop BB59_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB59_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB59_143:                             # %for.cond452
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB59_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB59_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	$0, -4(%rbp)
.LBB59_145:                             # %for.cond456
                                        #   Parent Loop BB59_139 Depth=1
                                        #     Parent Loop BB59_141 Depth=2
                                        #       Parent Loop BB59_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB59_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB59_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB59_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_145
.LBB59_148:                             # %for.end475
                                        #   in Loop: Header=BB59_143 Depth=3
	jmp	.LBB59_149
.LBB59_149:                             # %for.inc476
                                        #   in Loop: Header=BB59_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_143
.LBB59_150:                             # %for.end478
                                        #   in Loop: Header=BB59_141 Depth=2
	jmp	.LBB59_151
.LBB59_151:                             # %for.inc479
                                        #   in Loop: Header=BB59_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB59_141
.LBB59_152:                             # %for.end481
                                        #   in Loop: Header=BB59_139 Depth=1
	jmp	.LBB59_153
.LBB59_153:                             # %for.inc482
                                        #   in Loop: Header=BB59_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB59_139
.LBB59_154:                             # %for.end484
	jmp	.LBB59_155
.LBB59_155:                             # %if.end485
	jmp	.LBB59_156
.LBB59_156:                             # %if.end486
	jmp	.LBB59_157
.LBB59_157:                             # %if.end487
	jmp	.LBB59_180
.LBB59_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB59_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB59_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB59_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	$0, -4(%rbp)
.LBB59_163:                             # %for.cond499
                                        #   Parent Loop BB59_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB59_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB59_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_163
.LBB59_166:                             # %for.end519
                                        #   in Loop: Header=BB59_161 Depth=1
	jmp	.LBB59_167
.LBB59_167:                             # %for.inc520
                                        #   in Loop: Header=BB59_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_161
.LBB59_168:                             # %for.end522
	jmp	.LBB59_169
.LBB59_169:                             # %if.end523
	jmp	.LBB59_179
.LBB59_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB59_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB59_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	$0, -4(%rbp)
.LBB59_173:                             # %for.cond529
                                        #   Parent Loop BB59_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB59_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB59_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB59_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_173
.LBB59_176:                             # %for.end541
                                        #   in Loop: Header=BB59_171 Depth=1
	jmp	.LBB59_177
.LBB59_177:                             # %for.inc542
                                        #   in Loop: Header=BB59_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_171
.LBB59_178:                             # %for.end544
	jmp	.LBB59_179
.LBB59_179:                             # %if.end545
	jmp	.LBB59_180
.LBB59_180:                             # %sw.epilog
	cmpl	$132724741, -68(%rbp)   # imm = 0x7E93805
	jne	.LBB59_182
.LBB59_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_181
.Lfunc_end59:
	.size	Conceal_Error.49, .Lfunc_end59-Conceal_Error.49
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI59_0:
	.quad	.LBB59_16
	.quad	.LBB59_158
	.quad	.LBB59_106
	.quad	.LBB59_180
	.quad	.LBB59_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.50   # -- Begin function decode_one_b8block.50
	.p2align	4, 0x90
	.type	decode_one_b8block.50,@function
decode_one_b8block.50:                  # @decode_one_b8block.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1145220065, -84(%rbp)  # imm = 0x4442ABE1
	movl	%edi, -44(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_4:                               # %for.cond9
                                        #   Parent Loop BB60_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB60_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB60_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_4
.LBB60_7:                               # %for.end
                                        #   in Loop: Header=BB60_2 Depth=1
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc26
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_2
.LBB60_9:                               # %for.end28
	jmp	.LBB60_96
.LBB60_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB60_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB60_31
.LBB60_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB60_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_17:                              # %for.cond40
                                        #   Parent Loop BB60_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB60_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB60_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_17
.LBB60_20:                              # %for.end49
                                        #   in Loop: Header=BB60_15 Depth=1
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc50
                                        #   in Loop: Header=BB60_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_15
.LBB60_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_25:                              # %for.cond56
                                        #   Parent Loop BB60_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB60_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_25
.LBB60_28:                              # %for.end71
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_29
.LBB60_29:                              # %for.inc72
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_23
.LBB60_30:                              # %for.end74
	jmp	.LBB60_60
.LBB60_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB60_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB60_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_36:                              # %for.cond83
                                        #   Parent Loop BB60_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB60_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_36
.LBB60_39:                              # %for.end120
                                        #   in Loop: Header=BB60_34 Depth=1
	jmp	.LBB60_40
.LBB60_40:                              # %for.inc121
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_34
.LBB60_41:                              # %for.end123
	jmp	.LBB60_51
.LBB60_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB60_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_45:                              # %for.cond129
                                        #   Parent Loop BB60_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB60_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB60_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_45
.LBB60_48:                              # %for.end145
                                        #   in Loop: Header=BB60_43 Depth=1
	jmp	.LBB60_49
.LBB60_49:                              # %for.inc146
                                        #   in Loop: Header=BB60_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_43
.LBB60_50:                              # %for.end148
	jmp	.LBB60_51
.LBB60_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_54:                              # %for.cond153
                                        #   Parent Loop BB60_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_54
.LBB60_57:                              # %for.end167
                                        #   in Loop: Header=BB60_52 Depth=1
	jmp	.LBB60_58
.LBB60_58:                              # %for.inc168
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_52
.LBB60_59:                              # %for.end170
	jmp	.LBB60_60
.LBB60_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB60_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB60_66
.LBB60_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB60_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB60_86
.LBB60_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_69 Depth 2
                                        #       Child Loop BB60_74 Depth 3
                                        #         Child Loop BB60_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB60_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_69:                              # %for.cond197
                                        #   Parent Loop BB60_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_74 Depth 3
                                        #         Child Loop BB60_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB60_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB60_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB60_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB60_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB60_73:                              # %if.end218
                                        #   in Loop: Header=BB60_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB60_74:                              # %for.cond233
                                        #   Parent Loop BB60_67 Depth=1
                                        #     Parent Loop BB60_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB60_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB60_74 Depth=3
	movl	$0, -4(%rbp)
.LBB60_76:                              # %for.cond237
                                        #   Parent Loop BB60_67 Depth=1
                                        #     Parent Loop BB60_69 Depth=2
                                        #       Parent Loop BB60_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB60_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB60_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB60_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_76
.LBB60_79:                              # %for.end269
                                        #   in Loop: Header=BB60_74 Depth=3
	jmp	.LBB60_80
.LBB60_80:                              # %for.inc270
                                        #   in Loop: Header=BB60_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_74
.LBB60_81:                              # %for.end272
                                        #   in Loop: Header=BB60_69 Depth=2
	jmp	.LBB60_82
.LBB60_82:                              # %for.inc273
                                        #   in Loop: Header=BB60_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_69
.LBB60_83:                              # %for.end275
                                        #   in Loop: Header=BB60_67 Depth=1
	jmp	.LBB60_84
.LBB60_84:                              # %for.inc276
                                        #   in Loop: Header=BB60_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_67
.LBB60_85:                              # %for.end278
	jmp	.LBB60_95
.LBB60_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB60_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_89:                              # %for.cond284
                                        #   Parent Loop BB60_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB60_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB60_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_89
.LBB60_92:                              # %for.end310
                                        #   in Loop: Header=BB60_87 Depth=1
	jmp	.LBB60_93
.LBB60_93:                              # %for.inc311
                                        #   in Loop: Header=BB60_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_87
.LBB60_94:                              # %for.end313
	jmp	.LBB60_95
.LBB60_95:                              # %if.end314
	jmp	.LBB60_96
.LBB60_96:                              # %if.end315
	cmpl	$1145220065, -84(%rbp)  # imm = 0x4442ABE1
	jne	.LBB60_98
.LBB60_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_97
.Lfunc_end60:
	.size	decode_one_b8block.50, .Lfunc_end60-decode_one_b8block.50
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.51        # -- Begin function Conceal_Error.51
	.p2align	4, 0x90
	.type	Conceal_Error.51,@function
Conceal_Error.51:                       # @Conceal_Error.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1689195777, -68(%rbp)  # imm = 0x64AF1501
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB61_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB61_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB61_4:                               # %land.end
.LBB61_5:                               # %lor.end
.LBB61_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB61_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB61_9
.LBB61_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB61_14
.LBB61_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB61_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB61_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB61_12:                              # %land.end51
.LBB61_13:                              # %lor.end53
.LBB61_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB61_180
# %bb.15:                               # %land.end54
	movq	.LJTI61_0(,%rax,8), %rax
	jmpq	*%rax
.LBB61_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB61_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB61_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB61_18 Depth=1
	movl	$0, -4(%rbp)
.LBB61_20:                              # %for.cond68
                                        #   Parent Loop BB61_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB61_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB61_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_20
.LBB61_23:                              # %for.end
                                        #   in Loop: Header=BB61_18 Depth=1
	jmp	.LBB61_24
.LBB61_24:                              # %for.inc85
                                        #   in Loop: Header=BB61_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_18
.LBB61_25:                              # %for.end87
	jmp	.LBB61_35
.LBB61_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB61_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB61_27 Depth=1
	movl	$0, -4(%rbp)
.LBB61_29:                              # %for.cond92
                                        #   Parent Loop BB61_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB61_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB61_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_29
.LBB61_32:                              # %for.end104
                                        #   in Loop: Header=BB61_27 Depth=1
	jmp	.LBB61_33
.LBB61_33:                              # %for.inc105
                                        #   in Loop: Header=BB61_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_27
.LBB61_34:                              # %for.end107
	jmp	.LBB61_35
.LBB61_35:                              # %if.end
	jmp	.LBB61_180
.LBB61_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB61_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_39 Depth 2
                                        #       Child Loop BB61_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB61_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB61_37 Depth=1
	movl	$0, -16(%rbp)
.LBB61_39:                              # %for.cond113
                                        #   Parent Loop BB61_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB61_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB61_39 Depth=2
	movl	$0, -4(%rbp)
.LBB61_41:                              # %for.cond117
                                        #   Parent Loop BB61_37 Depth=1
                                        #     Parent Loop BB61_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB61_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB61_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB61_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_41
.LBB61_44:                              # %for.end141
                                        #   in Loop: Header=BB61_39 Depth=2
	jmp	.LBB61_45
.LBB61_45:                              # %for.inc142
                                        #   in Loop: Header=BB61_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_39
.LBB61_46:                              # %for.end144
                                        #   in Loop: Header=BB61_37 Depth=1
	jmp	.LBB61_47
.LBB61_47:                              # %for.inc145
                                        #   in Loop: Header=BB61_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_37
.LBB61_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB61_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB61_49 Depth=1
	movl	$0, -8(%rbp)
.LBB61_51:                              # %for.cond152
                                        #   Parent Loop BB61_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB61_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB61_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_51
.LBB61_54:                              # %for.end162
                                        #   in Loop: Header=BB61_49 Depth=1
	jmp	.LBB61_55
.LBB61_55:                              # %for.inc163
                                        #   in Loop: Header=BB61_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_49
.LBB61_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB61_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB61_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB61_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB61_59 Depth=1
	movl	$0, -4(%rbp)
.LBB61_61:                              # %for.cond175
                                        #   Parent Loop BB61_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB61_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB61_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_61
.LBB61_64:                              # %for.end195
                                        #   in Loop: Header=BB61_59 Depth=1
	jmp	.LBB61_65
.LBB61_65:                              # %for.inc196
                                        #   in Loop: Header=BB61_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_59
.LBB61_66:                              # %for.end198
	jmp	.LBB61_95
.LBB61_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB61_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB61_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_71 Depth 2
                                        #       Child Loop BB61_73 Depth 3
                                        #         Child Loop BB61_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB61_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB61_71:                              # %for.cond210
                                        #   Parent Loop BB61_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_73 Depth 3
                                        #         Child Loop BB61_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB61_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB61_73:                              # %for.cond236
                                        #   Parent Loop BB61_69 Depth=1
                                        #     Parent Loop BB61_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB61_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB61_73 Depth=3
	movl	$0, -4(%rbp)
.LBB61_75:                              # %for.cond240
                                        #   Parent Loop BB61_69 Depth=1
                                        #     Parent Loop BB61_71 Depth=2
                                        #       Parent Loop BB61_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB61_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB61_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB61_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_75
.LBB61_78:                              # %for.end259
                                        #   in Loop: Header=BB61_73 Depth=3
	jmp	.LBB61_79
.LBB61_79:                              # %for.inc260
                                        #   in Loop: Header=BB61_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_73
.LBB61_80:                              # %for.end262
                                        #   in Loop: Header=BB61_71 Depth=2
	jmp	.LBB61_81
.LBB61_81:                              # %for.inc263
                                        #   in Loop: Header=BB61_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_71
.LBB61_82:                              # %for.end265
                                        #   in Loop: Header=BB61_69 Depth=1
	jmp	.LBB61_83
.LBB61_83:                              # %for.inc266
                                        #   in Loop: Header=BB61_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_69
.LBB61_84:                              # %for.end268
	jmp	.LBB61_94
.LBB61_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB61_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB61_86 Depth=1
	movl	$0, -4(%rbp)
.LBB61_88:                              # %for.cond274
                                        #   Parent Loop BB61_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB61_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB61_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_88
.LBB61_91:                              # %for.end294
                                        #   in Loop: Header=BB61_86 Depth=1
	jmp	.LBB61_92
.LBB61_92:                              # %for.inc295
                                        #   in Loop: Header=BB61_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_86
.LBB61_93:                              # %for.end297
	jmp	.LBB61_94
.LBB61_94:                              # %if.end298
	jmp	.LBB61_95
.LBB61_95:                              # %if.end299
	jmp	.LBB61_105
.LBB61_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB61_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB61_97 Depth=1
	movl	$0, -4(%rbp)
.LBB61_99:                              # %for.cond305
                                        #   Parent Loop BB61_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB61_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB61_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_99
.LBB61_102:                             # %for.end317
                                        #   in Loop: Header=BB61_97 Depth=1
	jmp	.LBB61_103
.LBB61_103:                             # %for.inc318
                                        #   in Loop: Header=BB61_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_97
.LBB61_104:                             # %for.end320
	jmp	.LBB61_105
.LBB61_105:                             # %if.end321
	jmp	.LBB61_180
.LBB61_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB61_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB61_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_110 Depth 2
                                        #       Child Loop BB61_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB61_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB61_108 Depth=1
	movl	$0, -16(%rbp)
.LBB61_110:                             # %for.cond331
                                        #   Parent Loop BB61_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB61_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB61_110 Depth=2
	movl	$0, -4(%rbp)
.LBB61_112:                             # %for.cond335
                                        #   Parent Loop BB61_108 Depth=1
                                        #     Parent Loop BB61_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB61_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB61_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB61_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_112
.LBB61_115:                             # %for.end359
                                        #   in Loop: Header=BB61_110 Depth=2
	jmp	.LBB61_116
.LBB61_116:                             # %for.inc360
                                        #   in Loop: Header=BB61_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_110
.LBB61_117:                             # %for.end362
                                        #   in Loop: Header=BB61_108 Depth=1
	jmp	.LBB61_118
.LBB61_118:                             # %for.inc363
                                        #   in Loop: Header=BB61_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_108
.LBB61_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB61_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB61_120 Depth=1
	movl	$0, -8(%rbp)
.LBB61_122:                             # %for.cond370
                                        #   Parent Loop BB61_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB61_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB61_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_122
.LBB61_125:                             # %for.end380
                                        #   in Loop: Header=BB61_120 Depth=1
	jmp	.LBB61_126
.LBB61_126:                             # %for.inc381
                                        #   in Loop: Header=BB61_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_120
.LBB61_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB61_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB61_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB61_129 Depth=1
	movl	$0, -4(%rbp)
.LBB61_131:                             # %for.cond390
                                        #   Parent Loop BB61_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB61_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB61_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_131
.LBB61_134:                             # %for.end410
                                        #   in Loop: Header=BB61_129 Depth=1
	jmp	.LBB61_135
.LBB61_135:                             # %for.inc411
                                        #   in Loop: Header=BB61_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_129
.LBB61_136:                             # %for.end413
	jmp	.LBB61_156
.LBB61_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB61_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB61_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_141 Depth 2
                                        #       Child Loop BB61_143 Depth 3
                                        #         Child Loop BB61_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB61_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB61_141:                             # %for.cond425
                                        #   Parent Loop BB61_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_143 Depth 3
                                        #         Child Loop BB61_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB61_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB61_143:                             # %for.cond452
                                        #   Parent Loop BB61_139 Depth=1
                                        #     Parent Loop BB61_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB61_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB61_143 Depth=3
	movl	$0, -4(%rbp)
.LBB61_145:                             # %for.cond456
                                        #   Parent Loop BB61_139 Depth=1
                                        #     Parent Loop BB61_141 Depth=2
                                        #       Parent Loop BB61_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB61_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB61_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB61_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_145
.LBB61_148:                             # %for.end475
                                        #   in Loop: Header=BB61_143 Depth=3
	jmp	.LBB61_149
.LBB61_149:                             # %for.inc476
                                        #   in Loop: Header=BB61_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_143
.LBB61_150:                             # %for.end478
                                        #   in Loop: Header=BB61_141 Depth=2
	jmp	.LBB61_151
.LBB61_151:                             # %for.inc479
                                        #   in Loop: Header=BB61_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_141
.LBB61_152:                             # %for.end481
                                        #   in Loop: Header=BB61_139 Depth=1
	jmp	.LBB61_153
.LBB61_153:                             # %for.inc482
                                        #   in Loop: Header=BB61_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_139
.LBB61_154:                             # %for.end484
	jmp	.LBB61_155
.LBB61_155:                             # %if.end485
	jmp	.LBB61_156
.LBB61_156:                             # %if.end486
	jmp	.LBB61_157
.LBB61_157:                             # %if.end487
	jmp	.LBB61_180
.LBB61_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB61_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB61_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB61_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB61_161 Depth=1
	movl	$0, -4(%rbp)
.LBB61_163:                             # %for.cond499
                                        #   Parent Loop BB61_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB61_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB61_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_163
.LBB61_166:                             # %for.end519
                                        #   in Loop: Header=BB61_161 Depth=1
	jmp	.LBB61_167
.LBB61_167:                             # %for.inc520
                                        #   in Loop: Header=BB61_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_161
.LBB61_168:                             # %for.end522
	jmp	.LBB61_169
.LBB61_169:                             # %if.end523
	jmp	.LBB61_179
.LBB61_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB61_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB61_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	$0, -4(%rbp)
.LBB61_173:                             # %for.cond529
                                        #   Parent Loop BB61_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB61_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB61_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB61_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_173
.LBB61_176:                             # %for.end541
                                        #   in Loop: Header=BB61_171 Depth=1
	jmp	.LBB61_177
.LBB61_177:                             # %for.inc542
                                        #   in Loop: Header=BB61_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_171
.LBB61_178:                             # %for.end544
	jmp	.LBB61_179
.LBB61_179:                             # %if.end545
	jmp	.LBB61_180
.LBB61_180:                             # %sw.epilog
	cmpl	$1689195777, -68(%rbp)  # imm = 0x64AF1501
	jne	.LBB61_182
.LBB61_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_181
.Lfunc_end61:
	.size	Conceal_Error.51, .Lfunc_end61-Conceal_Error.51
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI61_0:
	.quad	.LBB61_16
	.quad	.LBB61_158
	.quad	.LBB61_106
	.quad	.LBB61_180
	.quad	.LBB61_36
                                        # -- End function
	.text
	.globl	Conceal_Error.52        # -- Begin function Conceal_Error.52
	.p2align	4, 0x90
	.type	Conceal_Error.52,@function
Conceal_Error.52:                       # @Conceal_Error.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$645489124, -68(%rbp)   # imm = 0x267961E4
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB62_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB62_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB62_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB62_4:                               # %land.end
.LBB62_5:                               # %lor.end
.LBB62_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB62_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB62_9
.LBB62_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB62_14
.LBB62_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB62_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB62_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB62_12:                              # %land.end51
.LBB62_13:                              # %lor.end53
.LBB62_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB62_180
# %bb.15:                               # %land.end54
	movq	.LJTI62_0(,%rax,8), %rax
	jmpq	*%rax
.LBB62_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB62_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB62_18 Depth=1
	movl	$0, -4(%rbp)
.LBB62_20:                              # %for.cond68
                                        #   Parent Loop BB62_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB62_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB62_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_20
.LBB62_23:                              # %for.end
                                        #   in Loop: Header=BB62_18 Depth=1
	jmp	.LBB62_24
.LBB62_24:                              # %for.inc85
                                        #   in Loop: Header=BB62_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_18
.LBB62_25:                              # %for.end87
	jmp	.LBB62_35
.LBB62_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB62_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB62_27 Depth=1
	movl	$0, -4(%rbp)
.LBB62_29:                              # %for.cond92
                                        #   Parent Loop BB62_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB62_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB62_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_29
.LBB62_32:                              # %for.end104
                                        #   in Loop: Header=BB62_27 Depth=1
	jmp	.LBB62_33
.LBB62_33:                              # %for.inc105
                                        #   in Loop: Header=BB62_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_27
.LBB62_34:                              # %for.end107
	jmp	.LBB62_35
.LBB62_35:                              # %if.end
	jmp	.LBB62_180
.LBB62_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB62_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_39 Depth 2
                                        #       Child Loop BB62_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB62_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB62_37 Depth=1
	movl	$0, -16(%rbp)
.LBB62_39:                              # %for.cond113
                                        #   Parent Loop BB62_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB62_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB62_39 Depth=2
	movl	$0, -4(%rbp)
.LBB62_41:                              # %for.cond117
                                        #   Parent Loop BB62_37 Depth=1
                                        #     Parent Loop BB62_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB62_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB62_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB62_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_41
.LBB62_44:                              # %for.end141
                                        #   in Loop: Header=BB62_39 Depth=2
	jmp	.LBB62_45
.LBB62_45:                              # %for.inc142
                                        #   in Loop: Header=BB62_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_39
.LBB62_46:                              # %for.end144
                                        #   in Loop: Header=BB62_37 Depth=1
	jmp	.LBB62_47
.LBB62_47:                              # %for.inc145
                                        #   in Loop: Header=BB62_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_37
.LBB62_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB62_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB62_49 Depth=1
	movl	$0, -8(%rbp)
.LBB62_51:                              # %for.cond152
                                        #   Parent Loop BB62_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB62_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB62_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_51
.LBB62_54:                              # %for.end162
                                        #   in Loop: Header=BB62_49 Depth=1
	jmp	.LBB62_55
.LBB62_55:                              # %for.inc163
                                        #   in Loop: Header=BB62_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_49
.LBB62_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB62_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB62_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB62_59 Depth=1
	movl	$0, -4(%rbp)
.LBB62_61:                              # %for.cond175
                                        #   Parent Loop BB62_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB62_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB62_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_61
.LBB62_64:                              # %for.end195
                                        #   in Loop: Header=BB62_59 Depth=1
	jmp	.LBB62_65
.LBB62_65:                              # %for.inc196
                                        #   in Loop: Header=BB62_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_59
.LBB62_66:                              # %for.end198
	jmp	.LBB62_95
.LBB62_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB62_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB62_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_71 Depth 2
                                        #       Child Loop BB62_73 Depth 3
                                        #         Child Loop BB62_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB62_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB62_71:                              # %for.cond210
                                        #   Parent Loop BB62_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_73 Depth 3
                                        #         Child Loop BB62_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB62_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB62_73:                              # %for.cond236
                                        #   Parent Loop BB62_69 Depth=1
                                        #     Parent Loop BB62_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB62_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB62_73 Depth=3
	movl	$0, -4(%rbp)
.LBB62_75:                              # %for.cond240
                                        #   Parent Loop BB62_69 Depth=1
                                        #     Parent Loop BB62_71 Depth=2
                                        #       Parent Loop BB62_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB62_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB62_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB62_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_75
.LBB62_78:                              # %for.end259
                                        #   in Loop: Header=BB62_73 Depth=3
	jmp	.LBB62_79
.LBB62_79:                              # %for.inc260
                                        #   in Loop: Header=BB62_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_73
.LBB62_80:                              # %for.end262
                                        #   in Loop: Header=BB62_71 Depth=2
	jmp	.LBB62_81
.LBB62_81:                              # %for.inc263
                                        #   in Loop: Header=BB62_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_71
.LBB62_82:                              # %for.end265
                                        #   in Loop: Header=BB62_69 Depth=1
	jmp	.LBB62_83
.LBB62_83:                              # %for.inc266
                                        #   in Loop: Header=BB62_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_69
.LBB62_84:                              # %for.end268
	jmp	.LBB62_94
.LBB62_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB62_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	$0, -4(%rbp)
.LBB62_88:                              # %for.cond274
                                        #   Parent Loop BB62_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB62_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB62_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_88
.LBB62_91:                              # %for.end294
                                        #   in Loop: Header=BB62_86 Depth=1
	jmp	.LBB62_92
.LBB62_92:                              # %for.inc295
                                        #   in Loop: Header=BB62_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_86
.LBB62_93:                              # %for.end297
	jmp	.LBB62_94
.LBB62_94:                              # %if.end298
	jmp	.LBB62_95
.LBB62_95:                              # %if.end299
	jmp	.LBB62_105
.LBB62_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB62_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB62_97 Depth=1
	movl	$0, -4(%rbp)
.LBB62_99:                              # %for.cond305
                                        #   Parent Loop BB62_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB62_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB62_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_99
.LBB62_102:                             # %for.end317
                                        #   in Loop: Header=BB62_97 Depth=1
	jmp	.LBB62_103
.LBB62_103:                             # %for.inc318
                                        #   in Loop: Header=BB62_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_97
.LBB62_104:                             # %for.end320
	jmp	.LBB62_105
.LBB62_105:                             # %if.end321
	jmp	.LBB62_180
.LBB62_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB62_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_110 Depth 2
                                        #       Child Loop BB62_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB62_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB62_108 Depth=1
	movl	$0, -16(%rbp)
.LBB62_110:                             # %for.cond331
                                        #   Parent Loop BB62_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB62_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB62_110 Depth=2
	movl	$0, -4(%rbp)
.LBB62_112:                             # %for.cond335
                                        #   Parent Loop BB62_108 Depth=1
                                        #     Parent Loop BB62_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB62_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB62_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB62_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_112
.LBB62_115:                             # %for.end359
                                        #   in Loop: Header=BB62_110 Depth=2
	jmp	.LBB62_116
.LBB62_116:                             # %for.inc360
                                        #   in Loop: Header=BB62_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_110
.LBB62_117:                             # %for.end362
                                        #   in Loop: Header=BB62_108 Depth=1
	jmp	.LBB62_118
.LBB62_118:                             # %for.inc363
                                        #   in Loop: Header=BB62_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_108
.LBB62_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB62_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB62_120 Depth=1
	movl	$0, -8(%rbp)
.LBB62_122:                             # %for.cond370
                                        #   Parent Loop BB62_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB62_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB62_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_122
.LBB62_125:                             # %for.end380
                                        #   in Loop: Header=BB62_120 Depth=1
	jmp	.LBB62_126
.LBB62_126:                             # %for.inc381
                                        #   in Loop: Header=BB62_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_120
.LBB62_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB62_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB62_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB62_129 Depth=1
	movl	$0, -4(%rbp)
.LBB62_131:                             # %for.cond390
                                        #   Parent Loop BB62_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB62_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB62_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_131
.LBB62_134:                             # %for.end410
                                        #   in Loop: Header=BB62_129 Depth=1
	jmp	.LBB62_135
.LBB62_135:                             # %for.inc411
                                        #   in Loop: Header=BB62_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_129
.LBB62_136:                             # %for.end413
	jmp	.LBB62_156
.LBB62_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB62_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB62_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_141 Depth 2
                                        #       Child Loop BB62_143 Depth 3
                                        #         Child Loop BB62_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB62_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB62_141:                             # %for.cond425
                                        #   Parent Loop BB62_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_143 Depth 3
                                        #         Child Loop BB62_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB62_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB62_143:                             # %for.cond452
                                        #   Parent Loop BB62_139 Depth=1
                                        #     Parent Loop BB62_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB62_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB62_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB62_143 Depth=3
	movl	$0, -4(%rbp)
.LBB62_145:                             # %for.cond456
                                        #   Parent Loop BB62_139 Depth=1
                                        #     Parent Loop BB62_141 Depth=2
                                        #       Parent Loop BB62_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB62_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB62_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB62_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_145
.LBB62_148:                             # %for.end475
                                        #   in Loop: Header=BB62_143 Depth=3
	jmp	.LBB62_149
.LBB62_149:                             # %for.inc476
                                        #   in Loop: Header=BB62_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_143
.LBB62_150:                             # %for.end478
                                        #   in Loop: Header=BB62_141 Depth=2
	jmp	.LBB62_151
.LBB62_151:                             # %for.inc479
                                        #   in Loop: Header=BB62_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB62_141
.LBB62_152:                             # %for.end481
                                        #   in Loop: Header=BB62_139 Depth=1
	jmp	.LBB62_153
.LBB62_153:                             # %for.inc482
                                        #   in Loop: Header=BB62_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_139
.LBB62_154:                             # %for.end484
	jmp	.LBB62_155
.LBB62_155:                             # %if.end485
	jmp	.LBB62_156
.LBB62_156:                             # %if.end486
	jmp	.LBB62_157
.LBB62_157:                             # %if.end487
	jmp	.LBB62_180
.LBB62_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB62_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB62_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB62_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB62_161 Depth=1
	movl	$0, -4(%rbp)
.LBB62_163:                             # %for.cond499
                                        #   Parent Loop BB62_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB62_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB62_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_163
.LBB62_166:                             # %for.end519
                                        #   in Loop: Header=BB62_161 Depth=1
	jmp	.LBB62_167
.LBB62_167:                             # %for.inc520
                                        #   in Loop: Header=BB62_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_161
.LBB62_168:                             # %for.end522
	jmp	.LBB62_169
.LBB62_169:                             # %if.end523
	jmp	.LBB62_179
.LBB62_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB62_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB62_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB62_171 Depth=1
	movl	$0, -4(%rbp)
.LBB62_173:                             # %for.cond529
                                        #   Parent Loop BB62_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB62_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB62_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB62_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_173
.LBB62_176:                             # %for.end541
                                        #   in Loop: Header=BB62_171 Depth=1
	jmp	.LBB62_177
.LBB62_177:                             # %for.inc542
                                        #   in Loop: Header=BB62_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_171
.LBB62_178:                             # %for.end544
	jmp	.LBB62_179
.LBB62_179:                             # %if.end545
	jmp	.LBB62_180
.LBB62_180:                             # %sw.epilog
	cmpl	$645489124, -68(%rbp)   # imm = 0x267961E4
	jne	.LBB62_182
.LBB62_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_181
.Lfunc_end62:
	.size	Conceal_Error.52, .Lfunc_end62-Conceal_Error.52
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI62_0:
	.quad	.LBB62_16
	.quad	.LBB62_158
	.quad	.LBB62_106
	.quad	.LBB62_180
	.quad	.LBB62_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.53 # -- Begin function compute_residue_b8block.53
	.p2align	4, 0x90
	.type	compute_residue_b8block.53,@function
compute_residue_b8block.53:             # @compute_residue_b8block.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$27678833, -36(%rbp)    # imm = 0x1A65871
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB63_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_4:                               # %for.cond4
                                        #   Parent Loop BB63_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB63_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB63_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_4
.LBB63_7:                               # %for.end
                                        #   in Loop: Header=BB63_2 Depth=1
	jmp	.LBB63_8
.LBB63_8:                               # %for.inc22
                                        #   in Loop: Header=BB63_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_2
.LBB63_9:                               # %for.end24
	jmp	.LBB63_19
.LBB63_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB63_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB63_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_13:                              # %for.cond29
                                        #   Parent Loop BB63_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB63_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB63_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_13
.LBB63_16:                              # %for.end56
                                        #   in Loop: Header=BB63_11 Depth=1
	jmp	.LBB63_17
.LBB63_17:                              # %for.inc57
                                        #   in Loop: Header=BB63_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_11
.LBB63_18:                              # %for.end59
	jmp	.LBB63_19
.LBB63_19:                              # %if.end
	cmpl	$27678833, -36(%rbp)    # imm = 0x1A65871
	jne	.LBB63_21
.LBB63_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_20
.Lfunc_end63:
	.size	compute_residue_b8block.53, .Lfunc_end63-compute_residue_b8block.53
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.54 # -- Begin function compute_residue_b8block.54
	.p2align	4, 0x90
	.type	compute_residue_b8block.54,@function
compute_residue_b8block.54:             # @compute_residue_b8block.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$631866236, -36(%rbp)   # imm = 0x25A9837C
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB64_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB64_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_4:                               # %for.cond4
                                        #   Parent Loop BB64_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB64_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB64_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB64_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_4
.LBB64_7:                               # %for.end
                                        #   in Loop: Header=BB64_2 Depth=1
	jmp	.LBB64_8
.LBB64_8:                               # %for.inc22
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_2
.LBB64_9:                               # %for.end24
	jmp	.LBB64_19
.LBB64_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB64_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB64_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_13:                              # %for.cond29
                                        #   Parent Loop BB64_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB64_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB64_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB64_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_13
.LBB64_16:                              # %for.end56
                                        #   in Loop: Header=BB64_11 Depth=1
	jmp	.LBB64_17
.LBB64_17:                              # %for.inc57
                                        #   in Loop: Header=BB64_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_11
.LBB64_18:                              # %for.end59
	jmp	.LBB64_19
.LBB64_19:                              # %if.end
	cmpl	$631866236, -36(%rbp)   # imm = 0x25A9837C
	jne	.LBB64_21
.LBB64_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_20
.Lfunc_end64:
	.size	compute_residue_b8block.54, .Lfunc_end64-compute_residue_b8block.54
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.55    # -- Begin function Error_Concealment.55
	.p2align	4, 0x90
	.type	Error_Concealment.55,@function
Error_Concealment.55:                   # @Error_Concealment.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$81259291, -20(%rbp)    # imm = 0x4D7EB1B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB65_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB65_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB65_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB65_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB65_6:                               # %if.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_7
.LBB65_7:                               # %for.inc
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_3
.LBB65_8:                               # %for.end
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_9
.LBB65_9:                               # %for.inc7
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_1
.LBB65_10:                              # %for.end9
	cmpl	$81259291, -20(%rbp)    # imm = 0x4D7EB1B
	jne	.LBB65_12
.LBB65_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_11
.Lfunc_end65:
	.size	Error_Concealment.55, .Lfunc_end65-Error_Concealment.55
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.56  # -- Begin function Get_Reference_Pixel.56
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.56,@function
Get_Reference_Pixel.56:                 # @Get_Reference_Pixel.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1905041595, -108(%rbp) # imm = 0x718CA0BB
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB66_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB66_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB66_5
.LBB66_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB66_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB66_11
.LBB66_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB66_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB66_10
.LBB66_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB66_10:                              # %cond.end14
.LBB66_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB66_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB66_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB66_20
.LBB66_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB66_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB66_19
.LBB66_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB66_19:                              # %cond.end29
.LBB66_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_332
.LBB66_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB66_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB66_25
.LBB66_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB66_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB66_31
.LBB66_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB66_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB66_30
.LBB66_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB66_30:                              # %cond.end52
.LBB66_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_36
.LBB66_35:                              # %cond.false61
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_36:                              # %cond.end63
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB66_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_42
.LBB66_38:                              # %cond.false68
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_41
.LBB66_40:                              # %cond.false73
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_41:                              # %cond.end75
                                        #   in Loop: Header=BB66_32 Depth=1
.LBB66_42:                              # %cond.end77
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB66_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_32
.LBB66_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_47
.LBB66_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB66_53
.LBB66_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_52
.LBB66_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_52:                              # %cond.end113
.LBB66_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB66_57
.LBB66_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB66_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB66_63
.LBB66_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB66_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB66_62
.LBB66_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB66_62:                              # %cond.end136
.LBB66_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_76
.LBB66_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB66_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB66_68
.LBB66_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB66_74
.LBB66_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB66_73
.LBB66_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB66_73:                              # %cond.end169
.LBB66_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_75:                              # %if.end
	jmp	.LBB66_76
.LBB66_76:                              # %if.end178
	jmp	.LBB66_331
.LBB66_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB66_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB66_81
.LBB66_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB66_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB66_87
.LBB66_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB66_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB66_86
.LBB66_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB66_86:                              # %cond.end197
.LBB66_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_92
.LBB66_91:                              # %cond.false209
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_92:                              # %cond.end211
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB66_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_98
.LBB66_94:                              # %cond.false216
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_97
.LBB66_96:                              # %cond.false221
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_97:                              # %cond.end223
                                        #   in Loop: Header=BB66_88 Depth=1
.LBB66_98:                              # %cond.end225
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB66_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_88
.LBB66_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_103
.LBB66_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB66_109
.LBB66_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_108
.LBB66_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_108:                             # %cond.end266
.LBB66_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB66_113
.LBB66_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB66_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB66_119
.LBB66_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB66_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB66_118
.LBB66_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB66_118:                             # %cond.end287
.LBB66_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_132
.LBB66_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB66_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB66_124
.LBB66_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB66_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB66_130
.LBB66_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB66_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB66_129
.LBB66_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB66_129:                             # %cond.end320
.LBB66_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_131:                             # %if.end331
	jmp	.LBB66_132
.LBB66_132:                             # %if.end332
	jmp	.LBB66_330
.LBB66_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB66_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB66_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_139
.LBB66_138:                             # %cond.false345
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_139:                             # %cond.end347
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB66_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_145
.LBB66_141:                             # %cond.false352
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_144
.LBB66_143:                             # %cond.false357
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_144:                             # %cond.end359
                                        #   in Loop: Header=BB66_135 Depth=1
.LBB66_145:                             # %cond.end361
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_146:                             # %for.cond363
                                        #   Parent Loop BB66_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_150
.LBB66_149:                             # %cond.false371
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_150:                             # %cond.end373
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB66_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_156
.LBB66_152:                             # %cond.false378
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB66_155
.LBB66_154:                             # %cond.false383
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_155:                             # %cond.end385
                                        #   in Loop: Header=BB66_146 Depth=2
.LBB66_156:                             # %cond.end387
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB66_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_146
.LBB66_158:                             # %for.end401
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB66_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_135
.LBB66_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB66_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_161
.LBB66_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_167
.LBB66_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB66_173
.LBB66_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_172
.LBB66_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_172:                             # %cond.end449
.LBB66_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_177
.LBB66_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB66_183
.LBB66_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_182
.LBB66_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_182:                             # %cond.end486
.LBB66_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_196
.LBB66_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB66_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_188
.LBB66_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB66_194
.LBB66_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_193
.LBB66_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_193:                             # %cond.end526
.LBB66_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_195:                             # %if.end532
	jmp	.LBB66_196
.LBB66_196:                             # %if.end533
	jmp	.LBB66_329
.LBB66_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB66_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB66_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_203
.LBB66_202:                             # %cond.false546
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_203:                             # %cond.end548
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB66_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_209
.LBB66_205:                             # %cond.false553
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_208
.LBB66_207:                             # %cond.false558
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_208:                             # %cond.end560
                                        #   in Loop: Header=BB66_199 Depth=1
.LBB66_209:                             # %cond.end562
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_210:                             # %for.cond564
                                        #   Parent Loop BB66_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_214
.LBB66_213:                             # %cond.false572
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_214:                             # %cond.end574
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB66_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_220
.LBB66_216:                             # %cond.false579
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB66_219
.LBB66_218:                             # %cond.false584
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_219:                             # %cond.end586
                                        #   in Loop: Header=BB66_210 Depth=2
.LBB66_220:                             # %cond.end588
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB66_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_210
.LBB66_222:                             # %for.end602
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB66_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_199
.LBB66_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB66_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_225
.LBB66_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_231
.LBB66_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB66_237
.LBB66_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_236
.LBB66_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB66_236:                             # %cond.end650
.LBB66_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_241
.LBB66_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB66_247
.LBB66_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_246
.LBB66_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_246:                             # %cond.end687
.LBB66_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB66_258
.LBB66_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_251
.LBB66_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB66_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB66_257
.LBB66_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB66_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_256
.LBB66_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB66_256:                             # %cond.end724
.LBB66_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_258:                             # %if.end730
	jmp	.LBB66_328
.LBB66_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB66_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB66_262
.LBB66_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB66_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB66_265
.LBB66_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB66_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB66_271
.LBB66_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB66_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB66_270
.LBB66_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB66_270:                             # %cond.end753
.LBB66_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB66_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_276
.LBB66_275:                             # %cond.false765
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_276:                             # %cond.end767
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB66_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_282
.LBB66_278:                             # %cond.false772
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB66_281
.LBB66_280:                             # %cond.false777
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB66_281:                             # %cond.end779
                                        #   in Loop: Header=BB66_272 Depth=1
.LBB66_282:                             # %cond.end781
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB66_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_272
.LBB66_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_287
.LBB66_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB66_293
.LBB66_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_292
.LBB66_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_292:                             # %cond.end822
.LBB66_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB66_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB66_296
.LBB66_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB66_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB66_299
.LBB66_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB66_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB66_305
.LBB66_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB66_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB66_304
.LBB66_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB66_304:                             # %cond.end847
.LBB66_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB66_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB66_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_310
.LBB66_309:                             # %cond.false859
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_310:                             # %cond.end861
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB66_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_316
.LBB66_312:                             # %cond.false866
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB66_315
.LBB66_314:                             # %cond.false871
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB66_315:                             # %cond.end873
                                        #   in Loop: Header=BB66_306 Depth=1
.LBB66_316:                             # %cond.end875
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB66_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_306
.LBB66_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_321
.LBB66_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB66_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB66_327
.LBB66_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB66_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_326
.LBB66_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB66_326:                             # %cond.end916
.LBB66_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB66_328:                             # %if.end922
	jmp	.LBB66_329
.LBB66_329:                             # %if.end923
	jmp	.LBB66_330
.LBB66_330:                             # %if.end924
	jmp	.LBB66_331
.LBB66_331:                             # %if.end925
	jmp	.LBB66_332
.LBB66_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1905041595, -108(%rbp) # imm = 0x718CA0BB
	jne	.LBB66_334
.LBB66_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_333
.Lfunc_end66:
	.size	Get_Reference_Pixel.56, .Lfunc_end66-Get_Reference_Pixel.56
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.57  # -- Begin function Get_Reference_Block.57
	.p2align	4, 0x90
	.type	Get_Reference_Block.57,@function
Get_Reference_Block.57:                 # @Get_Reference_Block.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1476212055, -32(%rbp)  # imm = 0x57FD3557
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -56(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_3:                               # %for.cond5
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB67_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_3
.LBB67_6:                               # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_7
.LBB67_7:                               # %for.inc14
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_1
.LBB67_8:                               # %for.end16
	cmpl	$1476212055, -32(%rbp)  # imm = 0x57FD3557
	jne	.LBB67_10
.LBB67_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_9
.Lfunc_end67:
	.size	Get_Reference_Block.57, .Lfunc_end67-Get_Reference_Block.57
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.58 # -- Begin function compute_residue_b8block.58
	.p2align	4, 0x90
	.type	compute_residue_b8block.58,@function
compute_residue_b8block.58:             # @compute_residue_b8block.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1696145312, -36(%rbp)  # imm = 0x65191FA0
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB68_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB68_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_4:                               # %for.cond4
                                        #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB68_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB68_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_4
.LBB68_7:                               # %for.end
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc22
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_2
.LBB68_9:                               # %for.end24
	jmp	.LBB68_19
.LBB68_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB68_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB68_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_13:                              # %for.cond29
                                        #   Parent Loop BB68_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB68_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB68_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB68_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_13
.LBB68_16:                              # %for.end56
                                        #   in Loop: Header=BB68_11 Depth=1
	jmp	.LBB68_17
.LBB68_17:                              # %for.inc57
                                        #   in Loop: Header=BB68_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_11
.LBB68_18:                              # %for.end59
	jmp	.LBB68_19
.LBB68_19:                              # %if.end
	cmpl	$1696145312, -36(%rbp)  # imm = 0x65191FA0
	jne	.LBB68_21
.LBB68_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_20
.Lfunc_end68:
	.size	compute_residue_b8block.58, .Lfunc_end68-compute_residue_b8block.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.59
.LCPI69_0:
	.quad	4636737291354636288     # double 100
.LCPI69_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.59
	.p2align	4, 0x90
	.type	Build_Status_Map.59,@function
Build_Status_Map.59:                    # @Build_Status_Map.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1491980046, -44(%rbp)  # imm = 0x58EDCF0E
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_3:                               # %for.cond2
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB69_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB69_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB69_13
.LBB69_6:                               # %if.then
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB69_8:                               # %if.end
                                        #   in Loop: Header=BB69_3 Depth=2
	callq	rand
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB69_10:                              # %if.end20
                                        #   in Loop: Header=BB69_3 Depth=2
	callq	rand
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI69_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	$1, -4(%rbp)
.LBB69_12:                              # %if.end29
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB69_13:                              # %if.end30
                                        #   in Loop: Header=BB69_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB69_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB69_18
.LBB69_15:                              # %if.else
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB69_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB69_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB69_17:                              # %if.end49
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_18
.LBB69_18:                              # %if.end50
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_3
.LBB69_20:                              # %for.end
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_21
.LBB69_21:                              # %for.inc53
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_1
.LBB69_22:                              # %for.end55
	cmpl	$1491980046, -44(%rbp)  # imm = 0x58EDCF0E
	jne	.LBB69_24
.LBB69_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_23
.Lfunc_end69:
	.size	Build_Status_Map.59, .Lfunc_end69-Build_Status_Map.59
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.60 # -- Begin function compute_residue_b8block.60
	.p2align	4, 0x90
	.type	compute_residue_b8block.60,@function
compute_residue_b8block.60:             # @compute_residue_b8block.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1221943857, -36(%rbp)  # imm = 0x48D56231
	movl	%edi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB70_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB70_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_4:                               # %for.cond4
                                        #   Parent Loop BB70_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB70_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB70_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB70_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_4
.LBB70_7:                               # %for.end
                                        #   in Loop: Header=BB70_2 Depth=1
	jmp	.LBB70_8
.LBB70_8:                               # %for.inc22
                                        #   in Loop: Header=BB70_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_2
.LBB70_9:                               # %for.end24
	jmp	.LBB70_19
.LBB70_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB70_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_13:                              # %for.cond29
                                        #   Parent Loop BB70_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB70_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB70_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB70_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_13
.LBB70_16:                              # %for.end56
                                        #   in Loop: Header=BB70_11 Depth=1
	jmp	.LBB70_17
.LBB70_17:                              # %for.inc57
                                        #   in Loop: Header=BB70_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_11
.LBB70_18:                              # %for.end59
	jmp	.LBB70_19
.LBB70_19:                              # %if.end
	cmpl	$1221943857, -36(%rbp)  # imm = 0x48D56231
	jne	.LBB70_21
.LBB70_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_20
.Lfunc_end70:
	.size	compute_residue_b8block.60, .Lfunc_end70-compute_residue_b8block.60
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.61
.LCPI71_0:
	.quad	4636737291354636288     # double 100
.LCPI71_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.61
	.p2align	4, 0x90
	.type	Build_Status_Map.61,@function
Build_Status_Map.61:                    # @Build_Status_Map.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1800152713, -40(%rbp)  # imm = 0x6B4C2689
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB71_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -12(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB71_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB71_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB71_13
.LBB71_6:                               # %if.then
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB71_8:                               # %if.end
                                        #   in Loop: Header=BB71_3 Depth=2
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB71_10:                              # %if.end20
                                        #   in Loop: Header=BB71_3 Depth=2
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$1, -4(%rbp)
.LBB71_12:                              # %if.end29
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB71_13:                              # %if.end30
                                        #   in Loop: Header=BB71_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB71_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB71_18
.LBB71_15:                              # %if.else
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB71_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB71_17:                              # %if.end49
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_18
.LBB71_18:                              # %if.end50
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_3
.LBB71_20:                              # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_21
.LBB71_21:                              # %for.inc53
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_1
.LBB71_22:                              # %for.end55
	cmpl	$1800152713, -40(%rbp)  # imm = 0x6B4C2689
	jne	.LBB71_24
.LBB71_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_23
.Lfunc_end71:
	.size	Build_Status_Map.61, .Lfunc_end71-Build_Status_Map.61
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.62        # -- Begin function Conceal_Error.62
	.p2align	4, 0x90
	.type	Conceal_Error.62,@function
Conceal_Error.62:                       # @Conceal_Error.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$672309485, -68(%rbp)   # imm = 0x2812A0ED
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB72_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB72_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB72_4:                               # %land.end
.LBB72_5:                               # %lor.end
.LBB72_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB72_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB72_9
.LBB72_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB72_14
.LBB72_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB72_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB72_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB72_12:                              # %land.end51
.LBB72_13:                              # %lor.end53
.LBB72_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB72_180
# %bb.15:                               # %land.end54
	movq	.LJTI72_0(,%rax,8), %rax
	jmpq	*%rax
.LBB72_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB72_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB72_18 Depth=1
	movl	$0, -4(%rbp)
.LBB72_20:                              # %for.cond68
                                        #   Parent Loop BB72_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB72_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB72_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_20
.LBB72_23:                              # %for.end
                                        #   in Loop: Header=BB72_18 Depth=1
	jmp	.LBB72_24
.LBB72_24:                              # %for.inc85
                                        #   in Loop: Header=BB72_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_18
.LBB72_25:                              # %for.end87
	jmp	.LBB72_35
.LBB72_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB72_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB72_27 Depth=1
	movl	$0, -4(%rbp)
.LBB72_29:                              # %for.cond92
                                        #   Parent Loop BB72_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB72_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB72_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_29
.LBB72_32:                              # %for.end104
                                        #   in Loop: Header=BB72_27 Depth=1
	jmp	.LBB72_33
.LBB72_33:                              # %for.inc105
                                        #   in Loop: Header=BB72_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_27
.LBB72_34:                              # %for.end107
	jmp	.LBB72_35
.LBB72_35:                              # %if.end
	jmp	.LBB72_180
.LBB72_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB72_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_39 Depth 2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB72_37 Depth=1
	movl	$0, -16(%rbp)
.LBB72_39:                              # %for.cond113
                                        #   Parent Loop BB72_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	$0, -4(%rbp)
.LBB72_41:                              # %for.cond117
                                        #   Parent Loop BB72_37 Depth=1
                                        #     Parent Loop BB72_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB72_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB72_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB72_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_41
.LBB72_44:                              # %for.end141
                                        #   in Loop: Header=BB72_39 Depth=2
	jmp	.LBB72_45
.LBB72_45:                              # %for.inc142
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_39
.LBB72_46:                              # %for.end144
                                        #   in Loop: Header=BB72_37 Depth=1
	jmp	.LBB72_47
.LBB72_47:                              # %for.inc145
                                        #   in Loop: Header=BB72_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_37
.LBB72_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB72_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	$0, -8(%rbp)
.LBB72_51:                              # %for.cond152
                                        #   Parent Loop BB72_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB72_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB72_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_51
.LBB72_54:                              # %for.end162
                                        #   in Loop: Header=BB72_49 Depth=1
	jmp	.LBB72_55
.LBB72_55:                              # %for.inc163
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_49
.LBB72_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB72_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB72_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB72_59 Depth=1
	movl	$0, -4(%rbp)
.LBB72_61:                              # %for.cond175
                                        #   Parent Loop BB72_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB72_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_61
.LBB72_64:                              # %for.end195
                                        #   in Loop: Header=BB72_59 Depth=1
	jmp	.LBB72_65
.LBB72_65:                              # %for.inc196
                                        #   in Loop: Header=BB72_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_59
.LBB72_66:                              # %for.end198
	jmp	.LBB72_95
.LBB72_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB72_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB72_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_71 Depth 2
                                        #       Child Loop BB72_73 Depth 3
                                        #         Child Loop BB72_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB72_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB72_71:                              # %for.cond210
                                        #   Parent Loop BB72_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_73 Depth 3
                                        #         Child Loop BB72_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB72_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB72_73:                              # %for.cond236
                                        #   Parent Loop BB72_69 Depth=1
                                        #     Parent Loop BB72_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB72_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB72_73 Depth=3
	movl	$0, -4(%rbp)
.LBB72_75:                              # %for.cond240
                                        #   Parent Loop BB72_69 Depth=1
                                        #     Parent Loop BB72_71 Depth=2
                                        #       Parent Loop BB72_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB72_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB72_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB72_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_75
.LBB72_78:                              # %for.end259
                                        #   in Loop: Header=BB72_73 Depth=3
	jmp	.LBB72_79
.LBB72_79:                              # %for.inc260
                                        #   in Loop: Header=BB72_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_73
.LBB72_80:                              # %for.end262
                                        #   in Loop: Header=BB72_71 Depth=2
	jmp	.LBB72_81
.LBB72_81:                              # %for.inc263
                                        #   in Loop: Header=BB72_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_71
.LBB72_82:                              # %for.end265
                                        #   in Loop: Header=BB72_69 Depth=1
	jmp	.LBB72_83
.LBB72_83:                              # %for.inc266
                                        #   in Loop: Header=BB72_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_69
.LBB72_84:                              # %for.end268
	jmp	.LBB72_94
.LBB72_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB72_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB72_86 Depth=1
	movl	$0, -4(%rbp)
.LBB72_88:                              # %for.cond274
                                        #   Parent Loop BB72_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB72_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB72_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_88
.LBB72_91:                              # %for.end294
                                        #   in Loop: Header=BB72_86 Depth=1
	jmp	.LBB72_92
.LBB72_92:                              # %for.inc295
                                        #   in Loop: Header=BB72_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_86
.LBB72_93:                              # %for.end297
	jmp	.LBB72_94
.LBB72_94:                              # %if.end298
	jmp	.LBB72_95
.LBB72_95:                              # %if.end299
	jmp	.LBB72_105
.LBB72_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB72_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB72_97 Depth=1
	movl	$0, -4(%rbp)
.LBB72_99:                              # %for.cond305
                                        #   Parent Loop BB72_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB72_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB72_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_99
.LBB72_102:                             # %for.end317
                                        #   in Loop: Header=BB72_97 Depth=1
	jmp	.LBB72_103
.LBB72_103:                             # %for.inc318
                                        #   in Loop: Header=BB72_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_97
.LBB72_104:                             # %for.end320
	jmp	.LBB72_105
.LBB72_105:                             # %if.end321
	jmp	.LBB72_180
.LBB72_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB72_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_110 Depth 2
                                        #       Child Loop BB72_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB72_108 Depth=1
	movl	$0, -16(%rbp)
.LBB72_110:                             # %for.cond331
                                        #   Parent Loop BB72_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB72_110 Depth=2
	movl	$0, -4(%rbp)
.LBB72_112:                             # %for.cond335
                                        #   Parent Loop BB72_108 Depth=1
                                        #     Parent Loop BB72_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB72_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB72_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB72_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_112
.LBB72_115:                             # %for.end359
                                        #   in Loop: Header=BB72_110 Depth=2
	jmp	.LBB72_116
.LBB72_116:                             # %for.inc360
                                        #   in Loop: Header=BB72_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_110
.LBB72_117:                             # %for.end362
                                        #   in Loop: Header=BB72_108 Depth=1
	jmp	.LBB72_118
.LBB72_118:                             # %for.inc363
                                        #   in Loop: Header=BB72_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_108
.LBB72_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB72_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	$0, -8(%rbp)
.LBB72_122:                             # %for.cond370
                                        #   Parent Loop BB72_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB72_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB72_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_122
.LBB72_125:                             # %for.end380
                                        #   in Loop: Header=BB72_120 Depth=1
	jmp	.LBB72_126
.LBB72_126:                             # %for.inc381
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_120
.LBB72_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB72_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB72_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB72_129 Depth=1
	movl	$0, -4(%rbp)
.LBB72_131:                             # %for.cond390
                                        #   Parent Loop BB72_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB72_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB72_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_131
.LBB72_134:                             # %for.end410
                                        #   in Loop: Header=BB72_129 Depth=1
	jmp	.LBB72_135
.LBB72_135:                             # %for.inc411
                                        #   in Loop: Header=BB72_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_129
.LBB72_136:                             # %for.end413
	jmp	.LBB72_156
.LBB72_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB72_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB72_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_141 Depth 2
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB72_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB72_141:                             # %for.cond425
                                        #   Parent Loop BB72_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB72_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB72_143:                             # %for.cond452
                                        #   Parent Loop BB72_139 Depth=1
                                        #     Parent Loop BB72_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB72_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	$0, -4(%rbp)
.LBB72_145:                             # %for.cond456
                                        #   Parent Loop BB72_139 Depth=1
                                        #     Parent Loop BB72_141 Depth=2
                                        #       Parent Loop BB72_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB72_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB72_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB72_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_145
.LBB72_148:                             # %for.end475
                                        #   in Loop: Header=BB72_143 Depth=3
	jmp	.LBB72_149
.LBB72_149:                             # %for.inc476
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_143
.LBB72_150:                             # %for.end478
                                        #   in Loop: Header=BB72_141 Depth=2
	jmp	.LBB72_151
.LBB72_151:                             # %for.inc479
                                        #   in Loop: Header=BB72_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_141
.LBB72_152:                             # %for.end481
                                        #   in Loop: Header=BB72_139 Depth=1
	jmp	.LBB72_153
.LBB72_153:                             # %for.inc482
                                        #   in Loop: Header=BB72_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_139
.LBB72_154:                             # %for.end484
	jmp	.LBB72_155
.LBB72_155:                             # %if.end485
	jmp	.LBB72_156
.LBB72_156:                             # %if.end486
	jmp	.LBB72_157
.LBB72_157:                             # %if.end487
	jmp	.LBB72_180
.LBB72_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB72_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB72_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	$0, -4(%rbp)
.LBB72_163:                             # %for.cond499
                                        #   Parent Loop BB72_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB72_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB72_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_163
.LBB72_166:                             # %for.end519
                                        #   in Loop: Header=BB72_161 Depth=1
	jmp	.LBB72_167
.LBB72_167:                             # %for.inc520
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_161
.LBB72_168:                             # %for.end522
	jmp	.LBB72_169
.LBB72_169:                             # %if.end523
	jmp	.LBB72_179
.LBB72_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB72_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB72_171 Depth=1
	movl	$0, -4(%rbp)
.LBB72_173:                             # %for.cond529
                                        #   Parent Loop BB72_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB72_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB72_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_173
.LBB72_176:                             # %for.end541
                                        #   in Loop: Header=BB72_171 Depth=1
	jmp	.LBB72_177
.LBB72_177:                             # %for.inc542
                                        #   in Loop: Header=BB72_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_171
.LBB72_178:                             # %for.end544
	jmp	.LBB72_179
.LBB72_179:                             # %if.end545
	jmp	.LBB72_180
.LBB72_180:                             # %sw.epilog
	cmpl	$672309485, -68(%rbp)   # imm = 0x2812A0ED
	jne	.LBB72_182
.LBB72_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_181
.Lfunc_end72:
	.size	Conceal_Error.62, .Lfunc_end72-Conceal_Error.62
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI72_0:
	.quad	.LBB72_16
	.quad	.LBB72_158
	.quad	.LBB72_106
	.quad	.LBB72_180
	.quad	.LBB72_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.63
.LCPI73_0:
	.quad	4636737291354636288     # double 100
.LCPI73_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.63
	.p2align	4, 0x90
	.type	Build_Status_Map.63,@function
Build_Status_Map.63:                    # @Build_Status_Map.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1869599492, -44(%rbp)  # imm = 0x6F6FD304
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB73_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -12(%rbp)
.LBB73_3:                               # %for.cond2
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB73_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB73_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB73_13
.LBB73_6:                               # %if.then
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI73_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB73_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB73_8:                               # %if.end
                                        #   in Loop: Header=BB73_3 Depth=2
	callq	rand
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI73_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB73_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB73_10:                              # %if.end20
                                        #   in Loop: Header=BB73_3 Depth=2
	callq	rand
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI73_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB73_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	$1, -4(%rbp)
.LBB73_12:                              # %if.end29
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB73_13:                              # %if.end30
                                        #   in Loop: Header=BB73_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB73_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB73_18
.LBB73_15:                              # %if.else
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB73_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB73_17:                              # %if.end49
                                        #   in Loop: Header=BB73_3 Depth=2
	jmp	.LBB73_18
.LBB73_18:                              # %if.end50
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_3
.LBB73_20:                              # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_21
.LBB73_21:                              # %for.inc53
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_1
.LBB73_22:                              # %for.end55
	cmpl	$1869599492, -44(%rbp)  # imm = 0x6F6FD304
	jne	.LBB73_24
.LBB73_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_23
.Lfunc_end73:
	.size	Build_Status_Map.63, .Lfunc_end73-Build_Status_Map.63
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.64    # -- Begin function Error_Concealment.64
	.p2align	4, 0x90
	.type	Error_Concealment.64,@function
Error_Concealment.64:                   # @Error_Concealment.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1679534872, -16(%rbp)  # imm = 0x641BAB18
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB74_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	$0, -4(%rbp)
.LBB74_3:                               # %for.cond2
                                        #   Parent Loop BB74_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB74_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB74_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB74_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB74_6:                               # %if.end
                                        #   in Loop: Header=BB74_3 Depth=2
	jmp	.LBB74_7
.LBB74_7:                               # %for.inc
                                        #   in Loop: Header=BB74_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_3
.LBB74_8:                               # %for.end
                                        #   in Loop: Header=BB74_1 Depth=1
	jmp	.LBB74_9
.LBB74_9:                               # %for.inc7
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_1
.LBB74_10:                              # %for.end9
	cmpl	$1679534872, -16(%rbp)  # imm = 0x641BAB18
	jne	.LBB74_12
.LBB74_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_11
.Lfunc_end74:
	.size	Error_Concealment.64, .Lfunc_end74-Error_Concealment.64
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.65        # -- Begin function Conceal_Error.65
	.p2align	4, 0x90
	.type	Conceal_Error.65,@function
Conceal_Error.65:                       # @Conceal_Error.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$839124020, -68(%rbp)   # imm = 0x32040434
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB75_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB75_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB75_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB75_4:                               # %land.end
.LBB75_5:                               # %lor.end
.LBB75_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB75_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB75_9
.LBB75_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB75_14
.LBB75_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB75_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB75_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB75_12:                              # %land.end51
.LBB75_13:                              # %lor.end53
.LBB75_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB75_180
# %bb.15:                               # %land.end54
	movq	.LJTI75_0(,%rax,8), %rax
	jmpq	*%rax
.LBB75_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB75_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	$0, -4(%rbp)
.LBB75_20:                              # %for.cond68
                                        #   Parent Loop BB75_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB75_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB75_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_20
.LBB75_23:                              # %for.end
                                        #   in Loop: Header=BB75_18 Depth=1
	jmp	.LBB75_24
.LBB75_24:                              # %for.inc85
                                        #   in Loop: Header=BB75_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_18
.LBB75_25:                              # %for.end87
	jmp	.LBB75_35
.LBB75_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB75_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	$0, -4(%rbp)
.LBB75_29:                              # %for.cond92
                                        #   Parent Loop BB75_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB75_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB75_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_29
.LBB75_32:                              # %for.end104
                                        #   in Loop: Header=BB75_27 Depth=1
	jmp	.LBB75_33
.LBB75_33:                              # %for.inc105
                                        #   in Loop: Header=BB75_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_27
.LBB75_34:                              # %for.end107
	jmp	.LBB75_35
.LBB75_35:                              # %if.end
	jmp	.LBB75_180
.LBB75_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB75_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_39 Depth 2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	$0, -12(%rbp)
.LBB75_39:                              # %for.cond113
                                        #   Parent Loop BB75_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	$0, -4(%rbp)
.LBB75_41:                              # %for.cond117
                                        #   Parent Loop BB75_37 Depth=1
                                        #     Parent Loop BB75_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB75_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB75_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_41
.LBB75_44:                              # %for.end141
                                        #   in Loop: Header=BB75_39 Depth=2
	jmp	.LBB75_45
.LBB75_45:                              # %for.inc142
                                        #   in Loop: Header=BB75_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_39
.LBB75_46:                              # %for.end144
                                        #   in Loop: Header=BB75_37 Depth=1
	jmp	.LBB75_47
.LBB75_47:                              # %for.inc145
                                        #   in Loop: Header=BB75_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_37
.LBB75_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB75_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	$0, -8(%rbp)
.LBB75_51:                              # %for.cond152
                                        #   Parent Loop BB75_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB75_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB75_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_51
.LBB75_54:                              # %for.end162
                                        #   in Loop: Header=BB75_49 Depth=1
	jmp	.LBB75_55
.LBB75_55:                              # %for.inc163
                                        #   in Loop: Header=BB75_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_49
.LBB75_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB75_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB75_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	$0, -4(%rbp)
.LBB75_61:                              # %for.cond175
                                        #   Parent Loop BB75_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB75_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB75_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_61
.LBB75_64:                              # %for.end195
                                        #   in Loop: Header=BB75_59 Depth=1
	jmp	.LBB75_65
.LBB75_65:                              # %for.inc196
                                        #   in Loop: Header=BB75_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_59
.LBB75_66:                              # %for.end198
	jmp	.LBB75_95
.LBB75_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB75_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_71 Depth 2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_71:                              # %for.cond210
                                        #   Parent Loop BB75_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_73 Depth 3
                                        #         Child Loop BB75_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB75_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_73:                              # %for.cond236
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	$0, -4(%rbp)
.LBB75_75:                              # %for.cond240
                                        #   Parent Loop BB75_69 Depth=1
                                        #     Parent Loop BB75_71 Depth=2
                                        #       Parent Loop BB75_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB75_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB75_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_75
.LBB75_78:                              # %for.end259
                                        #   in Loop: Header=BB75_73 Depth=3
	jmp	.LBB75_79
.LBB75_79:                              # %for.inc260
                                        #   in Loop: Header=BB75_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_73
.LBB75_80:                              # %for.end262
                                        #   in Loop: Header=BB75_71 Depth=2
	jmp	.LBB75_81
.LBB75_81:                              # %for.inc263
                                        #   in Loop: Header=BB75_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_71
.LBB75_82:                              # %for.end265
                                        #   in Loop: Header=BB75_69 Depth=1
	jmp	.LBB75_83
.LBB75_83:                              # %for.inc266
                                        #   in Loop: Header=BB75_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_69
.LBB75_84:                              # %for.end268
	jmp	.LBB75_94
.LBB75_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB75_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	$0, -4(%rbp)
.LBB75_88:                              # %for.cond274
                                        #   Parent Loop BB75_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB75_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB75_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_88
.LBB75_91:                              # %for.end294
                                        #   in Loop: Header=BB75_86 Depth=1
	jmp	.LBB75_92
.LBB75_92:                              # %for.inc295
                                        #   in Loop: Header=BB75_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_86
.LBB75_93:                              # %for.end297
	jmp	.LBB75_94
.LBB75_94:                              # %if.end298
	jmp	.LBB75_95
.LBB75_95:                              # %if.end299
	jmp	.LBB75_105
.LBB75_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB75_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	$0, -4(%rbp)
.LBB75_99:                              # %for.cond305
                                        #   Parent Loop BB75_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB75_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB75_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_99
.LBB75_102:                             # %for.end317
                                        #   in Loop: Header=BB75_97 Depth=1
	jmp	.LBB75_103
.LBB75_103:                             # %for.inc318
                                        #   in Loop: Header=BB75_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_97
.LBB75_104:                             # %for.end320
	jmp	.LBB75_105
.LBB75_105:                             # %if.end321
	jmp	.LBB75_180
.LBB75_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB75_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_110 Depth 2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB75_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	$0, -12(%rbp)
.LBB75_110:                             # %for.cond331
                                        #   Parent Loop BB75_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB75_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	$0, -4(%rbp)
.LBB75_112:                             # %for.cond335
                                        #   Parent Loop BB75_108 Depth=1
                                        #     Parent Loop BB75_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB75_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB75_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB75_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_112
.LBB75_115:                             # %for.end359
                                        #   in Loop: Header=BB75_110 Depth=2
	jmp	.LBB75_116
.LBB75_116:                             # %for.inc360
                                        #   in Loop: Header=BB75_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_110
.LBB75_117:                             # %for.end362
                                        #   in Loop: Header=BB75_108 Depth=1
	jmp	.LBB75_118
.LBB75_118:                             # %for.inc363
                                        #   in Loop: Header=BB75_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_108
.LBB75_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB75_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	$0, -8(%rbp)
.LBB75_122:                             # %for.cond370
                                        #   Parent Loop BB75_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB75_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB75_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_122
.LBB75_125:                             # %for.end380
                                        #   in Loop: Header=BB75_120 Depth=1
	jmp	.LBB75_126
.LBB75_126:                             # %for.inc381
                                        #   in Loop: Header=BB75_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_120
.LBB75_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB75_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB75_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	$0, -4(%rbp)
.LBB75_131:                             # %for.cond390
                                        #   Parent Loop BB75_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB75_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB75_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_131
.LBB75_134:                             # %for.end410
                                        #   in Loop: Header=BB75_129 Depth=1
	jmp	.LBB75_135
.LBB75_135:                             # %for.inc411
                                        #   in Loop: Header=BB75_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_129
.LBB75_136:                             # %for.end413
	jmp	.LBB75_156
.LBB75_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB75_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB75_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_141 Depth 2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB75_141:                             # %for.cond425
                                        #   Parent Loop BB75_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_143 Depth 3
                                        #         Child Loop BB75_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB75_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB75_143:                             # %for.cond452
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB75_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	$0, -4(%rbp)
.LBB75_145:                             # %for.cond456
                                        #   Parent Loop BB75_139 Depth=1
                                        #     Parent Loop BB75_141 Depth=2
                                        #       Parent Loop BB75_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB75_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB75_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB75_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_145
.LBB75_148:                             # %for.end475
                                        #   in Loop: Header=BB75_143 Depth=3
	jmp	.LBB75_149
.LBB75_149:                             # %for.inc476
                                        #   in Loop: Header=BB75_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_143
.LBB75_150:                             # %for.end478
                                        #   in Loop: Header=BB75_141 Depth=2
	jmp	.LBB75_151
.LBB75_151:                             # %for.inc479
                                        #   in Loop: Header=BB75_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_141
.LBB75_152:                             # %for.end481
                                        #   in Loop: Header=BB75_139 Depth=1
	jmp	.LBB75_153
.LBB75_153:                             # %for.inc482
                                        #   in Loop: Header=BB75_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_139
.LBB75_154:                             # %for.end484
	jmp	.LBB75_155
.LBB75_155:                             # %if.end485
	jmp	.LBB75_156
.LBB75_156:                             # %if.end486
	jmp	.LBB75_157
.LBB75_157:                             # %if.end487
	jmp	.LBB75_180
.LBB75_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB75_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB75_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB75_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	$0, -4(%rbp)
.LBB75_163:                             # %for.cond499
                                        #   Parent Loop BB75_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB75_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB75_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_163
.LBB75_166:                             # %for.end519
                                        #   in Loop: Header=BB75_161 Depth=1
	jmp	.LBB75_167
.LBB75_167:                             # %for.inc520
                                        #   in Loop: Header=BB75_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_161
.LBB75_168:                             # %for.end522
	jmp	.LBB75_169
.LBB75_169:                             # %if.end523
	jmp	.LBB75_179
.LBB75_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB75_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB75_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	$0, -4(%rbp)
.LBB75_173:                             # %for.cond529
                                        #   Parent Loop BB75_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB75_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB75_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB75_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_173
.LBB75_176:                             # %for.end541
                                        #   in Loop: Header=BB75_171 Depth=1
	jmp	.LBB75_177
.LBB75_177:                             # %for.inc542
                                        #   in Loop: Header=BB75_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_171
.LBB75_178:                             # %for.end544
	jmp	.LBB75_179
.LBB75_179:                             # %if.end545
	jmp	.LBB75_180
.LBB75_180:                             # %sw.epilog
	cmpl	$839124020, -68(%rbp)   # imm = 0x32040434
	jne	.LBB75_182
.LBB75_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_181
.Lfunc_end75:
	.size	Conceal_Error.65, .Lfunc_end75-Conceal_Error.65
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI75_0:
	.quad	.LBB75_16
	.quad	.LBB75_158
	.quad	.LBB75_106
	.quad	.LBB75_180
	.quad	.LBB75_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.66   # -- Begin function decode_one_b8block.66
	.p2align	4, 0x90
	.type	decode_one_b8block.66,@function
decode_one_b8block.66:                  # @decode_one_b8block.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1606594388, -84(%rbp)  # imm = 0x5FC2AF54
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB76_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB76_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_4:                               # %for.cond9
                                        #   Parent Loop BB76_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB76_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB76_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_4
.LBB76_7:                               # %for.end
                                        #   in Loop: Header=BB76_2 Depth=1
	jmp	.LBB76_8
.LBB76_8:                               # %for.inc26
                                        #   in Loop: Header=BB76_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_2
.LBB76_9:                               # %for.end28
	jmp	.LBB76_96
.LBB76_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB76_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB76_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB76_31
.LBB76_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB76_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB76_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_17:                              # %for.cond40
                                        #   Parent Loop BB76_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB76_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB76_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_17
.LBB76_20:                              # %for.end49
                                        #   in Loop: Header=BB76_15 Depth=1
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc50
                                        #   in Loop: Header=BB76_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_15
.LBB76_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_25:                              # %for.cond56
                                        #   Parent Loop BB76_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB76_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB76_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_25
.LBB76_28:                              # %for.end71
                                        #   in Loop: Header=BB76_23 Depth=1
	jmp	.LBB76_29
.LBB76_29:                              # %for.inc72
                                        #   in Loop: Header=BB76_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_23
.LBB76_30:                              # %for.end74
	jmp	.LBB76_60
.LBB76_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB76_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB76_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_36:                              # %for.cond83
                                        #   Parent Loop BB76_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB76_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB76_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_36
.LBB76_39:                              # %for.end120
                                        #   in Loop: Header=BB76_34 Depth=1
	jmp	.LBB76_40
.LBB76_40:                              # %for.inc121
                                        #   in Loop: Header=BB76_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_34
.LBB76_41:                              # %for.end123
	jmp	.LBB76_51
.LBB76_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB76_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_45:                              # %for.cond129
                                        #   Parent Loop BB76_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB76_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB76_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_45
.LBB76_48:                              # %for.end145
                                        #   in Loop: Header=BB76_43 Depth=1
	jmp	.LBB76_49
.LBB76_49:                              # %for.inc146
                                        #   in Loop: Header=BB76_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_43
.LBB76_50:                              # %for.end148
	jmp	.LBB76_51
.LBB76_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB76_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_54:                              # %for.cond153
                                        #   Parent Loop BB76_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB76_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB76_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_54
.LBB76_57:                              # %for.end167
                                        #   in Loop: Header=BB76_52 Depth=1
	jmp	.LBB76_58
.LBB76_58:                              # %for.inc168
                                        #   in Loop: Header=BB76_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_52
.LBB76_59:                              # %for.end170
	jmp	.LBB76_60
.LBB76_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB76_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB76_66
.LBB76_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB76_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB76_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB76_86
.LBB76_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB76_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_69 Depth 2
                                        #       Child Loop BB76_74 Depth 3
                                        #         Child Loop BB76_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB76_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB76_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB76_69:                              # %for.cond197
                                        #   Parent Loop BB76_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_74 Depth 3
                                        #         Child Loop BB76_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB76_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB76_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB76_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB76_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB76_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB76_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB76_73:                              # %if.end218
                                        #   in Loop: Header=BB76_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB76_74:                              # %for.cond233
                                        #   Parent Loop BB76_67 Depth=1
                                        #     Parent Loop BB76_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB76_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB76_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB76_74 Depth=3
	movl	$0, -8(%rbp)
.LBB76_76:                              # %for.cond237
                                        #   Parent Loop BB76_67 Depth=1
                                        #     Parent Loop BB76_69 Depth=2
                                        #       Parent Loop BB76_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB76_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB76_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB76_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_76
.LBB76_79:                              # %for.end269
                                        #   in Loop: Header=BB76_74 Depth=3
	jmp	.LBB76_80
.LBB76_80:                              # %for.inc270
                                        #   in Loop: Header=BB76_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_74
.LBB76_81:                              # %for.end272
                                        #   in Loop: Header=BB76_69 Depth=2
	jmp	.LBB76_82
.LBB76_82:                              # %for.inc273
                                        #   in Loop: Header=BB76_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_69
.LBB76_83:                              # %for.end275
                                        #   in Loop: Header=BB76_67 Depth=1
	jmp	.LBB76_84
.LBB76_84:                              # %for.inc276
                                        #   in Loop: Header=BB76_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB76_67
.LBB76_85:                              # %for.end278
	jmp	.LBB76_95
.LBB76_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB76_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB76_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB76_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB76_89:                              # %for.cond284
                                        #   Parent Loop BB76_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB76_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB76_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB76_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_89
.LBB76_92:                              # %for.end310
                                        #   in Loop: Header=BB76_87 Depth=1
	jmp	.LBB76_93
.LBB76_93:                              # %for.inc311
                                        #   in Loop: Header=BB76_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_87
.LBB76_94:                              # %for.end313
	jmp	.LBB76_95
.LBB76_95:                              # %if.end314
	jmp	.LBB76_96
.LBB76_96:                              # %if.end315
	cmpl	$1606594388, -84(%rbp)  # imm = 0x5FC2AF54
	jne	.LBB76_98
.LBB76_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_97
.Lfunc_end76:
	.size	decode_one_b8block.66, .Lfunc_end76-decode_one_b8block.66
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.67   # -- Begin function decode_one_b8block.67
	.p2align	4, 0x90
	.type	decode_one_b8block.67,@function
decode_one_b8block.67:                  # @decode_one_b8block.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1059474375, -84(%rbp)  # imm = 0x3F264BC7
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB77_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_4:                               # %for.cond9
                                        #   Parent Loop BB77_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB77_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB77_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_4
.LBB77_7:                               # %for.end
                                        #   in Loop: Header=BB77_2 Depth=1
	jmp	.LBB77_8
.LBB77_8:                               # %for.inc26
                                        #   in Loop: Header=BB77_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_2
.LBB77_9:                               # %for.end28
	jmp	.LBB77_96
.LBB77_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB77_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB77_31
.LBB77_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB77_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_17:                              # %for.cond40
                                        #   Parent Loop BB77_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB77_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB77_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_17
.LBB77_20:                              # %for.end49
                                        #   in Loop: Header=BB77_15 Depth=1
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc50
                                        #   in Loop: Header=BB77_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_15
.LBB77_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_25:                              # %for.cond56
                                        #   Parent Loop BB77_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB77_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_25
.LBB77_28:                              # %for.end71
                                        #   in Loop: Header=BB77_23 Depth=1
	jmp	.LBB77_29
.LBB77_29:                              # %for.inc72
                                        #   in Loop: Header=BB77_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_23
.LBB77_30:                              # %for.end74
	jmp	.LBB77_60
.LBB77_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB77_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB77_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB77_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_36:                              # %for.cond83
                                        #   Parent Loop BB77_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB77_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_36
.LBB77_39:                              # %for.end120
                                        #   in Loop: Header=BB77_34 Depth=1
	jmp	.LBB77_40
.LBB77_40:                              # %for.inc121
                                        #   in Loop: Header=BB77_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_34
.LBB77_41:                              # %for.end123
	jmp	.LBB77_51
.LBB77_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB77_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_45:                              # %for.cond129
                                        #   Parent Loop BB77_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB77_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB77_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_45
.LBB77_48:                              # %for.end145
                                        #   in Loop: Header=BB77_43 Depth=1
	jmp	.LBB77_49
.LBB77_49:                              # %for.inc146
                                        #   in Loop: Header=BB77_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_43
.LBB77_50:                              # %for.end148
	jmp	.LBB77_51
.LBB77_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_54:                              # %for.cond153
                                        #   Parent Loop BB77_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_54
.LBB77_57:                              # %for.end167
                                        #   in Loop: Header=BB77_52 Depth=1
	jmp	.LBB77_58
.LBB77_58:                              # %for.inc168
                                        #   in Loop: Header=BB77_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_52
.LBB77_59:                              # %for.end170
	jmp	.LBB77_60
.LBB77_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB77_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB77_66
.LBB77_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB77_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB77_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB77_86
.LBB77_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB77_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_69 Depth 2
                                        #       Child Loop BB77_74 Depth 3
                                        #         Child Loop BB77_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB77_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB77_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_69:                              # %for.cond197
                                        #   Parent Loop BB77_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_74 Depth 3
                                        #         Child Loop BB77_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB77_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB77_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB77_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB77_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB77_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB77_73:                              # %if.end218
                                        #   in Loop: Header=BB77_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB77_74:                              # %for.cond233
                                        #   Parent Loop BB77_67 Depth=1
                                        #     Parent Loop BB77_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB77_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB77_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB77_74 Depth=3
	movl	$0, -8(%rbp)
.LBB77_76:                              # %for.cond237
                                        #   Parent Loop BB77_67 Depth=1
                                        #     Parent Loop BB77_69 Depth=2
                                        #       Parent Loop BB77_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB77_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB77_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB77_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_76
.LBB77_79:                              # %for.end269
                                        #   in Loop: Header=BB77_74 Depth=3
	jmp	.LBB77_80
.LBB77_80:                              # %for.inc270
                                        #   in Loop: Header=BB77_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_74
.LBB77_81:                              # %for.end272
                                        #   in Loop: Header=BB77_69 Depth=2
	jmp	.LBB77_82
.LBB77_82:                              # %for.inc273
                                        #   in Loop: Header=BB77_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_69
.LBB77_83:                              # %for.end275
                                        #   in Loop: Header=BB77_67 Depth=1
	jmp	.LBB77_84
.LBB77_84:                              # %for.inc276
                                        #   in Loop: Header=BB77_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_67
.LBB77_85:                              # %for.end278
	jmp	.LBB77_95
.LBB77_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB77_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB77_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB77_89:                              # %for.cond284
                                        #   Parent Loop BB77_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB77_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB77_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_89
.LBB77_92:                              # %for.end310
                                        #   in Loop: Header=BB77_87 Depth=1
	jmp	.LBB77_93
.LBB77_93:                              # %for.inc311
                                        #   in Loop: Header=BB77_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_87
.LBB77_94:                              # %for.end313
	jmp	.LBB77_95
.LBB77_95:                              # %if.end314
	jmp	.LBB77_96
.LBB77_96:                              # %if.end315
	cmpl	$1059474375, -84(%rbp)  # imm = 0x3F264BC7
	jne	.LBB77_98
.LBB77_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_97
.Lfunc_end77:
	.size	decode_one_b8block.67, .Lfunc_end77-decode_one_b8block.67
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.68    # -- Begin function Error_Concealment.68
	.p2align	4, 0x90
	.type	Error_Concealment.68,@function
Error_Concealment.68:                   # @Error_Concealment.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$903546316, -20(%rbp)   # imm = 0x35DB05CC
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB78_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -8(%rbp)
.LBB78_3:                               # %for.cond2
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB78_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB78_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB78_6:                               # %if.end
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_7
.LBB78_7:                               # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_3
.LBB78_8:                               # %for.end
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_9
.LBB78_9:                               # %for.inc7
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_10:                              # %for.end9
	cmpl	$903546316, -20(%rbp)   # imm = 0x35DB05CC
	jne	.LBB78_12
.LBB78_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_11
.Lfunc_end78:
	.size	Error_Concealment.68, .Lfunc_end78-Error_Concealment.68
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.69   # -- Begin function decode_one_b8block.69
	.p2align	4, 0x90
	.type	decode_one_b8block.69,@function
decode_one_b8block.69:                  # @decode_one_b8block.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$262765420, -84(%rbp)   # imm = 0xFA97B6C
	movl	%edi, -52(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB79_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_4:                               # %for.cond9
                                        #   Parent Loop BB79_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB79_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB79_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_4
.LBB79_7:                               # %for.end
                                        #   in Loop: Header=BB79_2 Depth=1
	jmp	.LBB79_8
.LBB79_8:                               # %for.inc26
                                        #   in Loop: Header=BB79_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_2
.LBB79_9:                               # %for.end28
	jmp	.LBB79_96
.LBB79_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB79_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB79_31
.LBB79_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB79_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_17:                              # %for.cond40
                                        #   Parent Loop BB79_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB79_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB79_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_17
.LBB79_20:                              # %for.end49
                                        #   in Loop: Header=BB79_15 Depth=1
	jmp	.LBB79_21
.LBB79_21:                              # %for.inc50
                                        #   in Loop: Header=BB79_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_15
.LBB79_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB79_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_25:                              # %for.cond56
                                        #   Parent Loop BB79_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB79_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB79_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_25
.LBB79_28:                              # %for.end71
                                        #   in Loop: Header=BB79_23 Depth=1
	jmp	.LBB79_29
.LBB79_29:                              # %for.inc72
                                        #   in Loop: Header=BB79_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_23
.LBB79_30:                              # %for.end74
	jmp	.LBB79_60
.LBB79_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB79_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB79_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB79_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_36:                              # %for.cond83
                                        #   Parent Loop BB79_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB79_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB79_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_36
.LBB79_39:                              # %for.end120
                                        #   in Loop: Header=BB79_34 Depth=1
	jmp	.LBB79_40
.LBB79_40:                              # %for.inc121
                                        #   in Loop: Header=BB79_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_34
.LBB79_41:                              # %for.end123
	jmp	.LBB79_51
.LBB79_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB79_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_45:                              # %for.cond129
                                        #   Parent Loop BB79_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB79_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB79_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_45
.LBB79_48:                              # %for.end145
                                        #   in Loop: Header=BB79_43 Depth=1
	jmp	.LBB79_49
.LBB79_49:                              # %for.inc146
                                        #   in Loop: Header=BB79_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_43
.LBB79_50:                              # %for.end148
	jmp	.LBB79_51
.LBB79_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB79_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_54:                              # %for.cond153
                                        #   Parent Loop BB79_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB79_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB79_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_54
.LBB79_57:                              # %for.end167
                                        #   in Loop: Header=BB79_52 Depth=1
	jmp	.LBB79_58
.LBB79_58:                              # %for.inc168
                                        #   in Loop: Header=BB79_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_52
.LBB79_59:                              # %for.end170
	jmp	.LBB79_60
.LBB79_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB79_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB79_66
.LBB79_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB79_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB79_86
.LBB79_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB79_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_69 Depth 2
                                        #       Child Loop BB79_74 Depth 3
                                        #         Child Loop BB79_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB79_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB79_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB79_69:                              # %for.cond197
                                        #   Parent Loop BB79_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_74 Depth 3
                                        #         Child Loop BB79_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB79_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB79_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB79_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB79_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB79_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB79_73:                              # %if.end218
                                        #   in Loop: Header=BB79_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB79_74:                              # %for.cond233
                                        #   Parent Loop BB79_67 Depth=1
                                        #     Parent Loop BB79_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB79_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB79_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB79_74 Depth=3
	movl	$0, -4(%rbp)
.LBB79_76:                              # %for.cond237
                                        #   Parent Loop BB79_67 Depth=1
                                        #     Parent Loop BB79_69 Depth=2
                                        #       Parent Loop BB79_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB79_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB79_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB79_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_76
.LBB79_79:                              # %for.end269
                                        #   in Loop: Header=BB79_74 Depth=3
	jmp	.LBB79_80
.LBB79_80:                              # %for.inc270
                                        #   in Loop: Header=BB79_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_74
.LBB79_81:                              # %for.end272
                                        #   in Loop: Header=BB79_69 Depth=2
	jmp	.LBB79_82
.LBB79_82:                              # %for.inc273
                                        #   in Loop: Header=BB79_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_69
.LBB79_83:                              # %for.end275
                                        #   in Loop: Header=BB79_67 Depth=1
	jmp	.LBB79_84
.LBB79_84:                              # %for.inc276
                                        #   in Loop: Header=BB79_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB79_67
.LBB79_85:                              # %for.end278
	jmp	.LBB79_95
.LBB79_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB79_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB79_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB79_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB79_89:                              # %for.cond284
                                        #   Parent Loop BB79_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB79_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB79_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB79_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_89
.LBB79_92:                              # %for.end310
                                        #   in Loop: Header=BB79_87 Depth=1
	jmp	.LBB79_93
.LBB79_93:                              # %for.inc311
                                        #   in Loop: Header=BB79_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_87
.LBB79_94:                              # %for.end313
	jmp	.LBB79_95
.LBB79_95:                              # %if.end314
	jmp	.LBB79_96
.LBB79_96:                              # %if.end315
	cmpl	$262765420, -84(%rbp)   # imm = 0xFA97B6C
	jne	.LBB79_98
.LBB79_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_97
.Lfunc_end79:
	.size	decode_one_b8block.69, .Lfunc_end79-decode_one_b8block.69
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.70  # -- Begin function Get_Reference_Pixel.70
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.70,@function
Get_Reference_Pixel.70:                 # @Get_Reference_Pixel.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2061597476, -100(%rbp) # imm = 0x7AE17B24
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB80_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB80_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB80_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB80_5
.LBB80_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB80_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB80_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB80_11
.LBB80_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB80_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB80_10
.LBB80_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB80_10:                              # %cond.end14
.LBB80_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB80_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB80_14
.LBB80_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB80_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB80_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB80_20
.LBB80_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB80_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB80_19
.LBB80_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB80_19:                              # %cond.end29
.LBB80_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_332
.LBB80_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB80_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB80_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB80_25
.LBB80_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB80_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB80_31
.LBB80_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB80_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB80_30
.LBB80_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB80_30:                              # %cond.end52
.LBB80_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB80_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB80_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB80_36
.LBB80_35:                              # %cond.false61
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_36:                              # %cond.end63
                                        #   in Loop: Header=BB80_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB80_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_42
.LBB80_38:                              # %cond.false68
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB80_41
.LBB80_40:                              # %cond.false73
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_41:                              # %cond.end75
                                        #   in Loop: Header=BB80_32 Depth=1
.LBB80_42:                              # %cond.end77
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB80_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_32
.LBB80_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_47
.LBB80_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB80_53
.LBB80_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_52
.LBB80_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_52:                              # %cond.end113
.LBB80_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB80_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB80_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB80_57
.LBB80_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB80_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB80_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB80_63
.LBB80_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB80_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB80_62
.LBB80_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB80_62:                              # %cond.end136
.LBB80_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB80_76
.LBB80_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB80_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB80_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB80_68
.LBB80_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB80_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB80_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB80_74
.LBB80_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB80_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB80_73
.LBB80_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB80_73:                              # %cond.end169
.LBB80_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB80_75:                              # %if.end
	jmp	.LBB80_76
.LBB80_76:                              # %if.end178
	jmp	.LBB80_331
.LBB80_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB80_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB80_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB80_81
.LBB80_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB80_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB80_87
.LBB80_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB80_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB80_86
.LBB80_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB80_86:                              # %cond.end197
.LBB80_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB80_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB80_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB80_92
.LBB80_91:                              # %cond.false209
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_92:                              # %cond.end211
                                        #   in Loop: Header=BB80_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB80_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_98
.LBB80_94:                              # %cond.false216
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB80_97
.LBB80_96:                              # %cond.false221
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_97:                              # %cond.end223
                                        #   in Loop: Header=BB80_88 Depth=1
.LBB80_98:                              # %cond.end225
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB80_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_88
.LBB80_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_103
.LBB80_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB80_109
.LBB80_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_108
.LBB80_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_108:                             # %cond.end266
.LBB80_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB80_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB80_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB80_113
.LBB80_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB80_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB80_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB80_119
.LBB80_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB80_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB80_118
.LBB80_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB80_118:                             # %cond.end287
.LBB80_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB80_132
.LBB80_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB80_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB80_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB80_124
.LBB80_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB80_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB80_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB80_130
.LBB80_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB80_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB80_129
.LBB80_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB80_129:                             # %cond.end320
.LBB80_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB80_131:                             # %if.end331
	jmp	.LBB80_132
.LBB80_132:                             # %if.end332
	jmp	.LBB80_330
.LBB80_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB80_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB80_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB80_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB80_139
.LBB80_138:                             # %cond.false345
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_139:                             # %cond.end347
                                        #   in Loop: Header=BB80_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB80_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_145
.LBB80_141:                             # %cond.false352
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB80_144
.LBB80_143:                             # %cond.false357
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_144:                             # %cond.end359
                                        #   in Loop: Header=BB80_135 Depth=1
.LBB80_145:                             # %cond.end361
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB80_146:                             # %for.cond363
                                        #   Parent Loop BB80_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB80_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB80_150
.LBB80_149:                             # %cond.false371
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_150:                             # %cond.end373
                                        #   in Loop: Header=BB80_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB80_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB80_156
.LBB80_152:                             # %cond.false378
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB80_155
.LBB80_154:                             # %cond.false383
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_155:                             # %cond.end385
                                        #   in Loop: Header=BB80_146 Depth=2
.LBB80_156:                             # %cond.end387
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB80_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_146
.LBB80_158:                             # %for.end401
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB80_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_135
.LBB80_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB80_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB80_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB80_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB80_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_161
.LBB80_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_167
.LBB80_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB80_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB80_173
.LBB80_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_172
.LBB80_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB80_172:                             # %cond.end449
.LBB80_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB80_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_177
.LBB80_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB80_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB80_183
.LBB80_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_182
.LBB80_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_182:                             # %cond.end486
.LBB80_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB80_196
.LBB80_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB80_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_188
.LBB80_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB80_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB80_194
.LBB80_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_193
.LBB80_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_193:                             # %cond.end526
.LBB80_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB80_195:                             # %if.end532
	jmp	.LBB80_196
.LBB80_196:                             # %if.end533
	jmp	.LBB80_329
.LBB80_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB80_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB80_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB80_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB80_203
.LBB80_202:                             # %cond.false546
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_203:                             # %cond.end548
                                        #   in Loop: Header=BB80_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB80_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_209
.LBB80_205:                             # %cond.false553
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB80_208
.LBB80_207:                             # %cond.false558
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_208:                             # %cond.end560
                                        #   in Loop: Header=BB80_199 Depth=1
.LBB80_209:                             # %cond.end562
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB80_210:                             # %for.cond564
                                        #   Parent Loop BB80_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB80_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB80_214
.LBB80_213:                             # %cond.false572
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_214:                             # %cond.end574
                                        #   in Loop: Header=BB80_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB80_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB80_220
.LBB80_216:                             # %cond.false579
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB80_219
.LBB80_218:                             # %cond.false584
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_219:                             # %cond.end586
                                        #   in Loop: Header=BB80_210 Depth=2
.LBB80_220:                             # %cond.end588
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB80_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_210
.LBB80_222:                             # %for.end602
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB80_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_199
.LBB80_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB80_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB80_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB80_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB80_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_225
.LBB80_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_231
.LBB80_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB80_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB80_237
.LBB80_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_236
.LBB80_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB80_236:                             # %cond.end650
.LBB80_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB80_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_241
.LBB80_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB80_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB80_247
.LBB80_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_246
.LBB80_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_246:                             # %cond.end687
.LBB80_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB80_258
.LBB80_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_251
.LBB80_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB80_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB80_257
.LBB80_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB80_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_256
.LBB80_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB80_256:                             # %cond.end724
.LBB80_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB80_258:                             # %if.end730
	jmp	.LBB80_328
.LBB80_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB80_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB80_262
.LBB80_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB80_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB80_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB80_265
.LBB80_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB80_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB80_271
.LBB80_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB80_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB80_270
.LBB80_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB80_270:                             # %cond.end753
.LBB80_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB80_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB80_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB80_276
.LBB80_275:                             # %cond.false765
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_276:                             # %cond.end767
                                        #   in Loop: Header=BB80_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB80_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_282
.LBB80_278:                             # %cond.false772
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB80_281
.LBB80_280:                             # %cond.false777
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB80_281:                             # %cond.end779
                                        #   in Loop: Header=BB80_272 Depth=1
.LBB80_282:                             # %cond.end781
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB80_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB80_272
.LBB80_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_287
.LBB80_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB80_293
.LBB80_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_292
.LBB80_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_292:                             # %cond.end822
.LBB80_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB80_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB80_296
.LBB80_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB80_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB80_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB80_299
.LBB80_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB80_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB80_305
.LBB80_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB80_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB80_304
.LBB80_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB80_304:                             # %cond.end847
.LBB80_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB80_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB80_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB80_310
.LBB80_309:                             # %cond.false859
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_310:                             # %cond.end861
                                        #   in Loop: Header=BB80_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB80_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB80_316
.LBB80_312:                             # %cond.false866
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB80_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB80_315
.LBB80_314:                             # %cond.false871
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB80_315:                             # %cond.end873
                                        #   in Loop: Header=BB80_306 Depth=1
.LBB80_316:                             # %cond.end875
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB80_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_306
.LBB80_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_321
.LBB80_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB80_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB80_327
.LBB80_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB80_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB80_326
.LBB80_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB80_326:                             # %cond.end916
.LBB80_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB80_328:                             # %if.end922
	jmp	.LBB80_329
.LBB80_329:                             # %if.end923
	jmp	.LBB80_330
.LBB80_330:                             # %if.end924
	jmp	.LBB80_331
.LBB80_331:                             # %if.end925
	jmp	.LBB80_332
.LBB80_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2061597476, -100(%rbp) # imm = 0x7AE17B24
	jne	.LBB80_334
.LBB80_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_333
.Lfunc_end80:
	.size	Get_Reference_Pixel.70, .Lfunc_end80-Get_Reference_Pixel.70
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.71    # -- Begin function Error_Concealment.71
	.p2align	4, 0x90
	.type	Error_Concealment.71,@function
Error_Concealment.71:                   # @Error_Concealment.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1790332096, -20(%rbp)  # imm = 0x6AB64CC0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB81_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB81_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	$0, -4(%rbp)
.LBB81_3:                               # %for.cond2
                                        #   Parent Loop BB81_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB81_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB81_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB81_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB81_6:                               # %if.end
                                        #   in Loop: Header=BB81_3 Depth=2
	jmp	.LBB81_7
.LBB81_7:                               # %for.inc
                                        #   in Loop: Header=BB81_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_3
.LBB81_8:                               # %for.end
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_9
.LBB81_9:                               # %for.inc7
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB81_1
.LBB81_10:                              # %for.end9
	cmpl	$1790332096, -20(%rbp)  # imm = 0x6AB64CC0
	jne	.LBB81_12
.LBB81_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_11
.Lfunc_end81:
	.size	Error_Concealment.71, .Lfunc_end81-Error_Concealment.71
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.72   # -- Begin function decode_one_b8block.72
	.p2align	4, 0x90
	.type	decode_one_b8block.72,@function
decode_one_b8block.72:                  # @decode_one_b8block.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1308450497, -84(%rbp)  # imm = 0x4DFD5EC1
	movl	%edi, -44(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB82_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB82_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_4:                               # %for.cond9
                                        #   Parent Loop BB82_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB82_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB82_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB82_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_4
.LBB82_7:                               # %for.end
                                        #   in Loop: Header=BB82_2 Depth=1
	jmp	.LBB82_8
.LBB82_8:                               # %for.inc26
                                        #   in Loop: Header=BB82_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_2
.LBB82_9:                               # %for.end28
	jmp	.LBB82_96
.LBB82_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB82_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB82_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB82_31
.LBB82_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB82_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB82_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_17:                              # %for.cond40
                                        #   Parent Loop BB82_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB82_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB82_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB82_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_17
.LBB82_20:                              # %for.end49
                                        #   in Loop: Header=BB82_15 Depth=1
	jmp	.LBB82_21
.LBB82_21:                              # %for.inc50
                                        #   in Loop: Header=BB82_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_15
.LBB82_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB82_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB82_25:                              # %for.cond56
                                        #   Parent Loop BB82_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB82_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB82_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_25
.LBB82_28:                              # %for.end71
                                        #   in Loop: Header=BB82_23 Depth=1
	jmp	.LBB82_29
.LBB82_29:                              # %for.inc72
                                        #   in Loop: Header=BB82_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_23
.LBB82_30:                              # %for.end74
	jmp	.LBB82_60
.LBB82_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB82_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB82_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB82_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB82_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB82_36:                              # %for.cond83
                                        #   Parent Loop BB82_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB82_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB82_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_36
.LBB82_39:                              # %for.end120
                                        #   in Loop: Header=BB82_34 Depth=1
	jmp	.LBB82_40
.LBB82_40:                              # %for.inc121
                                        #   in Loop: Header=BB82_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_34
.LBB82_41:                              # %for.end123
	jmp	.LBB82_51
.LBB82_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB82_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB82_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB82_45:                              # %for.cond129
                                        #   Parent Loop BB82_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB82_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB82_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_45
.LBB82_48:                              # %for.end145
                                        #   in Loop: Header=BB82_43 Depth=1
	jmp	.LBB82_49
.LBB82_49:                              # %for.inc146
                                        #   in Loop: Header=BB82_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_43
.LBB82_50:                              # %for.end148
	jmp	.LBB82_51
.LBB82_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB82_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB82_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_54:                              # %for.cond153
                                        #   Parent Loop BB82_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB82_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB82_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB82_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_54
.LBB82_57:                              # %for.end167
                                        #   in Loop: Header=BB82_52 Depth=1
	jmp	.LBB82_58
.LBB82_58:                              # %for.inc168
                                        #   in Loop: Header=BB82_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_52
.LBB82_59:                              # %for.end170
	jmp	.LBB82_60
.LBB82_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB82_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB82_66
.LBB82_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB82_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB82_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB82_86
.LBB82_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB82_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_69 Depth 2
                                        #       Child Loop BB82_74 Depth 3
                                        #         Child Loop BB82_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB82_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB82_69:                              # %for.cond197
                                        #   Parent Loop BB82_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB82_74 Depth 3
                                        #         Child Loop BB82_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB82_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB82_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB82_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB82_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB82_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB82_73:                              # %if.end218
                                        #   in Loop: Header=BB82_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB82_74:                              # %for.cond233
                                        #   Parent Loop BB82_67 Depth=1
                                        #     Parent Loop BB82_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB82_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB82_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB82_74 Depth=3
	movl	$0, -8(%rbp)
.LBB82_76:                              # %for.cond237
                                        #   Parent Loop BB82_67 Depth=1
                                        #     Parent Loop BB82_69 Depth=2
                                        #       Parent Loop BB82_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB82_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB82_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB82_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_76
.LBB82_79:                              # %for.end269
                                        #   in Loop: Header=BB82_74 Depth=3
	jmp	.LBB82_80
.LBB82_80:                              # %for.inc270
                                        #   in Loop: Header=BB82_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_74
.LBB82_81:                              # %for.end272
                                        #   in Loop: Header=BB82_69 Depth=2
	jmp	.LBB82_82
.LBB82_82:                              # %for.inc273
                                        #   in Loop: Header=BB82_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB82_69
.LBB82_83:                              # %for.end275
                                        #   in Loop: Header=BB82_67 Depth=1
	jmp	.LBB82_84
.LBB82_84:                              # %for.inc276
                                        #   in Loop: Header=BB82_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB82_67
.LBB82_85:                              # %for.end278
	jmp	.LBB82_95
.LBB82_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB82_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB82_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_89:                              # %for.cond284
                                        #   Parent Loop BB82_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB82_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB82_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB82_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_89
.LBB82_92:                              # %for.end310
                                        #   in Loop: Header=BB82_87 Depth=1
	jmp	.LBB82_93
.LBB82_93:                              # %for.inc311
                                        #   in Loop: Header=BB82_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_87
.LBB82_94:                              # %for.end313
	jmp	.LBB82_95
.LBB82_95:                              # %if.end314
	jmp	.LBB82_96
.LBB82_96:                              # %if.end315
	cmpl	$1308450497, -84(%rbp)  # imm = 0x4DFD5EC1
	jne	.LBB82_98
.LBB82_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_97
.Lfunc_end82:
	.size	decode_one_b8block.72, .Lfunc_end82-decode_one_b8block.72
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.73 # -- Begin function compute_residue_b8block.73
	.p2align	4, 0x90
	.type	compute_residue_b8block.73,@function
compute_residue_b8block.73:             # @compute_residue_b8block.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$199887498, -36(%rbp)   # imm = 0xBEA0A8A
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB83_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_4:                               # %for.cond4
                                        #   Parent Loop BB83_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB83_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB83_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB83_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_4
.LBB83_7:                               # %for.end
                                        #   in Loop: Header=BB83_2 Depth=1
	jmp	.LBB83_8
.LBB83_8:                               # %for.inc22
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_2
.LBB83_9:                               # %for.end24
	jmp	.LBB83_19
.LBB83_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB83_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB83_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB83_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB83_13:                              # %for.cond29
                                        #   Parent Loop BB83_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB83_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB83_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB83_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_13
.LBB83_16:                              # %for.end56
                                        #   in Loop: Header=BB83_11 Depth=1
	jmp	.LBB83_17
.LBB83_17:                              # %for.inc57
                                        #   in Loop: Header=BB83_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_11
.LBB83_18:                              # %for.end59
	jmp	.LBB83_19
.LBB83_19:                              # %if.end
	cmpl	$199887498, -36(%rbp)   # imm = 0xBEA0A8A
	jne	.LBB83_21
.LBB83_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_20
.Lfunc_end83:
	.size	compute_residue_b8block.73, .Lfunc_end83-compute_residue_b8block.73
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.74   # -- Begin function decode_one_b8block.74
	.p2align	4, 0x90
	.type	decode_one_b8block.74,@function
decode_one_b8block.74:                  # @decode_one_b8block.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$497733779, -84(%rbp)   # imm = 0x1DAAD093
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB84_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_4:                               # %for.cond9
                                        #   Parent Loop BB84_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB84_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB84_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB84_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_4
.LBB84_7:                               # %for.end
                                        #   in Loop: Header=BB84_2 Depth=1
	jmp	.LBB84_8
.LBB84_8:                               # %for.inc26
                                        #   in Loop: Header=BB84_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_2
.LBB84_9:                               # %for.end28
	jmp	.LBB84_96
.LBB84_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB84_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB84_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB84_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB84_31
.LBB84_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB84_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_17:                              # %for.cond40
                                        #   Parent Loop BB84_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB84_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB84_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB84_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_17
.LBB84_20:                              # %for.end49
                                        #   in Loop: Header=BB84_15 Depth=1
	jmp	.LBB84_21
.LBB84_21:                              # %for.inc50
                                        #   in Loop: Header=BB84_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_15
.LBB84_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB84_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB84_25:                              # %for.cond56
                                        #   Parent Loop BB84_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB84_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB84_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB84_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_25
.LBB84_28:                              # %for.end71
                                        #   in Loop: Header=BB84_23 Depth=1
	jmp	.LBB84_29
.LBB84_29:                              # %for.inc72
                                        #   in Loop: Header=BB84_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_23
.LBB84_30:                              # %for.end74
	jmp	.LBB84_60
.LBB84_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB84_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB84_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB84_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB84_36:                              # %for.cond83
                                        #   Parent Loop BB84_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB84_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB84_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB84_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_36
.LBB84_39:                              # %for.end120
                                        #   in Loop: Header=BB84_34 Depth=1
	jmp	.LBB84_40
.LBB84_40:                              # %for.inc121
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_34
.LBB84_41:                              # %for.end123
	jmp	.LBB84_51
.LBB84_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB84_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB84_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB84_45:                              # %for.cond129
                                        #   Parent Loop BB84_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB84_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB84_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB84_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_45
.LBB84_48:                              # %for.end145
                                        #   in Loop: Header=BB84_43 Depth=1
	jmp	.LBB84_49
.LBB84_49:                              # %for.inc146
                                        #   in Loop: Header=BB84_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_43
.LBB84_50:                              # %for.end148
	jmp	.LBB84_51
.LBB84_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB84_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_54:                              # %for.cond153
                                        #   Parent Loop BB84_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB84_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB84_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB84_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_54
.LBB84_57:                              # %for.end167
                                        #   in Loop: Header=BB84_52 Depth=1
	jmp	.LBB84_58
.LBB84_58:                              # %for.inc168
                                        #   in Loop: Header=BB84_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_52
.LBB84_59:                              # %for.end170
	jmp	.LBB84_60
.LBB84_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB84_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB84_66
.LBB84_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB84_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB84_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB84_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB84_86
.LBB84_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB84_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_69 Depth 2
                                        #       Child Loop BB84_74 Depth 3
                                        #         Child Loop BB84_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB84_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB84_69:                              # %for.cond197
                                        #   Parent Loop BB84_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB84_74 Depth 3
                                        #         Child Loop BB84_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB84_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB84_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB84_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB84_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB84_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB84_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB84_73:                              # %if.end218
                                        #   in Loop: Header=BB84_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB84_74:                              # %for.cond233
                                        #   Parent Loop BB84_67 Depth=1
                                        #     Parent Loop BB84_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB84_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB84_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB84_74 Depth=3
	movl	$0, -8(%rbp)
.LBB84_76:                              # %for.cond237
                                        #   Parent Loop BB84_67 Depth=1
                                        #     Parent Loop BB84_69 Depth=2
                                        #       Parent Loop BB84_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB84_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB84_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB84_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_76
.LBB84_79:                              # %for.end269
                                        #   in Loop: Header=BB84_74 Depth=3
	jmp	.LBB84_80
.LBB84_80:                              # %for.inc270
                                        #   in Loop: Header=BB84_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_74
.LBB84_81:                              # %for.end272
                                        #   in Loop: Header=BB84_69 Depth=2
	jmp	.LBB84_82
.LBB84_82:                              # %for.inc273
                                        #   in Loop: Header=BB84_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB84_69
.LBB84_83:                              # %for.end275
                                        #   in Loop: Header=BB84_67 Depth=1
	jmp	.LBB84_84
.LBB84_84:                              # %for.inc276
                                        #   in Loop: Header=BB84_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_67
.LBB84_85:                              # %for.end278
	jmp	.LBB84_95
.LBB84_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB84_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_89:                              # %for.cond284
                                        #   Parent Loop BB84_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB84_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB84_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB84_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_89
.LBB84_92:                              # %for.end310
                                        #   in Loop: Header=BB84_87 Depth=1
	jmp	.LBB84_93
.LBB84_93:                              # %for.inc311
                                        #   in Loop: Header=BB84_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_87
.LBB84_94:                              # %for.end313
	jmp	.LBB84_95
.LBB84_95:                              # %if.end314
	jmp	.LBB84_96
.LBB84_96:                              # %if.end315
	cmpl	$497733779, -84(%rbp)   # imm = 0x1DAAD093
	jne	.LBB84_98
.LBB84_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_97
.Lfunc_end84:
	.size	decode_one_b8block.74, .Lfunc_end84-decode_one_b8block.74
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.75  # -- Begin function Get_Reference_Block.75
	.p2align	4, 0x90
	.type	Get_Reference_Block.75,@function
Get_Reference_Block.75:                 # @Get_Reference_Block.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2129983618, -32(%rbp)  # imm = 0x7EF4F882
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB85_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	$0, -8(%rbp)
.LBB85_3:                               # %for.cond5
                                        #   Parent Loop BB85_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB85_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB85_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_3
.LBB85_6:                               # %for.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_7
.LBB85_7:                               # %for.inc14
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_1
.LBB85_8:                               # %for.end16
	cmpl	$2129983618, -32(%rbp)  # imm = 0x7EF4F882
	jne	.LBB85_10
.LBB85_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_9
.Lfunc_end85:
	.size	Get_Reference_Block.75, .Lfunc_end85-Get_Reference_Block.75
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.76       # -- Begin function DecOneForthPix.76
	.p2align	4, 0x90
	.type	DecOneForthPix.76,@function
DecOneForthPix.76:                      # @DecOneForthPix.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$517200174, -8(%rbp)    # imm = 0x1ED3D92E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB86_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_1
.LBB86_4:                               # %for.end
	cmpl	$517200174, -8(%rbp)    # imm = 0x1ED3D92E
	jne	.LBB86_6
.LBB86_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_5
.Lfunc_end86:
	.size	DecOneForthPix.76, .Lfunc_end86-DecOneForthPix.76
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.77       # -- Begin function DecOneForthPix.77
	.p2align	4, 0x90
	.type	DecOneForthPix.77,@function
DecOneForthPix.77:                      # @DecOneForthPix.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1371169359, -12(%rbp)  # imm = 0x51BA624F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB87_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_1
.LBB87_4:                               # %for.end
	cmpl	$1371169359, -12(%rbp)  # imm = 0x51BA624F
	jne	.LBB87_6
.LBB87_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_5
.Lfunc_end87:
	.size	DecOneForthPix.77, .Lfunc_end87-DecOneForthPix.77
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.78        # -- Begin function Conceal_Error.78
	.p2align	4, 0x90
	.type	Conceal_Error.78,@function
Conceal_Error.78:                       # @Conceal_Error.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$533669309, -68(%rbp)   # imm = 0x1FCF25BD
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB88_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB88_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB88_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB88_4:                               # %land.end
.LBB88_5:                               # %lor.end
.LBB88_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB88_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB88_9
.LBB88_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB88_14
.LBB88_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB88_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB88_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB88_12:                              # %land.end51
.LBB88_13:                              # %lor.end53
.LBB88_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB88_180
# %bb.15:                               # %land.end54
	movq	.LJTI88_0(,%rax,8), %rax
	jmpq	*%rax
.LBB88_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB88_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB88_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB88_18 Depth=1
	movl	$0, -4(%rbp)
.LBB88_20:                              # %for.cond68
                                        #   Parent Loop BB88_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB88_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB88_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_20
.LBB88_23:                              # %for.end
                                        #   in Loop: Header=BB88_18 Depth=1
	jmp	.LBB88_24
.LBB88_24:                              # %for.inc85
                                        #   in Loop: Header=BB88_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_18
.LBB88_25:                              # %for.end87
	jmp	.LBB88_35
.LBB88_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB88_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB88_27 Depth=1
	movl	$0, -4(%rbp)
.LBB88_29:                              # %for.cond92
                                        #   Parent Loop BB88_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB88_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB88_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_29
.LBB88_32:                              # %for.end104
                                        #   in Loop: Header=BB88_27 Depth=1
	jmp	.LBB88_33
.LBB88_33:                              # %for.inc105
                                        #   in Loop: Header=BB88_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_27
.LBB88_34:                              # %for.end107
	jmp	.LBB88_35
.LBB88_35:                              # %if.end
	jmp	.LBB88_180
.LBB88_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB88_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_39 Depth 2
                                        #       Child Loop BB88_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB88_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB88_37 Depth=1
	movl	$0, -12(%rbp)
.LBB88_39:                              # %for.cond113
                                        #   Parent Loop BB88_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB88_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB88_39 Depth=2
	movl	$0, -4(%rbp)
.LBB88_41:                              # %for.cond117
                                        #   Parent Loop BB88_37 Depth=1
                                        #     Parent Loop BB88_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB88_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB88_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB88_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_41
.LBB88_44:                              # %for.end141
                                        #   in Loop: Header=BB88_39 Depth=2
	jmp	.LBB88_45
.LBB88_45:                              # %for.inc142
                                        #   in Loop: Header=BB88_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_39
.LBB88_46:                              # %for.end144
                                        #   in Loop: Header=BB88_37 Depth=1
	jmp	.LBB88_47
.LBB88_47:                              # %for.inc145
                                        #   in Loop: Header=BB88_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_37
.LBB88_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB88_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB88_49 Depth=1
	movl	$0, -8(%rbp)
.LBB88_51:                              # %for.cond152
                                        #   Parent Loop BB88_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB88_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB88_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_51
.LBB88_54:                              # %for.end162
                                        #   in Loop: Header=BB88_49 Depth=1
	jmp	.LBB88_55
.LBB88_55:                              # %for.inc163
                                        #   in Loop: Header=BB88_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_49
.LBB88_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB88_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB88_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB88_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB88_59 Depth=1
	movl	$0, -4(%rbp)
.LBB88_61:                              # %for.cond175
                                        #   Parent Loop BB88_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB88_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB88_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_61
.LBB88_64:                              # %for.end195
                                        #   in Loop: Header=BB88_59 Depth=1
	jmp	.LBB88_65
.LBB88_65:                              # %for.inc196
                                        #   in Loop: Header=BB88_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_59
.LBB88_66:                              # %for.end198
	jmp	.LBB88_95
.LBB88_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB88_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB88_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_71 Depth 2
                                        #       Child Loop BB88_73 Depth 3
                                        #         Child Loop BB88_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB88_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB88_71:                              # %for.cond210
                                        #   Parent Loop BB88_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_73 Depth 3
                                        #         Child Loop BB88_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB88_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB88_73:                              # %for.cond236
                                        #   Parent Loop BB88_69 Depth=1
                                        #     Parent Loop BB88_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB88_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB88_73 Depth=3
	movl	$0, -4(%rbp)
.LBB88_75:                              # %for.cond240
                                        #   Parent Loop BB88_69 Depth=1
                                        #     Parent Loop BB88_71 Depth=2
                                        #       Parent Loop BB88_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB88_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB88_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB88_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_75
.LBB88_78:                              # %for.end259
                                        #   in Loop: Header=BB88_73 Depth=3
	jmp	.LBB88_79
.LBB88_79:                              # %for.inc260
                                        #   in Loop: Header=BB88_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_73
.LBB88_80:                              # %for.end262
                                        #   in Loop: Header=BB88_71 Depth=2
	jmp	.LBB88_81
.LBB88_81:                              # %for.inc263
                                        #   in Loop: Header=BB88_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_71
.LBB88_82:                              # %for.end265
                                        #   in Loop: Header=BB88_69 Depth=1
	jmp	.LBB88_83
.LBB88_83:                              # %for.inc266
                                        #   in Loop: Header=BB88_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_69
.LBB88_84:                              # %for.end268
	jmp	.LBB88_94
.LBB88_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB88_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB88_86 Depth=1
	movl	$0, -4(%rbp)
.LBB88_88:                              # %for.cond274
                                        #   Parent Loop BB88_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB88_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB88_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_88
.LBB88_91:                              # %for.end294
                                        #   in Loop: Header=BB88_86 Depth=1
	jmp	.LBB88_92
.LBB88_92:                              # %for.inc295
                                        #   in Loop: Header=BB88_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_86
.LBB88_93:                              # %for.end297
	jmp	.LBB88_94
.LBB88_94:                              # %if.end298
	jmp	.LBB88_95
.LBB88_95:                              # %if.end299
	jmp	.LBB88_105
.LBB88_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB88_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB88_97 Depth=1
	movl	$0, -4(%rbp)
.LBB88_99:                              # %for.cond305
                                        #   Parent Loop BB88_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB88_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB88_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_99
.LBB88_102:                             # %for.end317
                                        #   in Loop: Header=BB88_97 Depth=1
	jmp	.LBB88_103
.LBB88_103:                             # %for.inc318
                                        #   in Loop: Header=BB88_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_97
.LBB88_104:                             # %for.end320
	jmp	.LBB88_105
.LBB88_105:                             # %if.end321
	jmp	.LBB88_180
.LBB88_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB88_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB88_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_110 Depth 2
                                        #       Child Loop BB88_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB88_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB88_108 Depth=1
	movl	$0, -12(%rbp)
.LBB88_110:                             # %for.cond331
                                        #   Parent Loop BB88_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB88_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB88_110 Depth=2
	movl	$0, -4(%rbp)
.LBB88_112:                             # %for.cond335
                                        #   Parent Loop BB88_108 Depth=1
                                        #     Parent Loop BB88_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB88_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB88_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB88_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_112
.LBB88_115:                             # %for.end359
                                        #   in Loop: Header=BB88_110 Depth=2
	jmp	.LBB88_116
.LBB88_116:                             # %for.inc360
                                        #   in Loop: Header=BB88_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_110
.LBB88_117:                             # %for.end362
                                        #   in Loop: Header=BB88_108 Depth=1
	jmp	.LBB88_118
.LBB88_118:                             # %for.inc363
                                        #   in Loop: Header=BB88_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_108
.LBB88_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB88_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB88_120 Depth=1
	movl	$0, -8(%rbp)
.LBB88_122:                             # %for.cond370
                                        #   Parent Loop BB88_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB88_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB88_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_122
.LBB88_125:                             # %for.end380
                                        #   in Loop: Header=BB88_120 Depth=1
	jmp	.LBB88_126
.LBB88_126:                             # %for.inc381
                                        #   in Loop: Header=BB88_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_120
.LBB88_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB88_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB88_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB88_129 Depth=1
	movl	$0, -4(%rbp)
.LBB88_131:                             # %for.cond390
                                        #   Parent Loop BB88_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB88_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB88_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_131
.LBB88_134:                             # %for.end410
                                        #   in Loop: Header=BB88_129 Depth=1
	jmp	.LBB88_135
.LBB88_135:                             # %for.inc411
                                        #   in Loop: Header=BB88_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_129
.LBB88_136:                             # %for.end413
	jmp	.LBB88_156
.LBB88_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB88_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB88_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_141 Depth 2
                                        #       Child Loop BB88_143 Depth 3
                                        #         Child Loop BB88_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB88_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB88_141:                             # %for.cond425
                                        #   Parent Loop BB88_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_143 Depth 3
                                        #         Child Loop BB88_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB88_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB88_143:                             # %for.cond452
                                        #   Parent Loop BB88_139 Depth=1
                                        #     Parent Loop BB88_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB88_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB88_143 Depth=3
	movl	$0, -4(%rbp)
.LBB88_145:                             # %for.cond456
                                        #   Parent Loop BB88_139 Depth=1
                                        #     Parent Loop BB88_141 Depth=2
                                        #       Parent Loop BB88_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB88_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB88_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB88_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_145
.LBB88_148:                             # %for.end475
                                        #   in Loop: Header=BB88_143 Depth=3
	jmp	.LBB88_149
.LBB88_149:                             # %for.inc476
                                        #   in Loop: Header=BB88_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_143
.LBB88_150:                             # %for.end478
                                        #   in Loop: Header=BB88_141 Depth=2
	jmp	.LBB88_151
.LBB88_151:                             # %for.inc479
                                        #   in Loop: Header=BB88_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_141
.LBB88_152:                             # %for.end481
                                        #   in Loop: Header=BB88_139 Depth=1
	jmp	.LBB88_153
.LBB88_153:                             # %for.inc482
                                        #   in Loop: Header=BB88_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_139
.LBB88_154:                             # %for.end484
	jmp	.LBB88_155
.LBB88_155:                             # %if.end485
	jmp	.LBB88_156
.LBB88_156:                             # %if.end486
	jmp	.LBB88_157
.LBB88_157:                             # %if.end487
	jmp	.LBB88_180
.LBB88_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB88_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB88_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB88_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB88_161 Depth=1
	movl	$0, -4(%rbp)
.LBB88_163:                             # %for.cond499
                                        #   Parent Loop BB88_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB88_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB88_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_163
.LBB88_166:                             # %for.end519
                                        #   in Loop: Header=BB88_161 Depth=1
	jmp	.LBB88_167
.LBB88_167:                             # %for.inc520
                                        #   in Loop: Header=BB88_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_161
.LBB88_168:                             # %for.end522
	jmp	.LBB88_169
.LBB88_169:                             # %if.end523
	jmp	.LBB88_179
.LBB88_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB88_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB88_171 Depth=1
	movl	$0, -4(%rbp)
.LBB88_173:                             # %for.cond529
                                        #   Parent Loop BB88_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB88_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB88_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_173
.LBB88_176:                             # %for.end541
                                        #   in Loop: Header=BB88_171 Depth=1
	jmp	.LBB88_177
.LBB88_177:                             # %for.inc542
                                        #   in Loop: Header=BB88_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_171
.LBB88_178:                             # %for.end544
	jmp	.LBB88_179
.LBB88_179:                             # %if.end545
	jmp	.LBB88_180
.LBB88_180:                             # %sw.epilog
	cmpl	$533669309, -68(%rbp)   # imm = 0x1FCF25BD
	jne	.LBB88_182
.LBB88_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_181
.Lfunc_end88:
	.size	Conceal_Error.78, .Lfunc_end88-Conceal_Error.78
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI88_0:
	.quad	.LBB88_16
	.quad	.LBB88_158
	.quad	.LBB88_106
	.quad	.LBB88_180
	.quad	.LBB88_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.79
.LCPI89_0:
	.quad	4636737291354636288     # double 100
.LCPI89_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.79
	.p2align	4, 0x90
	.type	Build_Status_Map.79,@function
Build_Status_Map.79:                    # @Build_Status_Map.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1589901372, -44(%rbp)  # imm = 0x5EC3F83C
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB89_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	$0, -12(%rbp)
.LBB89_3:                               # %for.cond2
                                        #   Parent Loop BB89_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB89_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB89_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB89_13
.LBB89_6:                               # %if.then
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI89_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB89_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB89_8:                               # %if.end
                                        #   in Loop: Header=BB89_3 Depth=2
	callq	rand
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI89_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB89_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB89_10:                              # %if.end20
                                        #   in Loop: Header=BB89_3 Depth=2
	callq	rand
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI89_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB89_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	$1, -4(%rbp)
.LBB89_12:                              # %if.end29
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB89_13:                              # %if.end30
                                        #   in Loop: Header=BB89_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB89_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB89_18
.LBB89_15:                              # %if.else
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB89_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB89_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB89_17:                              # %if.end49
                                        #   in Loop: Header=BB89_3 Depth=2
	jmp	.LBB89_18
.LBB89_18:                              # %if.end50
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB89_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_3
.LBB89_20:                              # %for.end
                                        #   in Loop: Header=BB89_1 Depth=1
	jmp	.LBB89_21
.LBB89_21:                              # %for.inc53
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_1
.LBB89_22:                              # %for.end55
	cmpl	$1589901372, -44(%rbp)  # imm = 0x5EC3F83C
	jne	.LBB89_24
.LBB89_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_23
.Lfunc_end89:
	.size	Build_Status_Map.79, .Lfunc_end89-Build_Status_Map.79
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.80  # -- Begin function Get_Reference_Pixel.80
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.80,@function
Get_Reference_Pixel.80:                 # @Get_Reference_Pixel.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$575340603, -104(%rbp)  # imm = 0x224B003B
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB90_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB90_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB90_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB90_5
.LBB90_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB90_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB90_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB90_11
.LBB90_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB90_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB90_10
.LBB90_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB90_10:                              # %cond.end14
.LBB90_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB90_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB90_14
.LBB90_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB90_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB90_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB90_20
.LBB90_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB90_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB90_19
.LBB90_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB90_19:                              # %cond.end29
.LBB90_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_332
.LBB90_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB90_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB90_25
.LBB90_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB90_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB90_31
.LBB90_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB90_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB90_30
.LBB90_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB90_30:                              # %cond.end52
.LBB90_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB90_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB90_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB90_36
.LBB90_35:                              # %cond.false61
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_36:                              # %cond.end63
                                        #   in Loop: Header=BB90_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB90_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB90_42
.LBB90_38:                              # %cond.false68
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB90_41
.LBB90_40:                              # %cond.false73
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_41:                              # %cond.end75
                                        #   in Loop: Header=BB90_32 Depth=1
.LBB90_42:                              # %cond.end77
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB90_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_32
.LBB90_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_47
.LBB90_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB90_53
.LBB90_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_52
.LBB90_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_52:                              # %cond.end113
.LBB90_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB90_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB90_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB90_57
.LBB90_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB90_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB90_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB90_63
.LBB90_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB90_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB90_62
.LBB90_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB90_62:                              # %cond.end136
.LBB90_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB90_76
.LBB90_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB90_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB90_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB90_68
.LBB90_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB90_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB90_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB90_74
.LBB90_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB90_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB90_73
.LBB90_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB90_73:                              # %cond.end169
.LBB90_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB90_75:                              # %if.end
	jmp	.LBB90_76
.LBB90_76:                              # %if.end178
	jmp	.LBB90_331
.LBB90_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB90_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB90_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB90_81
.LBB90_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB90_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB90_87
.LBB90_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB90_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB90_86
.LBB90_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB90_86:                              # %cond.end197
.LBB90_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB90_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB90_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB90_92
.LBB90_91:                              # %cond.false209
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_92:                              # %cond.end211
                                        #   in Loop: Header=BB90_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB90_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB90_98
.LBB90_94:                              # %cond.false216
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB90_97
.LBB90_96:                              # %cond.false221
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_97:                              # %cond.end223
                                        #   in Loop: Header=BB90_88 Depth=1
.LBB90_98:                              # %cond.end225
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB90_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_88
.LBB90_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_103
.LBB90_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB90_109
.LBB90_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_108
.LBB90_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_108:                             # %cond.end266
.LBB90_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB90_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB90_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB90_113
.LBB90_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB90_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB90_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB90_119
.LBB90_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB90_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB90_118
.LBB90_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB90_118:                             # %cond.end287
.LBB90_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB90_132
.LBB90_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB90_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB90_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB90_124
.LBB90_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB90_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB90_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB90_130
.LBB90_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB90_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB90_129
.LBB90_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB90_129:                             # %cond.end320
.LBB90_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB90_131:                             # %if.end331
	jmp	.LBB90_132
.LBB90_132:                             # %if.end332
	jmp	.LBB90_330
.LBB90_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB90_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB90_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB90_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB90_139
.LBB90_138:                             # %cond.false345
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_139:                             # %cond.end347
                                        #   in Loop: Header=BB90_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB90_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB90_145
.LBB90_141:                             # %cond.false352
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB90_144
.LBB90_143:                             # %cond.false357
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_144:                             # %cond.end359
                                        #   in Loop: Header=BB90_135 Depth=1
.LBB90_145:                             # %cond.end361
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB90_146:                             # %for.cond363
                                        #   Parent Loop BB90_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB90_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB90_150
.LBB90_149:                             # %cond.false371
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_150:                             # %cond.end373
                                        #   in Loop: Header=BB90_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB90_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB90_156
.LBB90_152:                             # %cond.false378
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB90_155
.LBB90_154:                             # %cond.false383
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_155:                             # %cond.end385
                                        #   in Loop: Header=BB90_146 Depth=2
.LBB90_156:                             # %cond.end387
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB90_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_146
.LBB90_158:                             # %for.end401
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB90_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_135
.LBB90_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB90_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB90_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB90_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB90_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_161
.LBB90_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_167
.LBB90_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB90_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB90_173
.LBB90_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_172
.LBB90_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB90_172:                             # %cond.end449
.LBB90_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB90_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_177
.LBB90_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB90_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB90_183
.LBB90_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_182
.LBB90_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_182:                             # %cond.end486
.LBB90_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB90_196
.LBB90_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB90_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_188
.LBB90_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB90_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB90_194
.LBB90_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_193
.LBB90_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_193:                             # %cond.end526
.LBB90_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB90_195:                             # %if.end532
	jmp	.LBB90_196
.LBB90_196:                             # %if.end533
	jmp	.LBB90_329
.LBB90_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB90_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB90_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB90_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB90_203
.LBB90_202:                             # %cond.false546
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_203:                             # %cond.end548
                                        #   in Loop: Header=BB90_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB90_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB90_209
.LBB90_205:                             # %cond.false553
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB90_208
.LBB90_207:                             # %cond.false558
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_208:                             # %cond.end560
                                        #   in Loop: Header=BB90_199 Depth=1
.LBB90_209:                             # %cond.end562
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB90_210:                             # %for.cond564
                                        #   Parent Loop BB90_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB90_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB90_214
.LBB90_213:                             # %cond.false572
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_214:                             # %cond.end574
                                        #   in Loop: Header=BB90_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB90_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB90_220
.LBB90_216:                             # %cond.false579
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB90_219
.LBB90_218:                             # %cond.false584
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_219:                             # %cond.end586
                                        #   in Loop: Header=BB90_210 Depth=2
.LBB90_220:                             # %cond.end588
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB90_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_210
.LBB90_222:                             # %for.end602
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB90_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_199
.LBB90_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB90_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB90_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB90_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB90_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_225
.LBB90_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_231
.LBB90_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB90_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB90_237
.LBB90_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_236
.LBB90_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB90_236:                             # %cond.end650
.LBB90_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB90_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_241
.LBB90_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB90_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB90_247
.LBB90_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_246
.LBB90_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_246:                             # %cond.end687
.LBB90_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB90_258
.LBB90_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_251
.LBB90_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB90_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB90_257
.LBB90_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB90_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_256
.LBB90_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB90_256:                             # %cond.end724
.LBB90_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB90_258:                             # %if.end730
	jmp	.LBB90_328
.LBB90_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB90_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB90_262
.LBB90_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB90_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB90_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB90_265
.LBB90_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB90_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB90_271
.LBB90_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB90_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB90_270
.LBB90_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB90_270:                             # %cond.end753
.LBB90_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB90_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB90_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB90_276
.LBB90_275:                             # %cond.false765
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_276:                             # %cond.end767
                                        #   in Loop: Header=BB90_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB90_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB90_282
.LBB90_278:                             # %cond.false772
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB90_281
.LBB90_280:                             # %cond.false777
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB90_281:                             # %cond.end779
                                        #   in Loop: Header=BB90_272 Depth=1
.LBB90_282:                             # %cond.end781
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB90_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB90_272
.LBB90_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_287
.LBB90_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB90_293
.LBB90_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_292
.LBB90_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_292:                             # %cond.end822
.LBB90_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB90_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB90_296
.LBB90_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB90_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB90_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB90_299
.LBB90_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB90_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB90_305
.LBB90_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB90_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB90_304
.LBB90_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB90_304:                             # %cond.end847
.LBB90_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB90_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB90_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB90_310
.LBB90_309:                             # %cond.false859
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_310:                             # %cond.end861
                                        #   in Loop: Header=BB90_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB90_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB90_316
.LBB90_312:                             # %cond.false866
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB90_315
.LBB90_314:                             # %cond.false871
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB90_315:                             # %cond.end873
                                        #   in Loop: Header=BB90_306 Depth=1
.LBB90_316:                             # %cond.end875
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB90_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_306
.LBB90_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_321
.LBB90_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB90_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB90_327
.LBB90_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB90_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB90_326
.LBB90_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB90_326:                             # %cond.end916
.LBB90_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB90_328:                             # %if.end922
	jmp	.LBB90_329
.LBB90_329:                             # %if.end923
	jmp	.LBB90_330
.LBB90_330:                             # %if.end924
	jmp	.LBB90_331
.LBB90_331:                             # %if.end925
	jmp	.LBB90_332
.LBB90_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$575340603, -104(%rbp)  # imm = 0x224B003B
	jne	.LBB90_334
.LBB90_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_333
.Lfunc_end90:
	.size	Get_Reference_Pixel.80, .Lfunc_end90-Get_Reference_Pixel.80
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.81 # -- Begin function compute_residue_b8block.81
	.p2align	4, 0x90
	.type	compute_residue_b8block.81,@function
compute_residue_b8block.81:             # @compute_residue_b8block.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1444897153, -36(%rbp)  # imm = 0x561F6181
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB91_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB91_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_4:                               # %for.cond4
                                        #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB91_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB91_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB91_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_4
.LBB91_7:                               # %for.end
                                        #   in Loop: Header=BB91_2 Depth=1
	jmp	.LBB91_8
.LBB91_8:                               # %for.inc22
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_2
.LBB91_9:                               # %for.end24
	jmp	.LBB91_19
.LBB91_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB91_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB91_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB91_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB91_13:                              # %for.cond29
                                        #   Parent Loop BB91_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB91_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB91_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB91_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_13
.LBB91_16:                              # %for.end56
                                        #   in Loop: Header=BB91_11 Depth=1
	jmp	.LBB91_17
.LBB91_17:                              # %for.inc57
                                        #   in Loop: Header=BB91_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_11
.LBB91_18:                              # %for.end59
	jmp	.LBB91_19
.LBB91_19:                              # %if.end
	cmpl	$1444897153, -36(%rbp)  # imm = 0x561F6181
	jne	.LBB91_21
.LBB91_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_20
.Lfunc_end91:
	.size	compute_residue_b8block.81, .Lfunc_end91-compute_residue_b8block.81
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.82  # -- Begin function Get_Reference_Pixel.82
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.82,@function
Get_Reference_Pixel.82:                 # @Get_Reference_Pixel.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$191798213, -104(%rbp)  # imm = 0xB6E9BC5
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB92_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB92_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB92_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB92_5
.LBB92_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB92_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB92_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB92_11
.LBB92_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB92_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB92_10
.LBB92_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB92_10:                              # %cond.end14
.LBB92_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB92_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB92_14
.LBB92_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB92_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB92_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB92_20
.LBB92_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB92_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB92_19
.LBB92_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB92_19:                              # %cond.end29
.LBB92_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_332
.LBB92_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB92_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB92_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB92_25
.LBB92_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB92_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB92_31
.LBB92_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB92_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB92_30
.LBB92_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB92_30:                              # %cond.end52
.LBB92_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB92_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB92_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB92_36
.LBB92_35:                              # %cond.false61
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_36:                              # %cond.end63
                                        #   in Loop: Header=BB92_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB92_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB92_42
.LBB92_38:                              # %cond.false68
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB92_41
.LBB92_40:                              # %cond.false73
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_41:                              # %cond.end75
                                        #   in Loop: Header=BB92_32 Depth=1
.LBB92_42:                              # %cond.end77
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB92_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_32
.LBB92_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_47
.LBB92_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB92_53
.LBB92_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_52
.LBB92_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_52:                              # %cond.end113
.LBB92_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB92_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB92_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB92_57
.LBB92_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB92_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB92_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB92_63
.LBB92_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB92_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB92_62
.LBB92_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB92_62:                              # %cond.end136
.LBB92_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB92_76
.LBB92_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB92_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB92_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB92_68
.LBB92_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB92_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB92_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB92_74
.LBB92_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB92_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB92_73
.LBB92_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB92_73:                              # %cond.end169
.LBB92_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB92_75:                              # %if.end
	jmp	.LBB92_76
.LBB92_76:                              # %if.end178
	jmp	.LBB92_331
.LBB92_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB92_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB92_81
.LBB92_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB92_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB92_87
.LBB92_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB92_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB92_86
.LBB92_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB92_86:                              # %cond.end197
.LBB92_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB92_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB92_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB92_92
.LBB92_91:                              # %cond.false209
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_92:                              # %cond.end211
                                        #   in Loop: Header=BB92_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB92_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB92_98
.LBB92_94:                              # %cond.false216
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB92_97
.LBB92_96:                              # %cond.false221
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_97:                              # %cond.end223
                                        #   in Loop: Header=BB92_88 Depth=1
.LBB92_98:                              # %cond.end225
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB92_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_88
.LBB92_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_103
.LBB92_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB92_109
.LBB92_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_108
.LBB92_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_108:                             # %cond.end266
.LBB92_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB92_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB92_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB92_113
.LBB92_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB92_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB92_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB92_119
.LBB92_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB92_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB92_118
.LBB92_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB92_118:                             # %cond.end287
.LBB92_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB92_132
.LBB92_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB92_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB92_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB92_124
.LBB92_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB92_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB92_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB92_130
.LBB92_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB92_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB92_129
.LBB92_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB92_129:                             # %cond.end320
.LBB92_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB92_131:                             # %if.end331
	jmp	.LBB92_132
.LBB92_132:                             # %if.end332
	jmp	.LBB92_330
.LBB92_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB92_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB92_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB92_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB92_139
.LBB92_138:                             # %cond.false345
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_139:                             # %cond.end347
                                        #   in Loop: Header=BB92_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB92_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB92_145
.LBB92_141:                             # %cond.false352
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB92_144
.LBB92_143:                             # %cond.false357
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_144:                             # %cond.end359
                                        #   in Loop: Header=BB92_135 Depth=1
.LBB92_145:                             # %cond.end361
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB92_146:                             # %for.cond363
                                        #   Parent Loop BB92_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB92_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB92_150
.LBB92_149:                             # %cond.false371
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_150:                             # %cond.end373
                                        #   in Loop: Header=BB92_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB92_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_156
.LBB92_152:                             # %cond.false378
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB92_155
.LBB92_154:                             # %cond.false383
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_155:                             # %cond.end385
                                        #   in Loop: Header=BB92_146 Depth=2
.LBB92_156:                             # %cond.end387
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB92_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_146
.LBB92_158:                             # %for.end401
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB92_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_135
.LBB92_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB92_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB92_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB92_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB92_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_161
.LBB92_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_167
.LBB92_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB92_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB92_173
.LBB92_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_172
.LBB92_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB92_172:                             # %cond.end449
.LBB92_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB92_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_177
.LBB92_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB92_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB92_183
.LBB92_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_182
.LBB92_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_182:                             # %cond.end486
.LBB92_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB92_196
.LBB92_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB92_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_188
.LBB92_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB92_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB92_194
.LBB92_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_193
.LBB92_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_193:                             # %cond.end526
.LBB92_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB92_195:                             # %if.end532
	jmp	.LBB92_196
.LBB92_196:                             # %if.end533
	jmp	.LBB92_329
.LBB92_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB92_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB92_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB92_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB92_203
.LBB92_202:                             # %cond.false546
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_203:                             # %cond.end548
                                        #   in Loop: Header=BB92_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB92_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB92_209
.LBB92_205:                             # %cond.false553
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB92_208
.LBB92_207:                             # %cond.false558
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_208:                             # %cond.end560
                                        #   in Loop: Header=BB92_199 Depth=1
.LBB92_209:                             # %cond.end562
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB92_210:                             # %for.cond564
                                        #   Parent Loop BB92_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB92_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB92_214
.LBB92_213:                             # %cond.false572
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_214:                             # %cond.end574
                                        #   in Loop: Header=BB92_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB92_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB92_220
.LBB92_216:                             # %cond.false579
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB92_219
.LBB92_218:                             # %cond.false584
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_219:                             # %cond.end586
                                        #   in Loop: Header=BB92_210 Depth=2
.LBB92_220:                             # %cond.end588
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB92_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_210
.LBB92_222:                             # %for.end602
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB92_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_199
.LBB92_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB92_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB92_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB92_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB92_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_225
.LBB92_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_231
.LBB92_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB92_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB92_237
.LBB92_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_236
.LBB92_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB92_236:                             # %cond.end650
.LBB92_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB92_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_241
.LBB92_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB92_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB92_247
.LBB92_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_246
.LBB92_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_246:                             # %cond.end687
.LBB92_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB92_258
.LBB92_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_251
.LBB92_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB92_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB92_257
.LBB92_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB92_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_256
.LBB92_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB92_256:                             # %cond.end724
.LBB92_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB92_258:                             # %if.end730
	jmp	.LBB92_328
.LBB92_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB92_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB92_262
.LBB92_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB92_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB92_265
.LBB92_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB92_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB92_271
.LBB92_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB92_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB92_270
.LBB92_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB92_270:                             # %cond.end753
.LBB92_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB92_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB92_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB92_276
.LBB92_275:                             # %cond.false765
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_276:                             # %cond.end767
                                        #   in Loop: Header=BB92_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB92_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB92_282
.LBB92_278:                             # %cond.false772
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB92_281
.LBB92_280:                             # %cond.false777
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB92_281:                             # %cond.end779
                                        #   in Loop: Header=BB92_272 Depth=1
.LBB92_282:                             # %cond.end781
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB92_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_272
.LBB92_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_287
.LBB92_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB92_293
.LBB92_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_292
.LBB92_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_292:                             # %cond.end822
.LBB92_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB92_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB92_296
.LBB92_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB92_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB92_299
.LBB92_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB92_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB92_305
.LBB92_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB92_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB92_304
.LBB92_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB92_304:                             # %cond.end847
.LBB92_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB92_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB92_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB92_310
.LBB92_309:                             # %cond.false859
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_310:                             # %cond.end861
                                        #   in Loop: Header=BB92_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB92_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB92_316
.LBB92_312:                             # %cond.false866
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB92_315
.LBB92_314:                             # %cond.false871
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB92_315:                             # %cond.end873
                                        #   in Loop: Header=BB92_306 Depth=1
.LBB92_316:                             # %cond.end875
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB92_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_306
.LBB92_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_321
.LBB92_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB92_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB92_327
.LBB92_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB92_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB92_326
.LBB92_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB92_326:                             # %cond.end916
.LBB92_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB92_328:                             # %if.end922
	jmp	.LBB92_329
.LBB92_329:                             # %if.end923
	jmp	.LBB92_330
.LBB92_330:                             # %if.end924
	jmp	.LBB92_331
.LBB92_331:                             # %if.end925
	jmp	.LBB92_332
.LBB92_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$191798213, -104(%rbp)  # imm = 0xB6E9BC5
	jne	.LBB92_334
.LBB92_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_333
.Lfunc_end92:
	.size	Get_Reference_Pixel.82, .Lfunc_end92-Get_Reference_Pixel.82
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.83  # -- Begin function Get_Reference_Block.83
	.p2align	4, 0x90
	.type	Get_Reference_Block.83,@function
Get_Reference_Block.83:                 # @Get_Reference_Block.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1949072149, -24(%rbp)  # imm = 0x742C7B15
	movq	%rdi, -48(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB93_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	$0, -8(%rbp)
.LBB93_3:                               # %for.cond5
                                        #   Parent Loop BB93_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB93_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB93_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB93_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_3
.LBB93_6:                               # %for.end
                                        #   in Loop: Header=BB93_1 Depth=1
	jmp	.LBB93_7
.LBB93_7:                               # %for.inc14
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_1
.LBB93_8:                               # %for.end16
	cmpl	$1949072149, -24(%rbp)  # imm = 0x742C7B15
	jne	.LBB93_10
.LBB93_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_9
.Lfunc_end93:
	.size	Get_Reference_Block.83, .Lfunc_end93-Get_Reference_Block.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.84
.LCPI94_0:
	.quad	4636737291354636288     # double 100
.LCPI94_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.84
	.p2align	4, 0x90
	.type	Build_Status_Map.84,@function
Build_Status_Map.84:                    # @Build_Status_Map.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$964623714, -40(%rbp)   # imm = 0x397EFD62
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB94_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB94_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	$0, -12(%rbp)
.LBB94_3:                               # %for.cond2
                                        #   Parent Loop BB94_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB94_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB94_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB94_13
.LBB94_6:                               # %if.then
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB94_8:                               # %if.end
                                        #   in Loop: Header=BB94_3 Depth=2
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB94_10:                              # %if.end20
                                        #   in Loop: Header=BB94_3 Depth=2
	callq	rand
	vmovsd	.LCPI94_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI94_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB94_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	$1, -4(%rbp)
.LBB94_12:                              # %if.end29
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB94_13:                              # %if.end30
                                        #   in Loop: Header=BB94_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB94_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB94_18
.LBB94_15:                              # %if.else
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB94_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB94_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB94_17:                              # %if.end49
                                        #   in Loop: Header=BB94_3 Depth=2
	jmp	.LBB94_18
.LBB94_18:                              # %if.end50
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB94_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB94_3
.LBB94_20:                              # %for.end
                                        #   in Loop: Header=BB94_1 Depth=1
	jmp	.LBB94_21
.LBB94_21:                              # %for.inc53
                                        #   in Loop: Header=BB94_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_1
.LBB94_22:                              # %for.end55
	cmpl	$964623714, -40(%rbp)   # imm = 0x397EFD62
	jne	.LBB94_24
.LBB94_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_23
.Lfunc_end94:
	.size	Build_Status_Map.84, .Lfunc_end94-Build_Status_Map.84
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.85
.LCPI95_0:
	.quad	4636737291354636288     # double 100
.LCPI95_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.85
	.p2align	4, 0x90
	.type	Build_Status_Map.85,@function
Build_Status_Map.85:                    # @Build_Status_Map.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$988605569, -40(%rbp)   # imm = 0x3AECEC81
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB95_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	$0, -12(%rbp)
.LBB95_3:                               # %for.cond2
                                        #   Parent Loop BB95_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB95_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB95_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB95_13
.LBB95_6:                               # %if.then
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI95_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI95_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB95_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB95_8:                               # %if.end
                                        #   in Loop: Header=BB95_3 Depth=2
	callq	rand
	vmovsd	.LCPI95_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI95_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB95_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB95_10:                              # %if.end20
                                        #   in Loop: Header=BB95_3 Depth=2
	callq	rand
	vmovsd	.LCPI95_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI95_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB95_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	$1, -4(%rbp)
.LBB95_12:                              # %if.end29
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB95_13:                              # %if.end30
                                        #   in Loop: Header=BB95_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB95_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB95_18
.LBB95_15:                              # %if.else
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB95_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB95_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB95_17:                              # %if.end49
                                        #   in Loop: Header=BB95_3 Depth=2
	jmp	.LBB95_18
.LBB95_18:                              # %if.end50
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB95_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_3
.LBB95_20:                              # %for.end
                                        #   in Loop: Header=BB95_1 Depth=1
	jmp	.LBB95_21
.LBB95_21:                              # %for.inc53
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_1
.LBB95_22:                              # %for.end55
	cmpl	$988605569, -40(%rbp)   # imm = 0x3AECEC81
	jne	.LBB95_24
.LBB95_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_23
.Lfunc_end95:
	.size	Build_Status_Map.85, .Lfunc_end95-Build_Status_Map.85
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.86  # -- Begin function Get_Reference_Block.86
	.p2align	4, 0x90
	.type	Get_Reference_Block.86,@function
Get_Reference_Block.86:                 # @Get_Reference_Block.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$398659062, -32(%rbp)   # imm = 0x17C30DF6
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB96_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB96_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	$0, -8(%rbp)
.LBB96_3:                               # %for.cond5
                                        #   Parent Loop BB96_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB96_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB96_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB96_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB96_3
.LBB96_6:                               # %for.end
                                        #   in Loop: Header=BB96_1 Depth=1
	jmp	.LBB96_7
.LBB96_7:                               # %for.inc14
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_8:                               # %for.end16
	cmpl	$398659062, -32(%rbp)   # imm = 0x17C30DF6
	jne	.LBB96_10
.LBB96_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_9
.Lfunc_end96:
	.size	Get_Reference_Block.86, .Lfunc_end96-Get_Reference_Block.86
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.87   # -- Begin function decode_one_b8block.87
	.p2align	4, 0x90
	.type	decode_one_b8block.87,@function
decode_one_b8block.87:                  # @decode_one_b8block.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$235663022, -84(%rbp)   # imm = 0xE0BEEAE
	movl	%edi, -52(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB97_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_4:                               # %for.cond9
                                        #   Parent Loop BB97_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB97_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB97_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_4
.LBB97_7:                               # %for.end
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_8
.LBB97_8:                               # %for.inc26
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_2
.LBB97_9:                               # %for.end28
	jmp	.LBB97_96
.LBB97_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB97_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB97_31
.LBB97_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB97_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_17:                              # %for.cond40
                                        #   Parent Loop BB97_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB97_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB97_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_17
.LBB97_20:                              # %for.end49
                                        #   in Loop: Header=BB97_15 Depth=1
	jmp	.LBB97_21
.LBB97_21:                              # %for.inc50
                                        #   in Loop: Header=BB97_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_15
.LBB97_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB97_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_25:                              # %for.cond56
                                        #   Parent Loop BB97_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB97_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB97_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_25
.LBB97_28:                              # %for.end71
                                        #   in Loop: Header=BB97_23 Depth=1
	jmp	.LBB97_29
.LBB97_29:                              # %for.inc72
                                        #   in Loop: Header=BB97_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_23
.LBB97_30:                              # %for.end74
	jmp	.LBB97_60
.LBB97_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB97_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB97_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB97_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_36:                              # %for.cond83
                                        #   Parent Loop BB97_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB97_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB97_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_36
.LBB97_39:                              # %for.end120
                                        #   in Loop: Header=BB97_34 Depth=1
	jmp	.LBB97_40
.LBB97_40:                              # %for.inc121
                                        #   in Loop: Header=BB97_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_34
.LBB97_41:                              # %for.end123
	jmp	.LBB97_51
.LBB97_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB97_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_45:                              # %for.cond129
                                        #   Parent Loop BB97_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB97_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB97_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_45
.LBB97_48:                              # %for.end145
                                        #   in Loop: Header=BB97_43 Depth=1
	jmp	.LBB97_49
.LBB97_49:                              # %for.inc146
                                        #   in Loop: Header=BB97_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_43
.LBB97_50:                              # %for.end148
	jmp	.LBB97_51
.LBB97_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB97_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_54:                              # %for.cond153
                                        #   Parent Loop BB97_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB97_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB97_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_54
.LBB97_57:                              # %for.end167
                                        #   in Loop: Header=BB97_52 Depth=1
	jmp	.LBB97_58
.LBB97_58:                              # %for.inc168
                                        #   in Loop: Header=BB97_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_52
.LBB97_59:                              # %for.end170
	jmp	.LBB97_60
.LBB97_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB97_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB97_66
.LBB97_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB97_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB97_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB97_86
.LBB97_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB97_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_69 Depth 2
                                        #       Child Loop BB97_74 Depth 3
                                        #         Child Loop BB97_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB97_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB97_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB97_69:                              # %for.cond197
                                        #   Parent Loop BB97_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_74 Depth 3
                                        #         Child Loop BB97_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB97_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB97_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB97_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB97_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB97_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB97_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB97_73:                              # %if.end218
                                        #   in Loop: Header=BB97_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB97_74:                              # %for.cond233
                                        #   Parent Loop BB97_67 Depth=1
                                        #     Parent Loop BB97_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB97_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB97_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB97_74 Depth=3
	movl	$0, -8(%rbp)
.LBB97_76:                              # %for.cond237
                                        #   Parent Loop BB97_67 Depth=1
                                        #     Parent Loop BB97_69 Depth=2
                                        #       Parent Loop BB97_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB97_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB97_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB97_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_76
.LBB97_79:                              # %for.end269
                                        #   in Loop: Header=BB97_74 Depth=3
	jmp	.LBB97_80
.LBB97_80:                              # %for.inc270
                                        #   in Loop: Header=BB97_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_74
.LBB97_81:                              # %for.end272
                                        #   in Loop: Header=BB97_69 Depth=2
	jmp	.LBB97_82
.LBB97_82:                              # %for.inc273
                                        #   in Loop: Header=BB97_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_69
.LBB97_83:                              # %for.end275
                                        #   in Loop: Header=BB97_67 Depth=1
	jmp	.LBB97_84
.LBB97_84:                              # %for.inc276
                                        #   in Loop: Header=BB97_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_67
.LBB97_85:                              # %for.end278
	jmp	.LBB97_95
.LBB97_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB97_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB97_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB97_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB97_89:                              # %for.cond284
                                        #   Parent Loop BB97_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB97_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB97_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB97_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB97_89
.LBB97_92:                              # %for.end310
                                        #   in Loop: Header=BB97_87 Depth=1
	jmp	.LBB97_93
.LBB97_93:                              # %for.inc311
                                        #   in Loop: Header=BB97_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB97_87
.LBB97_94:                              # %for.end313
	jmp	.LBB97_95
.LBB97_95:                              # %if.end314
	jmp	.LBB97_96
.LBB97_96:                              # %if.end315
	cmpl	$235663022, -84(%rbp)   # imm = 0xE0BEEAE
	jne	.LBB97_98
.LBB97_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_97
.Lfunc_end97:
	.size	decode_one_b8block.87, .Lfunc_end97-decode_one_b8block.87
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.88 # -- Begin function compute_residue_b8block.88
	.p2align	4, 0x90
	.type	compute_residue_b8block.88,@function
compute_residue_b8block.88:             # @compute_residue_b8block.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1412104540, -36(%rbp)  # imm = 0x542B015C
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB98_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB98_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_4:                               # %for.cond4
                                        #   Parent Loop BB98_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB98_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB98_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_4
.LBB98_7:                               # %for.end
                                        #   in Loop: Header=BB98_2 Depth=1
	jmp	.LBB98_8
.LBB98_8:                               # %for.inc22
                                        #   in Loop: Header=BB98_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_2
.LBB98_9:                               # %for.end24
	jmp	.LBB98_19
.LBB98_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB98_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB98_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB98_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB98_13:                              # %for.cond29
                                        #   Parent Loop BB98_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB98_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB98_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB98_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB98_13
.LBB98_16:                              # %for.end56
                                        #   in Loop: Header=BB98_11 Depth=1
	jmp	.LBB98_17
.LBB98_17:                              # %for.inc57
                                        #   in Loop: Header=BB98_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_11
.LBB98_18:                              # %for.end59
	jmp	.LBB98_19
.LBB98_19:                              # %if.end
	cmpl	$1412104540, -36(%rbp)  # imm = 0x542B015C
	jne	.LBB98_21
.LBB98_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_20
.Lfunc_end98:
	.size	compute_residue_b8block.88, .Lfunc_end98-compute_residue_b8block.88
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.89    # -- Begin function Error_Concealment.89
	.p2align	4, 0x90
	.type	Error_Concealment.89,@function
Error_Concealment.89:                   # @Error_Concealment.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1471177198, -16(%rbp)  # imm = 0x57B061EE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB99_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	$0, -4(%rbp)
.LBB99_3:                               # %for.cond2
                                        #   Parent Loop BB99_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB99_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB99_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB99_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB99_6:                               # %if.end
                                        #   in Loop: Header=BB99_3 Depth=2
	jmp	.LBB99_7
.LBB99_7:                               # %for.inc
                                        #   in Loop: Header=BB99_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_3
.LBB99_8:                               # %for.end
                                        #   in Loop: Header=BB99_1 Depth=1
	jmp	.LBB99_9
.LBB99_9:                               # %for.inc7
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_1
.LBB99_10:                              # %for.end9
	cmpl	$1471177198, -16(%rbp)  # imm = 0x57B061EE
	jne	.LBB99_12
.LBB99_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_11
.Lfunc_end99:
	.size	Error_Concealment.89, .Lfunc_end99-Error_Concealment.89
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.90 # -- Begin function compute_residue_b8block.90
	.p2align	4, 0x90
	.type	compute_residue_b8block.90,@function
compute_residue_b8block.90:             # @compute_residue_b8block.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1739132798, -36(%rbp)  # imm = 0x67A90F7E
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	-24(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB100_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_4:                              # %for.cond4
                                        #   Parent Loop BB100_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB100_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB100_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_4
.LBB100_7:                              # %for.end
                                        #   in Loop: Header=BB100_2 Depth=1
	jmp	.LBB100_8
.LBB100_8:                              # %for.inc22
                                        #   in Loop: Header=BB100_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_2
.LBB100_9:                              # %for.end24
	jmp	.LBB100_19
.LBB100_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB100_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB100_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB100_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB100_13:                             # %for.cond29
                                        #   Parent Loop BB100_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB100_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB100_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB100_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_13
.LBB100_16:                             # %for.end56
                                        #   in Loop: Header=BB100_11 Depth=1
	jmp	.LBB100_17
.LBB100_17:                             # %for.inc57
                                        #   in Loop: Header=BB100_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_11
.LBB100_18:                             # %for.end59
	jmp	.LBB100_19
.LBB100_19:                             # %if.end
	cmpl	$1739132798, -36(%rbp)  # imm = 0x67A90F7E
	jne	.LBB100_21
.LBB100_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_20
.Lfunc_end100:
	.size	compute_residue_b8block.90, .Lfunc_end100-compute_residue_b8block.90
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.91   # -- Begin function decode_one_b8block.91
	.p2align	4, 0x90
	.type	decode_one_b8block.91,@function
decode_one_b8block.91:                  # @decode_one_b8block.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$351132560, -84(%rbp)   # imm = 0x14EDDB90
	movl	%edi, -52(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB101_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB101_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_4:                              # %for.cond9
                                        #   Parent Loop BB101_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB101_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB101_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_4
.LBB101_7:                              # %for.end
                                        #   in Loop: Header=BB101_2 Depth=1
	jmp	.LBB101_8
.LBB101_8:                              # %for.inc26
                                        #   in Loop: Header=BB101_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_2
.LBB101_9:                              # %for.end28
	jmp	.LBB101_96
.LBB101_10:                             # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB101_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB101_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB101_31
.LBB101_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB101_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_17:                             # %for.cond40
                                        #   Parent Loop BB101_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB101_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB101_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_17
.LBB101_20:                             # %for.end49
                                        #   in Loop: Header=BB101_15 Depth=1
	jmp	.LBB101_21
.LBB101_21:                             # %for.inc50
                                        #   in Loop: Header=BB101_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_15
.LBB101_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB101_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_25:                             # %for.cond56
                                        #   Parent Loop BB101_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB101_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB101_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_25
.LBB101_28:                             # %for.end71
                                        #   in Loop: Header=BB101_23 Depth=1
	jmp	.LBB101_29
.LBB101_29:                             # %for.inc72
                                        #   in Loop: Header=BB101_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_23
.LBB101_30:                             # %for.end74
	jmp	.LBB101_60
.LBB101_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB101_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB101_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_36:                             # %for.cond83
                                        #   Parent Loop BB101_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB101_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB101_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_36
.LBB101_39:                             # %for.end120
                                        #   in Loop: Header=BB101_34 Depth=1
	jmp	.LBB101_40
.LBB101_40:                             # %for.inc121
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_34
.LBB101_41:                             # %for.end123
	jmp	.LBB101_51
.LBB101_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB101_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_45:                             # %for.cond129
                                        #   Parent Loop BB101_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB101_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB101_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_45
.LBB101_48:                             # %for.end145
                                        #   in Loop: Header=BB101_43 Depth=1
	jmp	.LBB101_49
.LBB101_49:                             # %for.inc146
                                        #   in Loop: Header=BB101_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_43
.LBB101_50:                             # %for.end148
	jmp	.LBB101_51
.LBB101_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB101_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_54:                             # %for.cond153
                                        #   Parent Loop BB101_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB101_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB101_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_54
.LBB101_57:                             # %for.end167
                                        #   in Loop: Header=BB101_52 Depth=1
	jmp	.LBB101_58
.LBB101_58:                             # %for.inc168
                                        #   in Loop: Header=BB101_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_52
.LBB101_59:                             # %for.end170
	jmp	.LBB101_60
.LBB101_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB101_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB101_66
.LBB101_62:                             # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB101_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB101_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB101_86
.LBB101_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB101_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_69 Depth 2
                                        #       Child Loop BB101_74 Depth 3
                                        #         Child Loop BB101_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB101_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB101_69:                             # %for.cond197
                                        #   Parent Loop BB101_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB101_74 Depth 3
                                        #         Child Loop BB101_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB101_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB101_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB101_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB101_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB101_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB101_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB101_73:                             # %if.end218
                                        #   in Loop: Header=BB101_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB101_74:                             # %for.cond233
                                        #   Parent Loop BB101_67 Depth=1
                                        #     Parent Loop BB101_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB101_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB101_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB101_74 Depth=3
	movl	$0, -8(%rbp)
.LBB101_76:                             # %for.cond237
                                        #   Parent Loop BB101_67 Depth=1
                                        #     Parent Loop BB101_69 Depth=2
                                        #       Parent Loop BB101_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB101_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB101_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB101_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_76
.LBB101_79:                             # %for.end269
                                        #   in Loop: Header=BB101_74 Depth=3
	jmp	.LBB101_80
.LBB101_80:                             # %for.inc270
                                        #   in Loop: Header=BB101_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_74
.LBB101_81:                             # %for.end272
                                        #   in Loop: Header=BB101_69 Depth=2
	jmp	.LBB101_82
.LBB101_82:                             # %for.inc273
                                        #   in Loop: Header=BB101_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_69
.LBB101_83:                             # %for.end275
                                        #   in Loop: Header=BB101_67 Depth=1
	jmp	.LBB101_84
.LBB101_84:                             # %for.inc276
                                        #   in Loop: Header=BB101_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB101_67
.LBB101_85:                             # %for.end278
	jmp	.LBB101_95
.LBB101_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB101_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB101_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_89:                             # %for.cond284
                                        #   Parent Loop BB101_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB101_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB101_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB101_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_89
.LBB101_92:                             # %for.end310
                                        #   in Loop: Header=BB101_87 Depth=1
	jmp	.LBB101_93
.LBB101_93:                             # %for.inc311
                                        #   in Loop: Header=BB101_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_87
.LBB101_94:                             # %for.end313
	jmp	.LBB101_95
.LBB101_95:                             # %if.end314
	jmp	.LBB101_96
.LBB101_96:                             # %if.end315
	cmpl	$351132560, -84(%rbp)   # imm = 0x14EDDB90
	jne	.LBB101_98
.LBB101_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_97
.Lfunc_end101:
	.size	decode_one_b8block.91, .Lfunc_end101-decode_one_b8block.91
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.92
.LCPI102_0:
	.quad	4636737291354636288     # double 100
.LCPI102_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.92
	.p2align	4, 0x90
	.type	Build_Status_Map.92,@function
Build_Status_Map.92:                    # @Build_Status_Map.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$292315336, -36(%rbp)   # imm = 0x116C60C8
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB102_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	$0, -8(%rbp)
.LBB102_3:                              # %for.cond2
                                        #   Parent Loop BB102_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB102_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB102_13
.LBB102_6:                              # %if.then
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB102_8:                              # %if.end
                                        #   in Loop: Header=BB102_3 Depth=2
	callq	rand
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB102_10:                             # %if.end20
                                        #   in Loop: Header=BB102_3 Depth=2
	callq	rand
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI102_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB102_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	$1, -4(%rbp)
.LBB102_12:                             # %if.end29
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB102_13:                             # %if.end30
                                        #   in Loop: Header=BB102_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB102_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB102_18
.LBB102_15:                             # %if.else
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB102_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB102_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB102_17:                             # %if.end49
                                        #   in Loop: Header=BB102_3 Depth=2
	jmp	.LBB102_18
.LBB102_18:                             # %if.end50
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB102_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_3
.LBB102_20:                             # %for.end
                                        #   in Loop: Header=BB102_1 Depth=1
	jmp	.LBB102_21
.LBB102_21:                             # %for.inc53
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB102_1
.LBB102_22:                             # %for.end55
	cmpl	$292315336, -36(%rbp)   # imm = 0x116C60C8
	jne	.LBB102_24
.LBB102_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_23
.Lfunc_end102:
	.size	Build_Status_Map.92, .Lfunc_end102-Build_Status_Map.92
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.93   # -- Begin function decode_one_b8block.93
	.p2align	4, 0x90
	.type	decode_one_b8block.93,@function
decode_one_b8block.93:                  # @decode_one_b8block.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$376798092, -84(%rbp)   # imm = 0x16757B8C
	movl	%edi, -56(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB103_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_4:                              # %for.cond9
                                        #   Parent Loop BB103_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB103_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB103_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_4
.LBB103_7:                              # %for.end
                                        #   in Loop: Header=BB103_2 Depth=1
	jmp	.LBB103_8
.LBB103_8:                              # %for.inc26
                                        #   in Loop: Header=BB103_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_2
.LBB103_9:                              # %for.end28
	jmp	.LBB103_96
.LBB103_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB103_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB103_31
.LBB103_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB103_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_17:                             # %for.cond40
                                        #   Parent Loop BB103_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB103_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB103_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_17
.LBB103_20:                             # %for.end49
                                        #   in Loop: Header=BB103_15 Depth=1
	jmp	.LBB103_21
.LBB103_21:                             # %for.inc50
                                        #   in Loop: Header=BB103_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_15
.LBB103_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_25:                             # %for.cond56
                                        #   Parent Loop BB103_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB103_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB103_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_25
.LBB103_28:                             # %for.end71
                                        #   in Loop: Header=BB103_23 Depth=1
	jmp	.LBB103_29
.LBB103_29:                             # %for.inc72
                                        #   in Loop: Header=BB103_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_23
.LBB103_30:                             # %for.end74
	jmp	.LBB103_60
.LBB103_31:                             # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB103_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB103_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB103_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_36:                             # %for.cond83
                                        #   Parent Loop BB103_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB103_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB103_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_36
.LBB103_39:                             # %for.end120
                                        #   in Loop: Header=BB103_34 Depth=1
	jmp	.LBB103_40
.LBB103_40:                             # %for.inc121
                                        #   in Loop: Header=BB103_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_34
.LBB103_41:                             # %for.end123
	jmp	.LBB103_51
.LBB103_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_45:                             # %for.cond129
                                        #   Parent Loop BB103_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB103_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB103_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_45
.LBB103_48:                             # %for.end145
                                        #   in Loop: Header=BB103_43 Depth=1
	jmp	.LBB103_49
.LBB103_49:                             # %for.inc146
                                        #   in Loop: Header=BB103_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_43
.LBB103_50:                             # %for.end148
	jmp	.LBB103_51
.LBB103_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_54:                             # %for.cond153
                                        #   Parent Loop BB103_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB103_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB103_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_54
.LBB103_57:                             # %for.end167
                                        #   in Loop: Header=BB103_52 Depth=1
	jmp	.LBB103_58
.LBB103_58:                             # %for.inc168
                                        #   in Loop: Header=BB103_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_52
.LBB103_59:                             # %for.end170
	jmp	.LBB103_60
.LBB103_60:                             # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB103_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB103_66
.LBB103_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB103_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB103_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB103_86
.LBB103_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB103_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_69 Depth 2
                                        #       Child Loop BB103_74 Depth 3
                                        #         Child Loop BB103_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB103_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB103_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB103_69:                             # %for.cond197
                                        #   Parent Loop BB103_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_74 Depth 3
                                        #         Child Loop BB103_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB103_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB103_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB103_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB103_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB103_73:                             # %if.end218
                                        #   in Loop: Header=BB103_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-80(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB103_74:                             # %for.cond233
                                        #   Parent Loop BB103_67 Depth=1
                                        #     Parent Loop BB103_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB103_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB103_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB103_74 Depth=3
	movl	$0, -8(%rbp)
.LBB103_76:                             # %for.cond237
                                        #   Parent Loop BB103_67 Depth=1
                                        #     Parent Loop BB103_69 Depth=2
                                        #       Parent Loop BB103_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB103_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB103_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB103_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_76
.LBB103_79:                             # %for.end269
                                        #   in Loop: Header=BB103_74 Depth=3
	jmp	.LBB103_80
.LBB103_80:                             # %for.inc270
                                        #   in Loop: Header=BB103_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_74
.LBB103_81:                             # %for.end272
                                        #   in Loop: Header=BB103_69 Depth=2
	jmp	.LBB103_82
.LBB103_82:                             # %for.inc273
                                        #   in Loop: Header=BB103_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB103_69
.LBB103_83:                             # %for.end275
                                        #   in Loop: Header=BB103_67 Depth=1
	jmp	.LBB103_84
.LBB103_84:                             # %for.inc276
                                        #   in Loop: Header=BB103_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_67
.LBB103_85:                             # %for.end278
	jmp	.LBB103_95
.LBB103_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB103_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB103_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB103_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB103_89:                             # %for.cond284
                                        #   Parent Loop BB103_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB103_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB103_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB103_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_89
.LBB103_92:                             # %for.end310
                                        #   in Loop: Header=BB103_87 Depth=1
	jmp	.LBB103_93
.LBB103_93:                             # %for.inc311
                                        #   in Loop: Header=BB103_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_87
.LBB103_94:                             # %for.end313
	jmp	.LBB103_95
.LBB103_95:                             # %if.end314
	jmp	.LBB103_96
.LBB103_96:                             # %if.end315
	cmpl	$376798092, -84(%rbp)   # imm = 0x16757B8C
	jne	.LBB103_98
.LBB103_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_97
.Lfunc_end103:
	.size	decode_one_b8block.93, .Lfunc_end103-decode_one_b8block.93
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.94  # -- Begin function Get_Reference_Block.94
	.p2align	4, 0x90
	.type	Get_Reference_Block.94,@function
Get_Reference_Block.94:                 # @Get_Reference_Block.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1708309725, -20(%rbp)  # imm = 0x65D2BCDD
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -8(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB104_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	$0, -4(%rbp)
.LBB104_3:                              # %for.cond5
                                        #   Parent Loop BB104_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB104_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB104_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB104_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_3
.LBB104_6:                              # %for.end
                                        #   in Loop: Header=BB104_1 Depth=1
	jmp	.LBB104_7
.LBB104_7:                              # %for.inc14
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB104_1
.LBB104_8:                              # %for.end16
	cmpl	$1708309725, -20(%rbp)  # imm = 0x65D2BCDD
	jne	.LBB104_10
.LBB104_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_9
.Lfunc_end104:
	.size	Get_Reference_Block.94, .Lfunc_end104-Get_Reference_Block.94
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.95  # -- Begin function Get_Reference_Pixel.95
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.95,@function
Get_Reference_Pixel.95:                 # @Get_Reference_Pixel.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$832211539, -108(%rbp)  # imm = 0x319A8A53
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB105_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB105_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB105_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB105_5
.LBB105_4:                              # %cond.false
	movl	-28(%rbp), %ecx
.LBB105_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB105_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB105_11
.LBB105_7:                              # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB105_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB105_10
.LBB105_9:                              # %cond.false13
	movl	-28(%rbp), %ecx
.LBB105_10:                             # %cond.end14
.LBB105_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB105_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB105_14
.LBB105_13:                             # %cond.false20
	movl	-24(%rbp), %ecx
.LBB105_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB105_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB105_20
.LBB105_16:                             # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB105_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB105_19
.LBB105_18:                             # %cond.false28
	movl	-24(%rbp), %ecx
.LBB105_19:                             # %cond.end29
.LBB105_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_332
.LBB105_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB105_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB105_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB105_25
.LBB105_24:                             # %cond.false41
	movl	-28(%rbp), %eax
.LBB105_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB105_31
.LBB105_27:                             # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB105_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB105_30
.LBB105_29:                             # %cond.false51
	movl	-28(%rbp), %eax
.LBB105_30:                             # %cond.end52
.LBB105_31:                             # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB105_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB105_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB105_36
.LBB105_35:                             # %cond.false61
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_36:                             # %cond.end63
                                        #   in Loop: Header=BB105_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB105_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB105_42
.LBB105_38:                             # %cond.false68
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB105_41
.LBB105_40:                             # %cond.false73
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_41:                             # %cond.end75
                                        #   in Loop: Header=BB105_32 Depth=1
.LBB105_42:                             # %cond.end77
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_32
.LBB105_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_47
.LBB105_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB105_53
.LBB105_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_52
.LBB105_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_52:                             # %cond.end113
.LBB105_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB105_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB105_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB105_57
.LBB105_56:                             # %cond.false125
	movl	-24(%rbp), %edx
.LBB105_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB105_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB105_63
.LBB105_59:                             # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB105_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB105_62
.LBB105_61:                             # %cond.false135
	movl	-24(%rbp), %edx
.LBB105_62:                             # %cond.end136
.LBB105_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB105_76
.LBB105_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB105_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB105_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB105_68
.LBB105_67:                             # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB105_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB105_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB105_74
.LBB105_70:                             # %cond.false162
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB105_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB105_73
.LBB105_72:                             # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB105_73:                             # %cond.end169
.LBB105_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB105_75:                             # %if.end
	jmp	.LBB105_76
.LBB105_76:                             # %if.end178
	jmp	.LBB105_331
.LBB105_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB105_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB105_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB105_81
.LBB105_80:                             # %cond.false186
	movl	-24(%rbp), %eax
.LBB105_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB105_87
.LBB105_83:                             # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB105_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB105_86
.LBB105_85:                             # %cond.false196
	movl	-24(%rbp), %eax
.LBB105_86:                             # %cond.end197
.LBB105_87:                             # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB105_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB105_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB105_92
.LBB105_91:                             # %cond.false209
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_92:                             # %cond.end211
                                        #   in Loop: Header=BB105_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB105_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB105_98
.LBB105_94:                             # %cond.false216
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB105_97
.LBB105_96:                             # %cond.false221
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_97:                             # %cond.end223
                                        #   in Loop: Header=BB105_88 Depth=1
.LBB105_98:                             # %cond.end225
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB105_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_88
.LBB105_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_103
.LBB105_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB105_109
.LBB105_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_108
.LBB105_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_108:                            # %cond.end266
.LBB105_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB105_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB105_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB105_113
.LBB105_112:                            # %cond.false276
	movl	-28(%rbp), %edx
.LBB105_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB105_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB105_119
.LBB105_115:                            # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB105_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB105_118
.LBB105_117:                            # %cond.false286
	movl	-28(%rbp), %edx
.LBB105_118:                            # %cond.end287
.LBB105_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB105_132
.LBB105_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB105_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB105_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB105_124
.LBB105_123:                            # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB105_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB105_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB105_130
.LBB105_126:                            # %cond.false313
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB105_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB105_129
.LBB105_128:                            # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB105_129:                            # %cond.end320
.LBB105_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB105_131:                            # %if.end331
	jmp	.LBB105_132
.LBB105_132:                            # %if.end332
	jmp	.LBB105_330
.LBB105_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB105_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB105_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB105_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB105_139
.LBB105_138:                            # %cond.false345
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_139:                            # %cond.end347
                                        #   in Loop: Header=BB105_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB105_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB105_145
.LBB105_141:                            # %cond.false352
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB105_144
.LBB105_143:                            # %cond.false357
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_144:                            # %cond.end359
                                        #   in Loop: Header=BB105_135 Depth=1
.LBB105_145:                            # %cond.end361
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB105_146:                            # %for.cond363
                                        #   Parent Loop BB105_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB105_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB105_150
.LBB105_149:                            # %cond.false371
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_150:                            # %cond.end373
                                        #   in Loop: Header=BB105_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB105_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB105_156
.LBB105_152:                            # %cond.false378
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB105_155
.LBB105_154:                            # %cond.false383
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_155:                            # %cond.end385
                                        #   in Loop: Header=BB105_146 Depth=2
.LBB105_156:                            # %cond.end387
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB105_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_146
.LBB105_158:                            # %for.end401
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB105_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_135
.LBB105_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB105_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB105_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB105_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB105_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_161
.LBB105_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_167
.LBB105_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB105_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB105_173
.LBB105_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_172
.LBB105_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB105_172:                            # %cond.end449
.LBB105_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB105_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_177
.LBB105_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB105_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB105_183
.LBB105_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_182
.LBB105_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_182:                            # %cond.end486
.LBB105_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB105_196
.LBB105_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB105_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_188
.LBB105_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB105_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB105_194
.LBB105_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_193
.LBB105_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_193:                            # %cond.end526
.LBB105_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB105_195:                            # %if.end532
	jmp	.LBB105_196
.LBB105_196:                            # %if.end533
	jmp	.LBB105_329
.LBB105_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB105_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB105_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB105_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB105_203
.LBB105_202:                            # %cond.false546
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_203:                            # %cond.end548
                                        #   in Loop: Header=BB105_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB105_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB105_209
.LBB105_205:                            # %cond.false553
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB105_208
.LBB105_207:                            # %cond.false558
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_208:                            # %cond.end560
                                        #   in Loop: Header=BB105_199 Depth=1
.LBB105_209:                            # %cond.end562
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB105_210:                            # %for.cond564
                                        #   Parent Loop BB105_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB105_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB105_214
.LBB105_213:                            # %cond.false572
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_214:                            # %cond.end574
                                        #   in Loop: Header=BB105_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB105_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB105_220
.LBB105_216:                            # %cond.false579
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB105_219
.LBB105_218:                            # %cond.false584
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_219:                            # %cond.end586
                                        #   in Loop: Header=BB105_210 Depth=2
.LBB105_220:                            # %cond.end588
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB105_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_210
.LBB105_222:                            # %for.end602
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB105_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_199
.LBB105_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB105_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB105_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB105_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB105_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_225
.LBB105_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_231
.LBB105_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB105_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB105_237
.LBB105_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_236
.LBB105_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB105_236:                            # %cond.end650
.LBB105_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB105_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_241
.LBB105_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB105_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB105_247
.LBB105_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_246
.LBB105_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_246:                            # %cond.end687
.LBB105_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB105_258
.LBB105_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_251
.LBB105_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB105_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB105_257
.LBB105_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB105_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_256
.LBB105_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB105_256:                            # %cond.end724
.LBB105_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB105_258:                            # %if.end730
	jmp	.LBB105_328
.LBB105_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB105_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB105_262
.LBB105_261:                            # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB105_262:                            # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB105_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB105_265
.LBB105_264:                            # %cond.false742
	movl	-40(%rbp), %eax
.LBB105_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB105_271
.LBB105_267:                            # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB105_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB105_270
.LBB105_269:                            # %cond.false752
	movl	-40(%rbp), %eax
.LBB105_270:                            # %cond.end753
.LBB105_271:                            # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB105_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB105_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB105_276
.LBB105_275:                            # %cond.false765
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_276:                            # %cond.end767
                                        #   in Loop: Header=BB105_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB105_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB105_282
.LBB105_278:                            # %cond.false772
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB105_281
.LBB105_280:                            # %cond.false777
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB105_281:                            # %cond.end779
                                        #   in Loop: Header=BB105_272 Depth=1
.LBB105_282:                            # %cond.end781
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB105_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_272
.LBB105_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_287
.LBB105_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB105_293
.LBB105_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_292
.LBB105_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_292:                            # %cond.end822
.LBB105_293:                            # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB105_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB105_296
.LBB105_295:                            # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB105_296:                            # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB105_299
.LBB105_298:                            # %cond.false836
	movl	-44(%rbp), %eax
.LBB105_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB105_305
.LBB105_301:                            # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB105_304
.LBB105_303:                            # %cond.false846
	movl	-44(%rbp), %eax
.LBB105_304:                            # %cond.end847
.LBB105_305:                            # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB105_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB105_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB105_310
.LBB105_309:                            # %cond.false859
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_310:                            # %cond.end861
                                        #   in Loop: Header=BB105_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB105_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB105_316
.LBB105_312:                            # %cond.false866
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB105_315
.LBB105_314:                            # %cond.false871
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB105_315:                            # %cond.end873
                                        #   in Loop: Header=BB105_306 Depth=1
.LBB105_316:                            # %cond.end875
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB105_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_306
.LBB105_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_321
.LBB105_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB105_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB105_327
.LBB105_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB105_326
.LBB105_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB105_326:                            # %cond.end916
.LBB105_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-100(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB105_328:                            # %if.end922
	jmp	.LBB105_329
.LBB105_329:                            # %if.end923
	jmp	.LBB105_330
.LBB105_330:                            # %if.end924
	jmp	.LBB105_331
.LBB105_331:                            # %if.end925
	jmp	.LBB105_332
.LBB105_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$832211539, -108(%rbp)  # imm = 0x319A8A53
	jne	.LBB105_334
.LBB105_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_333
.Lfunc_end105:
	.size	Get_Reference_Pixel.95, .Lfunc_end105-Get_Reference_Pixel.95
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.96  # -- Begin function Get_Reference_Block.96
	.p2align	4, 0x90
	.type	Get_Reference_Block.96,@function
Get_Reference_Block.96:                 # @Get_Reference_Block.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$842089970, -28(%rbp)   # imm = 0x323145F2
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB106_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	$0, -4(%rbp)
.LBB106_3:                              # %for.cond5
                                        #   Parent Loop BB106_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB106_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB106_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB106_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_3
.LBB106_6:                              # %for.end
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_7
.LBB106_7:                              # %for.inc14
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_1
.LBB106_8:                              # %for.end16
	cmpl	$842089970, -28(%rbp)   # imm = 0x323145F2
	jne	.LBB106_10
.LBB106_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_9
.Lfunc_end106:
	.size	Get_Reference_Block.96, .Lfunc_end106-Get_Reference_Block.96
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.97        # -- Begin function Conceal_Error.97
	.p2align	4, 0x90
	.type	Conceal_Error.97,@function
Conceal_Error.97:                       # @Conceal_Error.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$907538385, -68(%rbp)   # imm = 0x3617EFD1
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB107_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB107_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB107_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB107_4:                              # %land.end
.LBB107_5:                              # %lor.end
.LBB107_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB107_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB107_9
.LBB107_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB107_14
.LBB107_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB107_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB107_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB107_12:                             # %land.end51
.LBB107_13:                             # %lor.end53
.LBB107_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB107_180
# %bb.15:                               # %land.end54
	movq	.LJTI107_0(,%rax,8), %rax
	jmpq	*%rax
.LBB107_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB107_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB107_18 Depth=1
	movl	$0, -4(%rbp)
.LBB107_20:                             # %for.cond68
                                        #   Parent Loop BB107_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB107_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB107_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_20
.LBB107_23:                             # %for.end
                                        #   in Loop: Header=BB107_18 Depth=1
	jmp	.LBB107_24
.LBB107_24:                             # %for.inc85
                                        #   in Loop: Header=BB107_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_18
.LBB107_25:                             # %for.end87
	jmp	.LBB107_35
.LBB107_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB107_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB107_27 Depth=1
	movl	$0, -4(%rbp)
.LBB107_29:                             # %for.cond92
                                        #   Parent Loop BB107_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB107_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB107_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_29
.LBB107_32:                             # %for.end104
                                        #   in Loop: Header=BB107_27 Depth=1
	jmp	.LBB107_33
.LBB107_33:                             # %for.inc105
                                        #   in Loop: Header=BB107_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_27
.LBB107_34:                             # %for.end107
	jmp	.LBB107_35
.LBB107_35:                             # %if.end
	jmp	.LBB107_180
.LBB107_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB107_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_39 Depth 2
                                        #       Child Loop BB107_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB107_37 Depth=1
	movl	$0, -12(%rbp)
.LBB107_39:                             # %for.cond113
                                        #   Parent Loop BB107_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB107_39 Depth=2
	movl	$0, -4(%rbp)
.LBB107_41:                             # %for.cond117
                                        #   Parent Loop BB107_37 Depth=1
                                        #     Parent Loop BB107_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB107_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB107_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB107_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_41
.LBB107_44:                             # %for.end141
                                        #   in Loop: Header=BB107_39 Depth=2
	jmp	.LBB107_45
.LBB107_45:                             # %for.inc142
                                        #   in Loop: Header=BB107_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_39
.LBB107_46:                             # %for.end144
                                        #   in Loop: Header=BB107_37 Depth=1
	jmp	.LBB107_47
.LBB107_47:                             # %for.inc145
                                        #   in Loop: Header=BB107_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_37
.LBB107_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB107_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB107_49 Depth=1
	movl	$0, -8(%rbp)
.LBB107_51:                             # %for.cond152
                                        #   Parent Loop BB107_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB107_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB107_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_51
.LBB107_54:                             # %for.end162
                                        #   in Loop: Header=BB107_49 Depth=1
	jmp	.LBB107_55
.LBB107_55:                             # %for.inc163
                                        #   in Loop: Header=BB107_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_49
.LBB107_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB107_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB107_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB107_59 Depth=1
	movl	$0, -4(%rbp)
.LBB107_61:                             # %for.cond175
                                        #   Parent Loop BB107_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB107_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB107_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_61
.LBB107_64:                             # %for.end195
                                        #   in Loop: Header=BB107_59 Depth=1
	jmp	.LBB107_65
.LBB107_65:                             # %for.inc196
                                        #   in Loop: Header=BB107_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_59
.LBB107_66:                             # %for.end198
	jmp	.LBB107_95
.LBB107_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB107_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB107_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_71 Depth 2
                                        #       Child Loop BB107_73 Depth 3
                                        #         Child Loop BB107_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB107_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB107_71:                             # %for.cond210
                                        #   Parent Loop BB107_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_73 Depth 3
                                        #         Child Loop BB107_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB107_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB107_73:                             # %for.cond236
                                        #   Parent Loop BB107_69 Depth=1
                                        #     Parent Loop BB107_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB107_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB107_73 Depth=3
	movl	$0, -4(%rbp)
.LBB107_75:                             # %for.cond240
                                        #   Parent Loop BB107_69 Depth=1
                                        #     Parent Loop BB107_71 Depth=2
                                        #       Parent Loop BB107_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB107_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB107_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB107_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_75
.LBB107_78:                             # %for.end259
                                        #   in Loop: Header=BB107_73 Depth=3
	jmp	.LBB107_79
.LBB107_79:                             # %for.inc260
                                        #   in Loop: Header=BB107_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_73
.LBB107_80:                             # %for.end262
                                        #   in Loop: Header=BB107_71 Depth=2
	jmp	.LBB107_81
.LBB107_81:                             # %for.inc263
                                        #   in Loop: Header=BB107_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_71
.LBB107_82:                             # %for.end265
                                        #   in Loop: Header=BB107_69 Depth=1
	jmp	.LBB107_83
.LBB107_83:                             # %for.inc266
                                        #   in Loop: Header=BB107_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_69
.LBB107_84:                             # %for.end268
	jmp	.LBB107_94
.LBB107_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB107_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB107_86 Depth=1
	movl	$0, -4(%rbp)
.LBB107_88:                             # %for.cond274
                                        #   Parent Loop BB107_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB107_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB107_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_88
.LBB107_91:                             # %for.end294
                                        #   in Loop: Header=BB107_86 Depth=1
	jmp	.LBB107_92
.LBB107_92:                             # %for.inc295
                                        #   in Loop: Header=BB107_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_86
.LBB107_93:                             # %for.end297
	jmp	.LBB107_94
.LBB107_94:                             # %if.end298
	jmp	.LBB107_95
.LBB107_95:                             # %if.end299
	jmp	.LBB107_105
.LBB107_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB107_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB107_97 Depth=1
	movl	$0, -4(%rbp)
.LBB107_99:                             # %for.cond305
                                        #   Parent Loop BB107_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB107_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB107_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_99
.LBB107_102:                            # %for.end317
                                        #   in Loop: Header=BB107_97 Depth=1
	jmp	.LBB107_103
.LBB107_103:                            # %for.inc318
                                        #   in Loop: Header=BB107_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_97
.LBB107_104:                            # %for.end320
	jmp	.LBB107_105
.LBB107_105:                            # %if.end321
	jmp	.LBB107_180
.LBB107_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB107_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_110 Depth 2
                                        #       Child Loop BB107_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB107_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	$0, -12(%rbp)
.LBB107_110:                            # %for.cond331
                                        #   Parent Loop BB107_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB107_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB107_110 Depth=2
	movl	$0, -4(%rbp)
.LBB107_112:                            # %for.cond335
                                        #   Parent Loop BB107_108 Depth=1
                                        #     Parent Loop BB107_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB107_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB107_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB107_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_112
.LBB107_115:                            # %for.end359
                                        #   in Loop: Header=BB107_110 Depth=2
	jmp	.LBB107_116
.LBB107_116:                            # %for.inc360
                                        #   in Loop: Header=BB107_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_110
.LBB107_117:                            # %for.end362
                                        #   in Loop: Header=BB107_108 Depth=1
	jmp	.LBB107_118
.LBB107_118:                            # %for.inc363
                                        #   in Loop: Header=BB107_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_108
.LBB107_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB107_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB107_120 Depth=1
	movl	$0, -8(%rbp)
.LBB107_122:                            # %for.cond370
                                        #   Parent Loop BB107_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB107_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB107_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_122
.LBB107_125:                            # %for.end380
                                        #   in Loop: Header=BB107_120 Depth=1
	jmp	.LBB107_126
.LBB107_126:                            # %for.inc381
                                        #   in Loop: Header=BB107_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_120
.LBB107_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB107_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB107_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB107_129 Depth=1
	movl	$0, -4(%rbp)
.LBB107_131:                            # %for.cond390
                                        #   Parent Loop BB107_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB107_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB107_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_131
.LBB107_134:                            # %for.end410
                                        #   in Loop: Header=BB107_129 Depth=1
	jmp	.LBB107_135
.LBB107_135:                            # %for.inc411
                                        #   in Loop: Header=BB107_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_129
.LBB107_136:                            # %for.end413
	jmp	.LBB107_156
.LBB107_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB107_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB107_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_141 Depth 2
                                        #       Child Loop BB107_143 Depth 3
                                        #         Child Loop BB107_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB107_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB107_141:                            # %for.cond425
                                        #   Parent Loop BB107_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB107_143 Depth 3
                                        #         Child Loop BB107_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB107_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB107_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB107_143:                            # %for.cond452
                                        #   Parent Loop BB107_139 Depth=1
                                        #     Parent Loop BB107_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB107_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB107_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB107_143 Depth=3
	movl	$0, -4(%rbp)
.LBB107_145:                            # %for.cond456
                                        #   Parent Loop BB107_139 Depth=1
                                        #     Parent Loop BB107_141 Depth=2
                                        #       Parent Loop BB107_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB107_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB107_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB107_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_145
.LBB107_148:                            # %for.end475
                                        #   in Loop: Header=BB107_143 Depth=3
	jmp	.LBB107_149
.LBB107_149:                            # %for.inc476
                                        #   in Loop: Header=BB107_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_143
.LBB107_150:                            # %for.end478
                                        #   in Loop: Header=BB107_141 Depth=2
	jmp	.LBB107_151
.LBB107_151:                            # %for.inc479
                                        #   in Loop: Header=BB107_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB107_141
.LBB107_152:                            # %for.end481
                                        #   in Loop: Header=BB107_139 Depth=1
	jmp	.LBB107_153
.LBB107_153:                            # %for.inc482
                                        #   in Loop: Header=BB107_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_139
.LBB107_154:                            # %for.end484
	jmp	.LBB107_155
.LBB107_155:                            # %if.end485
	jmp	.LBB107_156
.LBB107_156:                            # %if.end486
	jmp	.LBB107_157
.LBB107_157:                            # %if.end487
	jmp	.LBB107_180
.LBB107_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB107_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB107_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB107_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	$0, -4(%rbp)
.LBB107_163:                            # %for.cond499
                                        #   Parent Loop BB107_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB107_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB107_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_163
.LBB107_166:                            # %for.end519
                                        #   in Loop: Header=BB107_161 Depth=1
	jmp	.LBB107_167
.LBB107_167:                            # %for.inc520
                                        #   in Loop: Header=BB107_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_161
.LBB107_168:                            # %for.end522
	jmp	.LBB107_169
.LBB107_169:                            # %if.end523
	jmp	.LBB107_179
.LBB107_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB107_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB107_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB107_171 Depth=1
	movl	$0, -4(%rbp)
.LBB107_173:                            # %for.cond529
                                        #   Parent Loop BB107_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB107_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB107_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB107_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_173
.LBB107_176:                            # %for.end541
                                        #   in Loop: Header=BB107_171 Depth=1
	jmp	.LBB107_177
.LBB107_177:                            # %for.inc542
                                        #   in Loop: Header=BB107_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_171
.LBB107_178:                            # %for.end544
	jmp	.LBB107_179
.LBB107_179:                            # %if.end545
	jmp	.LBB107_180
.LBB107_180:                            # %sw.epilog
	cmpl	$907538385, -68(%rbp)   # imm = 0x3617EFD1
	jne	.LBB107_182
.LBB107_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_181
.Lfunc_end107:
	.size	Conceal_Error.97, .Lfunc_end107-Conceal_Error.97
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI107_0:
	.quad	.LBB107_16
	.quad	.LBB107_158
	.quad	.LBB107_106
	.quad	.LBB107_180
	.quad	.LBB107_36
                                        # -- End function
	.text
	.globl	Get_Reference_Pixel.98  # -- Begin function Get_Reference_Pixel.98
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.98,@function
Get_Reference_Pixel.98:                 # @Get_Reference_Pixel.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$3863375, -100(%rbp)    # imm = 0x3AF34F
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB108_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB108_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB108_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB108_5
.LBB108_4:                              # %cond.false
	movl	-24(%rbp), %ecx
.LBB108_5:                              # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB108_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB108_11
.LBB108_7:                              # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB108_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB108_10
.LBB108_9:                              # %cond.false13
	movl	-24(%rbp), %ecx
.LBB108_10:                             # %cond.end14
.LBB108_11:                             # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB108_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB108_14
.LBB108_13:                             # %cond.false20
	movl	-28(%rbp), %ecx
.LBB108_14:                             # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB108_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB108_20
.LBB108_16:                             # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB108_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB108_19
.LBB108_18:                             # %cond.false28
	movl	-28(%rbp), %ecx
.LBB108_19:                             # %cond.end29
.LBB108_20:                             # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_332
.LBB108_21:                             # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB108_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB108_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB108_25
.LBB108_24:                             # %cond.false41
	movl	-24(%rbp), %eax
.LBB108_25:                             # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB108_31
.LBB108_27:                             # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB108_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB108_30
.LBB108_29:                             # %cond.false51
	movl	-24(%rbp), %eax
.LBB108_30:                             # %cond.end52
.LBB108_31:                             # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB108_32:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB108_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB108_36
.LBB108_35:                             # %cond.false61
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_36:                             # %cond.end63
                                        #   in Loop: Header=BB108_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB108_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_42
.LBB108_38:                             # %cond.false68
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB108_41
.LBB108_40:                             # %cond.false73
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_41:                             # %cond.end75
                                        #   in Loop: Header=BB108_32 Depth=1
.LBB108_42:                             # %cond.end77
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB108_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_32
.LBB108_44:                             # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_47
.LBB108_46:                             # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_47:                             # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB108_53
.LBB108_49:                             # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_52
.LBB108_51:                             # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_52:                             # %cond.end113
.LBB108_53:                             # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB108_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB108_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB108_57
.LBB108_56:                             # %cond.false125
	movl	-28(%rbp), %edx
.LBB108_57:                             # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB108_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB108_63
.LBB108_59:                             # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB108_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB108_62
.LBB108_61:                             # %cond.false135
	movl	-28(%rbp), %edx
.LBB108_62:                             # %cond.end136
.LBB108_63:                             # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB108_76
.LBB108_64:                             # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB108_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB108_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB108_68
.LBB108_67:                             # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB108_68:                             # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB108_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB108_74
.LBB108_70:                             # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB108_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB108_73
.LBB108_72:                             # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB108_73:                             # %cond.end169
.LBB108_74:                             # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB108_75:                             # %if.end
	jmp	.LBB108_76
.LBB108_76:                             # %if.end178
	jmp	.LBB108_331
.LBB108_77:                             # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB108_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB108_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB108_81
.LBB108_80:                             # %cond.false186
	movl	-28(%rbp), %eax
.LBB108_81:                             # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB108_87
.LBB108_83:                             # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB108_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB108_86
.LBB108_85:                             # %cond.false196
	movl	-28(%rbp), %eax
.LBB108_86:                             # %cond.end197
.LBB108_87:                             # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB108_88:                             # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB108_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB108_92
.LBB108_91:                             # %cond.false209
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_92:                             # %cond.end211
                                        #   in Loop: Header=BB108_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB108_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_98
.LBB108_94:                             # %cond.false216
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB108_97
.LBB108_96:                             # %cond.false221
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_97:                             # %cond.end223
                                        #   in Loop: Header=BB108_88 Depth=1
.LBB108_98:                             # %cond.end225
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB108_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_88
.LBB108_100:                            # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_103
.LBB108_102:                            # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_103:                            # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB108_109
.LBB108_105:                            # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_108
.LBB108_107:                            # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_108:                            # %cond.end266
.LBB108_109:                            # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB108_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB108_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB108_113
.LBB108_112:                            # %cond.false276
	movl	-24(%rbp), %edx
.LBB108_113:                            # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB108_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB108_119
.LBB108_115:                            # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB108_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB108_118
.LBB108_117:                            # %cond.false286
	movl	-24(%rbp), %edx
.LBB108_118:                            # %cond.end287
.LBB108_119:                            # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB108_132
.LBB108_120:                            # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB108_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB108_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB108_124
.LBB108_123:                            # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB108_124:                            # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB108_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB108_130
.LBB108_126:                            # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB108_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB108_129
.LBB108_128:                            # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB108_129:                            # %cond.end320
.LBB108_130:                            # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB108_131:                            # %if.end331
	jmp	.LBB108_132
.LBB108_132:                            # %if.end332
	jmp	.LBB108_330
.LBB108_133:                            # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB108_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB108_135:                            # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB108_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB108_139
.LBB108_138:                            # %cond.false345
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_139:                            # %cond.end347
                                        #   in Loop: Header=BB108_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB108_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_145
.LBB108_141:                            # %cond.false352
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB108_144
.LBB108_143:                            # %cond.false357
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_144:                            # %cond.end359
                                        #   in Loop: Header=BB108_135 Depth=1
.LBB108_145:                            # %cond.end361
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB108_146:                            # %for.cond363
                                        #   Parent Loop BB108_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB108_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB108_150
.LBB108_149:                            # %cond.false371
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_150:                            # %cond.end373
                                        #   in Loop: Header=BB108_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB108_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_156
.LBB108_152:                            # %cond.false378
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB108_155
.LBB108_154:                            # %cond.false383
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_155:                            # %cond.end385
                                        #   in Loop: Header=BB108_146 Depth=2
.LBB108_156:                            # %cond.end387
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_146
.LBB108_158:                            # %for.end401
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB108_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_135
.LBB108_160:                            # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB108_161:                            # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB108_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB108_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB108_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_161
.LBB108_164:                            # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_167
.LBB108_166:                            # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB108_167:                            # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB108_173
.LBB108_169:                            # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_172
.LBB108_171:                            # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB108_172:                            # %cond.end449
.LBB108_173:                            # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB108_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_177
.LBB108_176:                            # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_177:                            # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB108_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB108_183
.LBB108_179:                            # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_182
.LBB108_181:                            # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_182:                            # %cond.end486
.LBB108_183:                            # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB108_196
.LBB108_184:                            # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB108_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_188
.LBB108_187:                            # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_188:                            # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB108_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB108_194
.LBB108_190:                            # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_193
.LBB108_192:                            # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_193:                            # %cond.end526
.LBB108_194:                            # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB108_195:                            # %if.end532
	jmp	.LBB108_196
.LBB108_196:                            # %if.end533
	jmp	.LBB108_329
.LBB108_197:                            # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB108_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB108_199:                            # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB108_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB108_203
.LBB108_202:                            # %cond.false546
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_203:                            # %cond.end548
                                        #   in Loop: Header=BB108_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB108_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_209
.LBB108_205:                            # %cond.false553
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB108_208
.LBB108_207:                            # %cond.false558
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_208:                            # %cond.end560
                                        #   in Loop: Header=BB108_199 Depth=1
.LBB108_209:                            # %cond.end562
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB108_210:                            # %for.cond564
                                        #   Parent Loop BB108_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB108_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB108_214
.LBB108_213:                            # %cond.false572
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_214:                            # %cond.end574
                                        #   in Loop: Header=BB108_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB108_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB108_220
.LBB108_216:                            # %cond.false579
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB108_219
.LBB108_218:                            # %cond.false584
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_219:                            # %cond.end586
                                        #   in Loop: Header=BB108_210 Depth=2
.LBB108_220:                            # %cond.end588
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB108_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_210
.LBB108_222:                            # %for.end602
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB108_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_199
.LBB108_224:                            # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB108_225:                            # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB108_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB108_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB108_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_225
.LBB108_228:                            # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_231
.LBB108_230:                            # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB108_231:                            # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB108_237
.LBB108_233:                            # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_236
.LBB108_235:                            # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB108_236:                            # %cond.end650
.LBB108_237:                            # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB108_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_241
.LBB108_240:                            # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_241:                            # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB108_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB108_247
.LBB108_243:                            # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_246
.LBB108_245:                            # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_246:                            # %cond.end687
.LBB108_247:                            # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB108_258
.LBB108_248:                            # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_251
.LBB108_250:                            # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_251:                            # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB108_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB108_257
.LBB108_253:                            # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB108_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_256
.LBB108_255:                            # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB108_256:                            # %cond.end724
.LBB108_257:                            # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB108_258:                            # %if.end730
	jmp	.LBB108_328
.LBB108_259:                            # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB108_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB108_262
.LBB108_261:                            # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB108_262:                            # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB108_265
.LBB108_264:                            # %cond.false742
	movl	-44(%rbp), %eax
.LBB108_265:                            # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB108_271
.LBB108_267:                            # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB108_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB108_270
.LBB108_269:                            # %cond.false752
	movl	-44(%rbp), %eax
.LBB108_270:                            # %cond.end753
.LBB108_271:                            # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB108_272:                            # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB108_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB108_276
.LBB108_275:                            # %cond.false765
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_276:                            # %cond.end767
                                        #   in Loop: Header=BB108_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB108_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_282
.LBB108_278:                            # %cond.false772
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB108_281
.LBB108_280:                            # %cond.false777
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB108_281:                            # %cond.end779
                                        #   in Loop: Header=BB108_272 Depth=1
.LBB108_282:                            # %cond.end781
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB108_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_272
.LBB108_284:                            # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_287
.LBB108_286:                            # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_287:                            # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB108_293
.LBB108_289:                            # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_292
.LBB108_291:                            # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_292:                            # %cond.end822
.LBB108_293:                            # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB108_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB108_296
.LBB108_295:                            # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB108_296:                            # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB108_299
.LBB108_298:                            # %cond.false836
	movl	-40(%rbp), %eax
.LBB108_299:                            # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB108_305
.LBB108_301:                            # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB108_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB108_304
.LBB108_303:                            # %cond.false846
	movl	-40(%rbp), %eax
.LBB108_304:                            # %cond.end847
.LBB108_305:                            # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB108_306:                            # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB108_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB108_310
.LBB108_309:                            # %cond.false859
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_310:                            # %cond.end861
                                        #   in Loop: Header=BB108_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB108_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_316
.LBB108_312:                            # %cond.false866
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB108_315
.LBB108_314:                            # %cond.false871
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB108_315:                            # %cond.end873
                                        #   in Loop: Header=BB108_306 Depth=1
.LBB108_316:                            # %cond.end875
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB108_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_306
.LBB108_318:                            # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_321
.LBB108_320:                            # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_321:                            # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB108_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB108_327
.LBB108_323:                            # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB108_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB108_326
.LBB108_325:                            # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB108_326:                            # %cond.end916
.LBB108_327:                            # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB108_328:                            # %if.end922
	jmp	.LBB108_329
.LBB108_329:                            # %if.end923
	jmp	.LBB108_330
.LBB108_330:                            # %if.end924
	jmp	.LBB108_331
.LBB108_331:                            # %if.end925
	jmp	.LBB108_332
.LBB108_332:                            # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$3863375, -100(%rbp)    # imm = 0x3AF34F
	jne	.LBB108_334
.LBB108_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_334:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_333
.Lfunc_end108:
	.size	Get_Reference_Pixel.98, .Lfunc_end108-Get_Reference_Pixel.98
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.99  # -- Begin function Get_Reference_Block.99
	.p2align	4, 0x90
	.type	Get_Reference_Block.99,@function
Get_Reference_Block.99:                 # @Get_Reference_Block.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1832761665, -32(%rbp)  # imm = 0x6D3DB941
	movq	%rdi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -56(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB109_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	$0, -4(%rbp)
.LBB109_3:                              # %for.cond5
                                        #   Parent Loop BB109_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB109_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-36(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_3
.LBB109_6:                              # %for.end
                                        #   in Loop: Header=BB109_1 Depth=1
	jmp	.LBB109_7
.LBB109_7:                              # %for.inc14
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_1
.LBB109_8:                              # %for.end16
	cmpl	$1832761665, -32(%rbp)  # imm = 0x6D3DB941
	jne	.LBB109_10
.LBB109_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_9
.Lfunc_end109:
	.size	Get_Reference_Block.99, .Lfunc_end109-Get_Reference_Block.99
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.100 # -- Begin function compute_residue_b8block.100
	.p2align	4, 0x90
	.type	compute_residue_b8block.100,@function
compute_residue_b8block.100:            # @compute_residue_b8block.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$851049215, -36(%rbp)   # imm = 0x32B9FAFF
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB110_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB110_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB110_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_4:                              # %for.cond4
                                        #   Parent Loop BB110_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB110_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB110_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB110_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_4
.LBB110_7:                              # %for.end
                                        #   in Loop: Header=BB110_2 Depth=1
	jmp	.LBB110_8
.LBB110_8:                              # %for.inc22
                                        #   in Loop: Header=BB110_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_2
.LBB110_9:                              # %for.end24
	jmp	.LBB110_19
.LBB110_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB110_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB110_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_13:                             # %for.cond29
                                        #   Parent Loop BB110_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB110_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB110_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB110_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_13
.LBB110_16:                             # %for.end56
                                        #   in Loop: Header=BB110_11 Depth=1
	jmp	.LBB110_17
.LBB110_17:                             # %for.inc57
                                        #   in Loop: Header=BB110_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_11
.LBB110_18:                             # %for.end59
	jmp	.LBB110_19
.LBB110_19:                             # %if.end
	cmpl	$851049215, -36(%rbp)   # imm = 0x32B9FAFF
	jne	.LBB110_21
.LBB110_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_20
.Lfunc_end110:
	.size	compute_residue_b8block.100, .Lfunc_end110-compute_residue_b8block.100
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.101       # -- Begin function Conceal_Error.101
	.p2align	4, 0x90
	.type	Conceal_Error.101,@function
Conceal_Error.101:                      # @Conceal_Error.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1700274984, -68(%rbp)  # imm = 0x65582328
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB111_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB111_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB111_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB111_4:                              # %land.end
.LBB111_5:                              # %lor.end
.LBB111_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB111_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB111_9
.LBB111_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB111_14
.LBB111_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB111_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB111_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB111_12:                             # %land.end51
.LBB111_13:                             # %lor.end53
.LBB111_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB111_180
# %bb.15:                               # %land.end54
	movq	.LJTI111_0(,%rax,8), %rax
	jmpq	*%rax
.LBB111_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB111_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB111_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB111_18 Depth=1
	movl	$0, -4(%rbp)
.LBB111_20:                             # %for.cond68
                                        #   Parent Loop BB111_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB111_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB111_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_20
.LBB111_23:                             # %for.end
                                        #   in Loop: Header=BB111_18 Depth=1
	jmp	.LBB111_24
.LBB111_24:                             # %for.inc85
                                        #   in Loop: Header=BB111_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_18
.LBB111_25:                             # %for.end87
	jmp	.LBB111_35
.LBB111_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB111_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB111_27 Depth=1
	movl	$0, -4(%rbp)
.LBB111_29:                             # %for.cond92
                                        #   Parent Loop BB111_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB111_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB111_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_29
.LBB111_32:                             # %for.end104
                                        #   in Loop: Header=BB111_27 Depth=1
	jmp	.LBB111_33
.LBB111_33:                             # %for.inc105
                                        #   in Loop: Header=BB111_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_27
.LBB111_34:                             # %for.end107
	jmp	.LBB111_35
.LBB111_35:                             # %if.end
	jmp	.LBB111_180
.LBB111_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB111_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_39 Depth 2
                                        #       Child Loop BB111_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB111_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB111_37 Depth=1
	movl	$0, -16(%rbp)
.LBB111_39:                             # %for.cond113
                                        #   Parent Loop BB111_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB111_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB111_39 Depth=2
	movl	$0, -4(%rbp)
.LBB111_41:                             # %for.cond117
                                        #   Parent Loop BB111_37 Depth=1
                                        #     Parent Loop BB111_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB111_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB111_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB111_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_41
.LBB111_44:                             # %for.end141
                                        #   in Loop: Header=BB111_39 Depth=2
	jmp	.LBB111_45
.LBB111_45:                             # %for.inc142
                                        #   in Loop: Header=BB111_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_39
.LBB111_46:                             # %for.end144
                                        #   in Loop: Header=BB111_37 Depth=1
	jmp	.LBB111_47
.LBB111_47:                             # %for.inc145
                                        #   in Loop: Header=BB111_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_37
.LBB111_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB111_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB111_49 Depth=1
	movl	$0, -8(%rbp)
.LBB111_51:                             # %for.cond152
                                        #   Parent Loop BB111_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB111_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB111_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_51
.LBB111_54:                             # %for.end162
                                        #   in Loop: Header=BB111_49 Depth=1
	jmp	.LBB111_55
.LBB111_55:                             # %for.inc163
                                        #   in Loop: Header=BB111_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_49
.LBB111_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB111_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB111_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB111_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB111_59 Depth=1
	movl	$0, -4(%rbp)
.LBB111_61:                             # %for.cond175
                                        #   Parent Loop BB111_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB111_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB111_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_61
.LBB111_64:                             # %for.end195
                                        #   in Loop: Header=BB111_59 Depth=1
	jmp	.LBB111_65
.LBB111_65:                             # %for.inc196
                                        #   in Loop: Header=BB111_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_59
.LBB111_66:                             # %for.end198
	jmp	.LBB111_95
.LBB111_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB111_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB111_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_71 Depth 2
                                        #       Child Loop BB111_73 Depth 3
                                        #         Child Loop BB111_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB111_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB111_71:                             # %for.cond210
                                        #   Parent Loop BB111_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_73 Depth 3
                                        #         Child Loop BB111_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB111_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB111_73:                             # %for.cond236
                                        #   Parent Loop BB111_69 Depth=1
                                        #     Parent Loop BB111_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB111_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB111_73 Depth=3
	movl	$0, -4(%rbp)
.LBB111_75:                             # %for.cond240
                                        #   Parent Loop BB111_69 Depth=1
                                        #     Parent Loop BB111_71 Depth=2
                                        #       Parent Loop BB111_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB111_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB111_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB111_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_75
.LBB111_78:                             # %for.end259
                                        #   in Loop: Header=BB111_73 Depth=3
	jmp	.LBB111_79
.LBB111_79:                             # %for.inc260
                                        #   in Loop: Header=BB111_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_73
.LBB111_80:                             # %for.end262
                                        #   in Loop: Header=BB111_71 Depth=2
	jmp	.LBB111_81
.LBB111_81:                             # %for.inc263
                                        #   in Loop: Header=BB111_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_71
.LBB111_82:                             # %for.end265
                                        #   in Loop: Header=BB111_69 Depth=1
	jmp	.LBB111_83
.LBB111_83:                             # %for.inc266
                                        #   in Loop: Header=BB111_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_69
.LBB111_84:                             # %for.end268
	jmp	.LBB111_94
.LBB111_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB111_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	$0, -4(%rbp)
.LBB111_88:                             # %for.cond274
                                        #   Parent Loop BB111_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB111_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB111_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_88
.LBB111_91:                             # %for.end294
                                        #   in Loop: Header=BB111_86 Depth=1
	jmp	.LBB111_92
.LBB111_92:                             # %for.inc295
                                        #   in Loop: Header=BB111_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_86
.LBB111_93:                             # %for.end297
	jmp	.LBB111_94
.LBB111_94:                             # %if.end298
	jmp	.LBB111_95
.LBB111_95:                             # %if.end299
	jmp	.LBB111_105
.LBB111_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB111_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB111_97 Depth=1
	movl	$0, -4(%rbp)
.LBB111_99:                             # %for.cond305
                                        #   Parent Loop BB111_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB111_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB111_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_99
.LBB111_102:                            # %for.end317
                                        #   in Loop: Header=BB111_97 Depth=1
	jmp	.LBB111_103
.LBB111_103:                            # %for.inc318
                                        #   in Loop: Header=BB111_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_97
.LBB111_104:                            # %for.end320
	jmp	.LBB111_105
.LBB111_105:                            # %if.end321
	jmp	.LBB111_180
.LBB111_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB111_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB111_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_110 Depth 2
                                        #       Child Loop BB111_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB111_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	$0, -16(%rbp)
.LBB111_110:                            # %for.cond331
                                        #   Parent Loop BB111_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB111_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB111_110 Depth=2
	movl	$0, -4(%rbp)
.LBB111_112:                            # %for.cond335
                                        #   Parent Loop BB111_108 Depth=1
                                        #     Parent Loop BB111_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB111_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB111_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB111_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_112
.LBB111_115:                            # %for.end359
                                        #   in Loop: Header=BB111_110 Depth=2
	jmp	.LBB111_116
.LBB111_116:                            # %for.inc360
                                        #   in Loop: Header=BB111_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_110
.LBB111_117:                            # %for.end362
                                        #   in Loop: Header=BB111_108 Depth=1
	jmp	.LBB111_118
.LBB111_118:                            # %for.inc363
                                        #   in Loop: Header=BB111_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_108
.LBB111_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB111_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB111_120 Depth=1
	movl	$0, -8(%rbp)
.LBB111_122:                            # %for.cond370
                                        #   Parent Loop BB111_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB111_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB111_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_122
.LBB111_125:                            # %for.end380
                                        #   in Loop: Header=BB111_120 Depth=1
	jmp	.LBB111_126
.LBB111_126:                            # %for.inc381
                                        #   in Loop: Header=BB111_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_120
.LBB111_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB111_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB111_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB111_129 Depth=1
	movl	$0, -4(%rbp)
.LBB111_131:                            # %for.cond390
                                        #   Parent Loop BB111_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB111_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB111_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_131
.LBB111_134:                            # %for.end410
                                        #   in Loop: Header=BB111_129 Depth=1
	jmp	.LBB111_135
.LBB111_135:                            # %for.inc411
                                        #   in Loop: Header=BB111_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_129
.LBB111_136:                            # %for.end413
	jmp	.LBB111_156
.LBB111_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB111_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB111_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_141 Depth 2
                                        #       Child Loop BB111_143 Depth 3
                                        #         Child Loop BB111_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB111_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB111_141:                            # %for.cond425
                                        #   Parent Loop BB111_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_143 Depth 3
                                        #         Child Loop BB111_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB111_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB111_143:                            # %for.cond452
                                        #   Parent Loop BB111_139 Depth=1
                                        #     Parent Loop BB111_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB111_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB111_143 Depth=3
	movl	$0, -4(%rbp)
.LBB111_145:                            # %for.cond456
                                        #   Parent Loop BB111_139 Depth=1
                                        #     Parent Loop BB111_141 Depth=2
                                        #       Parent Loop BB111_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB111_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB111_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB111_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_145
.LBB111_148:                            # %for.end475
                                        #   in Loop: Header=BB111_143 Depth=3
	jmp	.LBB111_149
.LBB111_149:                            # %for.inc476
                                        #   in Loop: Header=BB111_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_143
.LBB111_150:                            # %for.end478
                                        #   in Loop: Header=BB111_141 Depth=2
	jmp	.LBB111_151
.LBB111_151:                            # %for.inc479
                                        #   in Loop: Header=BB111_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_141
.LBB111_152:                            # %for.end481
                                        #   in Loop: Header=BB111_139 Depth=1
	jmp	.LBB111_153
.LBB111_153:                            # %for.inc482
                                        #   in Loop: Header=BB111_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB111_139
.LBB111_154:                            # %for.end484
	jmp	.LBB111_155
.LBB111_155:                            # %if.end485
	jmp	.LBB111_156
.LBB111_156:                            # %if.end486
	jmp	.LBB111_157
.LBB111_157:                            # %if.end487
	jmp	.LBB111_180
.LBB111_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB111_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB111_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB111_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB111_161 Depth=1
	movl	$0, -4(%rbp)
.LBB111_163:                            # %for.cond499
                                        #   Parent Loop BB111_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB111_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB111_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_163
.LBB111_166:                            # %for.end519
                                        #   in Loop: Header=BB111_161 Depth=1
	jmp	.LBB111_167
.LBB111_167:                            # %for.inc520
                                        #   in Loop: Header=BB111_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_161
.LBB111_168:                            # %for.end522
	jmp	.LBB111_169
.LBB111_169:                            # %if.end523
	jmp	.LBB111_179
.LBB111_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB111_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB111_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB111_171 Depth=1
	movl	$0, -4(%rbp)
.LBB111_173:                            # %for.cond529
                                        #   Parent Loop BB111_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB111_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB111_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB111_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_173
.LBB111_176:                            # %for.end541
                                        #   in Loop: Header=BB111_171 Depth=1
	jmp	.LBB111_177
.LBB111_177:                            # %for.inc542
                                        #   in Loop: Header=BB111_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_171
.LBB111_178:                            # %for.end544
	jmp	.LBB111_179
.LBB111_179:                            # %if.end545
	jmp	.LBB111_180
.LBB111_180:                            # %sw.epilog
	cmpl	$1700274984, -68(%rbp)  # imm = 0x65582328
	jne	.LBB111_182
.LBB111_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_181
.Lfunc_end111:
	.size	Conceal_Error.101, .Lfunc_end111-Conceal_Error.101
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI111_0:
	.quad	.LBB111_16
	.quad	.LBB111_158
	.quad	.LBB111_106
	.quad	.LBB111_180
	.quad	.LBB111_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.102 # -- Begin function compute_residue_b8block.102
	.p2align	4, 0x90
	.type	compute_residue_b8block.102,@function
compute_residue_b8block.102:            # @compute_residue_b8block.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1554841254, -36(%rbp)  # imm = 0x5CACFEA6
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB112_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB112_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_4:                              # %for.cond4
                                        #   Parent Loop BB112_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB112_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB112_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_4
.LBB112_7:                              # %for.end
                                        #   in Loop: Header=BB112_2 Depth=1
	jmp	.LBB112_8
.LBB112_8:                              # %for.inc22
                                        #   in Loop: Header=BB112_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_2
.LBB112_9:                              # %for.end24
	jmp	.LBB112_19
.LBB112_10:                             # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB112_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB112_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB112_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB112_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB112_13:                             # %for.cond29
                                        #   Parent Loop BB112_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB112_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB112_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB112_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB112_13
.LBB112_16:                             # %for.end56
                                        #   in Loop: Header=BB112_11 Depth=1
	jmp	.LBB112_17
.LBB112_17:                             # %for.inc57
                                        #   in Loop: Header=BB112_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_11
.LBB112_18:                             # %for.end59
	jmp	.LBB112_19
.LBB112_19:                             # %if.end
	cmpl	$1554841254, -36(%rbp)  # imm = 0x5CACFEA6
	jne	.LBB112_21
.LBB112_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_20
.Lfunc_end112:
	.size	compute_residue_b8block.102, .Lfunc_end112-compute_residue_b8block.102
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.103  # -- Begin function decode_one_b8block.103
	.p2align	4, 0x90
	.type	decode_one_b8block.103,@function
decode_one_b8block.103:                 # @decode_one_b8block.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1730239468, -84(%rbp)  # imm = 0x67215BEC
	movl	%edi, -40(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB113_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB113_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB113_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_4:                              # %for.cond9
                                        #   Parent Loop BB113_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB113_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB113_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB113_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_4
.LBB113_7:                              # %for.end
                                        #   in Loop: Header=BB113_2 Depth=1
	jmp	.LBB113_8
.LBB113_8:                              # %for.inc26
                                        #   in Loop: Header=BB113_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_2
.LBB113_9:                              # %for.end28
	jmp	.LBB113_96
.LBB113_10:                             # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB113_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB113_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB113_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB113_31
.LBB113_14:                             # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB113_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB113_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_17:                             # %for.cond40
                                        #   Parent Loop BB113_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB113_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB113_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB113_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_17
.LBB113_20:                             # %for.end49
                                        #   in Loop: Header=BB113_15 Depth=1
	jmp	.LBB113_21
.LBB113_21:                             # %for.inc50
                                        #   in Loop: Header=BB113_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_15
.LBB113_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB113_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB113_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_25:                             # %for.cond56
                                        #   Parent Loop BB113_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB113_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB113_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB113_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_25
.LBB113_28:                             # %for.end71
                                        #   in Loop: Header=BB113_23 Depth=1
	jmp	.LBB113_29
.LBB113_29:                             # %for.inc72
                                        #   in Loop: Header=BB113_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_23
.LBB113_30:                             # %for.end74
	jmp	.LBB113_60
.LBB113_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB113_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB113_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB113_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB113_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_36:                             # %for.cond83
                                        #   Parent Loop BB113_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB113_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB113_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB113_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_36
.LBB113_39:                             # %for.end120
                                        #   in Loop: Header=BB113_34 Depth=1
	jmp	.LBB113_40
.LBB113_40:                             # %for.inc121
                                        #   in Loop: Header=BB113_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_34
.LBB113_41:                             # %for.end123
	jmp	.LBB113_51
.LBB113_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB113_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB113_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_45:                             # %for.cond129
                                        #   Parent Loop BB113_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB113_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB113_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB113_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_45
.LBB113_48:                             # %for.end145
                                        #   in Loop: Header=BB113_43 Depth=1
	jmp	.LBB113_49
.LBB113_49:                             # %for.inc146
                                        #   in Loop: Header=BB113_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_43
.LBB113_50:                             # %for.end148
	jmp	.LBB113_51
.LBB113_51:                             # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB113_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB113_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_54:                             # %for.cond153
                                        #   Parent Loop BB113_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB113_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB113_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB113_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_54
.LBB113_57:                             # %for.end167
                                        #   in Loop: Header=BB113_52 Depth=1
	jmp	.LBB113_58
.LBB113_58:                             # %for.inc168
                                        #   in Loop: Header=BB113_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_52
.LBB113_59:                             # %for.end170
	jmp	.LBB113_60
.LBB113_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB113_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB113_66
.LBB113_62:                             # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB113_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB113_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB113_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB113_86
.LBB113_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB113_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_69 Depth 2
                                        #       Child Loop BB113_74 Depth 3
                                        #         Child Loop BB113_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB113_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB113_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB113_69:                             # %for.cond197
                                        #   Parent Loop BB113_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_74 Depth 3
                                        #         Child Loop BB113_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB113_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB113_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB113_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB113_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB113_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB113_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB113_73:                             # %if.end218
                                        #   in Loop: Header=BB113_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB113_74:                             # %for.cond233
                                        #   Parent Loop BB113_67 Depth=1
                                        #     Parent Loop BB113_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB113_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB113_74 Depth=3
	movl	$0, -8(%rbp)
.LBB113_76:                             # %for.cond237
                                        #   Parent Loop BB113_67 Depth=1
                                        #     Parent Loop BB113_69 Depth=2
                                        #       Parent Loop BB113_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB113_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB113_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB113_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_76
.LBB113_79:                             # %for.end269
                                        #   in Loop: Header=BB113_74 Depth=3
	jmp	.LBB113_80
.LBB113_80:                             # %for.inc270
                                        #   in Loop: Header=BB113_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_74
.LBB113_81:                             # %for.end272
                                        #   in Loop: Header=BB113_69 Depth=2
	jmp	.LBB113_82
.LBB113_82:                             # %for.inc273
                                        #   in Loop: Header=BB113_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_69
.LBB113_83:                             # %for.end275
                                        #   in Loop: Header=BB113_67 Depth=1
	jmp	.LBB113_84
.LBB113_84:                             # %for.inc276
                                        #   in Loop: Header=BB113_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_67
.LBB113_85:                             # %for.end278
	jmp	.LBB113_95
.LBB113_86:                             # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB113_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB113_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB113_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB113_89:                             # %for.cond284
                                        #   Parent Loop BB113_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB113_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB113_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB113_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_89
.LBB113_92:                             # %for.end310
                                        #   in Loop: Header=BB113_87 Depth=1
	jmp	.LBB113_93
.LBB113_93:                             # %for.inc311
                                        #   in Loop: Header=BB113_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_87
.LBB113_94:                             # %for.end313
	jmp	.LBB113_95
.LBB113_95:                             # %if.end314
	jmp	.LBB113_96
.LBB113_96:                             # %if.end315
	cmpl	$1730239468, -84(%rbp)  # imm = 0x67215BEC
	jne	.LBB113_98
.LBB113_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_97
.Lfunc_end113:
	.size	decode_one_b8block.103, .Lfunc_end113-decode_one_b8block.103
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.104       # -- Begin function Conceal_Error.104
	.p2align	4, 0x90
	.type	Conceal_Error.104,@function
Conceal_Error.104:                      # @Conceal_Error.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1024732888, -68(%rbp)  # imm = 0x3D142ED8
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB114_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB114_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB114_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB114_4:                              # %land.end
.LBB114_5:                              # %lor.end
.LBB114_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB114_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB114_9
.LBB114_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB114_14
.LBB114_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB114_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB114_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB114_12:                             # %land.end51
.LBB114_13:                             # %lor.end53
.LBB114_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB114_180
# %bb.15:                               # %land.end54
	movq	.LJTI114_0(,%rax,8), %rax
	jmpq	*%rax
.LBB114_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB114_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB114_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB114_18 Depth=1
	movl	$0, -4(%rbp)
.LBB114_20:                             # %for.cond68
                                        #   Parent Loop BB114_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB114_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB114_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_20
.LBB114_23:                             # %for.end
                                        #   in Loop: Header=BB114_18 Depth=1
	jmp	.LBB114_24
.LBB114_24:                             # %for.inc85
                                        #   in Loop: Header=BB114_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_18
.LBB114_25:                             # %for.end87
	jmp	.LBB114_35
.LBB114_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB114_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB114_27 Depth=1
	movl	$0, -4(%rbp)
.LBB114_29:                             # %for.cond92
                                        #   Parent Loop BB114_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB114_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB114_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_29
.LBB114_32:                             # %for.end104
                                        #   in Loop: Header=BB114_27 Depth=1
	jmp	.LBB114_33
.LBB114_33:                             # %for.inc105
                                        #   in Loop: Header=BB114_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_27
.LBB114_34:                             # %for.end107
	jmp	.LBB114_35
.LBB114_35:                             # %if.end
	jmp	.LBB114_180
.LBB114_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB114_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_39 Depth 2
                                        #       Child Loop BB114_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB114_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB114_37 Depth=1
	movl	$0, -12(%rbp)
.LBB114_39:                             # %for.cond113
                                        #   Parent Loop BB114_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB114_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB114_39 Depth=2
	movl	$0, -4(%rbp)
.LBB114_41:                             # %for.cond117
                                        #   Parent Loop BB114_37 Depth=1
                                        #     Parent Loop BB114_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB114_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB114_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB114_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_41
.LBB114_44:                             # %for.end141
                                        #   in Loop: Header=BB114_39 Depth=2
	jmp	.LBB114_45
.LBB114_45:                             # %for.inc142
                                        #   in Loop: Header=BB114_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_39
.LBB114_46:                             # %for.end144
                                        #   in Loop: Header=BB114_37 Depth=1
	jmp	.LBB114_47
.LBB114_47:                             # %for.inc145
                                        #   in Loop: Header=BB114_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_37
.LBB114_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB114_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB114_49 Depth=1
	movl	$0, -8(%rbp)
.LBB114_51:                             # %for.cond152
                                        #   Parent Loop BB114_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB114_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB114_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_51
.LBB114_54:                             # %for.end162
                                        #   in Loop: Header=BB114_49 Depth=1
	jmp	.LBB114_55
.LBB114_55:                             # %for.inc163
                                        #   in Loop: Header=BB114_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_49
.LBB114_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB114_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB114_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB114_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB114_59 Depth=1
	movl	$0, -4(%rbp)
.LBB114_61:                             # %for.cond175
                                        #   Parent Loop BB114_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB114_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB114_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_61
.LBB114_64:                             # %for.end195
                                        #   in Loop: Header=BB114_59 Depth=1
	jmp	.LBB114_65
.LBB114_65:                             # %for.inc196
                                        #   in Loop: Header=BB114_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_59
.LBB114_66:                             # %for.end198
	jmp	.LBB114_95
.LBB114_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB114_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB114_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_71 Depth 2
                                        #       Child Loop BB114_73 Depth 3
                                        #         Child Loop BB114_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB114_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB114_71:                             # %for.cond210
                                        #   Parent Loop BB114_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_73 Depth 3
                                        #         Child Loop BB114_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB114_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB114_73:                             # %for.cond236
                                        #   Parent Loop BB114_69 Depth=1
                                        #     Parent Loop BB114_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB114_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB114_73 Depth=3
	movl	$0, -4(%rbp)
.LBB114_75:                             # %for.cond240
                                        #   Parent Loop BB114_69 Depth=1
                                        #     Parent Loop BB114_71 Depth=2
                                        #       Parent Loop BB114_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB114_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB114_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB114_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_75
.LBB114_78:                             # %for.end259
                                        #   in Loop: Header=BB114_73 Depth=3
	jmp	.LBB114_79
.LBB114_79:                             # %for.inc260
                                        #   in Loop: Header=BB114_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_73
.LBB114_80:                             # %for.end262
                                        #   in Loop: Header=BB114_71 Depth=2
	jmp	.LBB114_81
.LBB114_81:                             # %for.inc263
                                        #   in Loop: Header=BB114_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_71
.LBB114_82:                             # %for.end265
                                        #   in Loop: Header=BB114_69 Depth=1
	jmp	.LBB114_83
.LBB114_83:                             # %for.inc266
                                        #   in Loop: Header=BB114_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_69
.LBB114_84:                             # %for.end268
	jmp	.LBB114_94
.LBB114_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB114_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB114_86 Depth=1
	movl	$0, -4(%rbp)
.LBB114_88:                             # %for.cond274
                                        #   Parent Loop BB114_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB114_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB114_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_88
.LBB114_91:                             # %for.end294
                                        #   in Loop: Header=BB114_86 Depth=1
	jmp	.LBB114_92
.LBB114_92:                             # %for.inc295
                                        #   in Loop: Header=BB114_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_86
.LBB114_93:                             # %for.end297
	jmp	.LBB114_94
.LBB114_94:                             # %if.end298
	jmp	.LBB114_95
.LBB114_95:                             # %if.end299
	jmp	.LBB114_105
.LBB114_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB114_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB114_97 Depth=1
	movl	$0, -4(%rbp)
.LBB114_99:                             # %for.cond305
                                        #   Parent Loop BB114_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB114_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB114_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_99
.LBB114_102:                            # %for.end317
                                        #   in Loop: Header=BB114_97 Depth=1
	jmp	.LBB114_103
.LBB114_103:                            # %for.inc318
                                        #   in Loop: Header=BB114_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_97
.LBB114_104:                            # %for.end320
	jmp	.LBB114_105
.LBB114_105:                            # %if.end321
	jmp	.LBB114_180
.LBB114_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB114_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB114_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_110 Depth 2
                                        #       Child Loop BB114_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB114_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB114_108 Depth=1
	movl	$0, -12(%rbp)
.LBB114_110:                            # %for.cond331
                                        #   Parent Loop BB114_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB114_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB114_110 Depth=2
	movl	$0, -4(%rbp)
.LBB114_112:                            # %for.cond335
                                        #   Parent Loop BB114_108 Depth=1
                                        #     Parent Loop BB114_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB114_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB114_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB114_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_112
.LBB114_115:                            # %for.end359
                                        #   in Loop: Header=BB114_110 Depth=2
	jmp	.LBB114_116
.LBB114_116:                            # %for.inc360
                                        #   in Loop: Header=BB114_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_110
.LBB114_117:                            # %for.end362
                                        #   in Loop: Header=BB114_108 Depth=1
	jmp	.LBB114_118
.LBB114_118:                            # %for.inc363
                                        #   in Loop: Header=BB114_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_108
.LBB114_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB114_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB114_120 Depth=1
	movl	$0, -8(%rbp)
.LBB114_122:                            # %for.cond370
                                        #   Parent Loop BB114_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB114_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB114_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_122
.LBB114_125:                            # %for.end380
                                        #   in Loop: Header=BB114_120 Depth=1
	jmp	.LBB114_126
.LBB114_126:                            # %for.inc381
                                        #   in Loop: Header=BB114_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_120
.LBB114_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB114_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB114_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB114_129 Depth=1
	movl	$0, -4(%rbp)
.LBB114_131:                            # %for.cond390
                                        #   Parent Loop BB114_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB114_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB114_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_131
.LBB114_134:                            # %for.end410
                                        #   in Loop: Header=BB114_129 Depth=1
	jmp	.LBB114_135
.LBB114_135:                            # %for.inc411
                                        #   in Loop: Header=BB114_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_129
.LBB114_136:                            # %for.end413
	jmp	.LBB114_156
.LBB114_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB114_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB114_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_141 Depth 2
                                        #       Child Loop BB114_143 Depth 3
                                        #         Child Loop BB114_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB114_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB114_141:                            # %for.cond425
                                        #   Parent Loop BB114_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_143 Depth 3
                                        #         Child Loop BB114_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB114_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB114_143:                            # %for.cond452
                                        #   Parent Loop BB114_139 Depth=1
                                        #     Parent Loop BB114_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB114_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB114_143 Depth=3
	movl	$0, -4(%rbp)
.LBB114_145:                            # %for.cond456
                                        #   Parent Loop BB114_139 Depth=1
                                        #     Parent Loop BB114_141 Depth=2
                                        #       Parent Loop BB114_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB114_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB114_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB114_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_145
.LBB114_148:                            # %for.end475
                                        #   in Loop: Header=BB114_143 Depth=3
	jmp	.LBB114_149
.LBB114_149:                            # %for.inc476
                                        #   in Loop: Header=BB114_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_143
.LBB114_150:                            # %for.end478
                                        #   in Loop: Header=BB114_141 Depth=2
	jmp	.LBB114_151
.LBB114_151:                            # %for.inc479
                                        #   in Loop: Header=BB114_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_141
.LBB114_152:                            # %for.end481
                                        #   in Loop: Header=BB114_139 Depth=1
	jmp	.LBB114_153
.LBB114_153:                            # %for.inc482
                                        #   in Loop: Header=BB114_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB114_139
.LBB114_154:                            # %for.end484
	jmp	.LBB114_155
.LBB114_155:                            # %if.end485
	jmp	.LBB114_156
.LBB114_156:                            # %if.end486
	jmp	.LBB114_157
.LBB114_157:                            # %if.end487
	jmp	.LBB114_180
.LBB114_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB114_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB114_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB114_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB114_161 Depth=1
	movl	$0, -4(%rbp)
.LBB114_163:                            # %for.cond499
                                        #   Parent Loop BB114_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB114_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB114_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_163
.LBB114_166:                            # %for.end519
                                        #   in Loop: Header=BB114_161 Depth=1
	jmp	.LBB114_167
.LBB114_167:                            # %for.inc520
                                        #   in Loop: Header=BB114_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_161
.LBB114_168:                            # %for.end522
	jmp	.LBB114_169
.LBB114_169:                            # %if.end523
	jmp	.LBB114_179
.LBB114_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB114_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB114_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB114_171 Depth=1
	movl	$0, -4(%rbp)
.LBB114_173:                            # %for.cond529
                                        #   Parent Loop BB114_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB114_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB114_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB114_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_173
.LBB114_176:                            # %for.end541
                                        #   in Loop: Header=BB114_171 Depth=1
	jmp	.LBB114_177
.LBB114_177:                            # %for.inc542
                                        #   in Loop: Header=BB114_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_171
.LBB114_178:                            # %for.end544
	jmp	.LBB114_179
.LBB114_179:                            # %if.end545
	jmp	.LBB114_180
.LBB114_180:                            # %sw.epilog
	cmpl	$1024732888, -68(%rbp)  # imm = 0x3D142ED8
	jne	.LBB114_182
.LBB114_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_181
.Lfunc_end114:
	.size	Conceal_Error.104, .Lfunc_end114-Conceal_Error.104
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI114_0:
	.quad	.LBB114_16
	.quad	.LBB114_158
	.quad	.LBB114_106
	.quad	.LBB114_180
	.quad	.LBB114_36
                                        # -- End function
	.text
	.globl	Error_Concealment.105   # -- Begin function Error_Concealment.105
	.p2align	4, 0x90
	.type	Error_Concealment.105,@function
Error_Concealment.105:                  # @Error_Concealment.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1400696000, -20(%rbp)  # imm = 0x537CECC0
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB115_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	$0, -4(%rbp)
.LBB115_3:                              # %for.cond2
                                        #   Parent Loop BB115_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB115_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB115_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB115_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB115_6:                              # %if.end
                                        #   in Loop: Header=BB115_3 Depth=2
	jmp	.LBB115_7
.LBB115_7:                              # %for.inc
                                        #   in Loop: Header=BB115_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_3
.LBB115_8:                              # %for.end
                                        #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_9
.LBB115_9:                              # %for.inc7
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_1
.LBB115_10:                             # %for.end9
	cmpl	$1400696000, -20(%rbp)  # imm = 0x537CECC0
	jne	.LBB115_12
.LBB115_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_11
.Lfunc_end115:
	.size	Error_Concealment.105, .Lfunc_end115-Error_Concealment.105
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.106 # -- Begin function Get_Reference_Block.106
	.p2align	4, 0x90
	.type	Get_Reference_Block.106,@function
Get_Reference_Block.106:                # @Get_Reference_Block.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1245339897, -32(%rbp)  # imm = 0x4A3A60F9
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	$0, -8(%rbp)
.LBB116_3:                              # %for.cond5
                                        #   Parent Loop BB116_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB116_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-28(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB116_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_3
.LBB116_6:                              # %for.end
                                        #   in Loop: Header=BB116_1 Depth=1
	jmp	.LBB116_7
.LBB116_7:                              # %for.inc14
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_1
.LBB116_8:                              # %for.end16
	cmpl	$1245339897, -32(%rbp)  # imm = 0x4A3A60F9
	jne	.LBB116_10
.LBB116_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_9
.Lfunc_end116:
	.size	Get_Reference_Block.106, .Lfunc_end116-Get_Reference_Block.106
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.107       # -- Begin function Conceal_Error.107
	.p2align	4, 0x90
	.type	Conceal_Error.107,@function
Conceal_Error.107:                      # @Conceal_Error.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$2143751675, -68(%rbp)  # imm = 0x7FC70DFB
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB117_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB117_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB117_4:                              # %land.end
.LBB117_5:                              # %lor.end
.LBB117_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB117_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB117_9
.LBB117_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB117_14
.LBB117_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB117_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB117_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB117_12:                             # %land.end51
.LBB117_13:                             # %lor.end53
.LBB117_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB117_180
# %bb.15:                               # %land.end54
	movq	.LJTI117_0(,%rax,8), %rax
	jmpq	*%rax
.LBB117_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB117_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB117_18 Depth=1
	movl	$0, -4(%rbp)
.LBB117_20:                             # %for.cond68
                                        #   Parent Loop BB117_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB117_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB117_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_20
.LBB117_23:                             # %for.end
                                        #   in Loop: Header=BB117_18 Depth=1
	jmp	.LBB117_24
.LBB117_24:                             # %for.inc85
                                        #   in Loop: Header=BB117_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_18
.LBB117_25:                             # %for.end87
	jmp	.LBB117_35
.LBB117_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB117_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB117_27 Depth=1
	movl	$0, -4(%rbp)
.LBB117_29:                             # %for.cond92
                                        #   Parent Loop BB117_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB117_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB117_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_29
.LBB117_32:                             # %for.end104
                                        #   in Loop: Header=BB117_27 Depth=1
	jmp	.LBB117_33
.LBB117_33:                             # %for.inc105
                                        #   in Loop: Header=BB117_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_27
.LBB117_34:                             # %for.end107
	jmp	.LBB117_35
.LBB117_35:                             # %if.end
	jmp	.LBB117_180
.LBB117_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB117_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_39 Depth 2
                                        #       Child Loop BB117_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB117_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB117_37 Depth=1
	movl	$0, -12(%rbp)
.LBB117_39:                             # %for.cond113
                                        #   Parent Loop BB117_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB117_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	$0, -4(%rbp)
.LBB117_41:                             # %for.cond117
                                        #   Parent Loop BB117_37 Depth=1
                                        #     Parent Loop BB117_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB117_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB117_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB117_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_41
.LBB117_44:                             # %for.end141
                                        #   in Loop: Header=BB117_39 Depth=2
	jmp	.LBB117_45
.LBB117_45:                             # %for.inc142
                                        #   in Loop: Header=BB117_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_39
.LBB117_46:                             # %for.end144
                                        #   in Loop: Header=BB117_37 Depth=1
	jmp	.LBB117_47
.LBB117_47:                             # %for.inc145
                                        #   in Loop: Header=BB117_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_37
.LBB117_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB117_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB117_49 Depth=1
	movl	$0, -8(%rbp)
.LBB117_51:                             # %for.cond152
                                        #   Parent Loop BB117_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB117_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB117_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_51
.LBB117_54:                             # %for.end162
                                        #   in Loop: Header=BB117_49 Depth=1
	jmp	.LBB117_55
.LBB117_55:                             # %for.inc163
                                        #   in Loop: Header=BB117_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_49
.LBB117_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB117_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB117_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB117_59 Depth=1
	movl	$0, -4(%rbp)
.LBB117_61:                             # %for.cond175
                                        #   Parent Loop BB117_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB117_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB117_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_61
.LBB117_64:                             # %for.end195
                                        #   in Loop: Header=BB117_59 Depth=1
	jmp	.LBB117_65
.LBB117_65:                             # %for.inc196
                                        #   in Loop: Header=BB117_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_59
.LBB117_66:                             # %for.end198
	jmp	.LBB117_95
.LBB117_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB117_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB117_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_71 Depth 2
                                        #       Child Loop BB117_73 Depth 3
                                        #         Child Loop BB117_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB117_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB117_71:                             # %for.cond210
                                        #   Parent Loop BB117_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_73 Depth 3
                                        #         Child Loop BB117_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB117_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB117_73:                             # %for.cond236
                                        #   Parent Loop BB117_69 Depth=1
                                        #     Parent Loop BB117_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB117_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB117_73 Depth=3
	movl	$0, -4(%rbp)
.LBB117_75:                             # %for.cond240
                                        #   Parent Loop BB117_69 Depth=1
                                        #     Parent Loop BB117_71 Depth=2
                                        #       Parent Loop BB117_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB117_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB117_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB117_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_75
.LBB117_78:                             # %for.end259
                                        #   in Loop: Header=BB117_73 Depth=3
	jmp	.LBB117_79
.LBB117_79:                             # %for.inc260
                                        #   in Loop: Header=BB117_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_73
.LBB117_80:                             # %for.end262
                                        #   in Loop: Header=BB117_71 Depth=2
	jmp	.LBB117_81
.LBB117_81:                             # %for.inc263
                                        #   in Loop: Header=BB117_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_71
.LBB117_82:                             # %for.end265
                                        #   in Loop: Header=BB117_69 Depth=1
	jmp	.LBB117_83
.LBB117_83:                             # %for.inc266
                                        #   in Loop: Header=BB117_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_69
.LBB117_84:                             # %for.end268
	jmp	.LBB117_94
.LBB117_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB117_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB117_86 Depth=1
	movl	$0, -4(%rbp)
.LBB117_88:                             # %for.cond274
                                        #   Parent Loop BB117_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB117_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB117_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_88
.LBB117_91:                             # %for.end294
                                        #   in Loop: Header=BB117_86 Depth=1
	jmp	.LBB117_92
.LBB117_92:                             # %for.inc295
                                        #   in Loop: Header=BB117_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_86
.LBB117_93:                             # %for.end297
	jmp	.LBB117_94
.LBB117_94:                             # %if.end298
	jmp	.LBB117_95
.LBB117_95:                             # %if.end299
	jmp	.LBB117_105
.LBB117_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB117_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB117_97 Depth=1
	movl	$0, -4(%rbp)
.LBB117_99:                             # %for.cond305
                                        #   Parent Loop BB117_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB117_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB117_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_99
.LBB117_102:                            # %for.end317
                                        #   in Loop: Header=BB117_97 Depth=1
	jmp	.LBB117_103
.LBB117_103:                            # %for.inc318
                                        #   in Loop: Header=BB117_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_97
.LBB117_104:                            # %for.end320
	jmp	.LBB117_105
.LBB117_105:                            # %if.end321
	jmp	.LBB117_180
.LBB117_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB117_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_110 Depth 2
                                        #       Child Loop BB117_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB117_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB117_108 Depth=1
	movl	$0, -12(%rbp)
.LBB117_110:                            # %for.cond331
                                        #   Parent Loop BB117_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB117_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB117_110 Depth=2
	movl	$0, -4(%rbp)
.LBB117_112:                            # %for.cond335
                                        #   Parent Loop BB117_108 Depth=1
                                        #     Parent Loop BB117_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB117_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB117_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB117_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_112
.LBB117_115:                            # %for.end359
                                        #   in Loop: Header=BB117_110 Depth=2
	jmp	.LBB117_116
.LBB117_116:                            # %for.inc360
                                        #   in Loop: Header=BB117_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_110
.LBB117_117:                            # %for.end362
                                        #   in Loop: Header=BB117_108 Depth=1
	jmp	.LBB117_118
.LBB117_118:                            # %for.inc363
                                        #   in Loop: Header=BB117_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_108
.LBB117_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB117_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB117_120 Depth=1
	movl	$0, -8(%rbp)
.LBB117_122:                            # %for.cond370
                                        #   Parent Loop BB117_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB117_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB117_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_122
.LBB117_125:                            # %for.end380
                                        #   in Loop: Header=BB117_120 Depth=1
	jmp	.LBB117_126
.LBB117_126:                            # %for.inc381
                                        #   in Loop: Header=BB117_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_120
.LBB117_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB117_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB117_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB117_129 Depth=1
	movl	$0, -4(%rbp)
.LBB117_131:                            # %for.cond390
                                        #   Parent Loop BB117_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB117_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB117_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_131
.LBB117_134:                            # %for.end410
                                        #   in Loop: Header=BB117_129 Depth=1
	jmp	.LBB117_135
.LBB117_135:                            # %for.inc411
                                        #   in Loop: Header=BB117_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_129
.LBB117_136:                            # %for.end413
	jmp	.LBB117_156
.LBB117_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB117_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB117_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_141 Depth 2
                                        #       Child Loop BB117_143 Depth 3
                                        #         Child Loop BB117_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB117_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB117_141:                            # %for.cond425
                                        #   Parent Loop BB117_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB117_143 Depth 3
                                        #         Child Loop BB117_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB117_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB117_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB117_143:                            # %for.cond452
                                        #   Parent Loop BB117_139 Depth=1
                                        #     Parent Loop BB117_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB117_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB117_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB117_143 Depth=3
	movl	$0, -4(%rbp)
.LBB117_145:                            # %for.cond456
                                        #   Parent Loop BB117_139 Depth=1
                                        #     Parent Loop BB117_141 Depth=2
                                        #       Parent Loop BB117_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB117_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB117_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB117_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_145
.LBB117_148:                            # %for.end475
                                        #   in Loop: Header=BB117_143 Depth=3
	jmp	.LBB117_149
.LBB117_149:                            # %for.inc476
                                        #   in Loop: Header=BB117_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_143
.LBB117_150:                            # %for.end478
                                        #   in Loop: Header=BB117_141 Depth=2
	jmp	.LBB117_151
.LBB117_151:                            # %for.inc479
                                        #   in Loop: Header=BB117_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_141
.LBB117_152:                            # %for.end481
                                        #   in Loop: Header=BB117_139 Depth=1
	jmp	.LBB117_153
.LBB117_153:                            # %for.inc482
                                        #   in Loop: Header=BB117_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_139
.LBB117_154:                            # %for.end484
	jmp	.LBB117_155
.LBB117_155:                            # %if.end485
	jmp	.LBB117_156
.LBB117_156:                            # %if.end486
	jmp	.LBB117_157
.LBB117_157:                            # %if.end487
	jmp	.LBB117_180
.LBB117_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB117_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB117_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB117_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB117_161 Depth=1
	movl	$0, -4(%rbp)
.LBB117_163:                            # %for.cond499
                                        #   Parent Loop BB117_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB117_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB117_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_163
.LBB117_166:                            # %for.end519
                                        #   in Loop: Header=BB117_161 Depth=1
	jmp	.LBB117_167
.LBB117_167:                            # %for.inc520
                                        #   in Loop: Header=BB117_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_161
.LBB117_168:                            # %for.end522
	jmp	.LBB117_169
.LBB117_169:                            # %if.end523
	jmp	.LBB117_179
.LBB117_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB117_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB117_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	$0, -4(%rbp)
.LBB117_173:                            # %for.cond529
                                        #   Parent Loop BB117_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB117_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB117_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB117_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_173
.LBB117_176:                            # %for.end541
                                        #   in Loop: Header=BB117_171 Depth=1
	jmp	.LBB117_177
.LBB117_177:                            # %for.inc542
                                        #   in Loop: Header=BB117_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_171
.LBB117_178:                            # %for.end544
	jmp	.LBB117_179
.LBB117_179:                            # %if.end545
	jmp	.LBB117_180
.LBB117_180:                            # %sw.epilog
	cmpl	$2143751675, -68(%rbp)  # imm = 0x7FC70DFB
	jne	.LBB117_182
.LBB117_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_181
.Lfunc_end117:
	.size	Conceal_Error.107, .Lfunc_end117-Conceal_Error.107
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI117_0:
	.quad	.LBB117_16
	.quad	.LBB117_158
	.quad	.LBB117_106
	.quad	.LBB117_180
	.quad	.LBB117_36
                                        # -- End function
	.text
	.globl	Conceal_Error.108       # -- Begin function Conceal_Error.108
	.p2align	4, 0x90
	.type	Conceal_Error.108,@function
Conceal_Error.108:                      # @Conceal_Error.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$275816597, -68(%rbp)   # imm = 0x1070A095
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB118_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB118_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB118_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB118_4:                              # %land.end
.LBB118_5:                              # %lor.end
.LBB118_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB118_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB118_9
.LBB118_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB118_14
.LBB118_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB118_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB118_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB118_12:                             # %land.end51
.LBB118_13:                             # %lor.end53
.LBB118_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB118_180
# %bb.15:                               # %land.end54
	movq	.LJTI118_0(,%rax,8), %rax
	jmpq	*%rax
.LBB118_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB118_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB118_18 Depth=1
	movl	$0, -4(%rbp)
.LBB118_20:                             # %for.cond68
                                        #   Parent Loop BB118_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB118_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB118_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_20
.LBB118_23:                             # %for.end
                                        #   in Loop: Header=BB118_18 Depth=1
	jmp	.LBB118_24
.LBB118_24:                             # %for.inc85
                                        #   in Loop: Header=BB118_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_18
.LBB118_25:                             # %for.end87
	jmp	.LBB118_35
.LBB118_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB118_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB118_27 Depth=1
	movl	$0, -4(%rbp)
.LBB118_29:                             # %for.cond92
                                        #   Parent Loop BB118_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB118_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB118_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_29
.LBB118_32:                             # %for.end104
                                        #   in Loop: Header=BB118_27 Depth=1
	jmp	.LBB118_33
.LBB118_33:                             # %for.inc105
                                        #   in Loop: Header=BB118_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_27
.LBB118_34:                             # %for.end107
	jmp	.LBB118_35
.LBB118_35:                             # %if.end
	jmp	.LBB118_180
.LBB118_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB118_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_39 Depth 2
                                        #       Child Loop BB118_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB118_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB118_37 Depth=1
	movl	$0, -16(%rbp)
.LBB118_39:                             # %for.cond113
                                        #   Parent Loop BB118_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB118_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB118_39 Depth=2
	movl	$0, -4(%rbp)
.LBB118_41:                             # %for.cond117
                                        #   Parent Loop BB118_37 Depth=1
                                        #     Parent Loop BB118_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB118_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB118_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB118_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_41
.LBB118_44:                             # %for.end141
                                        #   in Loop: Header=BB118_39 Depth=2
	jmp	.LBB118_45
.LBB118_45:                             # %for.inc142
                                        #   in Loop: Header=BB118_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_39
.LBB118_46:                             # %for.end144
                                        #   in Loop: Header=BB118_37 Depth=1
	jmp	.LBB118_47
.LBB118_47:                             # %for.inc145
                                        #   in Loop: Header=BB118_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_37
.LBB118_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB118_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB118_49 Depth=1
	movl	$0, -8(%rbp)
.LBB118_51:                             # %for.cond152
                                        #   Parent Loop BB118_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB118_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB118_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_51
.LBB118_54:                             # %for.end162
                                        #   in Loop: Header=BB118_49 Depth=1
	jmp	.LBB118_55
.LBB118_55:                             # %for.inc163
                                        #   in Loop: Header=BB118_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_49
.LBB118_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB118_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB118_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB118_59 Depth=1
	movl	$0, -4(%rbp)
.LBB118_61:                             # %for.cond175
                                        #   Parent Loop BB118_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB118_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB118_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_61
.LBB118_64:                             # %for.end195
                                        #   in Loop: Header=BB118_59 Depth=1
	jmp	.LBB118_65
.LBB118_65:                             # %for.inc196
                                        #   in Loop: Header=BB118_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_59
.LBB118_66:                             # %for.end198
	jmp	.LBB118_95
.LBB118_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB118_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB118_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_71 Depth 2
                                        #       Child Loop BB118_73 Depth 3
                                        #         Child Loop BB118_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB118_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB118_71:                             # %for.cond210
                                        #   Parent Loop BB118_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_73 Depth 3
                                        #         Child Loop BB118_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB118_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB118_73:                             # %for.cond236
                                        #   Parent Loop BB118_69 Depth=1
                                        #     Parent Loop BB118_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB118_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB118_73 Depth=3
	movl	$0, -4(%rbp)
.LBB118_75:                             # %for.cond240
                                        #   Parent Loop BB118_69 Depth=1
                                        #     Parent Loop BB118_71 Depth=2
                                        #       Parent Loop BB118_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB118_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB118_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB118_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_75
.LBB118_78:                             # %for.end259
                                        #   in Loop: Header=BB118_73 Depth=3
	jmp	.LBB118_79
.LBB118_79:                             # %for.inc260
                                        #   in Loop: Header=BB118_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_73
.LBB118_80:                             # %for.end262
                                        #   in Loop: Header=BB118_71 Depth=2
	jmp	.LBB118_81
.LBB118_81:                             # %for.inc263
                                        #   in Loop: Header=BB118_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_71
.LBB118_82:                             # %for.end265
                                        #   in Loop: Header=BB118_69 Depth=1
	jmp	.LBB118_83
.LBB118_83:                             # %for.inc266
                                        #   in Loop: Header=BB118_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_69
.LBB118_84:                             # %for.end268
	jmp	.LBB118_94
.LBB118_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB118_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB118_86 Depth=1
	movl	$0, -4(%rbp)
.LBB118_88:                             # %for.cond274
                                        #   Parent Loop BB118_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB118_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB118_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_88
.LBB118_91:                             # %for.end294
                                        #   in Loop: Header=BB118_86 Depth=1
	jmp	.LBB118_92
.LBB118_92:                             # %for.inc295
                                        #   in Loop: Header=BB118_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_86
.LBB118_93:                             # %for.end297
	jmp	.LBB118_94
.LBB118_94:                             # %if.end298
	jmp	.LBB118_95
.LBB118_95:                             # %if.end299
	jmp	.LBB118_105
.LBB118_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB118_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB118_97 Depth=1
	movl	$0, -4(%rbp)
.LBB118_99:                             # %for.cond305
                                        #   Parent Loop BB118_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB118_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB118_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_99
.LBB118_102:                            # %for.end317
                                        #   in Loop: Header=BB118_97 Depth=1
	jmp	.LBB118_103
.LBB118_103:                            # %for.inc318
                                        #   in Loop: Header=BB118_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_97
.LBB118_104:                            # %for.end320
	jmp	.LBB118_105
.LBB118_105:                            # %if.end321
	jmp	.LBB118_180
.LBB118_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB118_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_110 Depth 2
                                        #       Child Loop BB118_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB118_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB118_108 Depth=1
	movl	$0, -16(%rbp)
.LBB118_110:                            # %for.cond331
                                        #   Parent Loop BB118_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB118_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB118_110 Depth=2
	movl	$0, -4(%rbp)
.LBB118_112:                            # %for.cond335
                                        #   Parent Loop BB118_108 Depth=1
                                        #     Parent Loop BB118_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB118_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB118_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB118_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_112
.LBB118_115:                            # %for.end359
                                        #   in Loop: Header=BB118_110 Depth=2
	jmp	.LBB118_116
.LBB118_116:                            # %for.inc360
                                        #   in Loop: Header=BB118_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_110
.LBB118_117:                            # %for.end362
                                        #   in Loop: Header=BB118_108 Depth=1
	jmp	.LBB118_118
.LBB118_118:                            # %for.inc363
                                        #   in Loop: Header=BB118_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_108
.LBB118_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB118_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB118_120 Depth=1
	movl	$0, -8(%rbp)
.LBB118_122:                            # %for.cond370
                                        #   Parent Loop BB118_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB118_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB118_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_122
.LBB118_125:                            # %for.end380
                                        #   in Loop: Header=BB118_120 Depth=1
	jmp	.LBB118_126
.LBB118_126:                            # %for.inc381
                                        #   in Loop: Header=BB118_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_120
.LBB118_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB118_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB118_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB118_129 Depth=1
	movl	$0, -4(%rbp)
.LBB118_131:                            # %for.cond390
                                        #   Parent Loop BB118_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB118_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB118_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_131
.LBB118_134:                            # %for.end410
                                        #   in Loop: Header=BB118_129 Depth=1
	jmp	.LBB118_135
.LBB118_135:                            # %for.inc411
                                        #   in Loop: Header=BB118_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_129
.LBB118_136:                            # %for.end413
	jmp	.LBB118_156
.LBB118_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB118_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB118_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_141 Depth 2
                                        #       Child Loop BB118_143 Depth 3
                                        #         Child Loop BB118_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB118_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB118_141:                            # %for.cond425
                                        #   Parent Loop BB118_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB118_143 Depth 3
                                        #         Child Loop BB118_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB118_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB118_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB118_143:                            # %for.cond452
                                        #   Parent Loop BB118_139 Depth=1
                                        #     Parent Loop BB118_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB118_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB118_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB118_143 Depth=3
	movl	$0, -4(%rbp)
.LBB118_145:                            # %for.cond456
                                        #   Parent Loop BB118_139 Depth=1
                                        #     Parent Loop BB118_141 Depth=2
                                        #       Parent Loop BB118_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB118_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB118_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB118_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_145
.LBB118_148:                            # %for.end475
                                        #   in Loop: Header=BB118_143 Depth=3
	jmp	.LBB118_149
.LBB118_149:                            # %for.inc476
                                        #   in Loop: Header=BB118_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_143
.LBB118_150:                            # %for.end478
                                        #   in Loop: Header=BB118_141 Depth=2
	jmp	.LBB118_151
.LBB118_151:                            # %for.inc479
                                        #   in Loop: Header=BB118_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB118_141
.LBB118_152:                            # %for.end481
                                        #   in Loop: Header=BB118_139 Depth=1
	jmp	.LBB118_153
.LBB118_153:                            # %for.inc482
                                        #   in Loop: Header=BB118_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_139
.LBB118_154:                            # %for.end484
	jmp	.LBB118_155
.LBB118_155:                            # %if.end485
	jmp	.LBB118_156
.LBB118_156:                            # %if.end486
	jmp	.LBB118_157
.LBB118_157:                            # %if.end487
	jmp	.LBB118_180
.LBB118_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB118_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB118_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB118_161 Depth=1
	movl	$0, -4(%rbp)
.LBB118_163:                            # %for.cond499
                                        #   Parent Loop BB118_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB118_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB118_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_163
.LBB118_166:                            # %for.end519
                                        #   in Loop: Header=BB118_161 Depth=1
	jmp	.LBB118_167
.LBB118_167:                            # %for.inc520
                                        #   in Loop: Header=BB118_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_161
.LBB118_168:                            # %for.end522
	jmp	.LBB118_169
.LBB118_169:                            # %if.end523
	jmp	.LBB118_179
.LBB118_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB118_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB118_171 Depth=1
	movl	$0, -4(%rbp)
.LBB118_173:                            # %for.cond529
                                        #   Parent Loop BB118_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB118_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB118_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_173
.LBB118_176:                            # %for.end541
                                        #   in Loop: Header=BB118_171 Depth=1
	jmp	.LBB118_177
.LBB118_177:                            # %for.inc542
                                        #   in Loop: Header=BB118_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_171
.LBB118_178:                            # %for.end544
	jmp	.LBB118_179
.LBB118_179:                            # %if.end545
	jmp	.LBB118_180
.LBB118_180:                            # %sw.epilog
	cmpl	$275816597, -68(%rbp)   # imm = 0x1070A095
	jne	.LBB118_182
.LBB118_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_181
.Lfunc_end118:
	.size	Conceal_Error.108, .Lfunc_end118-Conceal_Error.108
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI118_0:
	.quad	.LBB118_16
	.quad	.LBB118_158
	.quad	.LBB118_106
	.quad	.LBB118_180
	.quad	.LBB118_36
                                        # -- End function
	.text
	.globl	Error_Concealment.109   # -- Begin function Error_Concealment.109
	.p2align	4, 0x90
	.type	Error_Concealment.109,@function
Error_Concealment.109:                  # @Error_Concealment.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$97714748, -16(%rbp)    # imm = 0x5D3023C
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB119_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	$0, -8(%rbp)
.LBB119_3:                              # %for.cond2
                                        #   Parent Loop BB119_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB119_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB119_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB119_6:                              # %if.end
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_7
.LBB119_7:                              # %for.inc
                                        #   in Loop: Header=BB119_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_3
.LBB119_8:                              # %for.end
                                        #   in Loop: Header=BB119_1 Depth=1
	jmp	.LBB119_9
.LBB119_9:                              # %for.inc7
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_1
.LBB119_10:                             # %for.end9
	cmpl	$97714748, -16(%rbp)    # imm = 0x5D3023C
	jne	.LBB119_12
.LBB119_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_11
.Lfunc_end119:
	.size	Error_Concealment.109, .Lfunc_end119-Error_Concealment.109
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.110 # -- Begin function compute_residue_b8block.110
	.p2align	4, 0x90
	.type	compute_residue_b8block.110,@function
compute_residue_b8block.110:            # @compute_residue_b8block.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1542783066, -36(%rbp)  # imm = 0x5BF5005A
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB120_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB120_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB120_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB120_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB120_4:                              # %for.cond4
                                        #   Parent Loop BB120_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB120_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB120_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB120_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_4
.LBB120_7:                              # %for.end
                                        #   in Loop: Header=BB120_2 Depth=1
	jmp	.LBB120_8
.LBB120_8:                              # %for.inc22
                                        #   in Loop: Header=BB120_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_2
.LBB120_9:                              # %for.end24
	jmp	.LBB120_19
.LBB120_10:                             # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB120_11:                             # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB120_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB120_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB120_13:                             # %for.cond29
                                        #   Parent Loop BB120_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB120_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB120_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB120_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_13
.LBB120_16:                             # %for.end56
                                        #   in Loop: Header=BB120_11 Depth=1
	jmp	.LBB120_17
.LBB120_17:                             # %for.inc57
                                        #   in Loop: Header=BB120_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_11
.LBB120_18:                             # %for.end59
	jmp	.LBB120_19
.LBB120_19:                             # %if.end
	cmpl	$1542783066, -36(%rbp)  # imm = 0x5BF5005A
	jne	.LBB120_21
.LBB120_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_20
.Lfunc_end120:
	.size	compute_residue_b8block.110, .Lfunc_end120-compute_residue_b8block.110
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.111  # -- Begin function decode_one_b8block.111
	.p2align	4, 0x90
	.type	decode_one_b8block.111,@function
decode_one_b8block.111:                 # @decode_one_b8block.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$61040330, -84(%rbp)    # imm = 0x3A366CA
	movl	%edi, -44(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB121_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_4:                              # %for.cond9
                                        #   Parent Loop BB121_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB121_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB121_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB121_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_4
.LBB121_7:                              # %for.end
                                        #   in Loop: Header=BB121_2 Depth=1
	jmp	.LBB121_8
.LBB121_8:                              # %for.inc26
                                        #   in Loop: Header=BB121_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_2
.LBB121_9:                              # %for.end28
	jmp	.LBB121_96
.LBB121_10:                             # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB121_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB121_31
.LBB121_14:                             # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_15:                             # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB121_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_17:                             # %for.cond40
                                        #   Parent Loop BB121_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB121_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB121_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB121_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_17
.LBB121_20:                             # %for.end49
                                        #   in Loop: Header=BB121_15 Depth=1
	jmp	.LBB121_21
.LBB121_21:                             # %for.inc50
                                        #   in Loop: Header=BB121_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_15
.LBB121_22:                             # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_23:                             # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB121_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_25:                             # %for.cond56
                                        #   Parent Loop BB121_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB121_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB121_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_25
.LBB121_28:                             # %for.end71
                                        #   in Loop: Header=BB121_23 Depth=1
	jmp	.LBB121_29
.LBB121_29:                             # %for.inc72
                                        #   in Loop: Header=BB121_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_23
.LBB121_30:                             # %for.end74
	jmp	.LBB121_60
.LBB121_31:                             # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB121_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB121_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_34:                             # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB121_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_36:                             # %for.cond83
                                        #   Parent Loop BB121_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB121_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB121_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_36
.LBB121_39:                             # %for.end120
                                        #   in Loop: Header=BB121_34 Depth=1
	jmp	.LBB121_40
.LBB121_40:                             # %for.inc121
                                        #   in Loop: Header=BB121_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_34
.LBB121_41:                             # %for.end123
	jmp	.LBB121_51
.LBB121_42:                             # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_43:                             # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_45:                             # %for.cond129
                                        #   Parent Loop BB121_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB121_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB121_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_45
.LBB121_48:                             # %for.end145
                                        #   in Loop: Header=BB121_43 Depth=1
	jmp	.LBB121_49
.LBB121_49:                             # %for.inc146
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_43
.LBB121_50:                             # %for.end148
	jmp	.LBB121_51
.LBB121_51:                             # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_52:                             # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_54:                             # %for.cond153
                                        #   Parent Loop BB121_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB121_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB121_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB121_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_54
.LBB121_57:                             # %for.end167
                                        #   in Loop: Header=BB121_52 Depth=1
	jmp	.LBB121_58
.LBB121_58:                             # %for.inc168
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_52
.LBB121_59:                             # %for.end170
	jmp	.LBB121_60
.LBB121_60:                             # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB121_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB121_66
.LBB121_62:                             # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB121_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB121_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB121_86
.LBB121_66:                             # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB121_67:                             # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_69 Depth 2
                                        #       Child Loop BB121_74 Depth 3
                                        #         Child Loop BB121_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB121_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB121_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB121_69:                             # %for.cond197
                                        #   Parent Loop BB121_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_74 Depth 3
                                        #         Child Loop BB121_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB121_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB121_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB121_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB121_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB121_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB121_73:                             # %if.end218
                                        #   in Loop: Header=BB121_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB121_74:                             # %for.cond233
                                        #   Parent Loop BB121_67 Depth=1
                                        #     Parent Loop BB121_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB121_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB121_74 Depth=3
	movl	$0, -4(%rbp)
.LBB121_76:                             # %for.cond237
                                        #   Parent Loop BB121_67 Depth=1
                                        #     Parent Loop BB121_69 Depth=2
                                        #       Parent Loop BB121_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB121_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB121_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB121_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_76
.LBB121_79:                             # %for.end269
                                        #   in Loop: Header=BB121_74 Depth=3
	jmp	.LBB121_80
.LBB121_80:                             # %for.inc270
                                        #   in Loop: Header=BB121_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_74
.LBB121_81:                             # %for.end272
                                        #   in Loop: Header=BB121_69 Depth=2
	jmp	.LBB121_82
.LBB121_82:                             # %for.inc273
                                        #   in Loop: Header=BB121_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_69
.LBB121_83:                             # %for.end275
                                        #   in Loop: Header=BB121_67 Depth=1
	jmp	.LBB121_84
.LBB121_84:                             # %for.inc276
                                        #   in Loop: Header=BB121_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_67
.LBB121_85:                             # %for.end278
	jmp	.LBB121_95
.LBB121_86:                             # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB121_87:                             # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB121_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB121_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB121_89:                             # %for.cond284
                                        #   Parent Loop BB121_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB121_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB121_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB121_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_89
.LBB121_92:                             # %for.end310
                                        #   in Loop: Header=BB121_87 Depth=1
	jmp	.LBB121_93
.LBB121_93:                             # %for.inc311
                                        #   in Loop: Header=BB121_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_87
.LBB121_94:                             # %for.end313
	jmp	.LBB121_95
.LBB121_95:                             # %if.end314
	jmp	.LBB121_96
.LBB121_96:                             # %if.end315
	cmpl	$61040330, -84(%rbp)    # imm = 0x3A366CA
	jne	.LBB121_98
.LBB121_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_97
.Lfunc_end121:
	.size	decode_one_b8block.111, .Lfunc_end121-decode_one_b8block.111
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.112   # -- Begin function Error_Concealment.112
	.p2align	4, 0x90
	.type	Error_Concealment.112,@function
Error_Concealment.112:                  # @Error_Concealment.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$231000300, -16(%rbp)   # imm = 0xDC4C8EC
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB122_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB122_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	$0, -8(%rbp)
.LBB122_3:                              # %for.cond2
                                        #   Parent Loop BB122_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB122_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB122_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB122_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB122_6:                              # %if.end
                                        #   in Loop: Header=BB122_3 Depth=2
	jmp	.LBB122_7
.LBB122_7:                              # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_3
.LBB122_8:                              # %for.end
                                        #   in Loop: Header=BB122_1 Depth=1
	jmp	.LBB122_9
.LBB122_9:                              # %for.inc7
                                        #   in Loop: Header=BB122_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_1
.LBB122_10:                             # %for.end9
	cmpl	$231000300, -16(%rbp)   # imm = 0xDC4C8EC
	jne	.LBB122_12
.LBB122_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_11
.Lfunc_end122:
	.size	Error_Concealment.112, .Lfunc_end122-Error_Concealment.112
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.113      # -- Begin function DecOneForthPix.113
	.p2align	4, 0x90
	.type	DecOneForthPix.113,@function
DecOneForthPix.113:                     # @DecOneForthPix.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$41132637, -12(%rbp)    # imm = 0x273A25D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB123_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_1
.LBB123_4:                              # %for.end
	cmpl	$41132637, -12(%rbp)    # imm = 0x273A25D
	jne	.LBB123_6
.LBB123_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_5
.Lfunc_end123:
	.size	DecOneForthPix.113, .Lfunc_end123-DecOneForthPix.113
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.114       # -- Begin function Conceal_Error.114
	.p2align	4, 0x90
	.type	Conceal_Error.114,@function
Conceal_Error.114:                      # @Conceal_Error.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$272460744, -68(%rbp)   # imm = 0x103D6BC8
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB124_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB124_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB124_4:                              # %land.end
.LBB124_5:                              # %lor.end
.LBB124_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB124_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB124_9
.LBB124_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB124_14
.LBB124_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB124_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB124_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB124_12:                             # %land.end51
.LBB124_13:                             # %lor.end53
.LBB124_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB124_180
# %bb.15:                               # %land.end54
	movq	.LJTI124_0(,%rax,8), %rax
	jmpq	*%rax
.LBB124_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB124_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB124_18 Depth=1
	movl	$0, -4(%rbp)
.LBB124_20:                             # %for.cond68
                                        #   Parent Loop BB124_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB124_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB124_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_20
.LBB124_23:                             # %for.end
                                        #   in Loop: Header=BB124_18 Depth=1
	jmp	.LBB124_24
.LBB124_24:                             # %for.inc85
                                        #   in Loop: Header=BB124_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_18
.LBB124_25:                             # %for.end87
	jmp	.LBB124_35
.LBB124_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB124_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB124_27 Depth=1
	movl	$0, -4(%rbp)
.LBB124_29:                             # %for.cond92
                                        #   Parent Loop BB124_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB124_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB124_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_29
.LBB124_32:                             # %for.end104
                                        #   in Loop: Header=BB124_27 Depth=1
	jmp	.LBB124_33
.LBB124_33:                             # %for.inc105
                                        #   in Loop: Header=BB124_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_27
.LBB124_34:                             # %for.end107
	jmp	.LBB124_35
.LBB124_35:                             # %if.end
	jmp	.LBB124_180
.LBB124_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB124_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_39 Depth 2
                                        #       Child Loop BB124_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB124_37 Depth=1
	movl	$0, -12(%rbp)
.LBB124_39:                             # %for.cond113
                                        #   Parent Loop BB124_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB124_39 Depth=2
	movl	$0, -4(%rbp)
.LBB124_41:                             # %for.cond117
                                        #   Parent Loop BB124_37 Depth=1
                                        #     Parent Loop BB124_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB124_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB124_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB124_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_41
.LBB124_44:                             # %for.end141
                                        #   in Loop: Header=BB124_39 Depth=2
	jmp	.LBB124_45
.LBB124_45:                             # %for.inc142
                                        #   in Loop: Header=BB124_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_39
.LBB124_46:                             # %for.end144
                                        #   in Loop: Header=BB124_37 Depth=1
	jmp	.LBB124_47
.LBB124_47:                             # %for.inc145
                                        #   in Loop: Header=BB124_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_37
.LBB124_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB124_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB124_49 Depth=1
	movl	$0, -8(%rbp)
.LBB124_51:                             # %for.cond152
                                        #   Parent Loop BB124_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB124_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB124_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_51
.LBB124_54:                             # %for.end162
                                        #   in Loop: Header=BB124_49 Depth=1
	jmp	.LBB124_55
.LBB124_55:                             # %for.inc163
                                        #   in Loop: Header=BB124_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_49
.LBB124_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB124_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB124_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB124_59 Depth=1
	movl	$0, -4(%rbp)
.LBB124_61:                             # %for.cond175
                                        #   Parent Loop BB124_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB124_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB124_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_61
.LBB124_64:                             # %for.end195
                                        #   in Loop: Header=BB124_59 Depth=1
	jmp	.LBB124_65
.LBB124_65:                             # %for.inc196
                                        #   in Loop: Header=BB124_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_59
.LBB124_66:                             # %for.end198
	jmp	.LBB124_95
.LBB124_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB124_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB124_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_71 Depth 2
                                        #       Child Loop BB124_73 Depth 3
                                        #         Child Loop BB124_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB124_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB124_71:                             # %for.cond210
                                        #   Parent Loop BB124_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_73 Depth 3
                                        #         Child Loop BB124_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB124_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB124_73:                             # %for.cond236
                                        #   Parent Loop BB124_69 Depth=1
                                        #     Parent Loop BB124_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB124_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB124_73 Depth=3
	movl	$0, -4(%rbp)
.LBB124_75:                             # %for.cond240
                                        #   Parent Loop BB124_69 Depth=1
                                        #     Parent Loop BB124_71 Depth=2
                                        #       Parent Loop BB124_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB124_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB124_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB124_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_75
.LBB124_78:                             # %for.end259
                                        #   in Loop: Header=BB124_73 Depth=3
	jmp	.LBB124_79
.LBB124_79:                             # %for.inc260
                                        #   in Loop: Header=BB124_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_73
.LBB124_80:                             # %for.end262
                                        #   in Loop: Header=BB124_71 Depth=2
	jmp	.LBB124_81
.LBB124_81:                             # %for.inc263
                                        #   in Loop: Header=BB124_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_71
.LBB124_82:                             # %for.end265
                                        #   in Loop: Header=BB124_69 Depth=1
	jmp	.LBB124_83
.LBB124_83:                             # %for.inc266
                                        #   in Loop: Header=BB124_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_69
.LBB124_84:                             # %for.end268
	jmp	.LBB124_94
.LBB124_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB124_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB124_86 Depth=1
	movl	$0, -4(%rbp)
.LBB124_88:                             # %for.cond274
                                        #   Parent Loop BB124_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB124_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB124_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_88
.LBB124_91:                             # %for.end294
                                        #   in Loop: Header=BB124_86 Depth=1
	jmp	.LBB124_92
.LBB124_92:                             # %for.inc295
                                        #   in Loop: Header=BB124_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_86
.LBB124_93:                             # %for.end297
	jmp	.LBB124_94
.LBB124_94:                             # %if.end298
	jmp	.LBB124_95
.LBB124_95:                             # %if.end299
	jmp	.LBB124_105
.LBB124_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB124_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB124_97 Depth=1
	movl	$0, -4(%rbp)
.LBB124_99:                             # %for.cond305
                                        #   Parent Loop BB124_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB124_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB124_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_99
.LBB124_102:                            # %for.end317
                                        #   in Loop: Header=BB124_97 Depth=1
	jmp	.LBB124_103
.LBB124_103:                            # %for.inc318
                                        #   in Loop: Header=BB124_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_97
.LBB124_104:                            # %for.end320
	jmp	.LBB124_105
.LBB124_105:                            # %if.end321
	jmp	.LBB124_180
.LBB124_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB124_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_110 Depth 2
                                        #       Child Loop BB124_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB124_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB124_108 Depth=1
	movl	$0, -12(%rbp)
.LBB124_110:                            # %for.cond331
                                        #   Parent Loop BB124_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB124_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB124_110 Depth=2
	movl	$0, -4(%rbp)
.LBB124_112:                            # %for.cond335
                                        #   Parent Loop BB124_108 Depth=1
                                        #     Parent Loop BB124_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB124_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB124_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB124_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_112
.LBB124_115:                            # %for.end359
                                        #   in Loop: Header=BB124_110 Depth=2
	jmp	.LBB124_116
.LBB124_116:                            # %for.inc360
                                        #   in Loop: Header=BB124_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_110
.LBB124_117:                            # %for.end362
                                        #   in Loop: Header=BB124_108 Depth=1
	jmp	.LBB124_118
.LBB124_118:                            # %for.inc363
                                        #   in Loop: Header=BB124_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_108
.LBB124_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB124_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB124_120 Depth=1
	movl	$0, -8(%rbp)
.LBB124_122:                            # %for.cond370
                                        #   Parent Loop BB124_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB124_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB124_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_122
.LBB124_125:                            # %for.end380
                                        #   in Loop: Header=BB124_120 Depth=1
	jmp	.LBB124_126
.LBB124_126:                            # %for.inc381
                                        #   in Loop: Header=BB124_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_120
.LBB124_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB124_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB124_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB124_129 Depth=1
	movl	$0, -4(%rbp)
.LBB124_131:                            # %for.cond390
                                        #   Parent Loop BB124_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB124_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB124_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_131
.LBB124_134:                            # %for.end410
                                        #   in Loop: Header=BB124_129 Depth=1
	jmp	.LBB124_135
.LBB124_135:                            # %for.inc411
                                        #   in Loop: Header=BB124_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_129
.LBB124_136:                            # %for.end413
	jmp	.LBB124_156
.LBB124_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB124_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB124_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_141 Depth 2
                                        #       Child Loop BB124_143 Depth 3
                                        #         Child Loop BB124_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB124_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB124_141:                            # %for.cond425
                                        #   Parent Loop BB124_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_143 Depth 3
                                        #         Child Loop BB124_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB124_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB124_143:                            # %for.cond452
                                        #   Parent Loop BB124_139 Depth=1
                                        #     Parent Loop BB124_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB124_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB124_143 Depth=3
	movl	$0, -4(%rbp)
.LBB124_145:                            # %for.cond456
                                        #   Parent Loop BB124_139 Depth=1
                                        #     Parent Loop BB124_141 Depth=2
                                        #       Parent Loop BB124_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB124_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB124_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB124_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_145
.LBB124_148:                            # %for.end475
                                        #   in Loop: Header=BB124_143 Depth=3
	jmp	.LBB124_149
.LBB124_149:                            # %for.inc476
                                        #   in Loop: Header=BB124_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_143
.LBB124_150:                            # %for.end478
                                        #   in Loop: Header=BB124_141 Depth=2
	jmp	.LBB124_151
.LBB124_151:                            # %for.inc479
                                        #   in Loop: Header=BB124_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_141
.LBB124_152:                            # %for.end481
                                        #   in Loop: Header=BB124_139 Depth=1
	jmp	.LBB124_153
.LBB124_153:                            # %for.inc482
                                        #   in Loop: Header=BB124_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_139
.LBB124_154:                            # %for.end484
	jmp	.LBB124_155
.LBB124_155:                            # %if.end485
	jmp	.LBB124_156
.LBB124_156:                            # %if.end486
	jmp	.LBB124_157
.LBB124_157:                            # %if.end487
	jmp	.LBB124_180
.LBB124_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB124_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB124_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB124_161 Depth=1
	movl	$0, -4(%rbp)
.LBB124_163:                            # %for.cond499
                                        #   Parent Loop BB124_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB124_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB124_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_163
.LBB124_166:                            # %for.end519
                                        #   in Loop: Header=BB124_161 Depth=1
	jmp	.LBB124_167
.LBB124_167:                            # %for.inc520
                                        #   in Loop: Header=BB124_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_161
.LBB124_168:                            # %for.end522
	jmp	.LBB124_169
.LBB124_169:                            # %if.end523
	jmp	.LBB124_179
.LBB124_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB124_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -4(%rbp)
.LBB124_173:                            # %for.cond529
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB124_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB124_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_173
.LBB124_176:                            # %for.end541
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_177
.LBB124_177:                            # %for.inc542
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_171
.LBB124_178:                            # %for.end544
	jmp	.LBB124_179
.LBB124_179:                            # %if.end545
	jmp	.LBB124_180
.LBB124_180:                            # %sw.epilog
	cmpl	$272460744, -68(%rbp)   # imm = 0x103D6BC8
	jne	.LBB124_182
.LBB124_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_181
.Lfunc_end124:
	.size	Conceal_Error.114, .Lfunc_end124-Conceal_Error.114
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI124_0:
	.quad	.LBB124_16
	.quad	.LBB124_158
	.quad	.LBB124_106
	.quad	.LBB124_180
	.quad	.LBB124_36
                                        # -- End function
	.text
	.globl	Conceal_Error.115       # -- Begin function Conceal_Error.115
	.p2align	4, 0x90
	.type	Conceal_Error.115,@function
Conceal_Error.115:                      # @Conceal_Error.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1569170262, -68(%rbp)  # imm = 0x5D87A356
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB125_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB125_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB125_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB125_4:                              # %land.end
.LBB125_5:                              # %lor.end
.LBB125_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB125_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB125_9
.LBB125_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB125_14
.LBB125_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB125_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB125_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB125_12:                             # %land.end51
.LBB125_13:                             # %lor.end53
.LBB125_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB125_180
# %bb.15:                               # %land.end54
	movq	.LJTI125_0(,%rax,8), %rax
	jmpq	*%rax
.LBB125_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB125_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB125_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB125_18 Depth=1
	movl	$0, -4(%rbp)
.LBB125_20:                             # %for.cond68
                                        #   Parent Loop BB125_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB125_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB125_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_20
.LBB125_23:                             # %for.end
                                        #   in Loop: Header=BB125_18 Depth=1
	jmp	.LBB125_24
.LBB125_24:                             # %for.inc85
                                        #   in Loop: Header=BB125_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_18
.LBB125_25:                             # %for.end87
	jmp	.LBB125_35
.LBB125_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB125_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB125_27 Depth=1
	movl	$0, -4(%rbp)
.LBB125_29:                             # %for.cond92
                                        #   Parent Loop BB125_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB125_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB125_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_29
.LBB125_32:                             # %for.end104
                                        #   in Loop: Header=BB125_27 Depth=1
	jmp	.LBB125_33
.LBB125_33:                             # %for.inc105
                                        #   in Loop: Header=BB125_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_27
.LBB125_34:                             # %for.end107
	jmp	.LBB125_35
.LBB125_35:                             # %if.end
	jmp	.LBB125_180
.LBB125_36:                             # %sw.bb108
	movl	$0, -16(%rbp)
.LBB125_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_39 Depth 2
                                        #       Child Loop BB125_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB125_37 Depth=1
	movl	$0, -12(%rbp)
.LBB125_39:                             # %for.cond113
                                        #   Parent Loop BB125_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB125_39 Depth=2
	movl	$0, -4(%rbp)
.LBB125_41:                             # %for.cond117
                                        #   Parent Loop BB125_37 Depth=1
                                        #     Parent Loop BB125_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB125_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB125_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB125_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_41
.LBB125_44:                             # %for.end141
                                        #   in Loop: Header=BB125_39 Depth=2
	jmp	.LBB125_45
.LBB125_45:                             # %for.inc142
                                        #   in Loop: Header=BB125_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_39
.LBB125_46:                             # %for.end144
                                        #   in Loop: Header=BB125_37 Depth=1
	jmp	.LBB125_47
.LBB125_47:                             # %for.inc145
                                        #   in Loop: Header=BB125_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_37
.LBB125_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB125_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB125_49 Depth=1
	movl	$0, -8(%rbp)
.LBB125_51:                             # %for.cond152
                                        #   Parent Loop BB125_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB125_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB125_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_51
.LBB125_54:                             # %for.end162
                                        #   in Loop: Header=BB125_49 Depth=1
	jmp	.LBB125_55
.LBB125_55:                             # %for.inc163
                                        #   in Loop: Header=BB125_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_49
.LBB125_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB125_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB125_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB125_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB125_59 Depth=1
	movl	$0, -4(%rbp)
.LBB125_61:                             # %for.cond175
                                        #   Parent Loop BB125_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB125_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB125_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_61
.LBB125_64:                             # %for.end195
                                        #   in Loop: Header=BB125_59 Depth=1
	jmp	.LBB125_65
.LBB125_65:                             # %for.inc196
                                        #   in Loop: Header=BB125_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_59
.LBB125_66:                             # %for.end198
	jmp	.LBB125_95
.LBB125_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB125_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB125_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_71 Depth 2
                                        #       Child Loop BB125_73 Depth 3
                                        #         Child Loop BB125_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB125_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB125_71:                             # %for.cond210
                                        #   Parent Loop BB125_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_73 Depth 3
                                        #         Child Loop BB125_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB125_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB125_73:                             # %for.cond236
                                        #   Parent Loop BB125_69 Depth=1
                                        #     Parent Loop BB125_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB125_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB125_73 Depth=3
	movl	$0, -4(%rbp)
.LBB125_75:                             # %for.cond240
                                        #   Parent Loop BB125_69 Depth=1
                                        #     Parent Loop BB125_71 Depth=2
                                        #       Parent Loop BB125_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB125_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB125_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB125_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_75
.LBB125_78:                             # %for.end259
                                        #   in Loop: Header=BB125_73 Depth=3
	jmp	.LBB125_79
.LBB125_79:                             # %for.inc260
                                        #   in Loop: Header=BB125_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_73
.LBB125_80:                             # %for.end262
                                        #   in Loop: Header=BB125_71 Depth=2
	jmp	.LBB125_81
.LBB125_81:                             # %for.inc263
                                        #   in Loop: Header=BB125_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_71
.LBB125_82:                             # %for.end265
                                        #   in Loop: Header=BB125_69 Depth=1
	jmp	.LBB125_83
.LBB125_83:                             # %for.inc266
                                        #   in Loop: Header=BB125_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_69
.LBB125_84:                             # %for.end268
	jmp	.LBB125_94
.LBB125_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB125_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB125_86 Depth=1
	movl	$0, -4(%rbp)
.LBB125_88:                             # %for.cond274
                                        #   Parent Loop BB125_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB125_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB125_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_88
.LBB125_91:                             # %for.end294
                                        #   in Loop: Header=BB125_86 Depth=1
	jmp	.LBB125_92
.LBB125_92:                             # %for.inc295
                                        #   in Loop: Header=BB125_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_86
.LBB125_93:                             # %for.end297
	jmp	.LBB125_94
.LBB125_94:                             # %if.end298
	jmp	.LBB125_95
.LBB125_95:                             # %if.end299
	jmp	.LBB125_105
.LBB125_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB125_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB125_97 Depth=1
	movl	$0, -4(%rbp)
.LBB125_99:                             # %for.cond305
                                        #   Parent Loop BB125_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB125_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB125_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_99
.LBB125_102:                            # %for.end317
                                        #   in Loop: Header=BB125_97 Depth=1
	jmp	.LBB125_103
.LBB125_103:                            # %for.inc318
                                        #   in Loop: Header=BB125_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_97
.LBB125_104:                            # %for.end320
	jmp	.LBB125_105
.LBB125_105:                            # %if.end321
	jmp	.LBB125_180
.LBB125_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB125_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB125_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_110 Depth 2
                                        #       Child Loop BB125_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB125_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB125_108 Depth=1
	movl	$0, -12(%rbp)
.LBB125_110:                            # %for.cond331
                                        #   Parent Loop BB125_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB125_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB125_110 Depth=2
	movl	$0, -4(%rbp)
.LBB125_112:                            # %for.cond335
                                        #   Parent Loop BB125_108 Depth=1
                                        #     Parent Loop BB125_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB125_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB125_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB125_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_112
.LBB125_115:                            # %for.end359
                                        #   in Loop: Header=BB125_110 Depth=2
	jmp	.LBB125_116
.LBB125_116:                            # %for.inc360
                                        #   in Loop: Header=BB125_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_110
.LBB125_117:                            # %for.end362
                                        #   in Loop: Header=BB125_108 Depth=1
	jmp	.LBB125_118
.LBB125_118:                            # %for.inc363
                                        #   in Loop: Header=BB125_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_108
.LBB125_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB125_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB125_120 Depth=1
	movl	$0, -8(%rbp)
.LBB125_122:                            # %for.cond370
                                        #   Parent Loop BB125_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB125_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB125_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_122
.LBB125_125:                            # %for.end380
                                        #   in Loop: Header=BB125_120 Depth=1
	jmp	.LBB125_126
.LBB125_126:                            # %for.inc381
                                        #   in Loop: Header=BB125_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_120
.LBB125_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB125_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB125_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB125_129 Depth=1
	movl	$0, -4(%rbp)
.LBB125_131:                            # %for.cond390
                                        #   Parent Loop BB125_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB125_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB125_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_131
.LBB125_134:                            # %for.end410
                                        #   in Loop: Header=BB125_129 Depth=1
	jmp	.LBB125_135
.LBB125_135:                            # %for.inc411
                                        #   in Loop: Header=BB125_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_129
.LBB125_136:                            # %for.end413
	jmp	.LBB125_156
.LBB125_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB125_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB125_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_141 Depth 2
                                        #       Child Loop BB125_143 Depth 3
                                        #         Child Loop BB125_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB125_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB125_141:                            # %for.cond425
                                        #   Parent Loop BB125_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_143 Depth 3
                                        #         Child Loop BB125_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB125_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB125_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB125_143:                            # %for.cond452
                                        #   Parent Loop BB125_139 Depth=1
                                        #     Parent Loop BB125_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB125_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB125_143 Depth=3
	movl	$0, -4(%rbp)
.LBB125_145:                            # %for.cond456
                                        #   Parent Loop BB125_139 Depth=1
                                        #     Parent Loop BB125_141 Depth=2
                                        #       Parent Loop BB125_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB125_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB125_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB125_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_145
.LBB125_148:                            # %for.end475
                                        #   in Loop: Header=BB125_143 Depth=3
	jmp	.LBB125_149
.LBB125_149:                            # %for.inc476
                                        #   in Loop: Header=BB125_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_143
.LBB125_150:                            # %for.end478
                                        #   in Loop: Header=BB125_141 Depth=2
	jmp	.LBB125_151
.LBB125_151:                            # %for.inc479
                                        #   in Loop: Header=BB125_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB125_141
.LBB125_152:                            # %for.end481
                                        #   in Loop: Header=BB125_139 Depth=1
	jmp	.LBB125_153
.LBB125_153:                            # %for.inc482
                                        #   in Loop: Header=BB125_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB125_139
.LBB125_154:                            # %for.end484
	jmp	.LBB125_155
.LBB125_155:                            # %if.end485
	jmp	.LBB125_156
.LBB125_156:                            # %if.end486
	jmp	.LBB125_157
.LBB125_157:                            # %if.end487
	jmp	.LBB125_180
.LBB125_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB125_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB125_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB125_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB125_161 Depth=1
	movl	$0, -4(%rbp)
.LBB125_163:                            # %for.cond499
                                        #   Parent Loop BB125_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB125_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB125_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_163
.LBB125_166:                            # %for.end519
                                        #   in Loop: Header=BB125_161 Depth=1
	jmp	.LBB125_167
.LBB125_167:                            # %for.inc520
                                        #   in Loop: Header=BB125_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_161
.LBB125_168:                            # %for.end522
	jmp	.LBB125_169
.LBB125_169:                            # %if.end523
	jmp	.LBB125_179
.LBB125_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB125_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB125_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	$0, -4(%rbp)
.LBB125_173:                            # %for.cond529
                                        #   Parent Loop BB125_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB125_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB125_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB125_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_173
.LBB125_176:                            # %for.end541
                                        #   in Loop: Header=BB125_171 Depth=1
	jmp	.LBB125_177
.LBB125_177:                            # %for.inc542
                                        #   in Loop: Header=BB125_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_171
.LBB125_178:                            # %for.end544
	jmp	.LBB125_179
.LBB125_179:                            # %if.end545
	jmp	.LBB125_180
.LBB125_180:                            # %sw.epilog
	cmpl	$1569170262, -68(%rbp)  # imm = 0x5D87A356
	jne	.LBB125_182
.LBB125_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_181
.Lfunc_end125:
	.size	Conceal_Error.115, .Lfunc_end125-Conceal_Error.115
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI125_0:
	.quad	.LBB125_16
	.quad	.LBB125_158
	.quad	.LBB125_106
	.quad	.LBB125_180
	.quad	.LBB125_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.116      # -- Begin function DecOneForthPix.116
	.p2align	4, 0x90
	.type	DecOneForthPix.116,@function
DecOneForthPix.116:                     # @DecOneForthPix.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1896208402, -8(%rbp)   # imm = 0x7105D812
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB126_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB126_1
.LBB126_4:                              # %for.end
	cmpl	$1896208402, -8(%rbp)   # imm = 0x7105D812
	jne	.LBB126_6
.LBB126_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_5
.Lfunc_end126:
	.size	DecOneForthPix.116, .Lfunc_end126-DecOneForthPix.116
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.117      # -- Begin function DecOneForthPix.117
	.p2align	4, 0x90
	.type	DecOneForthPix.117,@function
DecOneForthPix.117:                     # @DecOneForthPix.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1264734117, -12(%rbp)  # imm = 0x4B624FA5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB127_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB127_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB127_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB127_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_1
.LBB127_4:                              # %for.end
	cmpl	$1264734117, -12(%rbp)  # imm = 0x4B624FA5
	jne	.LBB127_6
.LBB127_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_5
.Lfunc_end127:
	.size	DecOneForthPix.117, .Lfunc_end127-DecOneForthPix.117
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.118       # -- Begin function Conceal_Error.118
	.p2align	4, 0x90
	.type	Conceal_Error.118,@function
Conceal_Error.118:                      # @Conceal_Error.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$703513753, -68(%rbp)   # imm = 0x29EEC499
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB128_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB128_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB128_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB128_4:                              # %land.end
.LBB128_5:                              # %lor.end
.LBB128_6:                              # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB128_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB128_9
.LBB128_8:                              # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB128_14
.LBB128_9:                              # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB128_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB128_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB128_12:                             # %land.end51
.LBB128_13:                             # %lor.end53
.LBB128_14:                             # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB128_180
# %bb.15:                               # %land.end54
	movq	.LJTI128_0(,%rax,8), %rax
	jmpq	*%rax
.LBB128_16:                             # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB128_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB128_18:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB128_18 Depth=1
	movl	$0, -4(%rbp)
.LBB128_20:                             # %for.cond68
                                        #   Parent Loop BB128_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB128_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB128_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_20
.LBB128_23:                             # %for.end
                                        #   in Loop: Header=BB128_18 Depth=1
	jmp	.LBB128_24
.LBB128_24:                             # %for.inc85
                                        #   in Loop: Header=BB128_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_18
.LBB128_25:                             # %for.end87
	jmp	.LBB128_35
.LBB128_26:                             # %if.else
	movl	$0, -8(%rbp)
.LBB128_27:                             # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB128_27 Depth=1
	movl	$0, -4(%rbp)
.LBB128_29:                             # %for.cond92
                                        #   Parent Loop BB128_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB128_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB128_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_29
.LBB128_32:                             # %for.end104
                                        #   in Loop: Header=BB128_27 Depth=1
	jmp	.LBB128_33
.LBB128_33:                             # %for.inc105
                                        #   in Loop: Header=BB128_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_27
.LBB128_34:                             # %for.end107
	jmp	.LBB128_35
.LBB128_35:                             # %if.end
	jmp	.LBB128_180
.LBB128_36:                             # %sw.bb108
	movl	$0, -12(%rbp)
.LBB128_37:                             # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_39 Depth 2
                                        #       Child Loop BB128_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB128_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB128_37 Depth=1
	movl	$0, -16(%rbp)
.LBB128_39:                             # %for.cond113
                                        #   Parent Loop BB128_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB128_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB128_39 Depth=2
	movl	$0, -4(%rbp)
.LBB128_41:                             # %for.cond117
                                        #   Parent Loop BB128_37 Depth=1
                                        #     Parent Loop BB128_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB128_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB128_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB128_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_41
.LBB128_44:                             # %for.end141
                                        #   in Loop: Header=BB128_39 Depth=2
	jmp	.LBB128_45
.LBB128_45:                             # %for.inc142
                                        #   in Loop: Header=BB128_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_39
.LBB128_46:                             # %for.end144
                                        #   in Loop: Header=BB128_37 Depth=1
	jmp	.LBB128_47
.LBB128_47:                             # %for.inc145
                                        #   in Loop: Header=BB128_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_37
.LBB128_48:                             # %for.end147
	movl	$0, -4(%rbp)
.LBB128_49:                             # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB128_49 Depth=1
	movl	$0, -8(%rbp)
.LBB128_51:                             # %for.cond152
                                        #   Parent Loop BB128_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB128_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB128_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_51
.LBB128_54:                             # %for.end162
                                        #   in Loop: Header=BB128_49 Depth=1
	jmp	.LBB128_55
.LBB128_55:                             # %for.inc163
                                        #   in Loop: Header=BB128_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_49
.LBB128_56:                             # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB128_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB128_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB128_59:                             # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB128_59 Depth=1
	movl	$0, -4(%rbp)
.LBB128_61:                             # %for.cond175
                                        #   Parent Loop BB128_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB128_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB128_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_61
.LBB128_64:                             # %for.end195
                                        #   in Loop: Header=BB128_59 Depth=1
	jmp	.LBB128_65
.LBB128_65:                             # %for.inc196
                                        #   in Loop: Header=BB128_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_59
.LBB128_66:                             # %for.end198
	jmp	.LBB128_95
.LBB128_67:                             # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB128_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB128_69:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_71 Depth 2
                                        #       Child Loop BB128_73 Depth 3
                                        #         Child Loop BB128_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB128_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB128_71:                             # %for.cond210
                                        #   Parent Loop BB128_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_73 Depth 3
                                        #         Child Loop BB128_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB128_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB128_73:                             # %for.cond236
                                        #   Parent Loop BB128_69 Depth=1
                                        #     Parent Loop BB128_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB128_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB128_73 Depth=3
	movl	$0, -4(%rbp)
.LBB128_75:                             # %for.cond240
                                        #   Parent Loop BB128_69 Depth=1
                                        #     Parent Loop BB128_71 Depth=2
                                        #       Parent Loop BB128_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB128_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB128_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB128_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_75
.LBB128_78:                             # %for.end259
                                        #   in Loop: Header=BB128_73 Depth=3
	jmp	.LBB128_79
.LBB128_79:                             # %for.inc260
                                        #   in Loop: Header=BB128_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_73
.LBB128_80:                             # %for.end262
                                        #   in Loop: Header=BB128_71 Depth=2
	jmp	.LBB128_81
.LBB128_81:                             # %for.inc263
                                        #   in Loop: Header=BB128_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_71
.LBB128_82:                             # %for.end265
                                        #   in Loop: Header=BB128_69 Depth=1
	jmp	.LBB128_83
.LBB128_83:                             # %for.inc266
                                        #   in Loop: Header=BB128_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_69
.LBB128_84:                             # %for.end268
	jmp	.LBB128_94
.LBB128_85:                             # %if.else269
	movl	$0, -8(%rbp)
.LBB128_86:                             # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB128_86 Depth=1
	movl	$0, -4(%rbp)
.LBB128_88:                             # %for.cond274
                                        #   Parent Loop BB128_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB128_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB128_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_88
.LBB128_91:                             # %for.end294
                                        #   in Loop: Header=BB128_86 Depth=1
	jmp	.LBB128_92
.LBB128_92:                             # %for.inc295
                                        #   in Loop: Header=BB128_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_86
.LBB128_93:                             # %for.end297
	jmp	.LBB128_94
.LBB128_94:                             # %if.end298
	jmp	.LBB128_95
.LBB128_95:                             # %if.end299
	jmp	.LBB128_105
.LBB128_96:                             # %if.else300
	movl	$0, -8(%rbp)
.LBB128_97:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB128_97 Depth=1
	movl	$0, -4(%rbp)
.LBB128_99:                             # %for.cond305
                                        #   Parent Loop BB128_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB128_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB128_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_99
.LBB128_102:                            # %for.end317
                                        #   in Loop: Header=BB128_97 Depth=1
	jmp	.LBB128_103
.LBB128_103:                            # %for.inc318
                                        #   in Loop: Header=BB128_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_97
.LBB128_104:                            # %for.end320
	jmp	.LBB128_105
.LBB128_105:                            # %if.end321
	jmp	.LBB128_180
.LBB128_106:                            # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB128_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB128_108:                            # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_110 Depth 2
                                        #       Child Loop BB128_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB128_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB128_108 Depth=1
	movl	$0, -16(%rbp)
.LBB128_110:                            # %for.cond331
                                        #   Parent Loop BB128_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB128_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB128_110 Depth=2
	movl	$0, -4(%rbp)
.LBB128_112:                            # %for.cond335
                                        #   Parent Loop BB128_108 Depth=1
                                        #     Parent Loop BB128_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB128_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB128_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB128_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_112
.LBB128_115:                            # %for.end359
                                        #   in Loop: Header=BB128_110 Depth=2
	jmp	.LBB128_116
.LBB128_116:                            # %for.inc360
                                        #   in Loop: Header=BB128_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_110
.LBB128_117:                            # %for.end362
                                        #   in Loop: Header=BB128_108 Depth=1
	jmp	.LBB128_118
.LBB128_118:                            # %for.inc363
                                        #   in Loop: Header=BB128_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_108
.LBB128_119:                            # %for.end365
	movl	$0, -4(%rbp)
.LBB128_120:                            # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB128_120 Depth=1
	movl	$0, -8(%rbp)
.LBB128_122:                            # %for.cond370
                                        #   Parent Loop BB128_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB128_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB128_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_122
.LBB128_125:                            # %for.end380
                                        #   in Loop: Header=BB128_120 Depth=1
	jmp	.LBB128_126
.LBB128_126:                            # %for.inc381
                                        #   in Loop: Header=BB128_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_120
.LBB128_127:                            # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB128_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB128_129:                            # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB128_129 Depth=1
	movl	$0, -4(%rbp)
.LBB128_131:                            # %for.cond390
                                        #   Parent Loop BB128_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB128_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB128_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_131
.LBB128_134:                            # %for.end410
                                        #   in Loop: Header=BB128_129 Depth=1
	jmp	.LBB128_135
.LBB128_135:                            # %for.inc411
                                        #   in Loop: Header=BB128_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_129
.LBB128_136:                            # %for.end413
	jmp	.LBB128_156
.LBB128_137:                            # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB128_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB128_139:                            # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_141 Depth 2
                                        #       Child Loop BB128_143 Depth 3
                                        #         Child Loop BB128_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB128_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB128_141:                            # %for.cond425
                                        #   Parent Loop BB128_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_143 Depth 3
                                        #         Child Loop BB128_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB128_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB128_143:                            # %for.cond452
                                        #   Parent Loop BB128_139 Depth=1
                                        #     Parent Loop BB128_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB128_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB128_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB128_143 Depth=3
	movl	$0, -4(%rbp)
.LBB128_145:                            # %for.cond456
                                        #   Parent Loop BB128_139 Depth=1
                                        #     Parent Loop BB128_141 Depth=2
                                        #       Parent Loop BB128_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB128_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB128_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB128_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_145
.LBB128_148:                            # %for.end475
                                        #   in Loop: Header=BB128_143 Depth=3
	jmp	.LBB128_149
.LBB128_149:                            # %for.inc476
                                        #   in Loop: Header=BB128_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_143
.LBB128_150:                            # %for.end478
                                        #   in Loop: Header=BB128_141 Depth=2
	jmp	.LBB128_151
.LBB128_151:                            # %for.inc479
                                        #   in Loop: Header=BB128_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_141
.LBB128_152:                            # %for.end481
                                        #   in Loop: Header=BB128_139 Depth=1
	jmp	.LBB128_153
.LBB128_153:                            # %for.inc482
                                        #   in Loop: Header=BB128_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_139
.LBB128_154:                            # %for.end484
	jmp	.LBB128_155
.LBB128_155:                            # %if.end485
	jmp	.LBB128_156
.LBB128_156:                            # %if.end486
	jmp	.LBB128_157
.LBB128_157:                            # %if.end487
	jmp	.LBB128_180
.LBB128_158:                            # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB128_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB128_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB128_161:                            # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB128_161 Depth=1
	movl	$0, -4(%rbp)
.LBB128_163:                            # %for.cond499
                                        #   Parent Loop BB128_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB128_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB128_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_163
.LBB128_166:                            # %for.end519
                                        #   in Loop: Header=BB128_161 Depth=1
	jmp	.LBB128_167
.LBB128_167:                            # %for.inc520
                                        #   in Loop: Header=BB128_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_161
.LBB128_168:                            # %for.end522
	jmp	.LBB128_169
.LBB128_169:                            # %if.end523
	jmp	.LBB128_179
.LBB128_170:                            # %if.else524
	movl	$0, -8(%rbp)
.LBB128_171:                            # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB128_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB128_171 Depth=1
	movl	$0, -4(%rbp)
.LBB128_173:                            # %for.cond529
                                        #   Parent Loop BB128_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB128_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB128_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB128_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_173
.LBB128_176:                            # %for.end541
                                        #   in Loop: Header=BB128_171 Depth=1
	jmp	.LBB128_177
.LBB128_177:                            # %for.inc542
                                        #   in Loop: Header=BB128_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB128_171
.LBB128_178:                            # %for.end544
	jmp	.LBB128_179
.LBB128_179:                            # %if.end545
	jmp	.LBB128_180
.LBB128_180:                            # %sw.epilog
	cmpl	$703513753, -68(%rbp)   # imm = 0x29EEC499
	jne	.LBB128_182
.LBB128_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_182:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_181
.Lfunc_end128:
	.size	Conceal_Error.118, .Lfunc_end128-Conceal_Error.118
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI128_0:
	.quad	.LBB128_16
	.quad	.LBB128_158
	.quad	.LBB128_106
	.quad	.LBB128_180
	.quad	.LBB128_36
                                        # -- End function
	.text
	.globl	DecOneForthPix.119      # -- Begin function DecOneForthPix.119
	.p2align	4, 0x90
	.type	DecOneForthPix.119,@function
DecOneForthPix.119:                     # @DecOneForthPix.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$15980272, -12(%rbp)    # imm = 0xF3D6F0
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB129_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_1
.LBB129_4:                              # %for.end
	cmpl	$15980272, -12(%rbp)    # imm = 0xF3D6F0
	jne	.LBB129_6
.LBB129_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_5
.Lfunc_end129:
	.size	DecOneForthPix.119, .Lfunc_end129-DecOneForthPix.119
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.120      # -- Begin function DecOneForthPix.120
	.p2align	4, 0x90
	.type	DecOneForthPix.120,@function
DecOneForthPix.120:                     # @DecOneForthPix.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$94314317, -8(%rbp)     # imm = 0x59F1F4D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB130_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB130_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB130_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB130_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_1
.LBB130_4:                              # %for.end
	cmpl	$94314317, -8(%rbp)     # imm = 0x59F1F4D
	jne	.LBB130_6
.LBB130_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_5
.Lfunc_end130:
	.size	DecOneForthPix.120, .Lfunc_end130-DecOneForthPix.120
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.121   # -- Begin function Error_Concealment.121
	.p2align	4, 0x90
	.type	Error_Concealment.121,@function
Error_Concealment.121:                  # @Error_Concealment.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2090495546, -12(%rbp)  # imm = 0x7C9A6E3A
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB131_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB131_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	$0, -8(%rbp)
.LBB131_3:                              # %for.cond2
                                        #   Parent Loop BB131_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB131_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB131_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB131_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB131_6:                              # %if.end
                                        #   in Loop: Header=BB131_3 Depth=2
	jmp	.LBB131_7
.LBB131_7:                              # %for.inc
                                        #   in Loop: Header=BB131_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_3
.LBB131_8:                              # %for.end
                                        #   in Loop: Header=BB131_1 Depth=1
	jmp	.LBB131_9
.LBB131_9:                              # %for.inc7
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_1
.LBB131_10:                             # %for.end9
	cmpl	$2090495546, -12(%rbp)  # imm = 0x7C9A6E3A
	jne	.LBB131_12
.LBB131_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_11
.Lfunc_end131:
	.size	Error_Concealment.121, .Lfunc_end131-Error_Concealment.121
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.122      # -- Begin function DecOneForthPix.122
	.p2align	4, 0x90
	.type	DecOneForthPix.122,@function
DecOneForthPix.122:                     # @DecOneForthPix.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1178697285, -12(%rbp)  # imm = 0x46417E45
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB132_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_1
.LBB132_4:                              # %for.end
	cmpl	$1178697285, -12(%rbp)  # imm = 0x46417E45
	jne	.LBB132_6
.LBB132_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_5
.Lfunc_end132:
	.size	DecOneForthPix.122, .Lfunc_end132-DecOneForthPix.122
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.123      # -- Begin function DecOneForthPix.123
	.p2align	4, 0x90
	.type	DecOneForthPix.123,@function
DecOneForthPix.123:                     # @DecOneForthPix.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1852523773, -12(%rbp)  # imm = 0x6E6B44FD
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB133_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB133_1
.LBB133_4:                              # %for.end
	cmpl	$1852523773, -12(%rbp)  # imm = 0x6E6B44FD
	jne	.LBB133_6
.LBB133_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_5
.Lfunc_end133:
	.size	DecOneForthPix.123, .Lfunc_end133-DecOneForthPix.123
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.124   # -- Begin function Error_Concealment.124
	.p2align	4, 0x90
	.type	Error_Concealment.124,@function
Error_Concealment.124:                  # @Error_Concealment.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$278073039, -20(%rbp)   # imm = 0x10930ECF
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB134_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB134_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB134_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	$0, -4(%rbp)
.LBB134_3:                              # %for.cond2
                                        #   Parent Loop BB134_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB134_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB134_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB134_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB134_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB134_6:                              # %if.end
                                        #   in Loop: Header=BB134_3 Depth=2
	jmp	.LBB134_7
.LBB134_7:                              # %for.inc
                                        #   in Loop: Header=BB134_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB134_3
.LBB134_8:                              # %for.end
                                        #   in Loop: Header=BB134_1 Depth=1
	jmp	.LBB134_9
.LBB134_9:                              # %for.inc7
                                        #   in Loop: Header=BB134_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB134_1
.LBB134_10:                             # %for.end9
	cmpl	$278073039, -20(%rbp)   # imm = 0x10930ECF
	jne	.LBB134_12
.LBB134_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_11
.Lfunc_end134:
	.size	Error_Concealment.124, .Lfunc_end134-Error_Concealment.124
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.125      # -- Begin function DecOneForthPix.125
	.p2align	4, 0x90
	.type	DecOneForthPix.125,@function
DecOneForthPix.125:                     # @DecOneForthPix.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1649316909, -8(%rbp)   # imm = 0x624E942D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB135_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_1
.LBB135_4:                              # %for.end
	cmpl	$1649316909, -8(%rbp)   # imm = 0x624E942D
	jne	.LBB135_6
.LBB135_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_5
.Lfunc_end135:
	.size	DecOneForthPix.125, .Lfunc_end135-DecOneForthPix.125
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.126      # -- Begin function DecOneForthPix.126
	.p2align	4, 0x90
	.type	DecOneForthPix.126,@function
DecOneForthPix.126:                     # @DecOneForthPix.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1924086479, -12(%rbp)  # imm = 0x72AF3ACF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB136_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB136_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB136_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB136_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_1
.LBB136_4:                              # %for.end
	cmpl	$1924086479, -12(%rbp)  # imm = 0x72AF3ACF
	jne	.LBB136_6
.LBB136_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_5
.Lfunc_end136:
	.size	DecOneForthPix.126, .Lfunc_end136-DecOneForthPix.126
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.127      # -- Begin function DecOneForthPix.127
	.p2align	4, 0x90
	.type	DecOneForthPix.127,@function
DecOneForthPix.127:                     # @DecOneForthPix.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$543579579, -8(%rbp)    # imm = 0x20665DBB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB137_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_1
.LBB137_4:                              # %for.end
	cmpl	$543579579, -8(%rbp)    # imm = 0x20665DBB
	jne	.LBB137_6
.LBB137_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_5
.Lfunc_end137:
	.size	DecOneForthPix.127, .Lfunc_end137-DecOneForthPix.127
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.128   # -- Begin function Error_Concealment.128
	.p2align	4, 0x90
	.type	Error_Concealment.128,@function
Error_Concealment.128:                  # @Error_Concealment.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1166734305, -20(%rbp)  # imm = 0x458AF3E1
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB138_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	$0, -8(%rbp)
.LBB138_3:                              # %for.cond2
                                        #   Parent Loop BB138_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB138_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB138_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB138_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB138_6:                              # %if.end
                                        #   in Loop: Header=BB138_3 Depth=2
	jmp	.LBB138_7
.LBB138_7:                              # %for.inc
                                        #   in Loop: Header=BB138_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_3
.LBB138_8:                              # %for.end
                                        #   in Loop: Header=BB138_1 Depth=1
	jmp	.LBB138_9
.LBB138_9:                              # %for.inc7
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_1
.LBB138_10:                             # %for.end9
	cmpl	$1166734305, -20(%rbp)  # imm = 0x458AF3E1
	jne	.LBB138_12
.LBB138_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_11
.Lfunc_end138:
	.size	Error_Concealment.128, .Lfunc_end138-Error_Concealment.128
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.129   # -- Begin function Error_Concealment.129
	.p2align	4, 0x90
	.type	Error_Concealment.129,@function
Error_Concealment.129:                  # @Error_Concealment.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1085561585, -16(%rbp)  # imm = 0x40B45AF1
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB139_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB139_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	$0, -8(%rbp)
.LBB139_3:                              # %for.cond2
                                        #   Parent Loop BB139_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB139_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB139_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB139_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB139_6:                              # %if.end
                                        #   in Loop: Header=BB139_3 Depth=2
	jmp	.LBB139_7
.LBB139_7:                              # %for.inc
                                        #   in Loop: Header=BB139_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_3
.LBB139_8:                              # %for.end
                                        #   in Loop: Header=BB139_1 Depth=1
	jmp	.LBB139_9
.LBB139_9:                              # %for.inc7
                                        #   in Loop: Header=BB139_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_1
.LBB139_10:                             # %for.end9
	cmpl	$1085561585, -16(%rbp)  # imm = 0x40B45AF1
	jne	.LBB139_12
.LBB139_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_11
.Lfunc_end139:
	.size	Error_Concealment.129, .Lfunc_end139-Error_Concealment.129
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.130   # -- Begin function Error_Concealment.130
	.p2align	4, 0x90
	.type	Error_Concealment.130,@function
Error_Concealment.130:                  # @Error_Concealment.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1293376157, -20(%rbp)  # imm = 0x4D175A9D
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB140_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	$0, -4(%rbp)
.LBB140_3:                              # %for.cond2
                                        #   Parent Loop BB140_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB140_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB140_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB140_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB140_6:                              # %if.end
                                        #   in Loop: Header=BB140_3 Depth=2
	jmp	.LBB140_7
.LBB140_7:                              # %for.inc
                                        #   in Loop: Header=BB140_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_3
.LBB140_8:                              # %for.end
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_9
.LBB140_9:                              # %for.inc7
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_1
.LBB140_10:                             # %for.end9
	cmpl	$1293376157, -20(%rbp)  # imm = 0x4D175A9D
	jne	.LBB140_12
.LBB140_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_11
.Lfunc_end140:
	.size	Error_Concealment.130, .Lfunc_end140-Error_Concealment.130
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
